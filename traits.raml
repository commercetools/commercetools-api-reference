query:
    queryParameters:
      where:
        description: |
          If queries support ad-hoc filtering of resources through flexible predicates, they do so via the where query parameter that accepts a single (possibly compound) predicate to determine whether a specific resource representation should be included in the result.

          The structure of predicates and the names of the fields follow the structure and naming of the fields in the documented response representation of the query results.

          Examples of predicates:

              // Compare a field's value to a given value
              name = "Peter"
              age < 42
              age > 42
              age <= 42
              age >= 42
              age <> 42

              // Combine any two conditional expressions in a logical conjunction / disjunction
              name = "Peter" and age < 42
              name = "Peter" or age < 42

              // Negate any other conditional expression
              not (name = "Peter" and age < 42)

              // Check whether a field's value is or is not contained in
              // a specified set of values.
              age in (42, 43, 44)
              age not in (42, 43, 44)

              // Check whether an array contains all or any of a set of values
              tags contains all ("a", "b", "c")
              tags contains any ("a", "b", "c")

              // Check whether an array is empty
              tags is empty

              // Check whether a field exists & has a non-null value
              name is defined
              name is not defined

              // Descend into nested objects
              dog(age < 7 and name = "Beethoven")

              // Descend into nested arrays of objects
              cities(zip > 10000 and zip < 20000)

          A query endpoint usually restricts predicates to only be allowed on a specified subset of a resource representation's fields. The documentation of the endpoint will therefore list fields that can be used for constructing predicates.

          If multiple predicates are specified via multiple where query parameters, the individual predicates are combined in a logical conjunction, just as if they had been specified in a single where query parameter and combined with and.

          Note: The encoding of the predicates is UTF-8 and the predicate must be URL-encoded in the HTTP request.
        example: <<whereExample>>
sortable:
    queryParameters:
      sort:
       description: |
         A query endpoint that supports sorting does so through the sort query parameter. The provided value must be a valid sort expression.
         The default sort direction is ASC. The allowed sort paths are typically listed on the specific query endpoints.

         Here are some examples of sort expressions:

             name desc
             dog.age asc

         If multiple sort expressions are specified via multiple sort parameters, they are combined into a composed sort where the results are first sorted by the first expression, followed by equal values being sorted according to the second expression, and so on.

         Note: The sorting is case sensitive.
       example: <<sortExample>>
pagging:
    queryParameters:
      limit:
        type: number
        description: Number of results returned
      offset:
        type: number
        description: Number of results skipped
conflicting:
    responses:
      409:
        description: |
          ## Conflict

          A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
          was modified since the last time the client has requested it. As a reaction, the client will usually want to request
          the newest version of the resource to see what has changed and may then decide to apply the same or other changes
          to the new version, or discard his changes entirely.

          Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
          to include the version of the resource whenever he intends to apply modifications to it.

          The following general error codes can appear in responses with the HTTP status code `409`:

           * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
        body:
          application/json:
            example: !include examples/error.example.json
            schema: !include schemas/error.schema.json
versioned:
    queryParameters:
      version:
        type: number
        description: Last seen version of the resource
        required: true
