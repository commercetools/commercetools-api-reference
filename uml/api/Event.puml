@startuml

hide empty fields
hide empty methods
legend
|= |= line |
|<back:black>   </back>| inheritance |
|<back:green>   </back>| property reference |
|<back:blue>   </back>| discriminated class |
endlegend
interface Event [[Event.svg]]  {
    id: String
    notificationType: String
    resourceType: [[EventSubscriptionResourceTypeId.svg EventSubscriptionResourceTypeId]]
    type: [[EventType.svg EventType]]
    createdAt: DateTime
}


interface CheckoutOrderCreationFailedEvent [[CheckoutOrderCreationFailedEvent.svg]]  {
    id: String
    notificationType: String
    resourceType: [[EventSubscriptionResourceTypeId.svg EventSubscriptionResourceTypeId]]
    type: [[EventType.svg EventType]]
    createdAt: DateTime
    data: [[CheckoutMessageOrderPayloadBaseData.svg CheckoutMessageOrderPayloadBaseData]]
}
interface CheckoutPaymentAuthorizationCancelledEvent [[CheckoutPaymentAuthorizationCancelledEvent.svg]]  {
    id: String
    notificationType: String
    resourceType: [[EventSubscriptionResourceTypeId.svg EventSubscriptionResourceTypeId]]
    type: [[EventType.svg EventType]]
    createdAt: DateTime
    data: [[CheckoutMessagePaymentsPayloadBaseData.svg CheckoutMessagePaymentsPayloadBaseData]]
}
interface CheckoutPaymentAuthorizationFailedEvent [[CheckoutPaymentAuthorizationFailedEvent.svg]]  {
    id: String
    notificationType: String
    resourceType: [[EventSubscriptionResourceTypeId.svg EventSubscriptionResourceTypeId]]
    type: [[EventType.svg EventType]]
    createdAt: DateTime
    data: [[CheckoutMessagePaymentsPayloadBaseData.svg CheckoutMessagePaymentsPayloadBaseData]]
}
interface CheckoutPaymentAuthorizedEvent [[CheckoutPaymentAuthorizedEvent.svg]]  {
    id: String
    notificationType: String
    resourceType: [[EventSubscriptionResourceTypeId.svg EventSubscriptionResourceTypeId]]
    type: [[EventType.svg EventType]]
    createdAt: DateTime
    data: [[CheckoutMessagePaymentsPayloadBaseData.svg CheckoutMessagePaymentsPayloadBaseData]]
}
interface CheckoutPaymentCancelAuthorizationFailedEvent [[CheckoutPaymentCancelAuthorizationFailedEvent.svg]]  {
    id: String
    notificationType: String
    resourceType: [[EventSubscriptionResourceTypeId.svg EventSubscriptionResourceTypeId]]
    type: [[EventType.svg EventType]]
    createdAt: DateTime
    data: [[CheckoutMessagePaymentsPayloadBaseData.svg CheckoutMessagePaymentsPayloadBaseData]]
}
interface CheckoutPaymentChargeFailedEvent [[CheckoutPaymentChargeFailedEvent.svg]]  {
    id: String
    notificationType: String
    resourceType: [[EventSubscriptionResourceTypeId.svg EventSubscriptionResourceTypeId]]
    type: [[EventType.svg EventType]]
    createdAt: DateTime
    data: [[CheckoutMessagePaymentsPayloadBaseData.svg CheckoutMessagePaymentsPayloadBaseData]]
}
interface CheckoutPaymentChargedEvent [[CheckoutPaymentChargedEvent.svg]]  {
    id: String
    notificationType: String
    resourceType: [[EventSubscriptionResourceTypeId.svg EventSubscriptionResourceTypeId]]
    type: [[EventType.svg EventType]]
    createdAt: DateTime
    data: [[CheckoutMessagePaymentsPayloadBaseData.svg CheckoutMessagePaymentsPayloadBaseData]]
}
interface CheckoutPaymentRefundFailedEvent [[CheckoutPaymentRefundFailedEvent.svg]]  {
    id: String
    notificationType: String
    resourceType: [[EventSubscriptionResourceTypeId.svg EventSubscriptionResourceTypeId]]
    type: [[EventType.svg EventType]]
    createdAt: DateTime
    data: [[CheckoutMessagePaymentsPayloadBaseData.svg CheckoutMessagePaymentsPayloadBaseData]]
}
interface CheckoutPaymentRefundedEvent [[CheckoutPaymentRefundedEvent.svg]]  {
    id: String
    notificationType: String
    resourceType: [[EventSubscriptionResourceTypeId.svg EventSubscriptionResourceTypeId]]
    type: [[EventType.svg EventType]]
    createdAt: DateTime
    data: [[CheckoutMessagePaymentsPayloadBaseData.svg CheckoutMessagePaymentsPayloadBaseData]]
}
interface ImportContainerCreatedEvent [[ImportContainerCreatedEvent.svg]]  {
    id: String
    notificationType: String
    resourceType: [[EventSubscriptionResourceTypeId.svg EventSubscriptionResourceTypeId]]
    type: [[EventType.svg EventType]]
    createdAt: DateTime
    data: [[ImportContainerCreatedEventData.svg ImportContainerCreatedEventData]]
}
interface ImportContainerDeletedEvent [[ImportContainerDeletedEvent.svg]]  {
    id: String
    notificationType: String
    resourceType: [[EventSubscriptionResourceTypeId.svg EventSubscriptionResourceTypeId]]
    type: [[EventType.svg EventType]]
    createdAt: DateTime
    data: [[ImportContainerDeletedEventData.svg ImportContainerDeletedEventData]]
}
interface ImportOperationRejectedEvent [[ImportOperationRejectedEvent.svg]]  {
    id: String
    notificationType: String
    resourceType: [[EventSubscriptionResourceTypeId.svg EventSubscriptionResourceTypeId]]
    type: [[EventType.svg EventType]]
    createdAt: DateTime
    data: [[ImportOperationRejectedEventData.svg ImportOperationRejectedEventData]]
}
interface ImportUnresolvedEvent [[ImportUnresolvedEvent.svg]]  {
    id: String
    notificationType: String
    resourceType: [[EventSubscriptionResourceTypeId.svg EventSubscriptionResourceTypeId]]
    type: [[EventType.svg EventType]]
    createdAt: DateTime
    data: [[ImportUnresolvedEventData.svg ImportUnresolvedEventData]]
}
interface ImportValidationFailedEvent [[ImportValidationFailedEvent.svg]]  {
    id: String
    notificationType: String
    resourceType: [[EventSubscriptionResourceTypeId.svg EventSubscriptionResourceTypeId]]
    type: [[EventType.svg EventType]]
    createdAt: DateTime
    data: [[ImportValidationFailedEventData.svg ImportValidationFailedEventData]]
}
interface ImportWaitForMasterVariantEvent [[ImportWaitForMasterVariantEvent.svg]]  {
    id: String
    notificationType: String
    resourceType: [[EventSubscriptionResourceTypeId.svg EventSubscriptionResourceTypeId]]
    type: [[EventType.svg EventType]]
    createdAt: DateTime
    data: [[ImportWaitForMasterVariantEventData.svg ImportWaitForMasterVariantEventData]]
}

Event --> CheckoutOrderCreationFailedEvent #blue;text:blue : "type : CheckoutOrderCreationFailed"
Event --> CheckoutPaymentAuthorizationCancelledEvent #blue;text:blue : "type : CheckoutPaymentAuthorizationCancelled"
Event --> CheckoutPaymentAuthorizationFailedEvent #blue;text:blue : "type : CheckoutPaymentAuthorizationFailed"
Event --> CheckoutPaymentAuthorizedEvent #blue;text:blue : "type : CheckoutPaymentAuthorized"
Event --> CheckoutPaymentCancelAuthorizationFailedEvent #blue;text:blue : "type : CheckoutPaymentCancelAuthorizationFailed"
Event --> CheckoutPaymentChargeFailedEvent #blue;text:blue : "type : CheckoutPaymentChargeFailed"
Event --> CheckoutPaymentChargedEvent #blue;text:blue : "type : CheckoutPaymentCharged"
Event --> CheckoutPaymentRefundFailedEvent #blue;text:blue : "type : CheckoutPaymentRefundFailed"
Event --> CheckoutPaymentRefundedEvent #blue;text:blue : "type : CheckoutPaymentRefunded"
Event --> ImportContainerCreatedEvent #blue;text:blue : "type : ImportContainerCreated"
Event --> ImportContainerDeletedEvent #blue;text:blue : "type : ImportContainerDeleted"
Event --> ImportOperationRejectedEvent #blue;text:blue : "type : ImportOperationRejected"
Event --> ImportUnresolvedEvent #blue;text:blue : "type : ImportUnresolved"
Event --> ImportValidationFailedEvent #blue;text:blue : "type : ImportValidationFailed"
Event --> ImportWaitForMasterVariantEvent #blue;text:blue : "type : ImportWaitForMasterVariant"

@enduml
