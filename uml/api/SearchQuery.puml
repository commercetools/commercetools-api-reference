@startuml

hide empty fields
hide empty methods
legend
|= |= line |
|<back:black>   </back>| inheritance |
|<back:green>   </back>| property reference |
|<back:blue>   </back>| discriminated class |
endlegend
interface SearchQuery [[SearchQuery.svg]]  {
}

interface SearchAndExpression [[SearchAndExpression.svg]] extends SearchCompoundExpression {
    and: [[SearchQuery.svg List<SearchQuery>]]
}
interface SearchCompoundExpression [[SearchCompoundExpression.svg]] extends SearchQuery {
}
interface SearchDateRangeExpression [[SearchDateRangeExpression.svg]] extends SearchQueryExpression {
    range: [[SearchDateRangeValue.svg SearchDateRangeValue]]
}
interface SearchDateTimeRangeExpression [[SearchDateTimeRangeExpression.svg]] extends SearchQueryExpression {
    range: [[SearchDateTimeRangeValue.svg SearchDateTimeRangeValue]]
}
interface SearchExactExpression [[SearchExactExpression.svg]] extends SearchQueryExpression {
    exact: [[SearchAnyValue.svg SearchAnyValue]]
}
interface SearchExistsExpression [[SearchExistsExpression.svg]] extends SearchQueryExpression {
    exists: [[SearchExistsValue.svg SearchExistsValue]]
}
interface SearchFilterExpression [[SearchFilterExpression.svg]] extends SearchCompoundExpression {
    filter: [[SearchQueryExpression.svg List<SearchQueryExpression>]]
}
interface SearchFullTextExpression [[SearchFullTextExpression.svg]] extends SearchQueryExpression {
    fullText: [[SearchFullTextValue.svg SearchFullTextValue]]
}
interface SearchFullTextPrefixExpression [[SearchFullTextPrefixExpression.svg]] extends SearchQueryExpression {
    fullTextPrefix: [[SearchFullTextPrefixValue.svg SearchFullTextPrefixValue]]
}
interface SearchLongRangeExpression [[SearchLongRangeExpression.svg]] extends SearchQueryExpression {
    range: [[SearchLongRangeValue.svg SearchLongRangeValue]]
}
interface SearchNotExpression [[SearchNotExpression.svg]] extends SearchCompoundExpression {
    not: [[SearchQuery.svg List<SearchQuery>]]
}
interface SearchNumberRangeExpression [[SearchNumberRangeExpression.svg]] extends SearchQueryExpression {
    range: [[SearchNumberRangeValue.svg SearchNumberRangeValue]]
}
interface SearchOrExpression [[SearchOrExpression.svg]] extends SearchCompoundExpression {
    or: [[SearchQuery.svg List<SearchQuery>]]
}
interface SearchPrefixExpression [[SearchPrefixExpression.svg]] extends SearchQueryExpression {
    prefix: [[SearchAnyValue.svg SearchAnyValue]]
}
interface SearchQueryExpression [[SearchQueryExpression.svg]] extends SearchQuery {
}
interface SearchTimeRangeExpression [[SearchTimeRangeExpression.svg]] extends SearchQueryExpression {
    range: [[SearchTimeRangeValue.svg SearchTimeRangeValue]]
}
interface SearchWildCardExpression [[SearchWildCardExpression.svg]] extends SearchQueryExpression {
    wildcard: [[SearchAnyValue.svg SearchAnyValue]]
}

interface SearchAndExpression [[SearchAndExpression.svg]]  {
    and: [[SearchQuery.svg List<SearchQuery>]]
}
interface SearchNotExpression [[SearchNotExpression.svg]]  {
    not: [[SearchQuery.svg List<SearchQuery>]]
}
interface SearchOrExpression [[SearchOrExpression.svg]]  {
    or: [[SearchQuery.svg List<SearchQuery>]]
}
interface CustomerSearchRequest [[CustomerSearchRequest.svg]]  {
    query: [[SearchQuery.svg SearchQuery]]
    sort: [[SearchSorting.svg List<SearchSorting>]]
    limit: Integer
    offset: Integer
}
interface ProductSearchRequest [[ProductSearchRequest.svg]]  {
    query: [[SearchQuery.svg SearchQuery]]
    sort: [[SearchSorting.svg List<SearchSorting>]]
    limit: Integer
    offset: Integer
    markMatchingVariants: Boolean
    productProjectionParameters: [[ProductSearchProjectionParams.svg ProductSearchProjectionParams]]
    facets: [[ProductSearchFacetExpression.svg List<ProductSearchFacetExpression>]]
    postFilter: [[SearchQuery.svg SearchQuery]]
}
interface ProductSearchFacetCountValue [[ProductSearchFacetCountValue.svg]]  {
    name: String
    scope: [[ProductSearchFacetScopeEnum.svg ProductSearchFacetScopeEnum]]
    filter: [[SearchQuery.svg SearchQuery]]
    level: [[ProductSearchFacetCountLevelEnum.svg ProductSearchFacetCountLevelEnum]]
}
interface ProductSearchFacetDistinctValue [[ProductSearchFacetDistinctValue.svg]]  {
    name: String
    scope: [[ProductSearchFacetScopeEnum.svg ProductSearchFacetScopeEnum]]
    filter: [[SearchQuery.svg SearchQuery]]
    level: [[ProductSearchFacetCountLevelEnum.svg ProductSearchFacetCountLevelEnum]]
    field: String
    includes: [[String.svg List<String>]]
    sort: [[ProductSearchFacetDistinctBucketSortExpression.svg ProductSearchFacetDistinctBucketSortExpression]]
    limit: Integer
    language: String
    fieldType: [[SearchFieldType.svg SearchFieldType]]
    missing: String
}
interface ProductSearchFacetRangesValue [[ProductSearchFacetRangesValue.svg]]  {
    name: String
    scope: [[ProductSearchFacetScopeEnum.svg ProductSearchFacetScopeEnum]]
    filter: [[SearchQuery.svg SearchQuery]]
    level: [[ProductSearchFacetCountLevelEnum.svg ProductSearchFacetCountLevelEnum]]
    field: String
    ranges: [[ProductSearchFacetRangesFacetRange.svg List<ProductSearchFacetRangesFacetRange>]]
    language: String
    fieldType: [[SearchFieldType.svg SearchFieldType]]
}

SearchQuery --> SearchAndExpression #green;text:green : "and"
SearchQuery --> SearchAndExpression #green;text:green : "and"
SearchQuery --> SearchNotExpression #green;text:green : "not"
SearchQuery --> SearchNotExpression #green;text:green : "not"
SearchQuery --> SearchOrExpression #green;text:green : "or"
SearchQuery --> SearchOrExpression #green;text:green : "or"
SearchQuery --> CustomerSearchRequest #green;text:green : "query"
SearchQuery --> ProductSearchRequest #green;text:green : "query"
SearchQuery --> ProductSearchRequest #green;text:green : "postFilter"
SearchQuery --> ProductSearchFacetCountValue #green;text:green : "filter"
SearchQuery --> ProductSearchFacetDistinctValue #green;text:green : "filter"
SearchQuery --> ProductSearchFacetRangesValue #green;text:green : "filter"
@enduml
