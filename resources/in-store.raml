type: base
uriParameters:
  storeKey:
    type: string
/carts:
  type:
    baseDomain:
      resourceType: Cart
      # change to: resourceQueryType: CartPagedQueryResponse | Cart
      resourceQueryType: CartPagedQueryResponse | object
      resourceDraft: CartDraft
      whereExample: customerEmail = "john.doe@example.com"
      sortExample: createdAt asc
  description: A shopping cart holds product variants and can be ordered.
  get:
    securedBy:
      [
        oauth_2_0:
          {
            scopes:
              [
                'manage_project:{projectKey}',
                'view_orders:{projectKey}',
                'view_orders:{projectKey}:{storeKey}',
              ],
          },
      ]
    description:
      Queries carts in a specific Store. The {storeKey} path parameter maps to a
      Store's key.
    queryParameters:
      customerId?:
        type: string
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/carts.example.json
  post:
    securedBy:
      [
        oauth_2_0:
          {
            scopes:
              [
                'manage_project:{projectKey}',
                'manage_orders:{projectKey}',
                'manage_orders:{projectKey}:{storeKey}',
              ],
          },
      ]
    description: |
      Creates a cart in the store specified by {storeKey}. The {storeKey} path parameter maps to a Store's key.
      When using this endpoint the cart's store field is always set to the store specified in the path parameter.
      Creating a cart can fail with an InvalidOperation if the referenced shipping method
      in the CartDraft has a predicate which does not match the cart.
    body:
      application/json:
        example: !include ../examples/cart-create.example.json
    responses:
      201:
        body:
          application/json:
            example: !include ../examples/cart.example.json
  /customer-id={customerId}:
    (methodName): withCustomerId
    type:
      baseResource:
        uriParameterName: customerId
        resourceType: Cart
    get:
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                ['manage_project:{projectKey}', 'view_orders:{projectKey}'],
            },
        ]
      description: |
        Retrieves the active cart of the customer that has been modified most recently in a specific Store.
        The {storeKey} path parameter maps to a Store's key.

        If the cart exists in the commercetools project but does not have the store field, or the store field
        references a different store, this method returns a ResourceNotFound error.

        The cart may not contain up-to-date prices, discounts etc. If you want to ensure they're up-to-date,
        send an Update request with the Recalculate update action instead.
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/cart.example.json
  /{ID}:
    (methodName): withId
    type:
      baseResource:
        uriParameterName: ID
        resourceType: Cart
        resourceUpdateType: Update
    get:
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_project:{projectKey}',
                  'view_orders:{projectKey}',
                  'view_orders:{projectKey}:{storeKey}',
                ],
            },
        ]
      description: |
        Returns a cart by its ID from a specific Store. The {storeKey} path parameter maps to a Store's key.
        If the cart exists in the commercetools project but does not have the store field,
        or the store field references a different store, this method returns a ResourceNotFound error.
        The cart may not contain up-to-date prices, discounts etc.
        If you want to ensure they're up-to-date, send an Update request with the Recalculate update action instead.
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/cart.example.json
    post:
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_project:{projectKey}',
                  'manage_orders:{projectKey}',
                  'manage_orders:{projectKey}:{storeKey}',
                ],
            },
        ]
      description: |
        Updates a cart in the store specified by {storeKey}. The {storeKey} path parameter maps to a Store's key.
        If the cart exists in the commercetools project but does not have the store field,
        or the store field references a different store, this method returns a ResourceNotFound error.
      body:
        application/json:
          example: !include ../examples/cart-update.example.json
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/cart.example.json
    delete:
      is:
        - dataErasure
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_project:{projectKey}',
                  'manage_orders:{projectKey}',
                  'manage_orders:{projectKey}:{storeKey}',
                ],
            },
        ]
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/cart.example.json
/orders:
  type:
    baseDomain:
      resourceType: Order
      resourceQueryType: OrderPagedQueryResponse
      resourceDraft: OrderFromCartDraft
      whereExample: customerEmail = "john.doe@example.com"
      sortExample: createdAt asc
  description:
    An order can be created from a cart, usually after a checkout process has
    been completed.
  get:
    securedBy:
      [
        oauth_2_0:
          {
            scopes:
              [
                'manage_project:{projectKey}',
                'view_orders:{projectKey}',
                'view_orders:{projectKey}:{storeKey}',
              ],
          },
      ]
    description:
      Queries orders in a specific Store. The {storeKey} path parameter maps to
      a Store's key.
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/orders.example.json
  post:
    securedBy:
      [
        oauth_2_0:
          {
            scopes:
              [
                'manage_project:{projectKey}',
                'manage_orders:{projectKey}',
                'manage_orders:{projectKey}:{storeKey}',
              ],
          },
      ]
    description: |
      Creates an order from a Cart from a specific Store. The {storeKey} path parameter maps to a Store's key.
      When using this endpoint the orders's store field is always set to the store specified in the path parameter.
      The cart must have a shipping address set before creating an order. When using the Platform TaxMode,
      the shipping address is used for tax calculation.
    body:
      application/json:
        example: !include ../examples/order-create.example.json
    responses:
      201:
        body:
          application/json:
            example: !include ../examples/order.example.json
  /order-number={orderNumber}:
    (methodName): withOrderNumber
    type:
      baseResource:
        uriParameterName: orderNumber
        resourceType: Order
        resourceUpdateType: Update
    get:
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_project:{projectKey}',
                  'view_orders:{projectKey}',
                  'view_orders:{projectKey}:{storeKey}',
                ],
            },
        ]
      description: |
        Returns an order by its order number from a specific Store.
        The {storeKey} path parameter maps to a Store's key.
        If the order exists in the commercetools project but does not have the store field,
        or the store field references a different store, this method returns a ResourceNotFound error.
        In case the orderNumber does not match the regular expression [a-zA-Z0-9_\-]+,
        it should be provided in URL-encoded format.
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/order.example.json
    post:
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_project:{projectKey}',
                  'manage_orders:{projectKey}',
                  'manage_orders:{projectKey}:{storeKey}',
                ],
            },
        ]
      description: |
        Updates an order in the store specified by {storeKey}. The {storeKey} path parameter maps to a Store's key.
        If the order exists in the commercetools project but does not have the store field,
        or the store field references a different store, this method returns a ResourceNotFound error.
        In case the orderNumber does not match the regular expression [a-zA-Z0-9_\-]+,
        it should be provided in URL-encoded format.
      body:
        application/json:
          example: !include ../examples/order-update.example.json
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/order.example.json
    delete:
      is:
        - dataErasure
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_project:{projectKey}',
                  'manage_orders:{projectKey}',
                  'manage_orders:{projectKey}:{storeKey}',
                ],
            },
        ]
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/order.example.json
  /{ID}:
    (methodName): withId
    type:
      baseResource:
        uriParameterName: ID
        resourceType: Order
        resourceUpdateType: Update
    get:
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_project:{projectKey}',
                  'view_orders:{projectKey}',
                  'view_orders:{projectKey}:{storeKey}',
                ],
            },
        ]
      description: |
        Returns an order by its ID from a specific Store. The {storeKey} path parameter maps to a Store's key.
        If the order exists in the commercetools project but does not have the store field,
        or the store field references a different store, this method returns a ResourceNotFound error.
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/order.example.json
    post:
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_project:{projectKey}',
                  'manage_orders:{projectKey}',
                  'manage_orders:{projectKey}:{storeKey}',
                ],
            },
        ]
      description: |
        Updates an order in the store specified by {storeKey}. The {storeKey} path parameter maps to a Store's key.
        If the order exists in the commercetools project but does not have the store field,
        or the store field references a different store, this method returns a ResourceNotFound error.
      body:
        application/json:
          example: !include ../examples/order-update.example.json
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/order.example.json
    delete:
      is:
        - dataErasure
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_project:{projectKey}',
                  'manage_orders:{projectKey}',
                  'manage_orders:{projectKey}:{storeKey}',
                ],
            },
        ]
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/order.example.json
/me:
  /carts:
    type:
      baseDomain:
        resourceType: Cart
        resourceQueryType: CartPagedQueryResponse
        resourceDraft: MyCartDraft
        whereExample: customerEmail = "john.doe@example.com"
        sortExample: createdAt asc
    description: A shopping cart holds product variants and can be ordered.
    get:
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_my_orders:{projectKey}',
                  'manage_my_orders:{projectKey}:{storeKey}',
                ],
            },
        ]
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/carts.example.json
    post:
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_my_orders:{projectKey}',
                  'manage_my_orders:{projectKey}:{storeKey}',
                ],
            },
        ]
      body:
        application/json:
          example: !include ../examples/cart-create.example.json
      responses:
        201:
          body:
            application/json:
              example: !include ../examples/cart.example.json
    /{ID}:
      (methodName): withId
      type:
        baseResource:
          uriParameterName: ID
          resourceType: Cart
          resourceUpdateType: Update
      get:
        securedBy:
          [
            oauth_2_0:
              {
                scopes:
                  [
                    'manage_my_orders:{projectKey}',
                    'manage_my_orders:{projectKey}:{storeKey}',
                  ],
              },
          ]
        responses:
          200:
            body:
              application/json:
                example: !include ../examples/cart.example.json
      post:
        securedBy:
          [
            oauth_2_0:
              {
                scopes:
                  [
                    'manage_my_orders:{projectKey}',
                    'manage_my_orders:{projectKey}:{storeKey}',
                  ],
              },
          ]
        body:
          application/json:
            example: !include ../examples/cart-update.example.json
        responses:
          200:
            body:
              application/json:
                example: !include ../examples/cart.example.json
      delete:
        securedBy:
          [
            oauth_2_0:
              {
                scopes:
                  [
                    'manage_my_orders:{projectKey}',
                    'manage_my_orders:{projectKey}:{storeKey}',
                  ],
              },
          ]
        responses:
          200:
            body:
              application/json:
                example: !include ../examples/cart.example.json
  /orders:
    type:
      baseDomain:
        resourceType: Order
        resourceQueryType: OrderPagedQueryResponse
        resourceDraft: MyOrderFromCartDraft
        whereExample: customerEmail = "john.doe@example.com"
        sortExample: createdAt asc
    description:
      An order can be created from a order, usually after a checkout process has
      been completed.
    get:
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_my_orders:{projectKey}',
                  'manage_my_orders:{projectKey}:{storeKey}',
                ],
            },
        ]
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/orders.example.json
    post:
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_my_orders:{projectKey}',
                  'manage_my_orders:{projectKey}:{storeKey}',
                ],
            },
        ]
      body:
        application/json:
          example: !include ../examples/order-create.example.json
      responses:
        201:
          body:
            application/json:
              example: !include ../examples/order.example.json
    /{ID}:
      (methodName): withId
      type:
        baseResource:
          uriParameterName: ID
          resourceType: Order
          resourceUpdateType: Update
      get:
        securedBy:
          [
            oauth_2_0:
              {
                scopes:
                  [
                    'manage_my_orders:{projectKey}',
                    'manage_my_orders:{projectKey}:{storeKey}',
                  ],
              },
          ]
        responses:
          200:
            body:
              application/json:
                example: !include ../examples/order.example.json
  /active-cart:
    type: base
    get:
      displayName: Get active cart
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_my_orders:{projectKey}',
                  'manage_my_orders:{projectKey}:{storeKey}',
                ],
            },
        ]
      responses:
        200:
          body:
            application/json:
              type: Cart
              example: !include ../examples/cart.example.json
/customers:
  type:
    baseDomain:
      resourceType: Customer
      resourceQueryType: CustomerPagedQueryResponse
      resourceDraft: CustomerDraft
      whereExample: email = "foo@bar.com"
      sortExample: createdAt asc
  description: |
    A customer is a person purchasing products. customers, Orders,
    Comments and Reviews can be associated to a customer.
  get:
    securedBy:
      - oauth_2_0:
          scopes:
            - 'manage_project:{projectKey}'
            - 'view_customers:{projectKey}'
            - 'view_customers:{projectKey}:{storeKey}'
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/customers.example.json
  post:
    securedBy:
      - oauth_2_0:
          scopes:
            - 'manage_project:{projectKey}'
            - 'manage_customers:{projectKey}'
            - 'manage_customers:{projectKey}:{storeKey}'
    description: |
      Creates a customer in a specific Store. The {storeKey} path parameter maps to a Store's key.
      When using this endpoint, if omitted,
      the customer's stores field is set to the store specified in the path parameter.
      If an anonymous cart is passed in as when using this method,
      then the cart is assigned to the created customer and the version number of the Cart increases.
      If the ID of an anonymous session is given, all carts and orders will be assigned to the created customer and
      the store specified. If you pass in a cart with a store field specified,
      the store field must reference the same store specified in the {storeKey} path parameter.
    body:
      application/json:
        example: !include ../examples/customer-create.example.json
    responses:
      201:
        body:
          application/json:
            example: !include ../examples/customer-sign-in.example.json
            type: CustomerSignInResult
  /password-token={passwordToken}:
    (methodName): withPasswordToken
    type:
      baseResource:
        uriParameterName: passwordToken
        resourceType: Customer
    get:
      displayName: Get customer by password verification token
      securedBy:
        - oauth_2_0:
            scopes:
              - 'manage_project:{projectKey}'
              - 'view_customers:{projectKey}'
              - 'view_customers:{projectKey}:{storeKey}'
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/customer.example.json
  /email-token={emailToken}:
    (methodName): withEmailToken
    type:
      baseResource:
        uriParameterName: emailToken
        resourceType: Customer
    get:
      displayName: Get customer by email verification token
      securedBy:
        - oauth_2_0:
            scopes:
              - 'manage_project:{projectKey}'
              - 'view_customers:{projectKey}'
              - 'view_customers:{projectKey}:{storeKey}'
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/customer.example.json
  /email-token:
    type: base
    displayName: Customer's Email Verification
    description: |
      To verify a customer's email, an email token can be created. This should be embedded in a link and sent to the
      customer via email. When the customer clicks on the link,
      the "verify customer's email" endpoint should be called,
      which sets customer's isVerifiedEmail field to true.
    post:
      displayName: Create a Token for verifying the Customer's Email
      description: Create a Token for verifying the Customer's Email
      securedBy:
        - oauth_2_0:
            scopes:
              - 'manage_project:{projectKey}'
              - 'manage_customers:{projectKey}'
              - 'manage_customers:{projectKey}:{storeKey}'
      body:
        application/json:
          type: CustomerCreateEmailToken
      responses:
        200:
          body:
            application/json:
              type: CustomerToken
  /email/confirm:
    type: base
    post:
      displayName: Verify Customer's Email
      description: Verifies customer's email using a token.
      securedBy:
        - oauth_2_0:
            scopes:
              - 'manage_project:{projectKey}'
              - 'manage_customers:{projectKey}'
              - 'manage_customers:{projectKey}:{storeKey}'
      body:
        application/json:
          type: CustomerEmailVerify
      responses:
        200:
          description: The email was verified.
  /password:
    type: base
    post:
      displayName: Change a customers password
      description: Change a customers password
      securedBy:
        - oauth_2_0:
            scopes:
              - 'manage_project:{projectKey}'
              - 'manage_customers:{projectKey}'
              - 'manage_customers:{projectKey}:{storeKey}'
      body:
        application/json:
          type: CustomerChangePassword
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/customer.example.json
              type: Customer
  /password/reset:
    type: base
    post:
      displayName: Reset Customer's Password
      description: Set a new password using a token.
      securedBy:
        - oauth_2_0:
            scopes:
              - 'manage_project:{projectKey}'
              - 'manage_customers:{projectKey}'
              - 'manage_customers:{projectKey}:{storeKey}'
      body:
        application/json:
          type: CustomerResetPassword
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/customer.example.json
              type: Customer
  /password-token:
    type: base
    displayName: Create a Token for Resetting the Customer's Password
    description: |
      The following workflow can be used to reset the customer's password:

      * Create a password reset token and send it embedded in a link to the customer.
      * When the customer clicks on the link, the customer is retrieved with the token.
      * The customer enters a new password and the "reset customer's password" endpoint is called.
    post:
      displayName: Create a Token for Resetting the Customer's Password
      description: |
        The token value is used to reset the password of the customer with the given email. The token is
        valid only for 10 minutes.
      securedBy:
        - oauth_2_0:
            scopes:
              - 'manage_project:{projectKey}'
              - 'manage_customers:{projectKey}'
              - 'manage_customers:{projectKey}:{storeKey}'
      body:
        application/json:
          type: CustomerCreatePasswordResetToken
      responses:
        201:
          body:
            application/json:
              type: CustomerToken
  /key={key}:
    (methodName): withKey
    type:
      baseResource:
        uriParameterName: key
        resourceType: Customer
        resourceUpdateType: Update
    get:
      securedBy:
        - oauth_2_0:
            scopes:
              - 'manage_project:{projectKey}'
              - 'view_customers:{projectKey}'
              - 'view_customers:{projectKey}:{storeKey}'
      description: |
        Returns a customer by its Key from a specific Store. The {storeKey} path parameter maps to a Store's key.
        It also considers customers that do not have the stores field.
        If the customer exists in the commercetools project but the stores field references different stores,
        this method returns a ResourceNotFound error.
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/customer.example.json
    post:
      securedBy:
        - oauth_2_0:
            scopes:
              - 'manage_project:{projectKey}'
              - 'manage_customers:{projectKey}'
              - 'manage_customers:{projectKey}:{storeKey}'
      description: |
        If the customer exists in the commercetools project but the stores field references a different store,
        this method returns a ResourceNotFound error.
      body:
        application/json:
          example: !include ../examples/customer-update.example.json
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/customer.example.json
    delete:
      is:
        - dataErasure
      securedBy:
        - oauth_2_0:
            scopes:
              - 'manage_project:{projectKey}'
              - 'manage_customers:{projectKey}'
              - 'manage_customers:{projectKey}:{storeKey}'
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/customer.example.json
  /{ID}:
    (methodName): withId
    type:
      baseResource:
        uriParameterName: ID
        resourceType: Customer
        resourceUpdateType: Update
    get:
      securedBy:
        - oauth_2_0:
            scopes:
              - 'manage_project:{projectKey}'
              - 'view_customers:{projectKey}'
              - 'view_customers:{projectKey}:{storeKey}'
      description: |
        Returns a customer by its ID from a specific Store. The {storeKey} path parameter maps to a Store's key.
        It also considers customers that do not have the stores field.
        If the customer exists in the commercetools project but the stores field references different stores,
        this method returns a ResourceNotFound error.
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/customer.example.json
    post:
      securedBy:
        - oauth_2_0:
            scopes:
              - 'manage_project:{projectKey}'
              - 'manage_customers:{projectKey}'
              - 'manage_customers:{projectKey}:{storeKey}'
      description: |
        Updates a customer in the store specified by {storeKey}. The {storeKey} path parameter maps to a Store's key.
        If the customer exists in the commercetools project but the stores field references a different store,
        this method returns a ResourceNotFound error.
      body:
        application/json:
          example: !include ../examples/customer-update.example.json
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/customer.example.json
    delete:
      is:
        - dataErasure
      securedBy:
        - oauth_2_0:
            scopes:
              - 'manage_project:{projectKey}'
              - 'manage_customers:{projectKey}'
              - 'manage_customers:{projectKey}:{storeKey}'
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/customer.example.json
/login:
  type: base
  displayName: Authenticate Customer (Sign In)
  description: Retrieves the authenticated customer.
  post:
    displayName: Authenticate Customer (Sign In)
    description: Authenticate Customer (Sign In)
    securedBy:
      - oauth_2_0:
          scopes:
            - 'manage_project:{projectKey}'
            - 'manage_customers:{projectKey}'
            - 'manage_customers:{projectKey}:{storeKey}'
    body:
      application/json:
        type: CustomerSignin
    responses:
      201:
        body:
          application/json:
            example: !include ../examples/customer-sign-in.example.json
            type: CustomerSignInResult
/shipping-methods:
  /matching-cart:
    type: base
    description: Get ShippingMethods for a cart in a store
    get:
      displayName: Get ShippingMethods for a cart in a store
      is:
        - expandable
      securedBy:
        - oauth_2_0:
            scopes:
              - 'manage_project:{projectKey}'
              - 'view_orders:{projectKey}'
              - 'manage_customers:{projectKey}:{storeKey}'
              - 'view_shipping_methods:{projectKey}'
      queryParameters:
        cartId:
          type: string
      responses:
        200:
          body:
            application/json:
              type: ShippingMethodPagedQueryResponse
              example: !include ../examples/shipping-methods.example.json
