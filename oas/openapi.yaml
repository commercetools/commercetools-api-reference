openapi: "3.0.0"
info:
  title: Commercetools
  version: v1

servers:
  - url: https://api.europe-west1.gcp.commercetools.com

paths:
  /{projectKey}:
    description: |-
      The Project endpoint is used to retrieve certain information from a project.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
      operationId: ByProjectKeyGet
      description: |-
        The Endpoint is responding a limited set of information about settings and configuration of the project.
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
      operationId: ByProjectKeyPost
      description: |-
        Update project
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
  /{projectKey}/api-clients:
    description: |-
      Manage your API Clients via an API. Useful for Infrastructure-as-Code tooling, and regularly rotating API secrets.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "api-clients" 
      security:
        - oauth_2_0:
            - "manage_api_clients:{projectKey}"
            - "view_api_clients:{projectKey}"
      operationId: ByProjectKeyApiClientsGet
      description: |-
        Query api-clients
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: withTotal
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "api-clients" 
      security:
        - oauth_2_0:
            - "manage_api_clients:{projectKey}"
      operationId: ByProjectKeyApiClientsPost
      description: |-
        Create ApiClient
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        201:
          description: |-
            201
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/api-clients/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: ID
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "api-clients"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_api_clients:{projectKey}"
            - "view_api_clients:{projectKey}"
      operationId: ByProjectKeyApiClientsByIDGet
      description: |-
        Get ApiClient by ID
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    delete:
      tags:
        - "projectKey"
        - "api-clients"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_api_clients:{projectKey}"
      operationId: ByProjectKeyApiClientsByIDDelete
      description: |-
        Delete ApiClient by ID
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/cart-discounts:
    description: |-
      Cart discounts are used to change the prices of different elements within a cart.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "cart-discounts" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_orders:{projectKey}"
            - "view_cart_discounts:{projectKey}"
      operationId: ByProjectKeyCartDiscountsGet
      description: |-
        Query cart-discounts
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: withTotal
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "cart-discounts" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_orders:{projectKey}"
            - "manage_cart_discounts:{projectKey}"
      operationId: ByProjectKeyCartDiscountsPost
      description: |-
        Create CartDiscount
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        201:
          description: |-
            201
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/cart-discounts/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: key
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "cart-discounts"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_orders:{projectKey}"
            - "view_cart_discounts:{projectKey}"
      operationId: ByProjectKeyCartDiscountsKeyByKeyGet
      description: |-
        Get CartDiscount by key
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "cart-discounts"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_orders:{projectKey}"
            - "manage_cart_discounts:{projectKey}"
      operationId: ByProjectKeyCartDiscountsKeyByKeyPost
      description: |-
        Update CartDiscount by key
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    delete:
      tags:
        - "projectKey"
        - "cart-discounts"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_orders:{projectKey}"
            - "manage_cart_discounts:{projectKey}"
      operationId: ByProjectKeyCartDiscountsKeyByKeyDelete
      description: |-
        Delete CartDiscount by key
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/cart-discounts/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: ID
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "cart-discounts"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_orders:{projectKey}"
            - "view_cart_discounts:{projectKey}"
      operationId: ByProjectKeyCartDiscountsByIDGet
      description: |-
        Get CartDiscount by ID
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "cart-discounts"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_orders:{projectKey}"
            - "manage_cart_discounts:{projectKey}"
      operationId: ByProjectKeyCartDiscountsByIDPost
      description: |-
        Update CartDiscount by ID
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    delete:
      tags:
        - "projectKey"
        - "cart-discounts"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_orders:{projectKey}"
            - "manage_cart_discounts:{projectKey}"
      operationId: ByProjectKeyCartDiscountsByIDDelete
      description: |-
        Delete CartDiscount by ID
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/carts:
    description: |-
      A shopping cart holds product variants and can be ordered.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "carts" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_orders:{projectKey}"
      operationId: ByProjectKeyCartsGet
      description: |-
        Query carts
      parameters:
        - name: customerId
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: withTotal
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "carts" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_orders:{projectKey}"
      operationId: ByProjectKeyCartsPost
      description: |-
        Creating a cart can fail with an InvalidOperation if the referenced shipping method in the
        CartDraft has a predicate which does not match the cart.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        201:
          description: |-
            201
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/carts/customer-id={customerId}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: customerId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "carts"
        - "customer-id=customerId" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_orders:{projectKey}"
      operationId: ByProjectKeyCartsCustomerIdByCustomerIdGet
      description: |-
        Retrieves the active cart of the customer that has been modified most recently.
        It does not consider carts with CartOrigin Merchant. If no active cart exists, a 404 Not Found error is returned.

        The cart may not contain up-to-date prices, discounts etc. If you want to ensure they're up-to-date,
        send an Update request with the Recalculate update action instead.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/carts/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: key
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "carts"
        - "key=key" 
      security:
        - oauth_2_0:
            - "view_orders:{projectKey}"
      operationId: ByProjectKeyCartsKeyByKeyGet
      description: |-
        The cart may not contain up-to-date prices, discounts etc.
        If you want to ensure they're up-to-date, send an Update request with the Recalculate update action instead.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "carts"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_orders:{projectKey}"
      operationId: ByProjectKeyCartsKeyByKeyPost
      description: |-
        Update Cart by key
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    delete:
      tags:
        - "projectKey"
        - "carts"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_orders:{projectKey}"
      operationId: ByProjectKeyCartsKeyByKeyDelete
      description: |-
        Delete Cart by key
      parameters:
        - name: dataErasure
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/carts/replicate:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
    post:
      tags:
        - "projectKey"
        - "carts"
        - "replicate" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_orders:{projectKey}"
      operationId: ByProjectKeyCartsReplicatePost
      requestBody:
        content:
          application/json: {}
      responses:
        201:
          description: |-
            201
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/carts/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: ID
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "carts"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_orders:{projectKey}"
      operationId: ByProjectKeyCartsByIDGet
      description: |-
        The cart may not contain up-to-date prices, discounts etc.
        If you want to ensure they're up-to-date, send an Update request with the Recalculate update action instead.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "carts"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_orders:{projectKey}"
      operationId: ByProjectKeyCartsByIDPost
      description: |-
        Update Cart by ID
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    delete:
      tags:
        - "projectKey"
        - "carts"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_orders:{projectKey}"
      operationId: ByProjectKeyCartsByIDDelete
      description: |-
        Delete Cart by ID
      parameters:
        - name: dataErasure
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/categories:
    description: |-
      Categories are used to organize products in a hierarchical structure.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "categories" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_products:{projectKey}"
            - "view_categories:{projectKey}"
      operationId: ByProjectKeyCategoriesGet
      description: |-
        Query categories
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: withTotal
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "categories" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_products:{projectKey}"
            - "view_categories:{projectKey}"
      operationId: ByProjectKeyCategoriesPost
      description: |-
        Creating a category produces the CategoryCreated message.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        201:
          description: |-
            201
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/categories/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: key
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "categories"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_products:{projectKey}"
            - "view_categories:{projectKey}"
      operationId: ByProjectKeyCategoriesKeyByKeyGet
      description: |-
        Get Category by key
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "categories"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_products:{projectKey}"
            - "manage_categories:{projectKey}"
      operationId: ByProjectKeyCategoriesKeyByKeyPost
      description: |-
        Update Category by key
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    delete:
      tags:
        - "projectKey"
        - "categories"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_products:{projectKey}"
            - "manage_categories:{projectKey}"
      operationId: ByProjectKeyCategoriesKeyByKeyDelete
      description: |-
        Delete Category by key
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/categories/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: ID
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "categories"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_products:{projectKey}"
            - "view_categories:{projectKey}"
      operationId: ByProjectKeyCategoriesByIDGet
      description: |-
        Get Category by ID
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "categories"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_products:{projectKey}"
            - "manage_categories:{projectKey}"
      operationId: ByProjectKeyCategoriesByIDPost
      description: |-
        Update Category by ID
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    delete:
      tags:
        - "projectKey"
        - "categories"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_products:{projectKey}"
            - "manage_categories:{projectKey}"
      operationId: ByProjectKeyCategoriesByIDDelete
      description: |-
        Delete Category by ID
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/channels:
    description: |-
      Channels represent a source or destination of different entities. They can be used to model warehouses or stores.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "channels" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_products:{projectKey}"
      operationId: ByProjectKeyChannelsGet
      description: |-
        Query channels
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: withTotal
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "channels" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_products:{projectKey}"
      operationId: ByProjectKeyChannelsPost
      description: |-
        Create Channel
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        201:
          description: |-
            201
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/channels/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: ID
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "channels"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_products:{projectKey}"
      operationId: ByProjectKeyChannelsByIDGet
      description: |-
        Get Channel by ID
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "channels"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_products:{projectKey}"
      operationId: ByProjectKeyChannelsByIDPost
      description: |-
        Update Channel by ID
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    delete:
      tags:
        - "projectKey"
        - "channels"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_products:{projectKey}"
      operationId: ByProjectKeyChannelsByIDDelete
      description: |-
        Delete Channel by ID
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/custom-objects:
    description: |-
      Store custom JSON values.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "custom-objects" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_products:{projectKey}"
            - "view_orders:{projectKey}"
            - "view_customers:{projectKey}"
      operationId: ByProjectKeyCustomObjectsGet
      description: |-
        The query endpoint allows to retrieve custom objects in a specific container or all custom objects.
        For performance reasons, it is highly advisable to query only for custom objects in a container by using
        the container field in the where predicate.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: withTotal
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "custom-objects" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_products:{projectKey}"
            - "manage_orders:{projectKey}"
            - "manage_customers:{projectKey}"
      operationId: ByProjectKeyCustomObjectsPost
      description: |-
        Creates a new custom object or updates an existing custom object.
        If an object with the given container/key exists,
        the object will be replaced with the new value and the version is incremented.
        If the request contains a version and an object with the given container/key exists then the version
        must match the version of the existing object. Concurrent updates for the same custom object still can result
        in a Conflict (409) even if the version is not provided.
        Fields with null values will not be saved.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        201:
          description: |-
            201
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/custom-objects/{container}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: container
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "custom-objects"
        - "container" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_products:{projectKey}"
            - "view_orders:{projectKey}"
            - "view_customers:{projectKey}"
      operationId: ByProjectKeyCustomObjectsByContainerGet
      description: |-
        Get CustomObjectPagedQueryResponse by container
      parameters:
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/custom-objects/{container}/{key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: container
        in: path
        required: true
        schema:
          type: string
      - name: key
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "custom-objects"
        - "container"
        - "key" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_products:{projectKey}"
            - "view_orders:{projectKey}"
            - "view_customers:{projectKey}"
      operationId: ByProjectKeyCustomObjectsByContainerByKeyGet
      description: |-
        Get CustomObject by container and key
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    delete:
      tags:
        - "projectKey"
        - "custom-objects"
        - "container"
        - "key" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_products:{projectKey}"
            - "manage_orders:{projectKey}"
            - "manage_customers:{projectKey}"
      operationId: ByProjectKeyCustomObjectsByContainerByKeyDelete
      description: |-
        Delete CustomObject by container and key
      parameters:
        - name: version
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: dataErasure
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/customer-groups:
    description: |-
      customer-groups are used to evaluate products and channels.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "customer-groups" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_customers:{projectKey}"
            - "view_customer_groups:{projectKey}"
      operationId: ByProjectKeyCustomerGroupsGet
      description: |-
        Query customer-groups
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: withTotal
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "customer-groups" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_customers:{projectKey}"
            - "manage_customer_groups:{projectKey}"
      operationId: ByProjectKeyCustomerGroupsPost
      description: |-
        Create CustomerGroup
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        201:
          description: |-
            201
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/customer-groups/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: key
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "customer-groups"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_customers:{projectKey}"
            - "view_customer_groups:{projectKey}"
      operationId: ByProjectKeyCustomerGroupsKeyByKeyGet
      description: |-
        Gets a customer group by Key.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "customer-groups"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_customers:{projectKey}"
            - "manage_customer_groups:{projectKey}"
      operationId: ByProjectKeyCustomerGroupsKeyByKeyPost
      description: |-
        Updates a customer group by Key.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    delete:
      tags:
        - "projectKey"
        - "customer-groups"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_customers:{projectKey}"
            - "manage_customer_groups:{projectKey}"
      operationId: ByProjectKeyCustomerGroupsKeyByKeyDelete
      description: |-
        Delete CustomerGroup by key
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/customer-groups/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: ID
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "customer-groups"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_customers:{projectKey}"
            - "view_customer_groups:{projectKey}"
      operationId: ByProjectKeyCustomerGroupsByIDGet
      description: |-
        Get CustomerGroup by ID
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "customer-groups"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_customers:{projectKey}"
            - "manage_customer_groups:{projectKey}"
      operationId: ByProjectKeyCustomerGroupsByIDPost
      description: |-
        Update CustomerGroup by ID
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    delete:
      tags:
        - "projectKey"
        - "customer-groups"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_customers:{projectKey}"
            - "manage_customer_groups:{projectKey}"
      operationId: ByProjectKeyCustomerGroupsByIDDelete
      description: |-
        Delete CustomerGroup by ID
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/customers:
    description: |-
      A customer is a person purchasing products. customers, Orders, Comments and Reviews can be associated to a customer.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "customers" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_customers:{projectKey}"
      operationId: ByProjectKeyCustomersGet
      description: |-
        Query customers
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: withTotal
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "customers" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_customers:{projectKey}"
      operationId: ByProjectKeyCustomersPost
      description: |-
        Creates a customer. If an anonymous cart is passed in,
        then the cart is assigned to the created customer and the version number of the Cart will increase.
        If the ID of an anonymous session is given, all carts and orders will be assigned to the created customer.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        201:
          description: |-
            201
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/customers/email-token:
    description: |-
      To verify a customer's email, an email token can be created. This should be embedded in a link and sent to the
      customer via email. When the customer clicks on the link, the "verify customer's email" endpoint should be called,
      which sets customer's isVerifiedEmail field to true.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
    post:
      tags:
        - "projectKey"
        - "customers"
        - "email-token" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_customers:{projectKey}"
      operationId: ByProjectKeyCustomersEmailTokenPost
      description: |-
        Create a Token for verifying the Customer's Email
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/customers/email-token={emailToken}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: emailToken
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "customers"
        - "email-token=emailToken" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_customers:{projectKey}"
      operationId: ByProjectKeyCustomersEmailTokenByEmailTokenGet
      description: |-
        Get Customer by emailToken
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/customers/email/confirm:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
    post:
      tags:
        - "projectKey"
        - "customers"
        - "email"
        - "confirm" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_customers:{projectKey}"
      operationId: ByProjectKeyCustomersEmailConfirmPost
      description: |-
        Verifies customer's email using a token.
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            The email was verified.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/customers/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: key
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "customers"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_customers:{projectKey}"
      operationId: ByProjectKeyCustomersKeyByKeyGet
      description: |-
        Get Customer by key
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "customers"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_customers:{projectKey}"
      operationId: ByProjectKeyCustomersKeyByKeyPost
      description: |-
        Update Customer by key
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    delete:
      tags:
        - "projectKey"
        - "customers"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_customers:{projectKey}"
      operationId: ByProjectKeyCustomersKeyByKeyDelete
      description: |-
        Delete Customer by key
      parameters:
        - name: dataErasure
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/customers/password:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
    post:
      tags:
        - "projectKey"
        - "customers"
        - "password" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_customers:{projectKey}"
      operationId: ByProjectKeyCustomersPasswordPost
      description: |-
        Change a customers password
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/customers/password-token:
    description: |-
      The following workflow can be used to reset the customer's password:

      * Create a password reset token and send it embedded in a link to the customer.
      * When the customer clicks on the link, the customer is retrieved with the token.
      * The customer enters a new password and the "reset customer's password" endpoint is called.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
    post:
      tags:
        - "projectKey"
        - "customers"
        - "password-token" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_customers:{projectKey}"
      operationId: ByProjectKeyCustomersPasswordTokenPost
      description: |-
        The token value is used to reset the password of the customer with the given email. The token is
        valid only for 10 minutes.
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/customers/password-token={passwordToken}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: passwordToken
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "customers"
        - "password-token=passwordToken" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_customers:{projectKey}"
      operationId: ByProjectKeyCustomersPasswordTokenByPasswordTokenGet
      description: |-
        Get Customer by passwordToken
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/customers/password/reset:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
    post:
      tags:
        - "projectKey"
        - "customers"
        - "password"
        - "reset" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_customers:{projectKey}"
      operationId: ByProjectKeyCustomersPasswordResetPost
      description: |-
        Set a new password using a token.
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/customers/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: ID
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "customers"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_customers:{projectKey}"
      operationId: ByProjectKeyCustomersByIDGet
      description: |-
        Get Customer by ID
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "customers"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_customers:{projectKey}"
      operationId: ByProjectKeyCustomersByIDPost
      description: |-
        Update Customer by ID
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    delete:
      tags:
        - "projectKey"
        - "customers"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_customers:{projectKey}"
      operationId: ByProjectKeyCustomersByIDDelete
      description: |-
        Delete Customer by ID
      parameters:
        - name: dataErasure
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/discount-codes:
    description: |-
      Discount codes can be added to a discount-code to enable certain discount-code discounts.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "discount-codes" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_orders:{projectKey}"
      operationId: ByProjectKeyDiscountCodesGet
      description: |-
        Query discount-codes
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: withTotal
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "discount-codes" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_orders:{projectKey}"
      operationId: ByProjectKeyDiscountCodesPost
      description: |-
        Create DiscountCode
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        201:
          description: |-
            201
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/discount-codes/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: ID
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "discount-codes"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_orders:{projectKey}"
      operationId: ByProjectKeyDiscountCodesByIDGet
      description: |-
        Get DiscountCode by ID
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "discount-codes"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_orders:{projectKey}"
      operationId: ByProjectKeyDiscountCodesByIDPost
      description: |-
        Update DiscountCode by ID
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    delete:
      tags:
        - "projectKey"
        - "discount-codes"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_orders:{projectKey}"
      operationId: ByProjectKeyDiscountCodesByIDDelete
      description: |-
        Delete DiscountCode by ID
      parameters:
        - name: dataErasure
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/extensions:
    description: |-
      Extend the behavior of an API with your business logic
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "extensions" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_extensions:{projectKey}"
      operationId: ByProjectKeyExtensionsGet
      description: |-
        Query extensions
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: withTotal
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "extensions" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_extensions:{projectKey}"
      operationId: ByProjectKeyExtensionsPost
      description: |-
        Currently, a maximum of 25 extensions can be created per project.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        201:
          description: |-
            201
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/extensions/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: key
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "extensions"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_extensions:{projectKey}"
      operationId: ByProjectKeyExtensionsKeyByKeyGet
      description: |-
        Retrieves the representation of an extension by its key.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "extensions"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_extensions:{projectKey}"
      operationId: ByProjectKeyExtensionsKeyByKeyPost
      description: |-
        Update Extension by key
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    delete:
      tags:
        - "projectKey"
        - "extensions"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_extensions:{projectKey}"
      operationId: ByProjectKeyExtensionsKeyByKeyDelete
      description: |-
        Delete Extension by key
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/extensions/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: ID
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "extensions"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_extensions:{projectKey}"
      operationId: ByProjectKeyExtensionsByIDGet
      description: |-
        Retrieves the representation of an extension by its id.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "extensions"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_extensions:{projectKey}"
      operationId: ByProjectKeyExtensionsByIDPost
      description: |-
        Update Extension by ID
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    delete:
      tags:
        - "projectKey"
        - "extensions"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_extensions:{projectKey}"
      operationId: ByProjectKeyExtensionsByIDDelete
      description: |-
        Delete Extension by ID
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/graphql:
    description: |-
      The commercetools™ platform provides a GraphQL API
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
    post:
      tags:
        - "projectKey"
        - "graphql" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_products:{projectKey}"
      operationId: ByProjectKeyGraphqlPost
      description: |-
        Execute a GraphQL query
      requestBody:
        content:
          application/graphql: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/in-store/key={storeKey}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: storeKey
        in: path
        required: true
        schema:
          type: string
  /{projectKey}/in-store/key={storeKey}/carts:
    description: |-
      A shopping cart holds product variants and can be ordered.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: storeKey
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "in-store"
        - "key=storeKey"
        - "carts" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_orders:{projectKey}"
            - "view_orders:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyCartsGet
      description: |-
        Queries carts in a specific Store. The {storeKey} path parameter maps to a Store's key.
      parameters:
        - name: customerId
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: withTotal
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "in-store"
        - "key=storeKey"
        - "carts" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_orders:{projectKey}"
            - "manage_orders:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyCartsPost
      description: |-
        Creates a cart in the store specified by {storeKey}. The {storeKey} path parameter maps to a Store's key.
        When using this endpoint the cart's store field is always set to the store specified in the path parameter.
        Creating a cart can fail with an InvalidOperation if the referenced shipping method
        in the CartDraft has a predicate which does not match the cart.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        201:
          description: |-
            201
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/in-store/key={storeKey}/carts/customer-id={customerId}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: storeKey
        in: path
        required: true
        schema:
          type: string
      - name: customerId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "in-store"
        - "key=storeKey"
        - "carts"
        - "customer-id=customerId" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_orders:{projectKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyCartsCustomerIdByCustomerIdGet
      description: |-
        Retrieves the active cart of the customer that has been modified most recently in a specific Store.
        The {storeKey} path parameter maps to a Store's key.

        If the cart exists in the commercetools project but does not have the store field, or the store field
        references a different store, this method returns a ResourceNotFound error.

        The cart may not contain up-to-date prices, discounts etc. If you want to ensure they're up-to-date,
        send an Update request with the Recalculate update action instead.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/in-store/key={storeKey}/carts/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: storeKey
        in: path
        required: true
        schema:
          type: string
      - name: key
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "in-store"
        - "key=storeKey"
        - "carts"
        - "key=key" 
      security:
        - oauth_2_0:
            - "view_orders:{projectKey}"
            - "view_orders:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyCartsKeyByKeyGet
      description: |-
        Returns a cart by its key from a specific Store. The {storeKey} path parameter maps to a Store's key.
        If the cart exists in the commercetools project but does not have the store field,
        or the store field references a different store, this method returns a ResourceNotFound error.
        The cart may not contain up-to-date prices, discounts etc.
        If you want to ensure they're up-to-date, send an Update request with the Recalculate update action instead.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "in-store"
        - "key=storeKey"
        - "carts"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_orders:{projectKey}"
            - "manage_orders:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyCartsKeyByKeyPost
      description: |-
        Updates a cart in the store specified by {storeKey}. The {storeKey} path parameter maps to a Store's key.
        If the cart exists in the commercetools project but does not have the store field,
        or the store field references a different store, this method returns a ResourceNotFound error.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    delete:
      tags:
        - "projectKey"
        - "in-store"
        - "key=storeKey"
        - "carts"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_orders:{projectKey}"
            - "manage_orders:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyCartsKeyByKeyDelete
      description: |-
        Delete Cart by key
      parameters:
        - name: dataErasure
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/in-store/key={storeKey}/carts/replicate:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: storeKey
        in: path
        required: true
        schema:
          type: string
    post:
      tags:
        - "projectKey"
        - "in-store"
        - "key=storeKey"
        - "carts"
        - "replicate" 
      security:
        - oauth_2_0:
            - "manage_orders:{projectKey}:{storeKey}"
            - "manage_orders:{projectKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyCartsReplicatePost
      requestBody:
        content:
          application/json: {}
      responses:
        201:
          description: |-
            201
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/in-store/key={storeKey}/carts/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: storeKey
        in: path
        required: true
        schema:
          type: string
      - name: ID
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "in-store"
        - "key=storeKey"
        - "carts"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_orders:{projectKey}"
            - "view_orders:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyCartsByIDGet
      description: |-
        Returns a cart by its ID from a specific Store. The {storeKey} path parameter maps to a Store's key.
        If the cart exists in the commercetools project but does not have the store field,
        or the store field references a different store, this method returns a ResourceNotFound error.
        The cart may not contain up-to-date prices, discounts etc.
        If you want to ensure they're up-to-date, send an Update request with the Recalculate update action instead.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "in-store"
        - "key=storeKey"
        - "carts"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_orders:{projectKey}"
            - "manage_orders:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyCartsByIDPost
      description: |-
        Updates a cart in the store specified by {storeKey}. The {storeKey} path parameter maps to a Store's key.
        If the cart exists in the commercetools project but does not have the store field,
        or the store field references a different store, this method returns a ResourceNotFound error.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    delete:
      tags:
        - "projectKey"
        - "in-store"
        - "key=storeKey"
        - "carts"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_orders:{projectKey}"
            - "manage_orders:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyCartsByIDDelete
      description: |-
        Delete Cart by ID
      parameters:
        - name: dataErasure
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/in-store/key={storeKey}/customers:
    description: |-
      A customer is a person purchasing products. customers, Orders,
      Comments and Reviews can be associated to a customer.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: storeKey
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "in-store"
        - "key=storeKey"
        - "customers" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_customers:{projectKey}"
            - "view_customers:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyCustomersGet
      description: |-
        Query customers
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: withTotal
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "in-store"
        - "key=storeKey"
        - "customers" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_customers:{projectKey}"
            - "manage_customers:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyCustomersPost
      description: |-
        Creates a customer in a specific Store. The {storeKey} path parameter maps to a Store's key.
        When using this endpoint, if omitted,
        the customer's stores field is set to the store specified in the path parameter.
        If an anonymous cart is passed in as when using this method,
        then the cart is assigned to the created customer and the version number of the Cart increases.
        If the ID of an anonymous session is given, all carts and orders will be assigned to the created customer and
        the store specified. If you pass in a cart with a store field specified,
        the store field must reference the same store specified in the {storeKey} path parameter.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        201:
          description: |-
            201
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/in-store/key={storeKey}/customers/email-token:
    description: |-
      To verify a customer's email, an email token can be created. This should be embedded in a link and sent to the
      customer via email. When the customer clicks on the link,
      the "verify customer's email" endpoint should be called,
      which sets customer's isVerifiedEmail field to true.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: storeKey
        in: path
        required: true
        schema:
          type: string
    post:
      tags:
        - "projectKey"
        - "in-store"
        - "key=storeKey"
        - "customers"
        - "email-token" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_customers:{projectKey}"
            - "manage_customers:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyCustomersEmailTokenPost
      description: |-
        Create a Token for verifying the Customer's Email in store
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/in-store/key={storeKey}/customers/email-token={emailToken}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: storeKey
        in: path
        required: true
        schema:
          type: string
      - name: emailToken
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "in-store"
        - "key=storeKey"
        - "customers"
        - "email-token=emailToken" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_customers:{projectKey}"
            - "view_customers:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyCustomersEmailTokenByEmailTokenGet
      description: |-
        Get Customer by emailToken
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/in-store/key={storeKey}/customers/email/confirm:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: storeKey
        in: path
        required: true
        schema:
          type: string
    post:
      tags:
        - "projectKey"
        - "in-store"
        - "key=storeKey"
        - "customers"
        - "email"
        - "confirm" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_customers:{projectKey}"
            - "manage_customers:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyCustomersEmailConfirmPost
      description: |-
        Verifies customer's email using a token.
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            The email was verified.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/in-store/key={storeKey}/customers/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: storeKey
        in: path
        required: true
        schema:
          type: string
      - name: key
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "in-store"
        - "key=storeKey"
        - "customers"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_customers:{projectKey}"
            - "view_customers:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyCustomersKeyByKeyGet
      description: |-
        Returns a customer by its Key from a specific Store. The {storeKey} path parameter maps to a Store's key.
        It also considers customers that do not have the stores field.
        If the customer exists in the commercetools project but the stores field references different stores,
        this method returns a ResourceNotFound error.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "in-store"
        - "key=storeKey"
        - "customers"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_customers:{projectKey}"
            - "manage_customers:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyCustomersKeyByKeyPost
      description: |-
        If the customer exists in the commercetools project but the stores field references a different store,
        this method returns a ResourceNotFound error.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    delete:
      tags:
        - "projectKey"
        - "in-store"
        - "key=storeKey"
        - "customers"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_customers:{projectKey}"
            - "manage_customers:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyCustomersKeyByKeyDelete
      description: |-
        Delete Customer by key
      parameters:
        - name: dataErasure
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/in-store/key={storeKey}/customers/password:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: storeKey
        in: path
        required: true
        schema:
          type: string
    post:
      tags:
        - "projectKey"
        - "in-store"
        - "key=storeKey"
        - "customers"
        - "password" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_customers:{projectKey}"
            - "manage_customers:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordPost
      description: |-
        Change a customers password
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/in-store/key={storeKey}/customers/password-token:
    description: |-
      The following workflow can be used to reset the customer's password:

      * Create a password reset token and send it embedded in a link to the customer.
      * When the customer clicks on the link, the customer is retrieved with the token.
      * The customer enters a new password and the "reset customer's password" endpoint is called.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: storeKey
        in: path
        required: true
        schema:
          type: string
    post:
      tags:
        - "projectKey"
        - "in-store"
        - "key=storeKey"
        - "customers"
        - "password-token" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_customers:{projectKey}"
            - "manage_customers:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordTokenPost
      description: |-
        The token value is used to reset the password of the customer with the given email. The token is
        valid only for 10 minutes.
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/in-store/key={storeKey}/customers/password-token={passwordToken}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: storeKey
        in: path
        required: true
        schema:
          type: string
      - name: passwordToken
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "in-store"
        - "key=storeKey"
        - "customers"
        - "password-token=passwordToken" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_customers:{projectKey}"
            - "view_customers:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordTokenByPasswordTokenGet
      description: |-
        Get Customer by passwordToken
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/in-store/key={storeKey}/customers/password/reset:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: storeKey
        in: path
        required: true
        schema:
          type: string
    post:
      tags:
        - "projectKey"
        - "in-store"
        - "key=storeKey"
        - "customers"
        - "password"
        - "reset" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_customers:{projectKey}"
            - "manage_customers:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordResetPost
      description: |-
        Set a new password using a token.
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/in-store/key={storeKey}/customers/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: storeKey
        in: path
        required: true
        schema:
          type: string
      - name: ID
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "in-store"
        - "key=storeKey"
        - "customers"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_customers:{projectKey}"
            - "view_customers:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyCustomersByIDGet
      description: |-
        Returns a customer by its ID from a specific Store. The {storeKey} path parameter maps to a Store's key.
        It also considers customers that do not have the stores field.
        If the customer exists in the commercetools project but the stores field references different stores,
        this method returns a ResourceNotFound error.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "in-store"
        - "key=storeKey"
        - "customers"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_customers:{projectKey}"
            - "manage_customers:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyCustomersByIDPost
      description: |-
        Updates a customer in the store specified by {storeKey}. The {storeKey} path parameter maps to a Store's key.
        If the customer exists in the commercetools project but the stores field references a different store,
        this method returns a ResourceNotFound error.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    delete:
      tags:
        - "projectKey"
        - "in-store"
        - "key=storeKey"
        - "customers"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_customers:{projectKey}"
            - "manage_customers:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyCustomersByIDDelete
      description: |-
        Delete Customer by ID
      parameters:
        - name: dataErasure
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/in-store/key={storeKey}/login:
    description: |-
      Retrieves the authenticated customer.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: storeKey
        in: path
        required: true
        schema:
          type: string
    post:
      tags:
        - "projectKey"
        - "in-store"
        - "key=storeKey"
        - "login" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_customers:{projectKey}"
            - "manage_customers:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyLoginPost
      description: |-
        Authenticate Customer (Sign In) in store
      requestBody:
        content:
          application/json: {}
      responses:
        201:
          description: |-
            201
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/in-store/key={storeKey}/me:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: storeKey
        in: path
        required: true
        schema:
          type: string
  /{projectKey}/in-store/key={storeKey}/me/active-cart:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: storeKey
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "in-store"
        - "key=storeKey"
        - "me"
        - "active-cart" 
      security:
        - oauth_2_0:
            - "manage_my_orders:{projectKey}"
            - "manage_my_orders:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyMeActiveCartGet
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/in-store/key={storeKey}/me/carts:
    description: |-
      A shopping cart holds product variants and can be ordered.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: storeKey
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "in-store"
        - "key=storeKey"
        - "me"
        - "carts" 
      security:
        - oauth_2_0:
            - "manage_my_orders:{projectKey}"
            - "manage_my_orders:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyMeCartsGet
      description: |-
        Query carts
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: withTotal
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "in-store"
        - "key=storeKey"
        - "me"
        - "carts" 
      security:
        - oauth_2_0:
            - "manage_my_orders:{projectKey}"
            - "manage_my_orders:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyMeCartsPost
      description: |-
        Create Cart
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        201:
          description: |-
            201
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/in-store/key={storeKey}/me/carts/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: storeKey
        in: path
        required: true
        schema:
          type: string
      - name: ID
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "in-store"
        - "key=storeKey"
        - "me"
        - "carts"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_my_orders:{projectKey}"
            - "manage_my_orders:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyMeCartsByIDGet
      description: |-
        Get Cart by ID
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "in-store"
        - "key=storeKey"
        - "me"
        - "carts"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_my_orders:{projectKey}"
            - "manage_my_orders:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyMeCartsByIDPost
      description: |-
        Update Cart by ID
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    delete:
      tags:
        - "projectKey"
        - "in-store"
        - "key=storeKey"
        - "me"
        - "carts"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_my_orders:{projectKey}"
            - "manage_my_orders:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyMeCartsByIDDelete
      description: |-
        Delete Cart by ID
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/in-store/key={storeKey}/me/orders:
    description: |-
      An order can be created from a order, usually after a checkout process has been completed.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: storeKey
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "in-store"
        - "key=storeKey"
        - "me"
        - "orders" 
      security:
        - oauth_2_0:
            - "manage_my_orders:{projectKey}"
            - "manage_my_orders:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyMeOrdersGet
      description: |-
        Query orders
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: withTotal
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "in-store"
        - "key=storeKey"
        - "me"
        - "orders" 
      security:
        - oauth_2_0:
            - "manage_my_orders:{projectKey}"
            - "manage_my_orders:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyMeOrdersPost
      description: |-
        Create Order
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        201:
          description: |-
            201
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/in-store/key={storeKey}/me/orders/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: storeKey
        in: path
        required: true
        schema:
          type: string
      - name: ID
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "in-store"
        - "key=storeKey"
        - "me"
        - "orders"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_my_orders:{projectKey}"
            - "manage_my_orders:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyMeOrdersByIDGet
      description: |-
        Get Order by ID
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/in-store/key={storeKey}/me/shopping-lists:
    description: |-
      shopping-lists e.g. for wishlist support
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: storeKey
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "in-store"
        - "key=storeKey"
        - "me"
        - "shopping-lists" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_shopping_lists:{projectKey}"
            - "view_shopping_lists:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsGet
      description: |-
        Query shopping-lists
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: withTotal
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "in-store"
        - "key=storeKey"
        - "me"
        - "shopping-lists" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_shopping_lists:{projectKey}"
            - "manage_shopping_lists:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsPost
      description: |-
        Create ShoppingList
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        201:
          description: |-
            201
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/in-store/key={storeKey}/me/shopping-lists/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: storeKey
        in: path
        required: true
        schema:
          type: string
      - name: key
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "in-store"
        - "key=storeKey"
        - "me"
        - "shopping-lists"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_shopping_lists:{projectKey}"
            - "view_shopping_lists:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsKeyByKeyGet
      description: |-
        Gets a shopping list by Key.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "in-store"
        - "key=storeKey"
        - "me"
        - "shopping-lists"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_shopping_lists:{projectKey}"
            - "manage_shopping_lists:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsKeyByKeyPost
      description: |-
        Update a shopping list found by its Key.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    delete:
      tags:
        - "projectKey"
        - "in-store"
        - "key=storeKey"
        - "me"
        - "shopping-lists"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_shopping_lists:{projectKey}"
            - "manage_shopping_lists:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsKeyByKeyDelete
      description: |-
        Delete ShoppingList by key
      parameters:
        - name: dataErasure
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/in-store/key={storeKey}/me/shopping-lists/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: storeKey
        in: path
        required: true
        schema:
          type: string
      - name: ID
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "in-store"
        - "key=storeKey"
        - "me"
        - "shopping-lists"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_shopping_lists:{projectKey}"
            - "view_shopping_lists:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsByIDGet
      description: |-
        Gets a shopping list by ID.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "in-store"
        - "key=storeKey"
        - "me"
        - "shopping-lists"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_shopping_lists:{projectKey}"
            - "manage_shopping_lists:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsByIDPost
      description: |-
        Update ShoppingList by ID
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    delete:
      tags:
        - "projectKey"
        - "in-store"
        - "key=storeKey"
        - "me"
        - "shopping-lists"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_shopping_lists:{projectKey}"
            - "manage_shopping_lists:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsByIDDelete
      description: |-
        Delete ShoppingList by ID
      parameters:
        - name: dataErasure
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/in-store/key={storeKey}/orders:
    description: |-
      An order can be created from a cart, usually after a checkout process has been completed.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: storeKey
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "in-store"
        - "key=storeKey"
        - "orders" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_orders:{projectKey}"
            - "view_orders:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyOrdersGet
      description: |-
        Queries orders in a specific Store. The {storeKey} path parameter maps to a Store's key.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: withTotal
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "in-store"
        - "key=storeKey"
        - "orders" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_orders:{projectKey}"
            - "manage_orders:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyOrdersPost
      description: |-
        Creates an order from a Cart from a specific Store. The {storeKey} path parameter maps to a Store's key.
        When using this endpoint the orders's store field is always set to the store specified in the path parameter.
        The cart must have a shipping address set before creating an order. When using the Platform TaxMode,
        the shipping address is used for tax calculation.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        201:
          description: |-
            201
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/in-store/key={storeKey}/orders/order-number={orderNumber}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: storeKey
        in: path
        required: true
        schema:
          type: string
      - name: orderNumber
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "in-store"
        - "key=storeKey"
        - "orders"
        - "order-number=orderNumber" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_orders:{projectKey}"
            - "view_orders:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyOrdersOrderNumberByOrderNumberGet
      description: |-
        Returns an order by its order number from a specific Store.
        The {storeKey} path parameter maps to a Store's key.
        If the order exists in the commercetools project but does not have the store field,
        or the store field references a different store, this method returns a ResourceNotFound error.
        In case the orderNumber does not match the regular expression [a-zA-Z0-9_-]+,
        it should be provided in URL-encoded format.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "in-store"
        - "key=storeKey"
        - "orders"
        - "order-number=orderNumber" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_orders:{projectKey}"
            - "manage_orders:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyOrdersOrderNumberByOrderNumberPost
      description: |-
        Updates an order in the store specified by {storeKey}. The {storeKey} path parameter maps to a Store's key.
        If the order exists in the commercetools project but does not have the store field,
        or the store field references a different store, this method returns a ResourceNotFound error.
        In case the orderNumber does not match the regular expression [a-zA-Z0-9_-]+,
        it should be provided in URL-encoded format.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    delete:
      tags:
        - "projectKey"
        - "in-store"
        - "key=storeKey"
        - "orders"
        - "order-number=orderNumber" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_orders:{projectKey}"
            - "manage_orders:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyOrdersOrderNumberByOrderNumberDelete
      description: |-
        Delete Order by orderNumber
      parameters:
        - name: dataErasure
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/in-store/key={storeKey}/orders/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: storeKey
        in: path
        required: true
        schema:
          type: string
      - name: ID
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "in-store"
        - "key=storeKey"
        - "orders"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_orders:{projectKey}"
            - "view_orders:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyOrdersByIDGet
      description: |-
        Returns an order by its ID from a specific Store. The {storeKey} path parameter maps to a Store's key.
        If the order exists in the commercetools project but does not have the store field,
        or the store field references a different store, this method returns a ResourceNotFound error.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "in-store"
        - "key=storeKey"
        - "orders"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_orders:{projectKey}"
            - "manage_orders:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyOrdersByIDPost
      description: |-
        Updates an order in the store specified by {storeKey}. The {storeKey} path parameter maps to a Store's key.
        If the order exists in the commercetools project but does not have the store field,
        or the store field references a different store, this method returns a ResourceNotFound error.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    delete:
      tags:
        - "projectKey"
        - "in-store"
        - "key=storeKey"
        - "orders"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_orders:{projectKey}"
            - "manage_orders:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyOrdersByIDDelete
      description: |-
        Delete Order by ID
      parameters:
        - name: dataErasure
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/in-store/key={storeKey}/shipping-methods:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: storeKey
        in: path
        required: true
        schema:
          type: string
  /{projectKey}/in-store/key={storeKey}/shipping-methods/matching-cart:
    description: |-
      Get ShippingMethods for a cart in a store
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: storeKey
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "in-store"
        - "key=storeKey"
        - "shipping-methods"
        - "matching-cart" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_orders:{projectKey}"
            - "manage_customers:{projectKey}:{storeKey}"
            - "view_shipping_methods:{projectKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyShippingMethodsMatchingCartGet
      parameters:
        - name: cartId
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/in-store/key={storeKey}/shopping-lists:
    description: |-
      shopping-lists e.g. for wishlist support
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: storeKey
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "in-store"
        - "key=storeKey"
        - "shopping-lists" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_shopping_lists:{projectKey}"
            - "view_shopping_lists:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyShoppingListsGet
      description: |-
        Query shopping-lists
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: withTotal
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "in-store"
        - "key=storeKey"
        - "shopping-lists" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_shopping_lists:{projectKey}"
            - "manage_shopping_lists:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyShoppingListsPost
      description: |-
        Create ShoppingList
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        201:
          description: |-
            201
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/in-store/key={storeKey}/shopping-lists/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: storeKey
        in: path
        required: true
        schema:
          type: string
      - name: key
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "in-store"
        - "key=storeKey"
        - "shopping-lists"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_shopping_lists:{projectKey}"
            - "view_shopping_lists:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyShoppingListsKeyByKeyGet
      description: |-
        Gets a shopping list by Key.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "in-store"
        - "key=storeKey"
        - "shopping-lists"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_shopping_lists:{projectKey}"
            - "manage_shopping_lists:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyShoppingListsKeyByKeyPost
      description: |-
        Update a shopping list found by its Key.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    delete:
      tags:
        - "projectKey"
        - "in-store"
        - "key=storeKey"
        - "shopping-lists"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_shopping_lists:{projectKey}"
            - "manage_shopping_lists:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyShoppingListsKeyByKeyDelete
      description: |-
        Delete ShoppingList by key
      parameters:
        - name: dataErasure
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/in-store/key={storeKey}/shopping-lists/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: storeKey
        in: path
        required: true
        schema:
          type: string
      - name: ID
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "in-store"
        - "key=storeKey"
        - "shopping-lists"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_shopping_lists:{projectKey}"
            - "view_shopping_lists:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyShoppingListsByIDGet
      description: |-
        Gets a shopping list by ID.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "in-store"
        - "key=storeKey"
        - "shopping-lists"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_shopping_lists:{projectKey}"
            - "manage_shopping_lists:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyShoppingListsByIDPost
      description: |-
        Update ShoppingList by ID
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    delete:
      tags:
        - "projectKey"
        - "in-store"
        - "key=storeKey"
        - "shopping-lists"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_shopping_lists:{projectKey}"
            - "manage_shopping_lists:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyShoppingListsByIDDelete
      description: |-
        Delete ShoppingList by ID
      parameters:
        - name: dataErasure
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/inventory:
    description: |-
      Inventory allows you to track stock quantities.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "inventory" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_products:{projectKey}"
      operationId: ByProjectKeyInventoryGet
      description: |-
        Query inventory
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: withTotal
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "inventory" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_products:{projectKey}"
      operationId: ByProjectKeyInventoryPost
      description: |-
        Create InventoryEntry
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        201:
          description: |-
            201
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/inventory/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: ID
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "inventory"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_products:{projectKey}"
      operationId: ByProjectKeyInventoryByIDGet
      description: |-
        Get InventoryEntry by ID
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "inventory"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_products:{projectKey}"
      operationId: ByProjectKeyInventoryByIDPost
      description: |-
        Update InventoryEntry by ID
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    delete:
      tags:
        - "projectKey"
        - "inventory"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_products:{projectKey}"
      operationId: ByProjectKeyInventoryByIDDelete
      description: |-
        Delete InventoryEntry by ID
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/login:
    description: |-
      Retrieves the authenticated customer.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
    post:
      tags:
        - "projectKey"
        - "login" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_customers:{projectKey}"
      operationId: ByProjectKeyLoginPost
      description: |-
        Authenticate Customer (Sign In). Retrieves the authenticated
        customer (a customer that matches the given email/password pair).
        If used with an access token for Anonymous Sessions,
        all orders and carts belonging to the anonymousId will be assigned to the newly created customer.
        If a cart is is returned as part of the CustomerSignInResult,
        it has been recalculated (It will have up-to-date prices, taxes and discounts,
        and invalid line items have been removed.).
      requestBody:
        content:
          application/json: {}
      responses:
        201:
          description: |-
            201
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/me:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "me" 
      security:
        - oauth_2_0:
            - "manage_my_profile:{projectKey}"
      operationId: ByProjectKeyMeGet
      parameters:
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: withTotal
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "me" 
      security:
        - oauth_2_0:
            - "manage_my_profile:{projectKey}"
      operationId: ByProjectKeyMePost
      description: |-
        Update my customer
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    delete:
      tags:
        - "projectKey"
        - "me" 
      security:
        - oauth_2_0:
            - "manage_my_profile:{projectKey}"
      operationId: ByProjectKeyMeDelete
      description: |-
        Delete my Customer
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/me/active-cart:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "me"
        - "active-cart" 
      security:
        - oauth_2_0:
            - "manage_my_orders:{projectKey}"
      operationId: ByProjectKeyMeActiveCartGet
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/me/carts:
    description: |-
      A shopping cart holds product variants and can be ordered.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "me"
        - "carts" 
      security:
        - oauth_2_0:
            - "manage_my_orders:{projectKey}"
      operationId: ByProjectKeyMeCartsGet
      description: |-
        Query carts
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: withTotal
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "me"
        - "carts" 
      security:
        - oauth_2_0:
            - "manage_my_orders:{projectKey}"
      operationId: ByProjectKeyMeCartsPost
      description: |-
        Create Cart
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        201:
          description: |-
            201
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/me/carts/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: key
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "me"
        - "carts"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_my_orders:{projectKey}"
      operationId: ByProjectKeyMeCartsKeyByKeyGet
      description: |-
        Get Cart by key
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "me"
        - "carts"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_my_orders:{projectKey}"
      operationId: ByProjectKeyMeCartsKeyByKeyPost
      description: |-
        Update Cart by key
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    delete:
      tags:
        - "projectKey"
        - "me"
        - "carts"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_my_orders:{projectKey}"
      operationId: ByProjectKeyMeCartsKeyByKeyDelete
      description: |-
        Delete Cart by key
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/me/carts/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: ID
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "me"
        - "carts"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_my_orders:{projectKey}"
      operationId: ByProjectKeyMeCartsByIDGet
      description: |-
        Get Cart by ID
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "me"
        - "carts"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_my_orders:{projectKey}"
      operationId: ByProjectKeyMeCartsByIDPost
      description: |-
        Update Cart by ID
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    delete:
      tags:
        - "projectKey"
        - "me"
        - "carts"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_my_orders:{projectKey}"
      operationId: ByProjectKeyMeCartsByIDDelete
      description: |-
        Delete Cart by ID
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/me/email/confirm:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
    post:
      tags:
        - "projectKey"
        - "me"
        - "email"
        - "confirm" 
      security:
        - oauth_2_0:
            - "manage_my_profile:{projectKey}"
      operationId: ByProjectKeyMeEmailConfirmPost
      responses:
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/me/login:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
    post:
      tags:
        - "projectKey"
        - "me"
        - "login" 
      security:
        - oauth_2_0:
            - "manage_my_profile:{projectKey}"
      operationId: ByProjectKeyMeLoginPost
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/me/orders:
    description: |-
      An order can be created from a cart, usually after a checkout process has been completed.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "me"
        - "orders" 
      security:
        - oauth_2_0:
            - "manage_my_orders:{projectKey}"
      operationId: ByProjectKeyMeOrdersGet
      description: |-
        Query orders
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: withTotal
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "me"
        - "orders" 
      security:
        - oauth_2_0:
            - "manage_my_orders:{projectKey}"
      operationId: ByProjectKeyMeOrdersPost
      description: |-
        Create Order
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        201:
          description: |-
            201
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/me/orders/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: ID
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "me"
        - "orders"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_my_orders:{projectKey}"
      operationId: ByProjectKeyMeOrdersByIDGet
      description: |-
        Get Order by ID
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/me/password:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
    post:
      tags:
        - "projectKey"
        - "me"
        - "password" 
      security:
        - oauth_2_0:
            - "manage_my_profile:{projectKey}"
      operationId: ByProjectKeyMePasswordPost
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/me/password/reset:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
    post:
      tags:
        - "projectKey"
        - "me"
        - "password"
        - "reset" 
      security:
        - oauth_2_0:
            - "manage_my_profile:{projectKey}"
      operationId: ByProjectKeyMePasswordResetPost
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/me/payments:
    description: |-
      The My Payments endpoint creates and provides access to payments scoped to a specific user.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "me"
        - "payments" 
      security:
        - oauth_2_0:
            - "manage_my_payments:{projectKey}"
      operationId: ByProjectKeyMePaymentsGet
      description: |-
        Query payments
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: withTotal
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "me"
        - "payments" 
      security:
        - oauth_2_0:
            - "manage_my_payments:{projectKey}"
      operationId: ByProjectKeyMePaymentsPost
      description: |-
        Create MyPayment
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        201:
          description: |-
            201
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/me/payments/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: key
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "me"
        - "payments"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_my_payments:{projectKey}"
      operationId: ByProjectKeyMePaymentsKeyByKeyGet
      description: |-
        Get MyPayment by key
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "me"
        - "payments"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_my_payments:{projectKey}"
      operationId: ByProjectKeyMePaymentsKeyByKeyPost
      description: |-
        Update MyPayment by key
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    delete:
      tags:
        - "projectKey"
        - "me"
        - "payments"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_my_payments:{projectKey}"
      operationId: ByProjectKeyMePaymentsKeyByKeyDelete
      description: |-
        Delete MyPayment by key
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/me/payments/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: ID
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "me"
        - "payments"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_my_payments:{projectKey}"
      operationId: ByProjectKeyMePaymentsByIDGet
      description: |-
        Get MyPayment by ID
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "me"
        - "payments"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_my_payments:{projectKey}"
      operationId: ByProjectKeyMePaymentsByIDPost
      description: |-
        Update MyPayment by ID
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    delete:
      tags:
        - "projectKey"
        - "me"
        - "payments"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_my_payments:{projectKey}"
      operationId: ByProjectKeyMePaymentsByIDDelete
      description: |-
        Delete MyPayment by ID
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/me/shopping-lists:
    description: |-
      The My Shopping Lists endpoint creates and provides access to shopping lists scoped to a specific user.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "me"
        - "shopping-lists" 
      security:
        - oauth_2_0:
            - "manage_my_shopping_lists:{projectKey}"
      operationId: ByProjectKeyMeShoppingListsGet
      description: |-
        Query shopping-lists
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: withTotal
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "me"
        - "shopping-lists" 
      security:
        - oauth_2_0:
            - "manage_my_shopping_lists:{projectKey}"
      operationId: ByProjectKeyMeShoppingListsPost
      description: |-
        Create ShoppingList
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        201:
          description: |-
            201
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/me/shopping-lists/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: key
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "me"
        - "shopping-lists"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_my_shopping_lists:{projectKey}"
      operationId: ByProjectKeyMeShoppingListsKeyByKeyGet
      description: |-
        Get ShoppingList by key
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "me"
        - "shopping-lists"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_my_shopping_lists:{projectKey}"
      operationId: ByProjectKeyMeShoppingListsKeyByKeyPost
      description: |-
        Update ShoppingList by key
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    delete:
      tags:
        - "projectKey"
        - "me"
        - "shopping-lists"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_my_shopping_lists:{projectKey}"
      operationId: ByProjectKeyMeShoppingListsKeyByKeyDelete
      description: |-
        Delete ShoppingList by key
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/me/shopping-lists/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: ID
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "me"
        - "shopping-lists"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_my_shopping_lists:{projectKey}"
      operationId: ByProjectKeyMeShoppingListsByIDGet
      description: |-
        Get ShoppingList by ID
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "me"
        - "shopping-lists"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_my_shopping_lists:{projectKey}"
      operationId: ByProjectKeyMeShoppingListsByIDPost
      description: |-
        Update ShoppingList by ID
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    delete:
      tags:
        - "projectKey"
        - "me"
        - "shopping-lists"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_my_shopping_lists:{projectKey}"
      operationId: ByProjectKeyMeShoppingListsByIDDelete
      description: |-
        Delete ShoppingList by ID
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/me/signup:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
    post:
      tags:
        - "projectKey"
        - "me"
        - "signup" 
      security:
        - oauth_2_0:
            - "manage_my_profile:{projectKey}"
      operationId: ByProjectKeyMeSignupPost
      requestBody:
        content:
          application/json: {}
      responses:
        201:
          description: |-
            201
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/messages:
    description: |-
      A message represents a change or an action performed on a resource (like an Order or a Product).
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "messages" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_orders:{projectKey}"
      operationId: ByProjectKeyMessagesGet
      description: |-
        Query messages
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: withTotal
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/messages/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: ID
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "messages"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_orders:{projectKey}"
      operationId: ByProjectKeyMessagesByIDGet
      description: |-
        Get Message by ID
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/orders:
    description: |-
      An order can be created from a order, usually after a checkout process has been completed.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "orders" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_orders:{projectKey}"
      operationId: ByProjectKeyOrdersGet
      description: |-
        Query orders
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: withTotal
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "orders" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_orders:{projectKey}"
      operationId: ByProjectKeyOrdersPost
      description: |-
        Creates an order from a Cart.
        The cart must have a shipping address set before creating an order.
        When using the Platform TaxMode, the shipping address is used for tax calculation.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        201:
          description: |-
            201
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/orders/edits:
    description: |-
      OrderEdit are containers for financial changes after an Order has been placed.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "orders"
        - "edits" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_order_edits:{projectKey}"
      operationId: ByProjectKeyOrdersEditsGet
      description: |-
        Query edits
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: withTotal
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "orders"
        - "edits" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_order_edits:{projectKey}"
      operationId: ByProjectKeyOrdersEditsPost
      description: |-
        Create OrderEdit
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        201:
          description: |-
            201
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/orders/edits/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: key
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "orders"
        - "edits"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_order_edits:{projectKey}"
      operationId: ByProjectKeyOrdersEditsKeyByKeyGet
      description: |-
        Get OrderEdit by key
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "orders"
        - "edits"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_order_edits:{projectKey}"
      operationId: ByProjectKeyOrdersEditsKeyByKeyPost
      description: |-
        Update OrderEdit by key
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    delete:
      tags:
        - "projectKey"
        - "orders"
        - "edits"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_order_edits:{projectKey}"
      operationId: ByProjectKeyOrdersEditsKeyByKeyDelete
      description: |-
        Delete OrderEdit by key
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/orders/edits/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: ID
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "orders"
        - "edits"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_order_edits:{projectKey}"
      operationId: ByProjectKeyOrdersEditsByIDGet
      description: |-
        Get OrderEdit by ID
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "orders"
        - "edits"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_order_edits:{projectKey}"
      operationId: ByProjectKeyOrdersEditsByIDPost
      description: |-
        Update OrderEdit by ID
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    delete:
      tags:
        - "projectKey"
        - "orders"
        - "edits"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_order_edits:{projectKey}"
      operationId: ByProjectKeyOrdersEditsByIDDelete
      description: |-
        Delete OrderEdit by ID
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/orders/edits/{ID}/apply:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: ID
        in: path
        required: true
        schema:
          type: string
    post:
      tags:
        - "projectKey"
        - "orders"
        - "edits"
        - "ID"
        - "apply" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_order_edits:{projectKey}"
      operationId: ByProjectKeyOrdersEditsByIDApplyPost
      requestBody:
        content:
          application/json: {}
      responses:
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/orders/import:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
    post:
      tags:
        - "projectKey"
        - "orders"
        - "import" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_orders:{projectKey}"
      operationId: ByProjectKeyOrdersImportPost
      description: |-
        Create an Order by Import
      requestBody:
        content:
          application/json: {}
      responses:
        201:
          description: |-
            201
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/orders/order-number={orderNumber}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: orderNumber
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "orders"
        - "order-number=orderNumber" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_orders:{projectKey}"
      operationId: ByProjectKeyOrdersOrderNumberByOrderNumberGet
      description: |-
        In case the orderNumber does not match the regular expression [a-zA-Z0-9_-]+,
        it should be provided in URL-encoded format.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "orders"
        - "order-number=orderNumber" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_orders:{projectKey}"
      operationId: ByProjectKeyOrdersOrderNumberByOrderNumberPost
      description: |-
        Update Order by orderNumber
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    delete:
      tags:
        - "projectKey"
        - "orders"
        - "order-number=orderNumber" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_orders:{projectKey}"
      operationId: ByProjectKeyOrdersOrderNumberByOrderNumberDelete
      description: |-
        Delete Order by orderNumber
      parameters:
        - name: dataErasure
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/orders/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: ID
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "orders"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_orders:{projectKey}"
      operationId: ByProjectKeyOrdersByIDGet
      description: |-
        Get Order by ID
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "orders"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_orders:{projectKey}"
      operationId: ByProjectKeyOrdersByIDPost
      description: |-
        Update Order by ID
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    delete:
      tags:
        - "projectKey"
        - "orders"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_orders:{projectKey}"
      operationId: ByProjectKeyOrdersByIDDelete
      description: |-
        Delete Order by ID
      parameters:
        - name: dataErasure
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/payments:
    description: |-
      Payments hold information about the current state of receiving and/or refunding money
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "payments" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_payments:{projectKey}"
      operationId: ByProjectKeyPaymentsGet
      description: |-
        Query payments
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: withTotal
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "payments" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_payments:{projectKey}"
      operationId: ByProjectKeyPaymentsPost
      description: |-
        To create a payment object a payment draft object has to be given with the request.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        201:
          description: |-
            201
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/payments/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: key
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "payments"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_payments:{projectKey}"
      operationId: ByProjectKeyPaymentsKeyByKeyGet
      description: |-
        Get Payment by key
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "payments"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_payments:{projectKey}"
      operationId: ByProjectKeyPaymentsKeyByKeyPost
      description: |-
        Update Payment by key
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    delete:
      tags:
        - "projectKey"
        - "payments"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_payments:{projectKey}"
      operationId: ByProjectKeyPaymentsKeyByKeyDelete
      description: |-
        Delete Payment by key
      parameters:
        - name: dataErasure
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/payments/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: ID
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "payments"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_payments:{projectKey}"
      operationId: ByProjectKeyPaymentsByIDGet
      description: |-
        Get Payment by ID
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "payments"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_payments:{projectKey}"
      operationId: ByProjectKeyPaymentsByIDPost
      description: |-
        Update Payment by ID
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    delete:
      tags:
        - "projectKey"
        - "payments"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_payments:{projectKey}"
      operationId: ByProjectKeyPaymentsByIDDelete
      description: |-
        Delete Payment by ID
      parameters:
        - name: dataErasure
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/product-discounts:
    description: |-
      Product discounts are used to change certain product prices.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "product-discounts" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_products:{projectKey}"
      operationId: ByProjectKeyProductDiscountsGet
      description: |-
        Query product-discounts
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: withTotal
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "product-discounts" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_products:{projectKey}"
      operationId: ByProjectKeyProductDiscountsPost
      description: |-
        Create ProductDiscount
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        201:
          description: |-
            201
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/product-discounts/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: key
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "product-discounts"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_products:{projectKey}"
      operationId: ByProjectKeyProductDiscountsKeyByKeyGet
      description: |-
        Get ProductDiscount by key
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "product-discounts"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_products:{projectKey}"
      operationId: ByProjectKeyProductDiscountsKeyByKeyPost
      description: |-
        Update ProductDiscount by key
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    delete:
      tags:
        - "projectKey"
        - "product-discounts"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_products:{projectKey}"
      operationId: ByProjectKeyProductDiscountsKeyByKeyDelete
      description: |-
        Delete ProductDiscount by key
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/product-discounts/matching:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
    post:
      tags:
        - "projectKey"
        - "product-discounts"
        - "matching" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_products:{projectKey}"
      operationId: ByProjectKeyProductDiscountsMatchingPost
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/product-discounts/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: ID
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "product-discounts"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_products:{projectKey}"
      operationId: ByProjectKeyProductDiscountsByIDGet
      description: |-
        Get ProductDiscount by ID
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "product-discounts"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_products:{projectKey}"
      operationId: ByProjectKeyProductDiscountsByIDPost
      description: |-
        Update ProductDiscount by ID
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    delete:
      tags:
        - "projectKey"
        - "product-discounts"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_products:{projectKey}"
      operationId: ByProjectKeyProductDiscountsByIDDelete
      description: |-
        Delete ProductDiscount by ID
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/product-projections:
    description: |-
      A projected representation of a product shows the product with its current or staged data. The current or staged
      representation of a product in a catalog is called a product projection.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "product-projections" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_products:{projectKey}"
            - "view_published_products:{projectKey}"
      operationId: ByProjectKeyProductProjectionsGet
      description: |-
        You can use the product projections query endpoint to get the current or staged representations of Products.
        When used with an API client that has the view_published_products:{projectKey} scope,
        this endpoint only returns published (current) product projections.
      parameters:
        - name: staged
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: priceCurrency
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: priceCountry
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: priceCustomerGroup
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: priceChannel
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: localeProjection
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: storeProjection
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: withTotal
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/product-projections/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: key
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "product-projections"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_products:{projectKey}"
            - "view_published_products:{projectKey}"
      operationId: ByProjectKeyProductProjectionsKeyByKeyGet
      description: |-
        Gets the current or staged representation of a product found by Key.
        When used with an API client that has the view_published_products:{projectKey} scope,
        this endpoint only returns published (current) product projections.
      parameters:
        - name: staged
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: priceCurrency
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: priceCountry
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: priceCustomerGroup
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: priceChannel
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: localeProjection
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: storeProjection
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/product-projections/search:
    description: |-
      This endpoint provides high performance search queries over ProductProjections. The query result contains the
      ProductProjections for which at least one ProductVariant matches the search query. This means that variants can
      be included in the result also for which the search query does not match. To determine which ProductVariants match
      the search query, the returned ProductProjections include the additional field isMatchingVariant.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
    post:
      tags:
        - "projectKey"
        - "product-projections"
        - "search" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_products:{projectKey}"
            - "view_published_products:{projectKey}"
      operationId: ByProjectKeyProductProjectionsSearchPost
      description: |-
        Search Product Projection
      requestBody:
        content:
          application/x-www-form-urlencoded: {}
      responses:
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    get:
      tags:
        - "projectKey"
        - "product-projections"
        - "search" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_products:{projectKey}"
            - "view_published_products:{projectKey}"
      operationId: ByProjectKeyProductProjectionsSearchGet
      description: |-
        Search Product Projection
      parameters:
        - name: fuzzy
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: fuzzyLevel
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: markMatchingVariants
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: staged
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: filter
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: filter.facets
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: filter.query
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: facet
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: /text.[a-z]{2}(-[A-Z]{2})?/
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: withTotal
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: priceCurrency
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: priceCountry
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: priceCustomerGroup
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: priceChannel
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: localeProjection
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: storeProjection
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/product-projections/suggest:
    description: |-
      The source of data for suggestions is the searchKeyword field in a product
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "product-projections"
        - "suggest" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_products:{projectKey}"
            - "view_published_products:{projectKey}"
      operationId: ByProjectKeyProductProjectionsSuggestGet
      parameters:
        - name: fuzzy
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: staged
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: /searchKeywords.[a-z]{2}(-[A-Z]{2})?/
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: withTotal
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/product-projections/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: ID
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "product-projections"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_products:{projectKey}"
            - "view_published_products:{projectKey}"
      operationId: ByProjectKeyProductProjectionsByIDGet
      description: |-
        Gets the current or staged representation of a product in a catalog by ID.
        When used with an API client that has the view_published_products:{projectKey} scope,
        this endpoint only returns published (current) product projections.
      parameters:
        - name: staged
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: priceCurrency
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: priceCountry
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: priceCustomerGroup
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: priceChannel
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: localeProjection
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: storeProjection
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/product-types:
    description: |-
      Product Types are used to describe common characteristics, most importantly common custom attributes,
      of many concrete products.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "product-types" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_products:{projectKey}"
      operationId: ByProjectKeyProductTypesGet
      description: |-
        Query product-types
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: withTotal
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "product-types" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_products:{projectKey}"
      operationId: ByProjectKeyProductTypesPost
      description: |-
        Create ProductType
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        201:
          description: |-
            201
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/product-types/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: key
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "product-types"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_products:{projectKey}"
      operationId: ByProjectKeyProductTypesKeyByKeyGet
      description: |-
        Get ProductType by key
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "product-types"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_products:{projectKey}"
      operationId: ByProjectKeyProductTypesKeyByKeyPost
      description: |-
        Update ProductType by key
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    delete:
      tags:
        - "projectKey"
        - "product-types"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_products:{projectKey}"
      operationId: ByProjectKeyProductTypesKeyByKeyDelete
      description: |-
        Delete ProductType by key
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/product-types/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: ID
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "product-types"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_products:{projectKey}"
      operationId: ByProjectKeyProductTypesByIDGet
      description: |-
        Get ProductType by ID
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "product-types"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_products:{projectKey}"
      operationId: ByProjectKeyProductTypesByIDPost
      description: |-
        Update ProductType by ID
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    delete:
      tags:
        - "projectKey"
        - "product-types"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_products:{projectKey}"
      operationId: ByProjectKeyProductTypesByIDDelete
      description: |-
        Delete ProductType by ID
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/products:
    description: |-
      Products are the sellable goods in an e-commerce project on CTP. This document explains some design concepts
      of products on CTP and describes the available HTTP APIs for working with them.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "products" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_products:{projectKey}"
      operationId: ByProjectKeyProductsGet
      description: |-
        You can use the query endpoint to get the full representations of products.
        REMARK: We suggest to use the performance optimized search endpoint which has a bunch functionalities,
        the query API lacks like sorting on custom attributes, etc.
      parameters:
        - name: priceCurrency
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: priceCountry
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: priceCustomerGroup
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: priceChannel
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: localeProjection
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: storeProjection
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: withTotal
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "products" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_products:{projectKey}"
      operationId: ByProjectKeyProductsPost
      description: |-
        To create a new product, send a representation that is going to become the initial staged representation
        of the new product in the master catalog. If price selection query parameters are provided,
        the selected prices will be added to the response.
      parameters:
        - name: priceCurrency
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: priceCountry
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: priceCustomerGroup
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: priceChannel
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: localeProjection
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: storeProjection
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        201:
          description: |-
            201
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/products/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: key
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "products"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_products:{projectKey}"
      operationId: ByProjectKeyProductsKeyByKeyGet
      description: |-
        Gets the full representation of a product by Key.
      parameters:
        - name: priceCurrency
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: priceCountry
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: priceCustomerGroup
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: priceChannel
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: localeProjection
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: storeProjection
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "products"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_products:{projectKey}"
      operationId: ByProjectKeyProductsKeyByKeyPost
      description: |-
        Update Product by key
      parameters:
        - name: priceCurrency
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: priceCountry
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: priceCustomerGroup
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: priceChannel
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: localeProjection
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: storeProjection
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    delete:
      tags:
        - "projectKey"
        - "products"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_products:{projectKey}"
      operationId: ByProjectKeyProductsKeyByKeyDelete
      description: |-
        Delete Product by key
      parameters:
        - name: priceCurrency
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: priceCountry
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: priceCustomerGroup
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: priceChannel
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: localeProjection
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: storeProjection
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/products/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: ID
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "products"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_products:{projectKey}"
      operationId: ByProjectKeyProductsByIDGet
      description: |-
        Gets the full representation of a product by ID.
      parameters:
        - name: priceCurrency
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: priceCountry
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: priceCustomerGroup
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: priceChannel
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: localeProjection
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: storeProjection
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "products"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_products:{projectKey}"
      operationId: ByProjectKeyProductsByIDPost
      description: |-
        Update Product by ID
      parameters:
        - name: priceCurrency
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: priceCountry
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: priceCustomerGroup
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: priceChannel
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: localeProjection
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: storeProjection
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    delete:
      tags:
        - "projectKey"
        - "products"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_products:{projectKey}"
      operationId: ByProjectKeyProductsByIDDelete
      description: |-
        Delete Product by ID
      parameters:
        - name: priceCurrency
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: priceCountry
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: priceCustomerGroup
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: priceChannel
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: localeProjection
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: storeProjection
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/products/{ID}/images:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: ID
        in: path
        required: true
        schema:
          type: string
    post:
      tags:
        - "projectKey"
        - "products"
        - "ID"
        - "images" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_products:{projectKey}"
      operationId: ByProjectKeyProductsByIDImagesPost
      description: |-
        Uploads a binary image file to a given product variant. The supported image formats are JPEG, PNG and GIF.
      parameters:
        - name: filename
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: variant
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: sku
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: staged
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
  /{projectKey}/reviews:
    description: |-
      Reviews are used to evaluate products and channels.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "reviews" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_products:{projectKey}"
      operationId: ByProjectKeyReviewsGet
      description: |-
        Query reviews
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: withTotal
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "reviews" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_products:{projectKey}"
      operationId: ByProjectKeyReviewsPost
      description: |-
        Create Review
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        201:
          description: |-
            201
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/reviews/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: key
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "reviews"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_products:{projectKey}"
      operationId: ByProjectKeyReviewsKeyByKeyGet
      description: |-
        Get Review by key
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "reviews"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_products:{projectKey}"
      operationId: ByProjectKeyReviewsKeyByKeyPost
      description: |-
        Update Review by key
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    delete:
      tags:
        - "projectKey"
        - "reviews"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_products:{projectKey}"
      operationId: ByProjectKeyReviewsKeyByKeyDelete
      description: |-
        Delete Review by key
      parameters:
        - name: dataErasure
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/reviews/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: ID
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "reviews"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_products:{projectKey}"
      operationId: ByProjectKeyReviewsByIDGet
      description: |-
        Get Review by ID
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "reviews"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_products:{projectKey}"
      operationId: ByProjectKeyReviewsByIDPost
      description: |-
        Update Review by ID
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    delete:
      tags:
        - "projectKey"
        - "reviews"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_products:{projectKey}"
      operationId: ByProjectKeyReviewsByIDDelete
      description: |-
        Delete Review by ID
      parameters:
        - name: dataErasure
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/shipping-methods:
    description: |-
      Shipping Methods define where orders can be shipped and what the costs are.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "shipping-methods" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_orders:{projectKey}"
            - "view_shipping_methods:{projectKey}"
      operationId: ByProjectKeyShippingMethodsGet
      description: |-
        Query shipping-methods
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: withTotal
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "shipping-methods" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_orders:{projectKey}"
            - "manage_shipping_methods:{projectKey}"
      operationId: ByProjectKeyShippingMethodsPost
      description: |-
        Create ShippingMethod
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        201:
          description: |-
            201
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/shipping-methods/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: key
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "shipping-methods"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_orders:{projectKey}"
            - "view_shipping_methods:{projectKey}"
      operationId: ByProjectKeyShippingMethodsKeyByKeyGet
      description: |-
        Get ShippingMethod by key
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "shipping-methods"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_orders:{projectKey}"
            - "manage_shipping_methods:{projectKey}"
      operationId: ByProjectKeyShippingMethodsKeyByKeyPost
      description: |-
        Update ShippingMethod by key
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    delete:
      tags:
        - "projectKey"
        - "shipping-methods"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_orders:{projectKey}"
            - "manage_shipping_methods:{projectKey}"
      operationId: ByProjectKeyShippingMethodsKeyByKeyDelete
      description: |-
        Delete ShippingMethod by key
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/shipping-methods/matching-cart:
    description: |-
      Get ShippingMethods for a cart
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "shipping-methods"
        - "matching-cart" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_orders:{projectKey}"
            - "view_shipping_methods:{projectKey}"
      operationId: ByProjectKeyShippingMethodsMatchingCartGet
      parameters:
        - name: cartId
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/shipping-methods/matching-location:
    description: |-
      Get ShippingMethods for a location
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "shipping-methods"
        - "matching-location" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_orders:{projectKey}"
            - "view_shipping_methods:{projectKey}"
      operationId: ByProjectKeyShippingMethodsMatchingLocationGet
      parameters:
        - name: country
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: state
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: currency
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/shipping-methods/matching-orderedit:
    description: |-
      Get ShippingMethods for an order edit
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "shipping-methods"
        - "matching-orderedit" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_orders:{projectKey}"
            - "view_shipping_methods:{projectKey}"
      operationId: ByProjectKeyShippingMethodsMatchingOrdereditGet
      parameters:
        - name: orderEditId
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: country
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: state
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/shipping-methods/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: ID
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "shipping-methods"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_orders:{projectKey}"
            - "view_shipping_methods:{projectKey}"
      operationId: ByProjectKeyShippingMethodsByIDGet
      description: |-
        Get ShippingMethod by ID
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "shipping-methods"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_orders:{projectKey}"
            - "manage_shipping_methods:{projectKey}"
      operationId: ByProjectKeyShippingMethodsByIDPost
      description: |-
        Update ShippingMethod by ID
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    delete:
      tags:
        - "projectKey"
        - "shipping-methods"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_orders:{projectKey}"
            - "manage_shipping_methods:{projectKey}"
      operationId: ByProjectKeyShippingMethodsByIDDelete
      description: |-
        Delete ShippingMethod by ID
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/shopping-lists:
    description: |-
      shopping-lists e.g. for wishlist support
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "shopping-lists" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_shopping_lists:{projectKey}"
      operationId: ByProjectKeyShoppingListsGet
      description: |-
        Query shopping-lists
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: withTotal
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "shopping-lists" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_shopping_lists:{projectKey}"
      operationId: ByProjectKeyShoppingListsPost
      description: |-
        Create ShoppingList
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        201:
          description: |-
            201
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/shopping-lists/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: key
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "shopping-lists"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_shopping_lists:{projectKey}"
      operationId: ByProjectKeyShoppingListsKeyByKeyGet
      description: |-
        Gets a shopping list by Key.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "shopping-lists"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_shopping_lists:{projectKey}"
      operationId: ByProjectKeyShoppingListsKeyByKeyPost
      description: |-
        Update a shopping list found by its Key.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    delete:
      tags:
        - "projectKey"
        - "shopping-lists"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_shopping_lists:{projectKey}"
      operationId: ByProjectKeyShoppingListsKeyByKeyDelete
      description: |-
        Delete ShoppingList by key
      parameters:
        - name: dataErasure
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/shopping-lists/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: ID
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "shopping-lists"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_shopping_lists:{projectKey}"
      operationId: ByProjectKeyShoppingListsByIDGet
      description: |-
        Gets a shopping list by ID.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "shopping-lists"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_shopping_lists:{projectKey}"
      operationId: ByProjectKeyShoppingListsByIDPost
      description: |-
        Update ShoppingList by ID
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    delete:
      tags:
        - "projectKey"
        - "shopping-lists"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_shopping_lists:{projectKey}"
      operationId: ByProjectKeyShoppingListsByIDDelete
      description: |-
        Delete ShoppingList by ID
      parameters:
        - name: dataErasure
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/states:
    description: |-
      The commercetools platform allows you to model states of certain objects, such as orders, line items, products,
      reviews, and payments in order to define finite state machines reflecting the business logic you'd like to
      implement.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "states" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_states:{projectKey}"
      operationId: ByProjectKeyStatesGet
      description: |-
        Query states
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: withTotal
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "states" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_states:{projectKey}"
      operationId: ByProjectKeyStatesPost
      description: |-
        Create State
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        201:
          description: |-
            201
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/states/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: key
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "states"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_states:{projectKey}"
      operationId: ByProjectKeyStatesKeyByKeyGet
      description: |-
        Get State by key
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "states"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_states:{projectKey}"
      operationId: ByProjectKeyStatesKeyByKeyPost
      description: |-
        Update State by key
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    delete:
      tags:
        - "projectKey"
        - "states"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_states:{projectKey}"
      operationId: ByProjectKeyStatesKeyByKeyDelete
      description: |-
        Delete State by key
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/states/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: ID
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "states"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_states:{projectKey}"
      operationId: ByProjectKeyStatesByIDGet
      description: |-
        Get State by ID
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "states"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_states:{projectKey}"
      operationId: ByProjectKeyStatesByIDPost
      description: |-
        Update State by ID
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    delete:
      tags:
        - "projectKey"
        - "states"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_states:{projectKey}"
      operationId: ByProjectKeyStatesByIDDelete
      description: |-
        Delete State by ID
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/stores:
    description: |-
      Stores let you model the context your customers shop in.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "stores" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_stores:{projectKey}"
      operationId: ByProjectKeyStoresGet
      description: |-
        Query stores
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: withTotal
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "stores" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_stores:{projectKey}"
      operationId: ByProjectKeyStoresPost
      description: |-
        Create Store
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        201:
          description: |-
            201
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/stores/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: key
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "stores"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_stores:{projectKey}"
      operationId: ByProjectKeyStoresKeyByKeyGet
      description: |-
        Get Store by key
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "stores"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_stores:{projectKey}"
      operationId: ByProjectKeyStoresKeyByKeyPost
      description: |-
        Update Store by key
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    delete:
      tags:
        - "projectKey"
        - "stores"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_stores:{projectKey}"
      operationId: ByProjectKeyStoresKeyByKeyDelete
      description: |-
        Delete Store by key
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/stores/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: ID
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "stores"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_stores:{projectKey}"
      operationId: ByProjectKeyStoresByIDGet
      description: |-
        Get Store by ID
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "stores"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_stores:{projectKey}"
      operationId: ByProjectKeyStoresByIDPost
      description: |-
        Update Store by ID
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    delete:
      tags:
        - "projectKey"
        - "stores"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_stores:{projectKey}"
      operationId: ByProjectKeyStoresByIDDelete
      description: |-
        Delete Store by ID
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/subscriptions:
    description: |-
      Subscriptions allow you to be notified of new messages or changes via a Message Queue of your choice
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "subscriptions" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_subscriptions:{projectKey}"
      operationId: ByProjectKeySubscriptionsGet
      description: |-
        Query subscriptions
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: withTotal
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "subscriptions" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_subscriptions:{projectKey}"
      operationId: ByProjectKeySubscriptionsPost
      description: |-
        The creation of a Subscription is eventually consistent, it may take up to a minute before it becomes fully active.
        In order to test that the destination is correctly configured, a test message will be put into the queue.
        If the message could not be delivered, the subscription will not be created.
        The payload of the test message is a notification of type ResourceCreated for the resourceTypeId subscription.
        Currently, a maximum of 25 subscriptions can be created per project.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        201:
          description: |-
            201
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/subscriptions/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: key
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "subscriptions"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_subscriptions:{projectKey}"
      operationId: ByProjectKeySubscriptionsKeyByKeyGet
      description: |-
        Retrieves the representation of a subscription by its key.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "subscriptions"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_subscriptions:{projectKey}"
      operationId: ByProjectKeySubscriptionsKeyByKeyPost
      description: |-
        Update Subscription by key
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    delete:
      tags:
        - "projectKey"
        - "subscriptions"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_subscriptions:{projectKey}"
      operationId: ByProjectKeySubscriptionsKeyByKeyDelete
      description: |-
        Delete Subscription by key
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/subscriptions/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: ID
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "subscriptions"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_subscriptions:{projectKey}"
      operationId: ByProjectKeySubscriptionsByIDGet
      description: |-
        Retrieves the representation of a subscription by its id.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "subscriptions"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_subscriptions:{projectKey}"
      operationId: ByProjectKeySubscriptionsByIDPost
      description: |-
        Update Subscription by ID
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    delete:
      tags:
        - "projectKey"
        - "subscriptions"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_subscriptions:{projectKey}"
      operationId: ByProjectKeySubscriptionsByIDDelete
      description: |-
        Delete Subscription by ID
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/tax-categories:
    description: |-
      Tax Categories define how products are to be taxed in different countries.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "tax-categories" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_products:{projectKey}"
            - "view_tax_categories:{projectKey}"
      operationId: ByProjectKeyTaxCategoriesGet
      description: |-
        Query tax-categories
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: withTotal
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "tax-categories" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_products:{projectKey}"
            - "manage_tax_categories:{projectKey}"
      operationId: ByProjectKeyTaxCategoriesPost
      description: |-
        Create TaxCategory
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        201:
          description: |-
            201
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/tax-categories/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: key
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "tax-categories"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_products:{projectKey}"
            - "view_tax_categories:{projectKey}"
      operationId: ByProjectKeyTaxCategoriesKeyByKeyGet
      description: |-
        Get TaxCategory by key
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "tax-categories"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_products:{projectKey}"
            - "manage_tax_categories:{projectKey}"
      operationId: ByProjectKeyTaxCategoriesKeyByKeyPost
      description: |-
        Update TaxCategory by key
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    delete:
      tags:
        - "projectKey"
        - "tax-categories"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_products:{projectKey}"
            - "manage_tax_categories:{projectKey}"
      operationId: ByProjectKeyTaxCategoriesKeyByKeyDelete
      description: |-
        Delete TaxCategory by key
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/tax-categories/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: ID
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "tax-categories"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_products:{projectKey}"
            - "view_tax_categories:{projectKey}"
      operationId: ByProjectKeyTaxCategoriesByIDGet
      description: |-
        Get TaxCategory by ID
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "tax-categories"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_products:{projectKey}"
            - "manage_tax_categories:{projectKey}"
      operationId: ByProjectKeyTaxCategoriesByIDPost
      description: |-
        Update TaxCategory by ID
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    delete:
      tags:
        - "projectKey"
        - "tax-categories"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_products:{projectKey}"
            - "manage_tax_categories:{projectKey}"
      operationId: ByProjectKeyTaxCategoriesByIDDelete
      description: |-
        Delete TaxCategory by ID
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/types:
    description: |-
      Types define custom fields that are used to enhance resources as you need.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "types" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_types:{projectKey}"
      operationId: ByProjectKeyTypesGet
      description: |-
        Query types
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: withTotal
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "types" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_types:{projectKey}"
      operationId: ByProjectKeyTypesPost
      description: |-
        Create Type
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        201:
          description: |-
            201
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/types/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: key
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "types"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_types:{projectKey}"
      operationId: ByProjectKeyTypesKeyByKeyGet
      description: |-
        Get Type by key
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "types"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_types:{projectKey}"
      operationId: ByProjectKeyTypesKeyByKeyPost
      description: |-
        Update Type by key
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    delete:
      tags:
        - "projectKey"
        - "types"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_types:{projectKey}"
      operationId: ByProjectKeyTypesKeyByKeyDelete
      description: |-
        Delete Type by key
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/types/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: ID
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "types"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_types:{projectKey}"
      operationId: ByProjectKeyTypesByIDGet
      description: |-
        Get Type by ID
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "types"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_types:{projectKey}"
      operationId: ByProjectKeyTypesByIDPost
      description: |-
        Update Type by ID
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    delete:
      tags:
        - "projectKey"
        - "types"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_types:{projectKey}"
      operationId: ByProjectKeyTypesByIDDelete
      description: |-
        Delete Type by ID
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/zones:
    description: |-
      Zones allow defining ShippingRates for specific Locations.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "zones" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_orders:{projectKey}"
      operationId: ByProjectKeyZonesGet
      description: |-
        Query zones
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: withTotal
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: boolean
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "zones" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_orders:{projectKey}"
      operationId: ByProjectKeyZonesPost
      description: |-
        Create Zone
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        201:
          description: |-
            201
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/zones/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: key
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "zones"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_orders:{projectKey}"
      operationId: ByProjectKeyZonesKeyByKeyGet
      description: |-
        Get Zone by key
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "zones"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_orders:{projectKey}"
      operationId: ByProjectKeyZonesKeyByKeyPost
      description: |-
        Update Zone by key
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    delete:
      tags:
        - "projectKey"
        - "zones"
        - "key=key" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_orders:{projectKey}"
      operationId: ByProjectKeyZonesKeyByKeyDelete
      description: |-
        Delete Zone by key
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
  /{projectKey}/zones/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: ID
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "projectKey"
        - "zones"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "view_orders:{projectKey}"
      operationId: ByProjectKeyZonesByIDGet
      description: |-
        Get Zone by ID
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    post:
      tags:
        - "projectKey"
        - "zones"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_orders:{projectKey}"
      operationId: ByProjectKeyZonesByIDPost
      description: |-
        Update Zone by ID
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      requestBody:
        content:
          application/json: {}
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
    delete:
      tags:
        - "projectKey"
        - "zones"
        - "ID" 
      security:
        - oauth_2_0:
            - "manage_project:{projectKey}"
            - "manage_orders:{projectKey}"
      operationId: ByProjectKeyZonesByIDDelete
      description: |-
        Delete Zone by ID
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: array
            items:
              type: number
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
      responses:
        200:
          description: |-
            200
          content:
            application/json: {}
        409:
          description: |-
            ## Conflict

            A 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),
            was modified since the last time the client has requested it. As a reaction, the client will usually want to
            request the newest version of the resource to see what has changed and may then decide to apply the same or other
            changes to the new version, or discard his changes entirely.

            Conflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has
            to include the version of the resource whenever he intends to apply modifications to it.

            The following general error codes can appear in responses with the HTTP status code `409`:

            * `ConcurrentModification`
              The request conflicts with the current state of the involved resource(s).
              Typically, the request attempts to modify a resource that is out of date,
              i.e. that has been modified by another client since the last time it was retrieved.
              The client application should resolve the conflict (with or without involving the end-user)
              before retrying the request.
          content:
            application/json: {}
        400:
          description: |-
            ## Bad Request

            A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
            Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
            a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
            in the response before re-sending the request.

            The following general error codes can appear in responses with the HTTP status code `400`:

            * `InvalidInput`
              Invalid input has been sent to the service.
              The client application should validate the input according to the constraints described in the error message
              before sending the request.

            * `InvalidOperation`
              The resource(s) involved in the request are not in a valid state for the operation. The client application
              should validate the constraints described in the error message before sending the request.

            * `InvalidField`
              A field has an invalid value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `invalidValue` - *
                The invalid value.
              * `allowedValues` - Array of * - Optional
                A fixed set of allowed values for the field, if any.

            * `RequiredField`
              A required field is missing a value.
              Extra fields:
              * `field` - String
                The name of the field.

            * `DuplicateField`
              A value for a field conflicts with an existing duplicate value.
              Extra fields:
              * `field` - String
                The name of the field.
              * `duplicateValue` - *
                The offending duplicate value.
          content:
            application/json: {}
        401:
          description: |-
            ## Unauthorized

            A 401 indicates that the request is not properly authenticated.
          content:
            application/json: {}
        403:
          description: |-
            ## Forbidden

            A 403 indicates that the authenticated client is not allowed to perform the request.
          content:
            application/json: {}
        404:
          description: |-
            ## Not Found

            A 404 indicates that the addressed resource was not found / does not exist.

            The following general error codes can appear in responses with the HTTP status code `404`:

            * `ResourceNotFound`
              The resource addressed by the request URL does not exist.
          content: {}
        500:
          description: |-
            ## Internal Server Error

            A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
            requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
            to be reported and resolved.

            The following general error codes can appear in responses with the HTTP status code `500`:

            * `General`
              A server-side problem occurred that is not further specified.
              These errors [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}
        503:
          description: |-
            ## Service Unavailable

            The following general error codes can appear in responses with the HTTP status code `503`:

            * `OverCapacity`
              The service is having trouble handling the load. The client application should retry the request with
              exponential backoff up to a point where further delay is unacceptable.

            * `PendingOperation`
              A previous conflicting operation is still pending and needs to finish before the request can succeed.
              The client application should retry the request with exponential backoff up to a point where further delay
              is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).
          content:
            application/json: {}

components:
  securitySchemes:
    oauth_2_0:
      type: oauth2
      flows:
          clientCredentials:
            tokenUrl: https://auth.europe-west1.gcp.commercetools.com/oauth/token
            scopes:
              "manage_project:{projectKey}": ""
              "manage_products:{projectKey}": ""
              "view_products:{projectKey}": ""
              "manage_orders:{projectKey}": ""
              "manage_orders:{projectKey}:{storeKey}": ""
              "view_orders:{projectKey}": ""
              "view_orders:{projectKey}:{storeKey}": ""
              "manage_customers:{projectKey}": ""
              "view_customers:{projectKey}": ""
              "manage_payments:{projectKey}": ""
              "view_payments:{projectKey}": ""
              "manage_subscriptions:{projectKey}": ""
              "manage_extensions:{projectKey}": ""
              "manage_types:{projectKey}": ""
              "view_types:{projectKey}": ""
              "view_shopping_lists:{projectKey}": ""
              "manage_shopping_lists:{projectKey}": ""
              "manage_my_orders:{projectKey}": ""
              "manage_my_orders:{projectKey}:{storeKey}": ""
              "manage_my_profile:{projectKey}": ""
              "view_project_settings:{projectKey}": ""
              "view_published_products:{projectKey}": ""
              "manage_cart_discounts:{projectKey}": ""
              "view_cart_discounts:{projectKey}": ""
              "manage_customer_groups:{projectKey}": ""
              "view_customer_groups:{projectKey}": ""
              "view_shipping_methods:{projectKey}": ""
              "manage_shipping_methods:{projectKey}": ""
              "manage_tax_categories:{projectKey}": ""
              "view_tax_categories:{projectKey}": ""
              "manage_categories:{projectKey}": ""
              "view_categories:{projectKey}": ""
