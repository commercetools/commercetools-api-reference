openapi: "3.0.0"
info:
  title: commercetools Composable Commerce Machine Learning API
  version: "v1"

servers:
  - url: https://ml-eu.europe-west1.gcp.commercetools.com

paths:
  /{projectKey}/image-search:
    description: |-
      Search for similar products using an image as search input.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
    post:
      operationId: ByProjectKeyImageSearchPost
      description: |-
        Accepts an image file and returns similar products from product catalogue.
      parameters:
        - name: limit
          x-annotation-default: 5
          in: query
          required: false
          style: form
          schema:
            type: "integer"
            format: "int32"
          explode: true
        - name: offset
          x-annotation-default: 0
          in: query
          required: false
          style: form
          schema:
            type: "integer"
            format: "int32"
          explode: true
      requestBody:
        content:
          "*/*":
            schema:
              type: string
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageSearchResponse'

  /{projectKey}/image-search/config:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
    get:
      operationId: ByProjectKeyImageSearchConfigGet
      description: |-
        Get the current image search config.
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageSearchConfigResponse'

    post:
      operationId: ByProjectKeyImageSearchConfigPost
      description: |-
        Endpoint to update the image search config.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImageSearchConfigRequest'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageSearchConfigResponse'

  /{projectKey}/missing-data/attributes:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
    post:
      operationId: ByProjectKeyMissingDataAttributesPost
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MissingAttributesSearchRequest'

      responses:
        "202":
          description: |-
            202
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskToken'

  /{projectKey}/missing-data/attributes/status/{taskId}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: taskId
        in: path
        required: true
        schema:
          type: string
    get:
      operationId: ByProjectKeyMissingDataAttributesStatusByTaskIdGet
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MissingDataTaskStatus'

  /{projectKey}/missing-data/images:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
    post:
      operationId: ByProjectKeyMissingDataImagesPost
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MissingImagesSearchRequest'

      responses:
        "202":
          description: |-
            202
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskToken'

  /{projectKey}/missing-data/images/status/{taskId}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: taskId
        in: path
        required: true
        schema:
          type: string
    get:
      operationId: ByProjectKeyMissingDataImagesStatusByTaskIdGet
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MissingImagesTaskStatus'

  /{projectKey}/missing-data/prices:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
    post:
      operationId: ByProjectKeyMissingDataPricesPost
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MissingPricesSearchRequest'

      responses:
        "202":
          description: |-
            202
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskToken'

  /{projectKey}/missing-data/prices/status/{taskId}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: taskId
        in: path
        required: true
        schema:
          type: string
    get:
      operationId: ByProjectKeyMissingDataPricesStatusByTaskIdGet
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MissingPricesTaskStatus'

  /{projectKey}/recommendations/general-categories:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
    get:
      operationId: ByProjectKeyRecommendationsGeneralCategoriesGet
      description: |-
        This endpoint takes arbitrary product names or image URLs and generates recommendations from a general set of categories, which cover a broad range of industries. The full list of supported categories can be found [here](https://docs.commercetools.com/category_recommendations_supported_categories.txt). These are independent of the categories that are actually defined in your project. The main  purpose of this API is to provide a quick way to test the behavior of the category recommendations engine for different names and images. In contrast to the [project-specific endpoint](https://docs.commercetools.com/http-api-projects-categoryrecommendations#project-specific-category-recommendations), this endpoint does not have [activation criteria](https://docs.commercetools.com/http-api-projects-categoryrecommendations#activating-the-api) and is enabled for all projects.
      parameters:
        - name: productImageUrl
          in: query
          required: false
          style: form
          schema:
            type: "string"
          explode: true
        - name: productName
          in: query
          required: true
          style: form
          schema:
            type: "string"
          explode: true
        - name: limit
          x-annotation-default: 3
          in: query
          required: false
          style: form
          schema:
            type: "integer"
            format: "int32"
          explode: true
        - name: offset
          x-annotation-default: 0
          in: query
          required: false
          style: form
          schema:
            type: "integer"
            format: "int32"
          explode: true
        - name: confidenceMin
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: confidenceMax
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralCategoryRecommendationPagedQueryResponse'

  /{projectKey}/recommendations/project-categories/{productId}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: productId
        in: path
        required: true
        schema:
          type: string
    get:
      operationId: ByProjectKeyRecommendationsProjectCategoriesByProductIdGet
      description: |-
        Response Representation: PagedQueryResult with a results array of ProjectCategoryrecommendation, sorted by confidence scores in descending order and the meta information of ProjectCategoryrecommendationMeta.
      parameters:
        - name: limit
          x-annotation-default: 3
          in: query
          required: false
          style: form
          schema:
            type: "integer"
            format: "int32"
          explode: true
        - name: offset
          x-annotation-default: 0
          in: query
          required: false
          style: form
          schema:
            type: "integer"
            format: "int32"
          explode: true
        - name: staged
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: confidenceMin
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: confidenceMax
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectCategoryRecommendationPagedQueryResponse'

  /{projectKey}/similarities/products:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
    post:
      operationId: ByProjectKeySimilaritiesProductsPost
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimilarProductSearchRequest'

      responses:
        "202":
          description: |-
            202
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskToken'

  /{projectKey}/similarities/products/status/{taskId}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: string
      - name: taskId
        in: path
        required: true
        schema:
          type: string
    get:
      operationId: ByProjectKeySimilaritiesProductsStatusByTaskIdGet
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimilarProductsTaskStatus'


components:

  securitySchemes:
    oauth_2_0:
      type: oauth2
      description: |
        HTTP API authorization uses [OAuth2](https://tools.ietf.org/html/rfc6750){:target="_blank"}.

        Clients must obtain an access token from the auth service using one of
        the authorization flows described below, before they are able to make authorized requests
        to other SPHERE.IO services. On successful completion of an authorization flow,
        a client will be given an `access_token`, which they need to include in requests
        to authorized service endpoints via the HTTP `Authorization` header like this:

      flows:
          clientCredentials:
            tokenUrl: https://auth.sphere.io/oauth/token
            scopes:
              "manage_project:{projectKey}": ""
              "manage_products:{projectKey}": ""
              "view_products:{projectKey}": ""
              "manage_orders:{projectKey}": ""
              "view_orders:{projectKey}": ""
              "manage_customers:{projectKey}": ""
              "view_customers:{projectKey}": ""
              "manage_payments:{projectKey}": ""
              "view_payments:{projectKey}": ""
              "manage_subscriptions:{projectKey}": ""
              "manage_extensions:{projectKey}": ""
              "manage_types:{projectKey}": ""
              "view_types:{projectKey}": ""
              "view_shopping_lists:{projectKey}": ""
              "manage_shopping_lists:{projectKey}": ""
              "manage_my_orders:{projectKey}": ""
              "manage_my_profile:{projectKey}": ""
              "view_project_settings:{projectKey}": ""


  schemas:
    ProjectCategoryRecommendation:
      type: "object"
      required:
        - category
        - confidence
        - path
      properties:
        category:
          $ref: '#/components/schemas/CategoryReference'
        confidence:
          type: "number"
          format: "double"
        path:
          type: "string"
    ProjectCategoryRecommendationMeta:
      type: "object"
      required:
        - generalCategoryNames
      properties:
        productName:
          type: "string"
        productImageUrl:
          type: "string"
        generalCategoryNames:
          type: "array"
          items:
            type: "string"
    ProjectCategoryRecommendationPagedQueryResponse:
      type: "object"
      required:
        - count
        - total
        - offset
        - results
        - meta
      properties:
        count:
          type: "number"
          format: "double"
        total:
          type: "number"
          format: "double"
        offset:
          type: "number"
          format: "double"
        results:
          type: "array"
          items:
            $ref: '#/components/schemas/ProjectCategoryRecommendation'
        meta:
          $ref: '#/components/schemas/ProjectCategoryRecommendationMeta'
    GeneralCategoryRecommendation:
      type: "object"
      required:
        - categoryName
        - confidence
      properties:
        categoryName:
          type: "string"
        confidence:
          type: "number"
          format: "double"
    GeneralCategoryRecommendationPagedQueryResponse:
      type: "object"
      required:
        - count
        - total
        - offset
        - results
      properties:
        count:
          type: "number"
          format: "double"
        total:
          type: "number"
          format: "double"
        offset:
          type: "number"
          format: "double"
        results:
          type: "array"
          items:
            $ref: '#/components/schemas/GeneralCategoryRecommendation'
    ImageSearchRequest:
      {}
    ImageSearchResponse:
      type: "object"
      required:
        - count
        - offset
        - total
        - results
      properties:
        count:
          type: "number"
          format: "double"
        offset:
          type: "number"
          format: "double"
        total:
          type: "number"
          format: "double"
        results:
          type: "array"
          items:
            $ref: '#/components/schemas/ResultItem'
    ResultItem:
      type: "object"
      required:
        - imageUrl
        - productVariants
      properties:
        imageUrl:
          type: "string"
        productVariants:
          type: "array"
          items:
            $ref: '#/components/schemas/ProductVariant'
    ImageSearchConfigStatus:
      type: "string"
      enum:
        - on
        - off
    ImageSearchConfigUpdateAction:
      type: "object"
      discriminator:
        propertyName: action
        mapping:
          changeStatus: '#/components/schemas/ChangeStatusUpdateAction'
      required:
        - action
      properties:
        action:
          type: "string"
    ChangeStatusUpdateAction:
      allOf:
        - $ref: '#/components/schemas/ImageSearchConfigUpdateAction'
        - type: "object"
          required:
            - status
          properties:
            action:
              type: "string"
            status:
              $ref: '#/components/schemas/ImageSearchConfigStatus'
    ImageSearchConfigRequest:
      type: "object"
      required:
        - actions
      properties:
        actions:
          type: "array"
          items:
            $ref: '#/components/schemas/ImageSearchConfigUpdateAction'
    ImageSearchConfigResponse:
      type: "object"
      required:
        - status
        - lastModifiedAt
      properties:
        status:
          $ref: '#/components/schemas/ImageSearchConfigStatus'
        lastModifiedAt:
          type: "string"
          format: "datetime"
    AttributeCount:
      type: "object"
      required:
        - productTypeAttributes
        - variantAttributes
        - missingAttributeValues
      properties:
        productTypeAttributes:
          type: "number"
          format: "double"
        variantAttributes:
          type: "number"
          format: "double"
        missingAttributeValues:
          type: "number"
          format: "double"
    AttributeCoverage:
      type: "object"
      required:
        - names
        - values
      properties:
        names:
          type: "number"
          format: "double"
        values:
          type: "number"
          format: "double"
    MissingAttributesDetails:
      type: "object"
      required:
        - total
        - missingAttributeNames
        - missingAttributeValues
      properties:
        total:
          type: "number"
          format: "double"
        missingAttributeNames:
          type: "number"
          format: "double"
        missingAttributeValues:
          type: "number"
          format: "double"
    MissingAttributes:
      type: "object"
      required:
        - product
        - productType
        - variantId
        - missingAttributeValues
      properties:
        product:
          $ref: '#/components/schemas/ProductReference'
        productType:
          $ref: '#/components/schemas/ProductTypeReference'
        variantId:
          type: "number"
          format: "double"
        missingAttributeValues:
          type: "array"
          items:
            type: "string"
        missingAttributeNames:
          type: "array"
          items:
            type: "string"
        attributeCount:
          $ref: '#/components/schemas/AttributeCount'
        attributeCoverage:
          $ref: '#/components/schemas/AttributeCoverage'
    MissingAttributesMeta:
      type: "object"
      required:
        - productLevel
        - variantLevel
      properties:
        productLevel:
          $ref: '#/components/schemas/MissingAttributesDetails'
        variantLevel:
          $ref: '#/components/schemas/MissingAttributesDetails'
        productTypeIds:
          type: "array"
          items:
            type: "string"
    MissingAttributesSearchRequest:
      type: "object"
      properties:
        limit:
          type: "number"
          format: "double"
        offset:
          type: "number"
          format: "double"
        staged:
          type: "boolean"
        productSetLimit:
          type: "number"
          format: "double"
        includeVariants:
          type: "boolean"
        coverageMin:
          type: "number"
          format: "double"
        coverageMax:
          type: "number"
          format: "double"
        sortBy:
          type: "string"
        showMissingAttributeNames:
          type: "boolean"
        productIds:
          type: "array"
          items:
            type: "string"
        productTypeIds:
          type: "array"
          items:
            type: "string"
        attributeName:
          type: "string"
    MissingAttributesPagedQueryResult:
      type: "object"
      required:
        - count
        - total
        - offset
        - results
        - meta
      properties:
        count:
          type: "number"
          format: "double"
        total:
          type: "number"
          format: "double"
        offset:
          type: "number"
          format: "double"
        results:
          type: "array"
          items:
            $ref: '#/components/schemas/MissingAttributes'
        meta:
          $ref: '#/components/schemas/MissingAttributesMeta'
    MissingDataTaskStatus:
      type: "object"
      required:
        - state
        - expires
        - result
      properties:
        state:
          $ref: '#/components/schemas/TaskStatusEnum'
        expires:
          type: "string"
          format: "datetime"
        result:
          $ref: '#/components/schemas/MissingAttributesPagedQueryResult'
    MissingImages:
      type: "object"
      required:
        - product
        - variantId
        - imageCount
      properties:
        product:
          $ref: '#/components/schemas/ProductReference'
        variantId:
          type: "number"
          format: "double"
        imageCount:
          type: "number"
          format: "double"
    MissingImagesCount:
      type: "object"
      required:
        - missingImages
        - total
      properties:
        missingImages:
          type: "number"
          format: "double"
        total:
          type: "number"
          format: "double"
    MissingImagesProductLevel:
      allOf:
        - $ref: '#/components/schemas/MissingImagesCount'
        - type: "object"
          required:
            - missingImages
            - total
          properties:
            missingImages:
              type: "number"
              format: "double"
            total:
              type: "number"
              format: "double"
    MissingImagesVariantLevel:
      allOf:
        - $ref: '#/components/schemas/MissingImagesCount'
        - type: "object"
          required:
            - missingImages
            - total
          properties:
            missingImages:
              type: "number"
              format: "double"
            total:
              type: "number"
              format: "double"
    MissingImagesMeta:
      type: "object"
      required:
        - productLevel
        - variantLevel
        - threshold
      properties:
        productLevel:
          $ref: '#/components/schemas/MissingImagesProductLevel'
        variantLevel:
          $ref: '#/components/schemas/MissingImagesVariantLevel'
        threshold:
          type: "number"
          format: "double"
    MissingImagesSearchRequest:
      type: "object"
      properties:
        limit:
          type: "number"
          format: "double"
        offset:
          type: "number"
          format: "double"
        staged:
          type: "boolean"
        productSetLimit:
          type: "number"
          format: "double"
        includeVariants:
          type: "boolean"
        autoThreshold:
          type: "boolean"
        threshold:
          type: "number"
          format: "double"
        productIds:
          type: "array"
          items:
            type: "string"
        productTypeIds:
          type: "array"
          items:
            type: "string"
    MissingImagesPagedQueryResult:
      type: "object"
      required:
        - count
        - total
        - offset
        - results
        - meta
      properties:
        count:
          type: "number"
          format: "double"
        total:
          type: "number"
          format: "double"
        offset:
          type: "number"
          format: "double"
        results:
          type: "array"
          items:
            $ref: '#/components/schemas/MissingImages'
        meta:
          $ref: '#/components/schemas/MissingImagesMeta'
    MissingImagesTaskStatus:
      type: "object"
      required:
        - state
        - expires
        - result
      properties:
        state:
          $ref: '#/components/schemas/TaskStatusEnum'
        expires:
          type: "string"
          format: "datetime"
        result:
          $ref: '#/components/schemas/MissingImagesPagedQueryResult'
    MissingPrices:
      type: "object"
      required:
        - product
        - variantId
      properties:
        product:
          $ref: '#/components/schemas/ProductReference'
        variantId:
          type: "number"
          format: "double"
    MissingPricesProductCount:
      type: "object"
      required:
        - total
        - missingPrices
      properties:
        total:
          type: "number"
          format: "double"
        missingPrices:
          type: "number"
          format: "double"
    MissingPricesProductLevel:
      allOf:
        - $ref: '#/components/schemas/MissingPricesProductCount'
        - type: "object"
          required:
            - total
            - missingPrices
          properties:
            total:
              type: "number"
              format: "double"
            missingPrices:
              type: "number"
              format: "double"
    MissingPricesVariantLevel:
      allOf:
        - $ref: '#/components/schemas/MissingPricesProductCount'
        - type: "object"
          required:
            - total
            - missingPrices
          properties:
            total:
              type: "number"
              format: "double"
            missingPrices:
              type: "number"
              format: "double"
    MissingPricesMeta:
      type: "object"
      required:
        - productLevel
        - variantLevel
      properties:
        productLevel:
          $ref: '#/components/schemas/MissingPricesProductLevel'
        variantLevel:
          $ref: '#/components/schemas/MissingPricesVariantLevel'
    MissingPricesSearchRequest:
      type: "object"
      properties:
        limit:
          type: "number"
          format: "double"
        offset:
          type: "number"
          format: "double"
        staged:
          type: "boolean"
        productSetLimit:
          type: "number"
          format: "double"
        includeVariants:
          type: "boolean"
        currencyCode:
          type: "string"
        checkDate:
          type: "boolean"
        validFrom:
          type: "string"
          format: "datetime"
        validUntil:
          type: "string"
          format: "datetime"
        productIds:
          type: "array"
          items:
            type: "string"
        productTypeIds:
          type: "array"
          items:
            type: "string"
    MissingPricesPagedQueryResult:
      type: "object"
      required:
        - count
        - total
        - offset
        - results
        - meta
      properties:
        count:
          type: "number"
          format: "double"
        total:
          type: "number"
          format: "double"
        offset:
          type: "number"
          format: "double"
        results:
          type: "array"
          items:
            $ref: '#/components/schemas/MissingPrices'
        meta:
          $ref: '#/components/schemas/MissingPricesMeta'
    MissingPricesTaskStatus:
      type: "object"
      required:
        - state
        - expires
        - result
      properties:
        state:
          $ref: '#/components/schemas/TaskStatusEnum'
        expires:
          type: "string"
          format: "datetime"
        result:
          $ref: '#/components/schemas/MissingPricesPagedQueryResult'
    LocalizedString:
      type: "object"
      required:
        - /^[a-z]{2}(-[A-Z]{2})?$/
      additionalProperties:
        type: "string"
    CurrencyCode:
      type: "string"
    Money:
      type: "object"
      required:
        - centAmount
        - currencyCode
      properties:
        centAmount:
          type: "number"
          format: "double"
        currencyCode:
          $ref: '#/components/schemas/CurrencyCode'
    ReferenceTypeId:
      type: "string"
      enum:
        - cart
        - cart-discount
        - category
        - channel
        - customer
        - customer-group
        - discount-code
        - key-value-document
        - payment
        - product
        - product-type
        - product-discount
        - order
        - review
        - shopping-list
        - shipping-method
        - state
        - store
        - tax-category
        - type
        - zone
        - inventory-entry
        - order-edit
    Reference:
      type: "object"
      discriminator:
        propertyName: typeId
        mapping:
          category: '#/components/schemas/CategoryReference'
          product: '#/components/schemas/ProductReference'
          product-type: '#/components/schemas/ProductTypeReference'
      required:
        - typeId
        - id
      properties:
        typeId:
          $ref: '#/components/schemas/ReferenceTypeId'
        id:
          type: "string"
    CategoryReference:
      allOf:
        - $ref: '#/components/schemas/Reference'
        - type: "object"
          properties:
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            id:
              type: "string"
    ProductReference:
      allOf:
        - $ref: '#/components/schemas/Reference'
        - type: "object"
          properties:
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            id:
              type: "string"
    ProductTypeReference:
      allOf:
        - $ref: '#/components/schemas/Reference'
        - type: "object"
          properties:
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            id:
              type: "string"
    ProductVariant:
      type: "object"
      required:
        - product
        - staged
        - variantId
      properties:
        product:
          $ref: '#/components/schemas/ProductReference'
        staged:
          type: "boolean"
        variantId:
          type: "number"
          format: "double"
    TaskStatusEnum:
      type: "string"
      enum:
        - PENDING
        - SUCCESS
    TaskToken:
      type: "object"
      required:
        - taskId
        - uriPath
      properties:
        taskId:
          type: "string"
        uriPath:
          type: "string"
    ProductSetSelector:
      type: "object"
      required:
        - projectKey
      properties:
        projectKey:
          type: "string"
        productIds:
          type: "array"
          items:
            type: "string"
        productTypeIds:
          type: "array"
          items:
            type: "string"
        staged:
          type: "boolean"
        includeVariants:
          type: "boolean"
        productSetLimit:
          type: "number"
          format: "double"
    SimilarityMeasures:
      type: "object"
      properties:
        name:
          type: "number"
          format: "double"
        description:
          type: "number"
          format: "double"
        attribute:
          type: "number"
          format: "double"
        variantCount:
          type: "number"
          format: "double"
        price:
          type: "number"
          format: "double"
    SimilarProductSearchRequest:
      type: "object"
      properties:
        limit:
          type: "number"
          format: "double"
        offset:
          type: "number"
          format: "double"
        language:
          type: "string"
        currencyCode:
          type: "string"
        similarityMeasures:
          $ref: '#/components/schemas/SimilarityMeasures'
        productSetSelectors:
          type: "array"
          items:
            $ref: '#/components/schemas/ProductSetSelector'
        confidenceMin:
          type: "number"
          format: "double"
        confidenceMax:
          type: "number"
          format: "double"
    SimilarProduct:
      type: "object"
      properties:
        product:
          $ref: '#/components/schemas/ProductReference'
        variantId:
          type: "number"
          format: "double"
        meta:
          $ref: '#/components/schemas/SimilarProductMeta'
    SimilarProductMeta:
      type: "object"
      properties:
        name:
          $ref: '#/components/schemas/LocalizedString'
        description:
          $ref: '#/components/schemas/LocalizedString'
        price:
          $ref: '#/components/schemas/Money'
        variantCount:
          type: "number"
          format: "double"
    SimilarProductPair:
      type: "object"
      required:
        - confidence
        - products
      properties:
        confidence:
          type: "number"
          format: "double"
        products:
          type: "array"
          items:
            $ref: '#/components/schemas/SimilarProduct'
    SimilarProductSearchRequestMeta:
      type: "object"
      required:
        - similarityMeasures
      properties:
        similarityMeasures:
          $ref: '#/components/schemas/SimilarityMeasures'
    SimilarProductsPagedQueryResult:
      type: "object"
      required:
        - count
        - total
        - offset
        - results
        - meta
      properties:
        count:
          type: "number"
          format: "double"
        total:
          type: "number"
          format: "double"
        offset:
          type: "number"
          format: "double"
        results:
          type: "array"
          items:
            $ref: '#/components/schemas/SimilarProductPair'
        meta:
          $ref: '#/components/schemas/SimilarProductSearchRequestMeta'
    SimilarProductsTaskStatus:
      type: "object"
      required:
        - state
        - result
      properties:
        state:
          $ref: '#/components/schemas/TaskStatusEnum'
        expires:
          type: "string"
          format: "datetime"
        result:
          $ref: '#/components/schemas/SimilarProductsPagedQueryResult'
