openapi: "3.0.0"
info:
  title: commercetools Composable Commerce
  version: "v1"

servers:
  - url: https://api.{region}.commercetools.com
    variables:
      region:
        default: us-central1.gcp
        enum:
         - us-central1.gcp
         - us-east-2.aws
         - europe-west1.gcp
         - eu-central-1.aws
         - australia-southeast1.gcp
        description: |
          [Region](/../api/general-concepts#hosts) in which the Project is hosted.


paths:
  /{projectKey}:
    description: |-
      The Project endpoint is used to retrieve certain information from a project.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_project_settings:{projectKey}"
      operationId: ByProjectKeyGet
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_project_settings:{projectKey}"
      operationId: ByProjectKeyPost
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'

        "409":
          $ref: '#/components/responses/conflicting_409'
  /{projectKey}/api-clients:
    description: |-
      Manage your API Clients via an API. Useful for Infrastructure-as-Code tooling, and regularly rotating API secrets.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_api_clients:{projectKey}"
      operationId: ByProjectKeyApiClientsGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Sort'
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: withTotal
          x-annotation-default: true
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/QueryPredicate'
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              type: "string"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiClientPagedQueryResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_api_clients:{projectKey}"
      operationId: ByProjectKeyApiClientsPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiClientDraft'

      responses:
        "201":
          description: |-
            201
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiClient'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/api-clients/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: ID
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_api_clients:{projectKey}"
      operationId: ByProjectKeyApiClientsByIDGet
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiClient'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_api_clients:{projectKey}"
      operationId: ByProjectKeyApiClientsByIDDelete
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiClient'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/as-associate/{associateId}/business-units:
    description: |-
      A Business Unit can represent a Company or a Division.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: associateId
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_business_units:{projectKey}"
      operationId: ByProjectKeyAsAssociateByAssociateIdBusinessUnitsGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Sort'
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: withTotal
          x-annotation-default: true
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/QueryPredicate'
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              type: "string"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessUnitPagedQueryResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_business_units:{projectKey}"
      operationId: ByProjectKeyAsAssociateByAssociateIdBusinessUnitsPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BusinessUnitDraft'

      responses:
        "201":
          description: |-
            201
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessUnit'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/as-associate/{associateId}/business-units/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: associateId
        in: path
        required: true
        schema:
          type: "string"
      - name: key
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_business_units:{projectKey}"
      operationId: ByProjectKeyAsAssociateByAssociateIdBusinessUnitsKeyByKeyGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessUnit'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_business_units:{projectKey}"
      operationId: ByProjectKeyAsAssociateByAssociateIdBusinessUnitsKeyByKeyPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BusinessUnitUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessUnit'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/as-associate/{associateId}/business-units/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: associateId
        in: path
        required: true
        schema:
          type: "string"
      - name: ID
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_business_units:{projectKey}"
      operationId: ByProjectKeyAsAssociateByAssociateIdBusinessUnitsByIDGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessUnit'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_business_units:{projectKey}"
      operationId: ByProjectKeyAsAssociateByAssociateIdBusinessUnitsByIDPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BusinessUnitUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessUnit'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/carts:
    description: |-
      A shopping cart holds product variants and can be ordered.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: associateId
        in: path
        required: true
        schema:
          type: "string"
      - name: businessUnitKey
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_orders:{projectKey}"
      operationId: ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyCartsGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Sort'
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: withTotal
          x-annotation-default: true
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/QueryPredicate'
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              type: "string"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartPagedQueryResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_orders:{projectKey}"
      operationId: ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyCartsPost
      description: |-
        Creates a [Cart](ctp:api:type:Cart) in the [BusinessUnit](ctp:api:type:BusinessUnit) referenced by `businessUnitKey`. As such, the `businessUnit` field on [CartDraft](ctp:api:type:CartDraft) is ignored for this request.
        Creating a Cart can fail with an [InvalidOperation](ctp:api:type:InvalidOperationError) if the referenced [ShippingMethod](ctp:api:type:ShippingMethod) in the [CartDraft](ctp:api:type:CartDraft) has a predicate that does not match the Cart.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartDraft'

      responses:
        "201":
          description: |-
            201
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/carts/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: associateId
        in: path
        required: true
        schema:
          type: "string"
      - name: businessUnitKey
        in: path
        required: true
        schema:
          type: "string"
      - name: key
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_orders:{projectKey}"
      operationId: ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyCartsKeyByKeyGet
      description: |-
        If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_orders:{projectKey}"
      operationId: ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyCartsKeyByKeyPost
      description: |-
        If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_orders:{projectKey}"
      operationId: ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyCartsKeyByKeyDelete
      description: |-
        If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
      parameters:
        - name: dataErasure
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/carts/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: associateId
        in: path
        required: true
        schema:
          type: "string"
      - name: businessUnitKey
        in: path
        required: true
        schema:
          type: "string"
      - name: ID
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_orders:{projectKey}"
      operationId: ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyCartsByIDGet
      description: |-
        If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_orders:{projectKey}"
      operationId: ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyCartsByIDPost
      description: |-
        If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_orders:{projectKey}"
      operationId: ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyCartsByIDDelete
      description: |-
        If the Cart exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
      parameters:
        - name: dataErasure
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/orders:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: associateId
        in: path
        required: true
        schema:
          type: "string"
      - name: businessUnitKey
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_orders:{projectKey}"
      operationId: ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyOrdersGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Sort'
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: withTotal
          x-annotation-default: true
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/QueryPredicate'
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              type: "string"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderPagedQueryResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_orders:{projectKey}"
      operationId: ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyOrdersPost
      description: |-
        Creates an Order from a [Cart](ctp:api:type:Cart) in a [BusinessUnit](ctp:api:type:BusinessUnit).
        The Cart must have a shipping address set before creating an Order.
        Creating an Order fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) if the Cart does not reference the same BusinessUnit as the `businessUnitKey` path parameter.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderFromCartDraft'

      responses:
        "201":
          description: |-
            201
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/orders/order-number={orderNumber}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: associateId
        in: path
        required: true
        schema:
          type: "string"
      - name: businessUnitKey
        in: path
        required: true
        schema:
          type: "string"
      - name: orderNumber
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_orders:{projectKey}"
      operationId: ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyOrdersOrderNumberByOrderNumberGet
      description: |-
        If the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_orders:{projectKey}"
      operationId: ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyOrdersOrderNumberByOrderNumberPost
      description: |-
        If the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/orders/quotes:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: associateId
        in: path
        required: true
        schema:
          type: "string"
      - name: businessUnitKey
        in: path
        required: true
        schema:
          type: "string"
    post:
      security:
        - oauth_2_0:
            - "manage_quotes:{projectKey}"
      operationId: ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyOrdersQuotesPost
      description: |-
        Creates an Order from a [Quote](ctp:api:type:Cart) in a [BusinessUnit](ctp:api:type:BusinessUnit).
        Creating an Order fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) if the Quote does not reference the same BusinessUnit as the `businessUnitKey` path parameter.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderFromQuoteDraft'

      responses:
        "201":
          description: |-
            201
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/orders/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: associateId
        in: path
        required: true
        schema:
          type: "string"
      - name: businessUnitKey
        in: path
        required: true
        schema:
          type: "string"
      - name: ID
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_orders:{projectKey}"
      operationId: ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyOrdersByIDGet
      description: |-
        If the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_orders:{projectKey}"
      operationId: ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyOrdersByIDPost
      description: |-
        If the Order exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quote-requests:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: associateId
        in: path
        required: true
        schema:
          type: "string"
      - name: businessUnitKey
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_quote_requests:{projectKey}"
      operationId: ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyQuoteRequestsGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Sort'
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: withTotal
          x-annotation-default: true
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/QueryPredicate'
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              type: "string"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuoteRequestPagedQueryResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_quote_requests:{projectKey}"
      operationId: ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyQuoteRequestsPost
      description: |-
        Creates a QuoteRequest in a [BusinessUnit](ctp:api:type:BusinessUnit). Creating QuoteRequest fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) if the Cart does not reference the same BusinessUnit as the `businessUnitKey` path parameter.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuoteRequestDraft'

      responses:
        "201":
          description: |-
            201
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuoteRequest'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quote-requests/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: associateId
        in: path
        required: true
        schema:
          type: "string"
      - name: businessUnitKey
        in: path
        required: true
        schema:
          type: "string"
      - name: key
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_quote_requests:{projectKey}"
      operationId: ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyQuoteRequestsKeyByKeyGet
      description: |-
        If the QuoteRequest exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuoteRequest'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_quote_requests:{projectKey}"
      operationId: ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyQuoteRequestsKeyByKeyPost
      description: |-
        If the QuoteRequest exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuoteRequestUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuoteRequest'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quote-requests/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: associateId
        in: path
        required: true
        schema:
          type: "string"
      - name: businessUnitKey
        in: path
        required: true
        schema:
          type: "string"
      - name: ID
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_quote_requests:{projectKey}"
      operationId: ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyQuoteRequestsByIDGet
      description: |-
        If the QuoteRequest exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuoteRequest'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_quote_requests:{projectKey}"
      operationId: ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyQuoteRequestsByIDPost
      description: |-
        If the QuoteRequest exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuoteRequestUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuoteRequest'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quotes:
    description: |-
      A quote holds the negotiated offer.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: associateId
        in: path
        required: true
        schema:
          type: "string"
      - name: businessUnitKey
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_quotes:{projectKey}"
      operationId: ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyQuotesGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Sort'
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: withTotal
          x-annotation-default: true
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/QueryPredicate'
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              type: "string"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuotePagedQueryResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quotes/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: associateId
        in: path
        required: true
        schema:
          type: "string"
      - name: businessUnitKey
        in: path
        required: true
        schema:
          type: "string"
      - name: key
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_quotes:{projectKey}"
      operationId: ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyQuotesKeyByKeyGet
      description: |-
        If the Quote exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quote'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_quotes:{projectKey}"
      operationId: ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyQuotesKeyByKeyPost
      description: |-
        If the Quote exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuoteUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quote'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/as-associate/{associateId}/in-business-unit/key={businessUnitKey}/quotes/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: associateId
        in: path
        required: true
        schema:
          type: "string"
      - name: businessUnitKey
        in: path
        required: true
        schema:
          type: "string"
      - name: ID
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_quotes:{projectKey}"
      operationId: ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyQuotesByIDGet
      description: |-
        If the Quote exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quote'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_quotes:{projectKey}"
      operationId: ByProjectKeyAsAssociateByAssociateIdInBusinessUnitKeyByBusinessUnitKeyQuotesByIDPost
      description: |-
        If the Quote exists in the [Project](ctp:api:type:Project) but does not reference the requested [BusinessUnit](ctp:api:type:BusinessUnit), this method returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuoteUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quote'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/associate-roles:
    description: |-
      An Associate Role enables permissions over a Business Unit to an Associate.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_associate_roles:{projectKey}"
      operationId: ByProjectKeyAssociateRolesGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Sort'
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: withTotal
          x-annotation-default: true
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/QueryPredicate'
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              type: "string"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssociateRolePagedQueryResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_associate_roles:{projectKey}"
      operationId: ByProjectKeyAssociateRolesPost
      description: |-
        Creating a Associate Role generates the [AssociateRoleCreated](ctp:api:type:AssociateRoleCreatedMessage) Message.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssociateRoleDraft'

      responses:
        "201":
          description: |-
            201
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssociateRole'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/associate-roles/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: key
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_associate_roles:{projectKey}"
      operationId: ByProjectKeyAssociateRolesKeyByKeyGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssociateRole'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_associate_roles:{projectKey}"
      operationId: ByProjectKeyAssociateRolesKeyByKeyPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssociateRoleUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssociateRole'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_associate_roles:{projectKey}"
      operationId: ByProjectKeyAssociateRolesKeyByKeyDelete
      description: |-
        Deleting an AssociateRole generates the [AssociateRoleDeleted](ctp:api:type:AssociateRoleDeletedMessage) Message. An AssociateRole can only be deleted if it is not assigned to any [Associates](ctp:api:type:Associate).
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssociateRole'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/associate-roles/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: ID
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_associate_roles:{projectKey}"
      operationId: ByProjectKeyAssociateRolesByIDGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssociateRole'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_associate_roles:{projectKey}"
      operationId: ByProjectKeyAssociateRolesByIDPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssociateRoleUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssociateRole'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_associate_roles:{projectKey}"
      operationId: ByProjectKeyAssociateRolesByIDDelete
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssociateRole'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/attribute-groups:
    description: |-
      Attribute groups ... TODO
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_attribute_groups:{projectKey}"
      operationId: ByProjectKeyAttributeGroupsGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Sort'
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: withTotal
          x-annotation-default: true
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/QueryPredicate'
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              type: "string"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributeGroupPagedQueryResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_attribute_groups:{projectKey}"
      operationId: ByProjectKeyAttributeGroupsPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttributeGroupDraft'

      responses:
        "201":
          description: |-
            201
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributeGroup'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/attribute-groups/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: key
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_attribute_groups:{projectKey}"
      operationId: ByProjectKeyAttributeGroupsKeyByKeyGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributeGroup'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_attribute_groups:{projectKey}"
      operationId: ByProjectKeyAttributeGroupsKeyByKeyPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttributeGroupUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributeGroup'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_attribute_groups:{projectKey}"
      operationId: ByProjectKeyAttributeGroupsKeyByKeyDelete
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributeGroup'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/attribute-groups/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: ID
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_attribute_groups:{projectKey}"
      operationId: ByProjectKeyAttributeGroupsByIDGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributeGroup'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_attribute_groups:{projectKey}"
      operationId: ByProjectKeyAttributeGroupsByIDPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttributeGroupUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributeGroup'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_attribute_groups:{projectKey}"
      operationId: ByProjectKeyAttributeGroupsByIDDelete
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributeGroup'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/business-units:
    description: |-
      A Business Unit can represent a Company or a Division.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_business_units:{projectKey}"
      operationId: ByProjectKeyBusinessUnitsGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Sort'
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: withTotal
          x-annotation-default: true
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/QueryPredicate'
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              type: "string"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessUnitPagedQueryResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_business_units:{projectKey}"
      operationId: ByProjectKeyBusinessUnitsPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BusinessUnitDraft'

      responses:
        "201":
          description: |-
            201
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessUnit'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/business-units/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: key
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_business_units:{projectKey}"
      operationId: ByProjectKeyBusinessUnitsKeyByKeyGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessUnit'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_business_units:{projectKey}"
      operationId: ByProjectKeyBusinessUnitsKeyByKeyPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BusinessUnitUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessUnit'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_business_units:{projectKey}"
      operationId: ByProjectKeyBusinessUnitsKeyByKeyDelete
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessUnit'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/business-units/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: ID
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_business_units:{projectKey}"
      operationId: ByProjectKeyBusinessUnitsByIDGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessUnit'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_business_units:{projectKey}"
      operationId: ByProjectKeyBusinessUnitsByIDPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BusinessUnitUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessUnit'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_business_units:{projectKey}"
      operationId: ByProjectKeyBusinessUnitsByIDDelete
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessUnit'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/cart-discounts:
    description: |-
      Cart discounts are used to change the prices of different elements within a cart.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_orders:{projectKey}"
            - "view_cart_discounts:{projectKey}"
      operationId: ByProjectKeyCartDiscountsGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Sort'
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: withTotal
          x-annotation-default: true
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/QueryPredicate'
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              type: "string"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartDiscountPagedQueryResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_orders:{projectKey}"
            - "manage_cart_discounts:{projectKey}"
      operationId: ByProjectKeyCartDiscountsPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartDiscountDraft'

      responses:
        "201":
          description: |-
            201
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartDiscount'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/cart-discounts/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: key
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_orders:{projectKey}"
            - "view_cart_discounts:{projectKey}"
      operationId: ByProjectKeyCartDiscountsKeyByKeyGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartDiscount'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_orders:{projectKey}"
            - "manage_cart_discounts:{projectKey}"
      operationId: ByProjectKeyCartDiscountsKeyByKeyPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartDiscountUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartDiscount'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_orders:{projectKey}"
            - "manage_cart_discounts:{projectKey}"
      operationId: ByProjectKeyCartDiscountsKeyByKeyDelete
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartDiscount'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/cart-discounts/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: ID
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_orders:{projectKey}"
            - "view_cart_discounts:{projectKey}"
      operationId: ByProjectKeyCartDiscountsByIDGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartDiscount'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_orders:{projectKey}"
            - "manage_cart_discounts:{projectKey}"
      operationId: ByProjectKeyCartDiscountsByIDPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartDiscountUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartDiscount'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_orders:{projectKey}"
            - "manage_cart_discounts:{projectKey}"
      operationId: ByProjectKeyCartDiscountsByIDDelete
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartDiscount'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/carts:
    description: |-
      A shopping cart holds product variants and can be ordered.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_orders:{projectKey}"
      operationId: ByProjectKeyCartsGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Sort'
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: withTotal
          x-annotation-default: true
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/QueryPredicate'
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              type: "string"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartPagedQueryResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_orders:{projectKey}"
      operationId: ByProjectKeyCartsPost
      description: |-
        Creating a Cart fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the
        [ShippingMethod](ctp:api:type:ShippingMethod) referenced in the CartDraft
        has a `predicate` that does not match the Cart.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartDraft'

      responses:
        "201":
          description: |-
            201
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/carts/customer-id={customerId}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: customerId
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_orders:{projectKey}"
      operationId: ByProjectKeyCartsCustomerIdByCustomerIdGet
      description: |-
        Retrieves the recently modified active Cart of a Customer with [CartOrigin](ctp:api:type:CartOrigin) `Customer`. If no active Cart exists, a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned.

        To ensure the Cart is up-to-date with current values (such as Prices and Discounts), use the [Recalculate](ctp:api:type:CartRecalculateAction) update action.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/carts/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: key
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_orders:{projectKey}"
      operationId: ByProjectKeyCartsKeyByKeyGet
      description: |-
        To ensure the Cart is up-to-date with current values (such as Prices and Discounts), use the [Recalculate](ctp:api:type:CartRecalculateAction) update action.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_orders:{projectKey}"
      operationId: ByProjectKeyCartsKeyByKeyPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_orders:{projectKey}"
      operationId: ByProjectKeyCartsKeyByKeyDelete
      parameters:
        - name: dataErasure
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/carts/replicate:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    post:
      security:
        - oauth_2_0:
            - "manage_orders:{projectKey}"
      operationId: ByProjectKeyCartsReplicatePost
      description: |-
        Creates a new Cart by replicating an existing Cart or Order. Can be useful in cases where a customer wants to cancel a recent order to make some changes or reorder a previous order.

        The replicated Cart preserves Customer information, Line Items and Custom Line Items, Custom Fields, Discount Codes, and other settings of the Cart or Order. If the Line Items become invalid, for example, due to removed Products or Prices, they are removed from the new Cart. If the Customer switches to another Customer Group, the new Cart is updated with the new value. It has up-to-date Tax Rates, Prices, and Line Item product data and is in `Active` [CartState](ctp:api:type:CartState).

        The new Cart does not contain Payments or Deliveries. The [State](ctp:api:type:ItemState) of Line Items and Custom Line Items is reset to `initial`.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReplicaCartDraft'

      responses:
        "201":
          description: |-
            201
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/carts/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: ID
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_orders:{projectKey}"
      operationId: ByProjectKeyCartsByIDGet
      description: |-
        To ensure the Cart is up-to-date with current values (such as Prices and Discounts), use the [Recalculate](ctp:api:type:CartRecalculateAction) update action.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_orders:{projectKey}"
      operationId: ByProjectKeyCartsByIDPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_orders:{projectKey}"
      operationId: ByProjectKeyCartsByIDDelete
      parameters:
        - name: dataErasure
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/categories:
    description: |-
      Categories are used to organize products in a hierarchical structure.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_products:{projectKey}"
            - "view_categories:{projectKey}"
      operationId: ByProjectKeyCategoriesGet
      description: |-
        Either the [scope](/../api/scopes) `view_products:{projectKey}` or `view_categories:{projectKey}` is required.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Sort'
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: withTotal
          x-annotation-default: true
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/QueryPredicate'
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              type: "string"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryPagedQueryResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_products:{projectKey}"
            - "manage_categories:{projectKey}"
      operationId: ByProjectKeyCategoriesPost
      description: |-
        Either the [scope](/../api/scopes) `manage_products:{projectKey}` or `manage_categories:{projectKey}` is required.

        Creating a Category produces the [CategoryCreated](ctp:api:type:CategoryCreatedMessage) Message.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryDraft'

      responses:
        "201":
          description: |-
            201
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/categories/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: key
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_products:{projectKey}"
            - "view_categories:{projectKey}"
      operationId: ByProjectKeyCategoriesKeyByKeyGet
      description: |-
        Either the [scope](/../api/scopes) `view_products:{projectKey}` or `view_categories:{projectKey}` is required.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_products:{projectKey}"
            - "manage_categories:{projectKey}"
      operationId: ByProjectKeyCategoriesKeyByKeyPost
      description: |-
        Either the [scope](/../api/scopes) `manage_products:{projectKey}` or `manage_categories:{projectKey}` is required.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_products:{projectKey}"
            - "manage_categories:{projectKey}"
      operationId: ByProjectKeyCategoriesKeyByKeyDelete
      description: |-
        Either the [scope](/../api/scopes) `manage_products:{projectKey}` or `manage_categories:{projectKey}` is required.
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/categories/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: ID
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_products:{projectKey}"
            - "view_categories:{projectKey}"
      operationId: ByProjectKeyCategoriesByIDGet
      description: |-
        Either the [scope](/../api/scopes) `view_products:{projectKey}` or `view_categories:{projectKey}` is required.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_products:{projectKey}"
            - "manage_categories:{projectKey}"
      operationId: ByProjectKeyCategoriesByIDPost
      description: |-
        Either the [scope](/../api/scopes) `manage_products:{projectKey}` or `manage_categories:{projectKey}` is required.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_products:{projectKey}"
            - "manage_categories:{projectKey}"
      operationId: ByProjectKeyCategoriesByIDDelete
      description: |-
        Either the [scope](/../api/scopes) `manage_products:{projectKey}` or `manage_categories:{projectKey}` is required.
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/channels:
    description: |-
      Channels represent a source or destination of different entities. They can be used to model warehouses or stores.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_products:{projectKey}"
      operationId: ByProjectKeyChannelsGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Sort'
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: withTotal
          x-annotation-default: true
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/QueryPredicate'
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              type: "string"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelPagedQueryResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_products:{projectKey}"
      operationId: ByProjectKeyChannelsPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChannelDraft'

      responses:
        "201":
          description: |-
            201
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/channels/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: ID
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_products:{projectKey}"
      operationId: ByProjectKeyChannelsByIDGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_products:{projectKey}"
      operationId: ByProjectKeyChannelsByIDPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChannelUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_products:{projectKey}"
      operationId: ByProjectKeyChannelsByIDDelete
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/custom-objects:
    description: |-
      Store custom JSON values.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_products:{projectKey}"
            - "view_orders:{projectKey}"
            - "view_customers:{projectKey}"
            - "view_key_value_documents:{projectKey}"
      operationId: ByProjectKeyCustomObjectsGet
      description: |-
        For performance reasons, it is highly advisable to query for Custom Objects in a container by using the `container` field in the `where` predicate.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Sort'
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: withTotal
          x-annotation-default: true
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/QueryPredicate'
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              type: "string"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomObjectPagedQueryResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_products:{projectKey}"
            - "manage_orders:{projectKey}"
            - "manage_customers:{projectKey}"
            - "manage_key_value_documents:{projectKey}"
      operationId: ByProjectKeyCustomObjectsPost
      description: |-
        If an object with the given container/key exists, the object will be replaced with the new value and the version is incremented.
        If the request contains a version and an object with the given container/key, then the version must match the version of the existing object. Concurrent updates to the same Custom Object returns a [ConcurrentModification](ctp:api:type:ConcurrentModificationError) error even if the version is not provided.

        Fields with `null` values will **not be saved**.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomObjectDraft'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomObject'

        "201":
          description: |-
            201
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomObject'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/custom-objects/{container}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: container
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_products:{projectKey}"
            - "view_orders:{projectKey}"
            - "view_customers:{projectKey}"
            - "view_key_value_documents:{projectKey}"
      operationId: ByProjectKeyCustomObjectsByContainerGet
      parameters:
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Sort'
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/QueryPredicate'
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              type: "string"
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: withTotal
          x-annotation-default: true
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomObjectPagedQueryResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/custom-objects/{container}/{key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: container
        in: path
        required: true
        schema:
          type: "string"
      - name: key
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_products:{projectKey}"
            - "view_orders:{projectKey}"
            - "view_customers:{projectKey}"
            - "view_key_value_documents:{projectKey}"
      operationId: ByProjectKeyCustomObjectsByContainerByKeyGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomObject'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_products:{projectKey}"
            - "manage_orders:{projectKey}"
            - "manage_customers:{projectKey}"
            - "manage_key_value_documents:{projectKey}"
      operationId: ByProjectKeyCustomObjectsByContainerByKeyDelete
      parameters:
        - name: version
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: dataErasure
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomObject'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/customer-groups:
    description: |-
      customer-groups are used to evaluate products and channels.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_customers:{projectKey}"
            - "view_customer_groups:{projectKey}"
      operationId: ByProjectKeyCustomerGroupsGet
      parameters:
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/QueryPredicate'
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Sort'
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: withTotal
          x-annotation-default: true
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              type: "string"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerGroupPagedQueryResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_customers:{projectKey}"
            - "manage_customer_groups:{projectKey}"
      operationId: ByProjectKeyCustomerGroupsPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerGroupDraft'

      responses:
        "201":
          description: |-
            201
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerGroup'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/customer-groups/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: key
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_customers:{projectKey}"
            - "view_customer_groups:{projectKey}"
      operationId: ByProjectKeyCustomerGroupsKeyByKeyGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerGroup'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_customers:{projectKey}"
            - "manage_customer_groups:{projectKey}"
      operationId: ByProjectKeyCustomerGroupsKeyByKeyPost
      description: |-
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerGroupUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerGroup'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_customers:{projectKey}"
            - "manage_customer_groups:{projectKey}"
      operationId: ByProjectKeyCustomerGroupsKeyByKeyDelete
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerGroup'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/customer-groups/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: ID
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_customers:{projectKey}"
            - "view_customer_groups:{projectKey}"
      operationId: ByProjectKeyCustomerGroupsByIDGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerGroup'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_customers:{projectKey}"
            - "manage_customer_groups:{projectKey}"
      operationId: ByProjectKeyCustomerGroupsByIDPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerGroupUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerGroup'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_customers:{projectKey}"
            - "manage_customer_groups:{projectKey}"
      operationId: ByProjectKeyCustomerGroupsByIDDelete
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerGroup'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/customers:
    description: |-
      A Customer is a person purchasing products. Carts, Orders, Quotes, Reviews and Payments can be associated to a Customer.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_customers:{projectKey}"
      operationId: ByProjectKeyCustomersGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Sort'
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: withTotal
          x-annotation-default: true
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/QueryPredicate'
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              type: "string"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerPagedQueryResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_customers:{projectKey}"
      operationId: ByProjectKeyCustomersPost
      description: |-
        If the `anonymousCart` field is set on the [CustomerDraft](ctp:api:type:CustomerDraft), then the newly created Customer will be assigned to that [Cart](ctp:api:type:Cart).
        Similarly, if the `anonymousId` field is set, the Customer will be set on all [Carts](ctp:api:type:Cart), [Orders](ctp:api:type:Order), [ShoppingLists](ctp:api:type:ShoppingList) and [Payments](ctp:api:type:Payment) with the same `anonymousId`.
        Creating a Customer produces the [CustomerCreated](ctp:api:type:CustomerCreatedMessage) Message.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerDraft'

      responses:
        "201":
          description: |-
            201
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerSignInResult'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/customers/email-token:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    post:
      security:
        - oauth_2_0:
            - "manage_customers:{projectKey}"
      operationId: ByProjectKeyCustomersEmailTokenPost
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerCreateEmailToken'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerToken'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/customers/email-token={emailToken}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: emailToken
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_customers:{projectKey}"
      operationId: ByProjectKeyCustomersEmailTokenByEmailTokenGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/customers/email/confirm:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    post:
      security:
        - oauth_2_0:
            - "manage_customers:{projectKey}"
      operationId: ByProjectKeyCustomersEmailConfirmPost
      description: |-
        Verifying the email of the Customer produces the [CustomerEmailVerified](ctp:api:type:CustomerEmailVerifiedMessage) Message.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerEmailVerify'

      responses:
        "200":
          description: |-
            The email was verified.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/customers/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: key
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_customers:{projectKey}"
      operationId: ByProjectKeyCustomersKeyByKeyGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_customers:{projectKey}"
      operationId: ByProjectKeyCustomersKeyByKeyPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_customers:{projectKey}"
      operationId: ByProjectKeyCustomersKeyByKeyDelete
      description: |-
        Deleting a Customer produces the [CustomerDeleted](ctp:api:type:CustomerDeletedMessage) Message.
      parameters:
        - name: dataErasure
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/customers/password:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    post:
      security:
        - oauth_2_0:
            - "manage_customers:{projectKey}"
      operationId: ByProjectKeyCustomersPasswordPost
      description: |-
        Changing the password produces the [CustomerPasswordUpdated](ctp:api:type:CustomerPasswordUpdatedMessage) Message with `reset=false`.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerChangePassword'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/customers/password-token:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    post:
      security:
        - oauth_2_0:
            - "manage_customers:{projectKey}"
      operationId: ByProjectKeyCustomersPasswordTokenPost
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerCreatePasswordResetToken'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerToken'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/customers/password-token={passwordToken}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: passwordToken
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_customers:{projectKey}"
      operationId: ByProjectKeyCustomersPasswordTokenByPasswordTokenGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/customers/password/reset:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    post:
      security:
        - oauth_2_0:
            - "manage_customers:{projectKey}"
      operationId: ByProjectKeyCustomersPasswordResetPost
      description: |-
        Resetting the password of the Customer produces the [CustomerPasswordUpdated](ctp:api:type:CustomerPasswordUpdatedMessage) Message with `reset=true`.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerResetPassword'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/customers/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: ID
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_customers:{projectKey}"
      operationId: ByProjectKeyCustomersByIDGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_customers:{projectKey}"
      operationId: ByProjectKeyCustomersByIDPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_customers:{projectKey}"
      operationId: ByProjectKeyCustomersByIDDelete
      description: |-
        Deleting a Customer produces the [CustomerDeleted](ctp:api:type:CustomerDeletedMessage) Message.
      parameters:
        - name: dataErasure
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/discount-codes:
    description: |-
      Discount Codes can be added to a discount-code to enable certain discount-code discounts.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_discount_codes:{projectKey}"
      operationId: ByProjectKeyDiscountCodesGet
      description: |-
        Deprecated scope: `view_orders:{projectKey}`
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Sort'
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: withTotal
          x-annotation-default: true
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/QueryPredicate'
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              type: "string"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscountCodePagedQueryResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_discount_codes:{projectKey}"
      operationId: ByProjectKeyDiscountCodesPost
      description: |-
        Deprecated scope: `manage_orders:{projectKey}`
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DiscountCodeDraft'

      responses:
        "201":
          description: |-
            201
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscountCode'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/discount-codes/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: ID
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - " view_discount_codes:{projectKey}"
      operationId: ByProjectKeyDiscountCodesByIDGet
      description: |-
        Deprecated scope: `view_orders:{projectKey}`
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscountCode'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_discount_codes:{projectKey}"
      operationId: ByProjectKeyDiscountCodesByIDPost
      description: |-
        Deprecated scope: `manage_orders:{projectKey}`
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DiscountCodeUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscountCode'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_discount_codes:{projectKey}"
      operationId: ByProjectKeyDiscountCodesByIDDelete
      description: |-
        Deprecated scope: `manage_orders:{projectKey}`
      parameters:
        - name: dataErasure
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscountCode'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/extensions:
    description: |-
      Extend the behavior of an API with your business logic
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "manage_extensions:{projectKey}"
      operationId: ByProjectKeyExtensionsGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Sort'
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: withTotal
          x-annotation-default: true
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/QueryPredicate'
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              type: "string"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtensionPagedQueryResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_extensions:{projectKey}"
      operationId: ByProjectKeyExtensionsPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExtensionDraft'

      responses:
        "201":
          description: |-
            201
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Extension'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/extensions/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: key
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "manage_extensions:{projectKey}"
      operationId: ByProjectKeyExtensionsKeyByKeyGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Extension'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_extensions:{projectKey}"
      operationId: ByProjectKeyExtensionsKeyByKeyPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExtensionUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Extension'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_extensions:{projectKey}"
      operationId: ByProjectKeyExtensionsKeyByKeyDelete
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Extension'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/extensions/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: ID
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "manage_extensions:{projectKey}"
      operationId: ByProjectKeyExtensionsByIDGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Extension'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_extensions:{projectKey}"
      operationId: ByProjectKeyExtensionsByIDPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExtensionUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Extension'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_extensions:{projectKey}"
      operationId: ByProjectKeyExtensionsByIDDelete
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Extension'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/graphql:
    description: |-
      commercetools Composable Commerce provides a GraphQL API
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    post:
      security:
        - oauth_2_0:
            - "view_products:{projectKey}"
      operationId: ByProjectKeyGraphqlPost
      description: |-
        Execute a GraphQL query
      requestBody:
        content:
          application/graphql:
            schema:
              $ref: '#/components/schemas/GraphQLRequest'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GraphQLResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/in-business-unit/key={businessUnitKey}/me/customers:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: businessUnitKey
        in: path
        required: true
        schema:
          type: "string"
    post:
      security:
        - oauth_2_0:
            - "manage_my_business_units:{projectKey}"
      operationId: ByProjectKeyInBusinessUnitKeyByBusinessUnitKeyMeCustomersPost
      description: |-
        The My Business Unit endpoint does not support assigning existing Customers to a Business Unit.
        Associates with the `UpdateAssociates` [Permission](ctp:api:type:Permission) can use this endpoint to create a new Customer and associate it with the Business Unit.
        If the required [Permission](/projects/associate-roles#permission) is missing, an [AssociateMissingPermission](/errors#associatemissingpermission) error is returned.
        The new Associate is created with an empty set of roles.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MyBusinessUnitAssociateDraft'

      responses:
        "201":
          description: |-
            201
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerSignInResult'

  /{projectKey}/in-store/key={storeKey}/carts:
    description: |-
      A shopping cart holds product variants and can be ordered.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: storeKey
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_orders:{projectKey}"
            - "view_orders:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyCartsGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Sort'
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: withTotal
          x-annotation-default: true
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/QueryPredicate'
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              type: "string"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartPagedQueryResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_orders:{projectKey}"
            - "manage_orders:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyCartsPost
      description: |-
        The `store` field in the created [Cart](ctp:api:type:Cart) is set to the Store specified by the `storeKey` path parameter.

        Specific Error Codes: [CountryNotConfiguredInStore](ctp:api:type:CountryNotConfiguredInStoreError)
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartDraft'

      responses:
        "201":
          description: |-
            201
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/in-store/key={storeKey}/carts/customer-id={customerId}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: storeKey
        in: path
        required: true
        schema:
          type: "string"
      - name: customerId
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_orders:{projectKey}"
            - "view_orders:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyCartsCustomerIdByCustomerIdGet
      description: |-
        Retrieves the recently modified active Cart of a Customer with [CartOrigin](ctp:api:type:CartOrigin) `Customer`. If no active Cart exists, a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned.

        If the Cart exists in the Project but does not have the `store` field, or the `store` field references a different Store, a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned.

        To ensure the Cart is up-to-date with current values (such as Prices and Discounts), use the [Recalculate](ctp:api:type:CartRecalculateAction) update action.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/in-store/key={storeKey}/carts/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: storeKey
        in: path
        required: true
        schema:
          type: "string"
      - name: key
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_orders:{projectKey}"
            - "view_orders:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyCartsKeyByKeyGet
      description: |-
        If the Cart exists in the Project but does not have the `store` field, or the `store` field references a different Store, a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned.

        To ensure the Cart is up-to-date with current values (such as Prices and Discounts), use the [Recalculate](ctp:api:type:CartRecalculateAction) update action.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_orders:{projectKey}"
            - "manage_orders:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyCartsKeyByKeyPost
      description: |-
        If the Cart exists in the Project but does not have the `store` field, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_orders:{projectKey}"
            - "manage_orders:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyCartsKeyByKeyDelete
      description: |-
        If the Cart exists in the Project but does not have the `store` field, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
      parameters:
        - name: dataErasure
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/in-store/key={storeKey}/carts/replicate:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: storeKey
        in: path
        required: true
        schema:
          type: "string"
    post:
      security:
        - oauth_2_0:
            - "manage_orders:{projectKey}:{storeKey}"
            - "manage_orders:{projectKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyCartsReplicatePost
      description: |-
        Creates a new Cart by replicating an existing Cart or Order. Can be useful in cases where a customer wants to cancel a recent order to make some changes or reorder a previous order.

        The replicated Cart preserves Customer information, Line Items and Custom Line Items, Custom Fields, Discount Codes, and other settings of the Cart or Order. If the Line Items become invalid, for example, due to removed Products or Prices, they are removed from the new Cart. If the Customer switches to another Customer Group, the new Cart is updated with the new value. It has up-to-date Tax Rates, Prices, and Line Item product data and is in `Active` [CartState](ctp:api:type:CartState).

        The new Cart does not contain payments or deliveries. The [State](ctp:api:type:ItemState) of Line Items and Custom Line Items is reset to `initial`.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReplicaCartDraft'

      responses:
        "201":
          description: |-
            201
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/in-store/key={storeKey}/carts/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: storeKey
        in: path
        required: true
        schema:
          type: "string"
      - name: ID
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_orders:{projectKey}"
            - "view_orders:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyCartsByIDGet
      description: |-
        If the Cart exists in the Project but does not have the `store` field, or the `store` field references a different Store, a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned.

        To ensure the Cart is up-to-date with current values (such as Prices and Discounts), use the [Recalculate](ctp:api:type:CartRecalculateAction) update action.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_orders:{projectKey}"
            - "manage_orders:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyCartsByIDPost
      description: |-
        Updates a [Cart](ctp:api:type:Cart) in the Store specified by `storeKey`.
        If the Cart exists in the Project but does not have the `store` field, or the `store` field references a different Store, a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_orders:{projectKey}"
            - "manage_orders:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyCartsByIDDelete
      description: |-
        If the Cart exists in the Project but does not have the `store` field, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
      parameters:
        - name: dataErasure
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/in-store/key={storeKey}/customers:
    description: |-
      A Customer is a person purchasing products. Carts, Orders,
      Comments and Reviews can be associated to a Customer.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: storeKey
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_customers:{projectKey}"
            - "view_customers:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyCustomersGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Sort'
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: withTotal
          x-annotation-default: true
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/QueryPredicate'
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              type: "string"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerPagedQueryResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_customers:{projectKey}"
            - "manage_customers:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyCustomersPost
      description: |-
        When using this endpoint, if omitted, the Customer `stores` field is set to the Store specified in the path parameter.

        If the `anonymousCart` field is set on the [CustomerDraft](ctp:api:type:CustomerDraft), then the newly created Customer will be assigned to that [Cart](ctp:api:type:Cart).
        Similarly, if the `anonymousId` field is set, the Customer will be set on all [Carts](ctp:api:type:Cart), [Orders](ctp:api:type:Order), [ShoppingLists](ctp:api:type:ShoppingList) and [Payments](ctp:api:type:Payment) with the same `anonymousId`.
        If a Cart with a `store` field specified, the `store` field must reference the same Store specified in the `{storeKey}` path parameter.
        Creating a Customer produces the [CustomerCreated](ctp:api:type:CustomerCreatedMessage) Message.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerDraft'

      responses:
        "201":
          description: |-
            201
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerSignInResult'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/in-store/key={storeKey}/customers/email-token:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: storeKey
        in: path
        required: true
        schema:
          type: "string"
    post:
      security:
        - oauth_2_0:
            - "manage_customers:{projectKey}"
            - "manage_customers:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyCustomersEmailTokenPost
      description: |-
        If the Customer exists in the Project but the `stores` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerCreateEmailToken'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerToken'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/in-store/key={storeKey}/customers/email-token={emailToken}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: storeKey
        in: path
        required: true
        schema:
          type: "string"
      - name: emailToken
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_customers:{projectKey}"
            - "view_customers:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyCustomersEmailTokenByEmailTokenGet
      description: |-
        If the Customer exists in the Project but the `stores` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/in-store/key={storeKey}/customers/email/confirm:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: storeKey
        in: path
        required: true
        schema:
          type: "string"
    post:
      security:
        - oauth_2_0:
            - "manage_customers:{projectKey}"
            - "manage_customers:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyCustomersEmailConfirmPost
      description: |-
        The customer verifies the email using the token value.
        Verifying the email of the Customer produces the [CustomerEmailVerified](ctp:api:type:CustomerEmailVerifiedMessage) Message.

        If the Customer exists in the Project but the `stores` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerEmailVerify'

      responses:
        "200":
          description: |-
            The email was verified.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/in-store/key={storeKey}/customers/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: storeKey
        in: path
        required: true
        schema:
          type: "string"
      - name: key
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_customers:{projectKey}"
            - "view_customers:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyCustomersKeyByKeyGet
      description: |-
        If the Customer exists in the Project but the `stores` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_customers:{projectKey}"
            - "manage_customers:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyCustomersKeyByKeyPost
      description: |-
        If the Customer exists in the Project but the `stores` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_customers:{projectKey}"
            - "manage_customers:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyCustomersKeyByKeyDelete
      description: |-
        Deleting a Customer produces the [CustomerDeleted](ctp:api:type:CustomerDeletedMessage) Message.

        If the Customer exists in the Project but the `stores` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
      parameters:
        - name: dataErasure
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/in-store/key={storeKey}/customers/password:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: storeKey
        in: path
        required: true
        schema:
          type: "string"
    post:
      security:
        - oauth_2_0:
            - "manage_customers:{projectKey}"
            - "manage_customers:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordPost
      description: |-
        Changing the password of the Customer produces the [CustomerPasswordUpdated](ctp:api:type:CustomerPasswordUpdatedMessage) Message with `reset=false`.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerChangePassword'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/in-store/key={storeKey}/customers/password-token:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: storeKey
        in: path
        required: true
        schema:
          type: "string"
    post:
      security:
        - oauth_2_0:
            - "manage_customers:{projectKey}"
            - "manage_customers:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordTokenPost
      description: |-
        If the Customer exists in the Project but the `stores` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerCreatePasswordResetToken'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerToken'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/in-store/key={storeKey}/customers/password-token={passwordToken}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: storeKey
        in: path
        required: true
        schema:
          type: "string"
      - name: passwordToken
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_customers:{projectKey}"
            - "view_customers:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordTokenByPasswordTokenGet
      description: |-
        If the Customer exists in the Project but the `stores` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/in-store/key={storeKey}/customers/password/reset:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: storeKey
        in: path
        required: true
        schema:
          type: "string"
    post:
      security:
        - oauth_2_0:
            - "manage_customers:{projectKey}"
            - "manage_customers:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordResetPost
      description: |-
        Resetting the password of the Customer produces the [CustomerPasswordUpdated](ctp:api:type:CustomerPasswordUpdatedMessage) Message with `reset=true`.

        If the Customer exists in the Project but the `stores` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerResetPassword'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/in-store/key={storeKey}/customers/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: storeKey
        in: path
        required: true
        schema:
          type: "string"
      - name: ID
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_customers:{projectKey}"
            - "view_customers:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyCustomersByIDGet
      description: |-
        If the Customer exists in the Project but the `stores` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_customers:{projectKey}"
            - "manage_customers:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyCustomersByIDPost
      description: |-
        If the Customer exists in the Project but the `stores` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_customers:{projectKey}"
            - "manage_customers:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyCustomersByIDDelete
      description: |-
        Deleting a Customer produces the [CustomerDeleted](ctp:api:type:CustomerDeletedMessage) Message.

        If the Customer exists in the Project but the `stores` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
      parameters:
        - name: dataErasure
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/in-store/key={storeKey}/login:
    description: |-
      Retrieves the authenticated customer.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: storeKey
        in: path
        required: true
        schema:
          type: "string"
    post:
      security:
        - oauth_2_0:
            - "manage_customers:{projectKey}"
            - "manage_customers:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyLoginPost
      description: |-
        Authenticates a Customer associated with a Store. For more information, see [Global versus Store-specific Customers](/../api/customers-overview#global-versus-store-specific-customers).

        If the Customer exists in the Project but the `stores` field references a different Store, this method returns an [InvalidCredentials](ctp:api:type:InvalidCredentialsError) error.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerSignin'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerSignInResult'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/in-store/key={storeKey}/me:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: storeKey
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "manage_my_profile:{projectKey}"
            - "manage_my_profile:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyMeGet
      parameters:
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Sort'
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: withTotal
          x-annotation-default: true
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/QueryPredicate'
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              type: "string"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'

    post:
      security:
        - oauth_2_0:
            - "manage_my_profile:{projectKey}"
            - "manage_my_profile:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyMePost
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MyCustomerUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'

    delete:
      security:
        - oauth_2_0:
            - "manage_my_profile:{projectKey}"
            - "manage_my_profile:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyMeDelete
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'

        "409":
          $ref: '#/components/responses/conflicting_409'
  /{projectKey}/in-store/key={storeKey}/me/active-cart:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: storeKey
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "manage_my_orders:{projectKey}"
            - "manage_my_orders:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyMeActiveCartGet
      description: |-
        Retrieves the Customer's most recently modified active Cart in the Store specified by the `storeKey` path parameter.

        Carts with `Merchant` or `Quote` [CartOrigin](ctp:api:type:CartOrigin) are ignored.

        If no active Cart exists, a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/in-store/key={storeKey}/me/carts:
    description: |-
      A shopping cart holds product variants and can be ordered.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: storeKey
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "manage_my_orders:{projectKey}"
            - "manage_my_orders:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyMeCartsGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Sort'
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: withTotal
          x-annotation-default: true
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/QueryPredicate'
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              type: "string"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartPagedQueryResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_my_orders:{projectKey}"
            - "manage_my_orders:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyMeCartsPost
      description: |-
        The `store` field in the created [Cart](ctp:api:type:Cart) is set to the Store specified by the `storeKey` path parameter.

        Specific Error Codes: [CountryNotConfiguredInStore](ctp:api:type:CountryNotConfiguredInStoreError)
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MyCartDraft'

      responses:
        "201":
          description: |-
            201
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/in-store/key={storeKey}/me/carts/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: storeKey
        in: path
        required: true
        schema:
          type: "string"
      - name: ID
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "manage_my_orders:{projectKey}"
            - "manage_my_orders:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyMeCartsByIDGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_my_orders:{projectKey}"
            - "manage_my_orders:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyMeCartsByIDPost
      description: |-
        If the Cart exists in the Project but does not have the `store` field, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MyCartUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_my_orders:{projectKey}"
            - "manage_my_orders:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyMeCartsByIDDelete
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/in-store/key={storeKey}/me/email/confirm:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: storeKey
        in: path
        required: true
        schema:
          type: "string"
    post:
      security:
        - oauth_2_0:
            - "manage_my_profile:{projectKey}"
            - "manage_my_profile:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyMeEmailConfirmPost
      description: |-
        This is the last step in the [email verification process of a Customer](/../api/projects/customers#email-verification-of-customer-in-store).
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MyCustomerEmailVerify'

      responses:
        "200":
          description: |-
            The email was verified.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/in-store/key={storeKey}/me/login:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: storeKey
        in: path
        required: true
        schema:
          type: "string"
    post:
      security:
        - oauth_2_0:
            - "manage_my_profile:{projectKey}"
            - "manage_my_profile:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyMeLoginPost
      description: |-
        Retrieves the authenticated Customer (that matches the given email/password pair) if they are part of a specific [Store](ctp:api:type:Store).

        - If the Customer does not have a Cart, the most recently modified anonymous cart becomes the Customer's Cart.
        - If the Customer already has a Cart, the most recently modified anonymous cart is handled according to [AnonymousCartSignInMode](ctp:api:type:AnonymousCartSignInMode).

        If a Cart is returned as part of [CustomerSignInResult](ctp:api:type:CustomerSignInResult), it has been [recalculated](ctp:api:type:MyCartRecalculateAction) with up-to-date prices, taxes, discounts, and invalid line items removed.

        If an account with the given credentials is not found, an [InvalidCredentials](ctp:api:type:InvalidCredentialsError) error is returned.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MyCustomerSignin'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerSignInResult'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/in-store/key={storeKey}/me/orders:
    description: |-
      An order can be created from a order, usually after a checkout process has been completed.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: storeKey
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "manage_my_orders:{projectKey}"
            - "manage_my_orders:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyMeOrdersGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Sort'
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: withTotal
          x-annotation-default: true
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/QueryPredicate'
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              type: "string"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderPagedQueryResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_my_orders:{projectKey}"
            - "manage_my_orders:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyMeOrdersPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MyOrderFromCartDraft'

      responses:
        "201":
          description: |-
            201
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/in-store/key={storeKey}/me/orders/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: storeKey
        in: path
        required: true
        schema:
          type: "string"
      - name: ID
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "manage_my_orders:{projectKey}"
            - "manage_my_orders:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyMeOrdersByIDGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/in-store/key={storeKey}/me/password:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: storeKey
        in: path
        required: true
        schema:
          type: "string"
    post:
      security:
        - oauth_2_0:
            - "manage_my_profile:{projectKey}"
            - "manage_my_profile:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyMePasswordPost
      description: |-
        Changing the password of the Customer produces the [CustomerPasswordUpdated](ctp:api:type:CustomerPasswordUpdatedMessage) Message with `reset=false`.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MyCustomerChangePassword'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/in-store/key={storeKey}/me/password/reset:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: storeKey
        in: path
        required: true
        schema:
          type: "string"
    post:
      security:
        - oauth_2_0:
            - "manage_my_profile:{projectKey}"
            - "manage_my_profile:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyMePasswordResetPost
      description: |-
        This is the last step in the [password reset process of the authenticated Customer](/../api/projects/customers#password-reset-of-customer-in-store).

        Resetting a password produces the of the Customer [CustomerPasswordUpdated](ctp:api:type:CustomerPasswordUpdatedMessage) Message with `reset=true`.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MyCustomerResetPassword'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/in-store/key={storeKey}/me/shopping-lists:
    description: |-
      shopping-lists e.g. for wishlist support
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: storeKey
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "manage_my_shopping_lists:{projectKey}"
            - "manage_my_shopping_lists:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Sort'
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: withTotal
          x-annotation-default: true
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/QueryPredicate'
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              type: "string"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingListPagedQueryResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_my_shopping_lists:{projectKey}"
            - "manage_my_shopping_lists:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsPost
      description: |-
        When using this endpoint, the `store` field of a ShoppingList is always set to the Store specified in the path parameter.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MyShoppingListDraft'

      responses:
        "201":
          description: |-
            201
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingList'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/in-store/key={storeKey}/me/shopping-lists/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: storeKey
        in: path
        required: true
        schema:
          type: "string"
      - name: key
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "manage_my_shopping_lists:{projectKey}"
            - "manage_my_shopping_lists:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsKeyByKeyGet
      description: |-
        If a ShoppingList exists in a Project but does _not_ have the `store` field, or the `store` field references a different Store, the [ResourceNotFound](/errors#404-not-found-1) error is returned.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingList'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_my_shopping_lists:{projectKey}"
            - "manage_my_shopping_lists:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsKeyByKeyPost
      description: |-
        If a ShoppingList exists in a Project but does _not_ have the `store` field, or the `store` field references a different Store,
        the [ResourceNotFound](/errors#404-not-found-1) error is returned.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MyShoppingListUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingList'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_my_shopping_lists:{projectKey}"
            - "manage_my_shopping_lists:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsKeyByKeyDelete
      description: |-
        If a ShoppingList exists in a Project but does _not_ have the `store` field, or the `store` field references a different Store,
        the [ResourceNotFound](/errors#404-not-found-1) error is returned.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: dataErasure
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingList'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/in-store/key={storeKey}/me/shopping-lists/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: storeKey
        in: path
        required: true
        schema:
          type: "string"
      - name: ID
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "manage_my_shopping_lists:{projectKey}:{storeKey}"
            - "manage_my_shopping_lists:{projectKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsByIDGet
      description: |-
        If a ShoppingList exists in a Project but does _not_ have the `store` field, or the `store` field references a different Store,
        the [ResourceNotFound](/errors#404-not-found-1) error is returned.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingList'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_my_shopping_lists:{projectKey}"
            - "manage_my_shopping_lists:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsByIDPost
      description: |-
        If a ShoppingList exists in a Project but does _not_ have the `store` field, or the `store` field references a different Store,
        the [ResourceNotFound](/errors#404-not-found-1) error is returned.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MyShoppingListUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingList'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_my_shopping_lists:{projectKey}"
            - "manage_my_shopping_lists:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsByIDDelete
      description: |-
        If a ShoppingList exists in a Project but does _not_ have the `store` field, or the `store` field references a different Store,
        the [ResourceNotFound](/errors#404-not-found-1) error is returned.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: dataErasure
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingList'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/in-store/key={storeKey}/me/signup:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: storeKey
        in: path
        required: true
        schema:
          type: "string"
    post:
      security:
        - oauth_2_0:
            - "manage_my_profile:{projectKey}"
            - "manage_my_profile:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyMeSignupPost
      description: |-
        If omitted in the request body, the [Customer](ctp:api:type:Customer) `stores` field is set to the Store specified in the path parameter.

        Creating a Customer produces the [CustomerCreated](ctp:api:type:CustomerCreatedMessage) Message.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MyCustomerDraft'

      responses:
        "201":
          description: |-
            201
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerSignInResult'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/in-store/key={storeKey}/orders:
    description: |-
      An order can be created from a cart, usually after a checkout process has been completed.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: storeKey
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_orders:{projectKey}"
            - "view_orders:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyOrdersGet
      description: |-
        Queries orders in a specific Store.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Sort'
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: withTotal
          x-annotation-default: true
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/QueryPredicate'
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              type: "string"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderPagedQueryResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_orders:{projectKey}"
            - "manage_orders:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyOrdersPost
      description: |-
        Creates an order from a Cart from a specific Store.
        When using this endpoint the orders's store field is always set to the store specified in the path parameter.
        The cart must have a shipping address set before creating an order. When using the Platform TaxMode,
        the shipping address is used for tax calculation.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderFromCartDraft'

      responses:
        "201":
          description: |-
            201
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/in-store/key={storeKey}/orders/order-number={orderNumber}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: storeKey
        in: path
        required: true
        schema:
          type: "string"
      - name: orderNumber
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_orders:{projectKey}"
            - "view_orders:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyOrdersOrderNumberByOrderNumberGet
      description: |-
        Returns an order by its order number from a specific Store.

        If the order exists in the project but does not have the store field,
        or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
        In case the orderNumber does not match the regular expression [a-zA-Z0-9_-]+,
        it should be provided in URL-encoded format.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_orders:{projectKey}"
            - "manage_orders:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyOrdersOrderNumberByOrderNumberPost
      description: |-
        Updates an order in the store specified by {storeKey}.
        If the order exists in the project but does not have the store field,
        or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
        In case the orderNumber does not match the regular expression [a-zA-Z0-9_-]+,
        it should be provided in URL-encoded format.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_orders:{projectKey}"
            - "manage_orders:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyOrdersOrderNumberByOrderNumberDelete
      parameters:
        - name: dataErasure
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/in-store/key={storeKey}/orders/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: storeKey
        in: path
        required: true
        schema:
          type: "string"
      - name: ID
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_orders:{projectKey}"
            - "view_orders:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyOrdersByIDGet
      description: |-
        Returns an order by its ID from a specific Store.
        If the order exists in the project but does not have the store field,
        or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_orders:{projectKey}"
            - "manage_orders:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyOrdersByIDPost
      description: |-
        Updates an order in the store specified by {storeKey}.
        If the order exists in the project but does not have the store field,
        or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_orders:{projectKey}"
            - "manage_orders:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyOrdersByIDDelete
      parameters:
        - name: dataErasure
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/in-store/key={storeKey}/product-projections/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: storeKey
        in: path
        required: true
        schema:
          type: "string"
      - name: key
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_products:{projectKey}"
            - "view_published_products:{projectKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyProductProjectionsKeyByKeyGet
      description: |-
        Gets the current or staged representation of a [Product](ctp:api:type:Product) by its key from the specified [Store](ctp:api:type:Store).
        If the Store has defined some languages, countries, distribution or supply Channels,
        they are used for projections based on [locale](ctp:api:type:ProductProjectionLocales), [price](ctp:api:type:ProductProjectionPrices)
        and [inventory](ctp:api:type:ProductProjectionInventoryEntries).

        When used with an API Client that has the `view_published_products:{projectKey}` scope, this endpoint only returns published (current) Product Projections.
      parameters:
        - name: staged
          x-annotation-default: false
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: priceCurrency
          in: query
          required: false
          style: form
          schema:
            $ref: '#/components/schemas/CurrencyCode'
          explode: true
        - name: priceCountry
          in: query
          required: false
          style: form
          schema:
            $ref: '#/components/schemas/CountryCode'
          explode: true
        - name: priceCustomerGroup
          in: query
          required: false
          style: form
          schema:
            type: "string"
          explode: true
        - name: priceChannel
          in: query
          required: false
          style: form
          schema:
            type: "string"
          explode: true
        - name: localeProjection
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Locale'
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductProjection'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/in-store/key={storeKey}/product-projections/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: storeKey
        in: path
        required: true
        schema:
          type: "string"
      - name: ID
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_products:{projectKey}"
            - "view_published_products:{projectKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyProductProjectionsByIDGet
      description: |-
        Gets the current or staged representation of a [Product](ctp:api:type:Product) by its ID from the specified [Store](ctp:api:type:Store).
        If the Store has defined some languages, countries, distribution or supply Channels,
        they are used for projections based on [locale](ctp:api:type:ProductProjectionLocales), [price](ctp:api:type:ProductProjectionPrices)
        and [inventory](ctp:api:type:ProductProjectionInventoryEntries).

        When used with an API Client that has the `view_published_products:{projectKey}` scope, this endpoint only returns published (current) Product Projections.
      parameters:
        - name: staged
          x-annotation-default: false
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: priceCurrency
          in: query
          required: false
          style: form
          schema:
            $ref: '#/components/schemas/CurrencyCode'
          explode: true
        - name: priceCountry
          in: query
          required: false
          style: form
          schema:
            $ref: '#/components/schemas/CountryCode'
          explode: true
        - name: priceCustomerGroup
          in: query
          required: false
          style: form
          schema:
            type: "string"
          explode: true
        - name: priceChannel
          in: query
          required: false
          style: form
          schema:
            type: "string"
          explode: true
        - name: localeProjection
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Locale'
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductProjection'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/in-store/key={storeKey}/product-selection-assignments:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: storeKey
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_product_selections:{projectKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyProductSelectionAssignmentsGet
      description: |-
        Queries Product Selection assignments in a specific Store.

        The response will include duplicate Products whenever more than one active Product Selection of the Store
        includes a Product. To make clear through which Product Selection a Product is available in the Store
        the response contains assignments including both the Product and the Product Selection.
        Only Products of Product Selections that are activated in Store will be returned.
      parameters:
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: withTotal
          x-annotation-default: true
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductsInStorePagedQueryResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/in-store/key={storeKey}/shipping-methods/matching-cart:
    description: |-
      Get ShippingMethods for a cart in a store
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: storeKey
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_orders:{projectKey}"
            - "view_orders:{projectKey}:{storeKey}"
            - "manage_customers:{projectKey}:{storeKey}"
            - "view_shipping_methods:{projectKey}"
            - "manage_my_orders:{projectKey}"
            - "manage_my_orders:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyShippingMethodsMatchingCartGet
      description: |-
        Retrieves all the ShippingMethods that can ship to the shipping address of the given Cart in a given Store.
        Each ShippingMethod contains exactly one ShippingRate with the flag `isMatching` set to `true`.
        This ShippingRate is used when the ShippingMethod is [added to the Cart](ctp:api:type:CartSetShippingMethodAction).
      parameters:
        - name: cartId
          in: query
          required: true
          style: form
          schema:
            type: "string"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShippingMethodPagedQueryResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/in-store/key={storeKey}/shopping-lists:
    description: |-
      shopping-lists e.g. for wishlist support
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: storeKey
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_shopping_lists:{projectKey}"
            - "view_shopping_lists:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyShoppingListsGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Sort'
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: withTotal
          x-annotation-default: true
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/QueryPredicate'
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              type: "string"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingListPagedQueryResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_shopping_lists:{projectKey}"
            - "manage_shopping_lists:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyShoppingListsPost
      description: |-
        When using this endpoint, the `store` field of a ShoppingList is always set to the Store specified in the path parameter.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShoppingListDraft'

      responses:
        "201":
          description: |-
            201
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingList'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/in-store/key={storeKey}/shopping-lists/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: storeKey
        in: path
        required: true
        schema:
          type: "string"
      - name: key
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_shopping_lists:{projectKey}"
            - "view_shopping_lists:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyShoppingListsKeyByKeyGet
      description: |-
        If a ShoppingList exists in a Project but does _not_ have the `store` field, or the `store` field references a different Store,
        the [ResourceNotFound](/errors#404-not-found-1) error is returned.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingList'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_shopping_lists:{projectKey}"
            - "manage_shopping_lists:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyShoppingListsKeyByKeyPost
      description: |-
        If a ShoppingList exists in a Project but does _not_ have the `store` field, or the `store` field references a different Store,
        the [ResourceNotFound](/errors#404-not-found-1) error is returned.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShoppingListUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingList'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_shopping_lists:{projectKey}"
            - "manage_shopping_lists:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyShoppingListsKeyByKeyDelete
      description: |-
        If a ShoppingList exists in a Project but does _not_ have the `store` field, or the `store` field references a different Store,
        the [ResourceNotFound](/errors#404-not-found-1) error is returned.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: dataErasure
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingList'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/in-store/key={storeKey}/shopping-lists/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: storeKey
        in: path
        required: true
        schema:
          type: "string"
      - name: ID
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_shopping_lists:{projectKey}"
            - "view_shopping_lists:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyShoppingListsByIDGet
      description: |-
        If a ShoppingList exists in a Project but does _not_ have the `store` field, or the `store` field references a different Store,
        the [ResourceNotFound](/errors#404-not-found-1) error is returned.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingList'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_shopping_lists:{projectKey}"
            - "manage_shopping_lists:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyShoppingListsByIDPost
      description: |-
        If a ShoppingList exists in a Project but does _not_ have the `store` field, or the `store` field references a different Store,
        the [ResourceNotFound](/errors#404-not-found-1) error is returned.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShoppingListUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingList'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_shopping_lists:{projectKey}"
            - "manage_shopping_lists:{projectKey}:{storeKey}"
      operationId: ByProjectKeyInStoreKeyByStoreKeyShoppingListsByIDDelete
      description: |-
        If a ShoppingList exists in a Project but does _not_ have the `store` field, or the `store` field references a different Store,
        the [ResourceNotFound](/errors#404-not-found-1) error is returned.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: dataErasure
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingList'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/inventory:
    description: |-
      Inventory allows you to track stock quantities.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_products:{projectKey}"
      operationId: ByProjectKeyInventoryGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Sort'
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: withTotal
          x-annotation-default: true
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/QueryPredicate'
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              type: "string"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryPagedQueryResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_products:{projectKey}"
      operationId: ByProjectKeyInventoryPost
      description: |-
        Produces the [InventoryEntryCreated](ctp:api:type:InventoryEntryCreatedMessage) Message.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InventoryEntryDraft'

      responses:
        "201":
          description: |-
            201
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryEntry'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/inventory/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: key
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_products:{projectKey}"
      operationId: ByProjectKeyInventoryKeyByKeyGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryEntry'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_products:{projectKey}"
      operationId: ByProjectKeyInventoryKeyByKeyPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InventoryEntryUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryEntry'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_products:{projectKey}"
      operationId: ByProjectKeyInventoryKeyByKeyDelete
      description: |-
        Produces the [InventoryEntryDeleted](ctp:api:type:InventoryEntryDeletedMessage) Message.
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryEntry'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/inventory/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: ID
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_products:{projectKey}"
      operationId: ByProjectKeyInventoryByIDGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryEntry'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_products:{projectKey}"
      operationId: ByProjectKeyInventoryByIDPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InventoryEntryUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryEntry'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_products:{projectKey}"
      operationId: ByProjectKeyInventoryByIDDelete
      description: |-
        Produces the [InventoryEntryDeleted](ctp:api:type:InventoryEntryDeletedMessage) Message.
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryEntry'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/login:
    description: |-
      Retrieves the authenticated customer.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    post:
      security:
        - oauth_2_0:
            - "manage_customers:{projectKey}"
      operationId: ByProjectKeyLoginPost
      description: |-
        Authenticates a global Customer not associated with a Store.
        For more information, see [Global versus Store-specific Customers](/../api/customers-overview#global-versus-store-specific-customers).
        If the Customer is registered in a Store, use the [Authenticate (sign in) Customer in Store](/../api/projects/customers#authenticate-sign-in-customer-in-store) method.

        If an account with the given credentials is not found, an [InvalidCredentials](ctp:api:type:InvalidCredentialsError) error is returned.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerSignin'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerSignInResult'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/me:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "manage_my_profile:{projectKey}"
      operationId: ByProjectKeyMeGet
      parameters:
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Sort'
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: withTotal
          x-annotation-default: true
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/QueryPredicate'
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              type: "string"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_my_profile:{projectKey}"
      operationId: ByProjectKeyMePost
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MyCustomerUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_my_profile:{projectKey}"
      operationId: ByProjectKeyMeDelete
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/me/active-cart:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "manage_my_orders:{projectKey}"
      operationId: ByProjectKeyMeActiveCartGet
      description: |-
        Retrieves the Customer's most recently modified active Cart.
        Carts with `Merchant` or `Quote` [CartOrigin](ctp:api:type:CartOrigin) are ignored.

        If no active Cart exists, a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/me/business-units:
    description: |-
      MyBusinessUnit creates and provides access to Business Units scoped to a specific user.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "manage_my_business_units:{projectKey}"
      operationId: ByProjectKeyMeBusinessUnitsGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Sort'
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: withTotal
          x-annotation-default: true
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/QueryPredicate'
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              type: "string"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessUnitPagedQueryResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_my_business_units:{projectKey}"
      operationId: ByProjectKeyMeBusinessUnitsPost
      description: |-
        Automatically assigns the Associate to the Business Unit in the default [Associate Role](ctp:api:type:AssociateRole) defined in [BusinessUnitConfiguration](ctp:api:type:BusinessUnitConfiguration). If there is no default Associate Role configured, this request fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error. When creating a Division, the Associate must have the `AddChildUnits` [Permission](ctp:api:type:Permission) in the parent unit. If the required [Permission](/projects/associate-roles#permission) is missing, an [AssociateMissingPermission](/errors#associatemissingpermission) error is returned.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MyBusinessUnitDraft'

      responses:
        "201":
          description: |-
            201
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessUnit'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/me/business-units/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: key
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "manage_my_business_units:{projectKey}"
      operationId: ByProjectKeyMeBusinessUnitsKeyByKeyGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessUnit'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_my_business_units:{projectKey}"
      operationId: ByProjectKeyMeBusinessUnitsKeyByKeyPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MyBusinessUnitUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessUnit'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_my_business_units:{projectKey}"
      operationId: ByProjectKeyMeBusinessUnitsKeyByKeyDelete
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessUnit'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/me/business-units/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: ID
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "manage_my_business_units:{projectKey}"
      operationId: ByProjectKeyMeBusinessUnitsByIDGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessUnit'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_my_business_units:{projectKey}"
      operationId: ByProjectKeyMeBusinessUnitsByIDPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MyBusinessUnitUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessUnit'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_my_business_units:{projectKey}"
      operationId: ByProjectKeyMeBusinessUnitsByIDDelete
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessUnit'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/me/carts:
    description: |-
      A shopping cart holds product variants and can be ordered.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "manage_my_orders:{projectKey}"
      operationId: ByProjectKeyMeCartsGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Sort'
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: withTotal
          x-annotation-default: true
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/QueryPredicate'
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              type: "string"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartPagedQueryResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_my_orders:{projectKey}"
      operationId: ByProjectKeyMeCartsPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MyCartDraft'

      responses:
        "201":
          description: |-
            201
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/me/carts/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: key
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "manage_my_orders:{projectKey}"
      operationId: ByProjectKeyMeCartsKeyByKeyGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_my_orders:{projectKey}"
      operationId: ByProjectKeyMeCartsKeyByKeyPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MyCartUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_my_orders:{projectKey}"
      operationId: ByProjectKeyMeCartsKeyByKeyDelete
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/me/carts/replicate:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    post:
      security:
        - oauth_2_0:
            - "manage_my_orders:{projectKey}"
      operationId: ByProjectKeyMeCartsReplicatePost
      description: |-
        Creates a new Cart by replicating an existing Cart or Order of the authenticated Customer.
        This can be useful in cases where a customer wants to cancel a recent order to make some changes or reorder a previous order.

        The replicated Cart preserves Customer information, Line Items and Custom Line Items, Custom Fields, Discount Codes, and other settings of the Cart or Order.
        If the Line Items become invalid, for example, due to removed Products or Prices, they are removed from the new Cart.
        If the Customer switches to another Customer Group, the new Cart is updated with the new value.
        It has up-to-date Tax Rates, Prices, and Line Item product data and is in `Active` [CartState](ctp:api:type:CartState).

        The new Cart does not contain Payments or Deliveries. The [State](ctp:api:type:ItemState) of Line Items and Custom Line Items is reset to `initial`.

        In case the Cart or Order to be replicated does not belong to the authenticaed Customer, the API returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReplicaMyCartDraft'

      responses:
        "201":
          description: |-
            201
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/me/carts/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: ID
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "manage_my_orders:{projectKey}"
      operationId: ByProjectKeyMeCartsByIDGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_my_orders:{projectKey}"
      operationId: ByProjectKeyMeCartsByIDPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MyCartUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_my_orders:{projectKey}"
      operationId: ByProjectKeyMeCartsByIDDelete
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/me/email/confirm:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    post:
      security:
        - oauth_2_0:
            - "manage_my_profile:{projectKey}"
      operationId: ByProjectKeyMeEmailConfirmPost
      description: |-
        This is the last step in the [email verification process of a Customer](/../api/projects/customers#email-verification-of-customer).
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MyCustomerEmailVerify'

      responses:
        "200":
          description: |-
            The email was verified.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/me/login:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    post:
      security:
        - oauth_2_0:
            - "manage_my_profile:{projectKey}"
      operationId: ByProjectKeyMeLoginPost
      description: |-
        Retrieves the authenticated customer (that matches the given email/password pair).

        If used with [an access token for an anonymous session](ctp:api:type:AnonymousSession), all Orders and Carts that belong to the `anonymousId` are assigned to the newly logged-in Customer.

        - If the Customer does not have a Cart yet, the most recently modified anonymous cart becomes the Customer's Cart.
        - If the Customer already has a Cart, the most recently modified anonymous cart is handled in accordance with [AnonymousCartSignInMode](ctp:api:type:AnonymousCartSignInMode).

        A Cart returned as part of the [CustomerSignInResult](ctp:api:type:CustomerSignInResult) is [recalculated](ctp:api:type:MyCartRecalculateAction) with up-to-date prices, taxes, discounts, and invalid line items removed.

        If an account with the given credentials is not found, an [InvalidCredentials](ctp:api:type:InvalidCredentialsError) error is returned.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MyCustomerSignin'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerSignInResult'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/me/orders:
    description: |-
      An order can be created from a cart, usually after a checkout process has been completed.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "manage_my_orders:{projectKey}"
      operationId: ByProjectKeyMeOrdersGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Sort'
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: withTotal
          x-annotation-default: true
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/QueryPredicate'
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              type: "string"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderPagedQueryResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_my_orders:{projectKey}"
      operationId: ByProjectKeyMeOrdersPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MyOrderFromCartDraft'

      responses:
        "201":
          description: |-
            201
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/me/orders/quotes:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    post:
      security:
        - oauth_2_0:
            - "manage_my_orders:{projectKey}"
      operationId: ByProjectKeyMeOrdersQuotesPost
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MyOrderFromQuoteDraft'

      responses:
        "201":
          description: |-
            201
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

  /{projectKey}/me/orders/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: ID
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "manage_my_orders:{projectKey}"
      operationId: ByProjectKeyMeOrdersByIDGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/me/password:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    post:
      security:
        - oauth_2_0:
            - "manage_my_profile:{projectKey}"
      operationId: ByProjectKeyMePasswordPost
      description: |-
        Changing the password of the Customer produces the [CustomerPasswordUpdated](ctp:api:type:CustomerPasswordUpdatedMessage) Message with `reset=false`.

        If the current password does not match, an [InvalidCurrentPassword](ctp:api:type:InvalidCurrentPasswordError) error is returned.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MyCustomerChangePassword'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/me/password/reset:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    post:
      security:
        - oauth_2_0:
            - "manage_my_profile:{projectKey}"
      operationId: ByProjectKeyMePasswordResetPost
      description: |-
        This is the last step in the [password reset process of a Customer](/../api/projects/customers#password-reset-of-customer).

        Resetting a password of the Customer produces the [CustomerPasswordUpdated](ctp:api:type:CustomerPasswordUpdatedMessage) Message with `reset=true`.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MyCustomerResetPassword'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/me/payments:
    description: |-
      The My Payments endpoint creates and provides access to payments scoped to a specific user.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "manage_my_payments:{projectKey}"
      operationId: ByProjectKeyMePaymentsGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Sort'
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: withTotal
          x-annotation-default: true
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/QueryPredicate'
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              type: "string"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MyPaymentPagedQueryResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_my_payments:{projectKey}"
      operationId: ByProjectKeyMePaymentsPost
      description: |-
        Creating a Payment produces the [PaymentCreated](ctp:api:type:PaymentCreatedMessage) Message.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MyPaymentDraft'

      responses:
        "201":
          description: |-
            201
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MyPayment'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/me/payments/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: key
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "manage_my_payments:{projectKey}"
      operationId: ByProjectKeyMePaymentsKeyByKeyGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MyPayment'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_my_payments:{projectKey}"
      operationId: ByProjectKeyMePaymentsKeyByKeyPost
      description: |-
        This endpoint can only update a Payment when it has no [Transactions](ctp:api:type:Transaction).
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MyPaymentUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MyPayment'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_my_payments:{projectKey}"
      operationId: ByProjectKeyMePaymentsKeyByKeyDelete
      description: |-
        This endpoint can only delete a Payment when it has no [Transactions](ctp:api:type:Transaction).
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MyPayment'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/me/payments/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: ID
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "manage_my_payments:{projectKey}"
      operationId: ByProjectKeyMePaymentsByIDGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MyPayment'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_my_payments:{projectKey}"
      operationId: ByProjectKeyMePaymentsByIDPost
      description: |-
        This endpoint can only update a Payment when it has no [Transactions](ctp:api:type:Transaction).
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MyPaymentUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MyPayment'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_my_payments:{projectKey}"
      operationId: ByProjectKeyMePaymentsByIDDelete
      description: |-
        This endpoint can only delete a Payment when it has no [Transactions](ctp:api:type:Transaction).
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MyPayment'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/me/quote-requests:
    description: |-
      The My Quote Requests endpoint creates and provides access to Quote Requests scoped to a specific user.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "manage_my_quote_requests:{projectKey}"
      operationId: ByProjectKeyMeQuoteRequestsGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Sort'
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: withTotal
          x-annotation-default: true
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/QueryPredicate'
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              type: "string"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuoteRequestPagedQueryResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_my_quote_requests:{projectKey}"
      operationId: ByProjectKeyMeQuoteRequestsPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MyQuoteRequestDraft'

      responses:
        "201":
          description: |-
            201
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuoteRequest'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/me/quote-requests/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: key
        in: path
        required: true
        schema:
          type: "string"
    post:
      security:
        - oauth_2_0:
            - "manage_my_quote_requests:{projectKey}"
      operationId: ByProjectKeyMeQuoteRequestsKeyByKeyPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MyQuoteRequestUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuoteRequest'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_my_quote_requests:{projectKey}"
      operationId: ByProjectKeyMeQuoteRequestsKeyByKeyDelete
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuoteRequest'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    get:
      operationId: ByProjectKeyMeQuoteRequestsKeyByKeyGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuoteRequest'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/me/quote-requests/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: ID
        in: path
        required: true
        schema:
          type: "string"
    post:
      security:
        - oauth_2_0:
            - "manage_my_quote_requests:{projectKey}"
      operationId: ByProjectKeyMeQuoteRequestsByIDPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MyQuoteRequestUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuoteRequest'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_my_quote_requests:{projectKey}"
      operationId: ByProjectKeyMeQuoteRequestsByIDDelete
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuoteRequest'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    get:
      operationId: ByProjectKeyMeQuoteRequestsByIDGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuoteRequest'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/me/quotes:
    description: |-
      The My Quote endpoint provides access to Quotes scoped to a specific user.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "manage_my_quotes:{projectKey}"
      operationId: ByProjectKeyMeQuotesGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Sort'
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: withTotal
          x-annotation-default: true
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/QueryPredicate'
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              type: "string"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuotePagedQueryResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/me/quotes/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: key
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "manage_my_quotes:{projectKey}"
      operationId: ByProjectKeyMeQuotesKeyByKeyGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quote'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_my_quotes:{projectKey}"
      operationId: ByProjectKeyMeQuotesKeyByKeyPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MyQuoteUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quote'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/me/quotes/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: ID
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "manage_my_quotes:{projectKey}"
      operationId: ByProjectKeyMeQuotesByIDGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quote'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_my_quotes:{projectKey}"
      operationId: ByProjectKeyMeQuotesByIDPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MyQuoteUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quote'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/me/shopping-lists:
    description: |-
      The My Shopping Lists endpoint creates and provides access to Shopping Lists scoped to a specific user.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "manage_my_shopping_lists:{projectKey}"
      operationId: ByProjectKeyMeShoppingListsGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Sort'
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: withTotal
          x-annotation-default: true
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/QueryPredicate'
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              type: "string"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingListPagedQueryResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_my_shopping_lists:{projectKey}"
      operationId: ByProjectKeyMeShoppingListsPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MyShoppingListDraft'

      responses:
        "201":
          description: |-
            201
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingList'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/me/shopping-lists/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: key
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "manage_my_shopping_lists:{projectKey}"
      operationId: ByProjectKeyMeShoppingListsKeyByKeyGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingList'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_my_shopping_lists:{projectKey}"
      operationId: ByProjectKeyMeShoppingListsKeyByKeyPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MyShoppingListUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingList'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_my_shopping_lists:{projectKey}"
      operationId: ByProjectKeyMeShoppingListsKeyByKeyDelete
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingList'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/me/shopping-lists/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: ID
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "manage_my_shopping_lists:{projectKey}"
      operationId: ByProjectKeyMeShoppingListsByIDGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingList'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_my_shopping_lists:{projectKey}"
      operationId: ByProjectKeyMeShoppingListsByIDPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MyShoppingListUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingList'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_my_shopping_lists:{projectKey}"
      operationId: ByProjectKeyMeShoppingListsByIDDelete
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingList'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/me/signup:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    post:
      security:
        - oauth_2_0:
            - "manage_my_profile:{projectKey}"
      operationId: ByProjectKeyMeSignupPost
      description: |-
        If used with an [access token for an anonymous session](ctp:api:type:AnonymousSession), all Orders and Carts that belong to the `anonymousId` are assigned to the newly created Customer.

        Creating a Customer produces the [CustomerCreated](ctp:api:type:CustomerCreatedMessage) Message.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MyCustomerDraft'

      responses:
        "201":
          description: |-
            201
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerSignInResult'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/messages:
    description: |-
      A message represents a change or an action performed on a resource (like an Order or a Product).
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_messages:{projectKey}"
      operationId: ByProjectKeyMessagesGet
      description: |-
        Deprecated scope: `view_orders:{projectKey}`
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Sort'
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: withTotal
          x-annotation-default: true
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/QueryPredicate'
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              type: "string"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessagePagedQueryResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/messages/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: ID
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_messages:{projectKey}"
      operationId: ByProjectKeyMessagesByIDGet
      description: |-
        Deprecated scope: `view_orders:{projectKey}`
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/orders:
    description: |-
      An order can be created from a order, usually after a checkout process has been completed.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_orders:{projectKey}"
      operationId: ByProjectKeyOrdersGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Sort'
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: withTotal
          x-annotation-default: true
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/QueryPredicate'
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              type: "string"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderPagedQueryResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_orders:{projectKey}"
      operationId: ByProjectKeyOrdersPost
      description: |-
        Creates an order from a Cart.
        The cart must have a shipping address set before creating an order.
        When using the Platform TaxMode, the shipping address is used for tax calculation.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderFromCartDraft'

      responses:
        "201":
          description: |-
            201
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/orders/edits:
    description: |-
      OrderEdit are containers for financial changes after an Order has been placed.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_order_edits:{projectKey}"
      operationId: ByProjectKeyOrdersEditsGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Sort'
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: withTotal
          x-annotation-default: true
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/QueryPredicate'
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              type: "string"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderEditPagedQueryResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_order_edits:{projectKey}"
      operationId: ByProjectKeyOrdersEditsPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderEditDraft'

      responses:
        "201":
          description: |-
            201
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderEdit'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/orders/edits/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: key
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_order_edits:{projectKey}"
      operationId: ByProjectKeyOrdersEditsKeyByKeyGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderEdit'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_order_edits:{projectKey}"
      operationId: ByProjectKeyOrdersEditsKeyByKeyPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderEditUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderEdit'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_order_edits:{projectKey}"
      operationId: ByProjectKeyOrdersEditsKeyByKeyDelete
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderEdit'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/orders/edits/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: ID
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_order_edits:{projectKey}"
      operationId: ByProjectKeyOrdersEditsByIDGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderEdit'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_order_edits:{projectKey}"
      operationId: ByProjectKeyOrdersEditsByIDPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderEditUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderEdit'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_order_edits:{projectKey}"
      operationId: ByProjectKeyOrdersEditsByIDDelete
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderEdit'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/orders/edits/{ID}/apply:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: ID
        in: path
        required: true
        schema:
          type: "string"
    post:
      security:
        - oauth_2_0:
            - "manage_order_edits:{projectKey}"
      operationId: ByProjectKeyOrdersEditsByIDApplyPost
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderEditApply'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderEdit'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/orders/import:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    post:
      security:
        - oauth_2_0:
            - "manage_orders:{projectKey}"
      operationId: ByProjectKeyOrdersImportPost
      description: |-
        Create an Order by Import
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderImportDraft'

      responses:
        "201":
          description: |-
            201
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/orders/order-number={orderNumber}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: orderNumber
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_orders:{projectKey}"
      operationId: ByProjectKeyOrdersOrderNumberByOrderNumberGet
      description: |-
        In case the orderNumber does not match the regular expression [a-zA-Z0-9_-]+,
        it should be provided in URL-encoded format.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_orders:{projectKey}"
      operationId: ByProjectKeyOrdersOrderNumberByOrderNumberPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_orders:{projectKey}"
      operationId: ByProjectKeyOrdersOrderNumberByOrderNumberDelete
      parameters:
        - name: dataErasure
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/orders/quotes:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    post:
      security:
        - oauth_2_0:
            - "manage_quotes:{projectKey}"
      operationId: ByProjectKeyOrdersQuotesPost
      description: |-
        Create an Order from a Quote
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderFromQuoteDraft'

      responses:
        "201":
          description: |-
            201
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/orders/search:
    description: |-
      This endpoint provides high performance search queries over Orders. The order search allows searching through all orders (currently supporting a limit of the 10.000.000 newest orders) in your project.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    post:
      security:
        - oauth_2_0:
            - "view_orders:{projectKey}"
      operationId: ByProjectKeyOrdersSearchPost
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderSearchRequest'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderPagedSearchResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    head:
      security:
        - oauth_2_0:
            - "project_settings:{projectKey}"
      operationId: ByProjectKeyOrdersSearchHead
      description: |-
        Checks whether a search index for the Project's Orders exists.
      responses:
        "200":
          description: |-
            The index exists and the Search Orders endpoint can be used.
          content: {}
        "404":
          $ref: '#/components/responses/errorable_404'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/orders/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: ID
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_orders:{projectKey}"
      operationId: ByProjectKeyOrdersByIDGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_orders:{projectKey}"
      operationId: ByProjectKeyOrdersByIDPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_orders:{projectKey}"
      operationId: ByProjectKeyOrdersByIDDelete
      parameters:
        - name: dataErasure
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/payments:
    description: |-
      Payments hold information about the current state of receiving and/or refunding money
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_payments:{projectKey}"
      operationId: ByProjectKeyPaymentsGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Sort'
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: withTotal
          x-annotation-default: true
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/QueryPredicate'
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              type: "string"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentPagedQueryResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_payments:{projectKey}"
      operationId: ByProjectKeyPaymentsPost
      description: |-
        Creating a Payment produces the [PaymentCreated](ctp:api:type:PaymentCreatedMessage) Message.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentDraft'

      responses:
        "201":
          description: |-
            201
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/payments/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: key
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_payments:{projectKey}"
      operationId: ByProjectKeyPaymentsKeyByKeyGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_payments:{projectKey}"
      operationId: ByProjectKeyPaymentsKeyByKeyPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_payments:{projectKey}"
      operationId: ByProjectKeyPaymentsKeyByKeyDelete
      parameters:
        - name: dataErasure
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/payments/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: ID
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_payments:{projectKey}"
      operationId: ByProjectKeyPaymentsByIDGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_payments:{projectKey}"
      operationId: ByProjectKeyPaymentsByIDPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_payments:{projectKey}"
      operationId: ByProjectKeyPaymentsByIDDelete
      parameters:
        - name: dataErasure
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/product-discounts:
    description: |-
      Product discounts are used to change certain product prices.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_products:{projectKey}"
      operationId: ByProjectKeyProductDiscountsGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Sort'
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: withTotal
          x-annotation-default: true
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/QueryPredicate'
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              type: "string"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDiscountPagedQueryResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_products:{projectKey}"
      operationId: ByProjectKeyProductDiscountsPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDiscountDraft'

      responses:
        "201":
          description: |-
            201
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDiscount'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/product-discounts/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: key
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_products:{projectKey}"
      operationId: ByProjectKeyProductDiscountsKeyByKeyGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDiscount'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_products:{projectKey}"
      operationId: ByProjectKeyProductDiscountsKeyByKeyPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDiscountUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDiscount'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_products:{projectKey}"
      operationId: ByProjectKeyProductDiscountsKeyByKeyDelete
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDiscount'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/product-discounts/matching:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    post:
      security:
        - oauth_2_0:
            - "view_products:{projectKey}"
      operationId: ByProjectKeyProductDiscountsMatchingPost
      description: |-
        This endpoint can be used to simulate which Product Discounts would be applied if a specified Product Variant had a specified Price.
        Given Product and Product Variant IDs and a Price, this endpoint will return the [ProductDiscount](ctp:api:type:ProductDiscount) that would have been applied to that Price.

        If a Product Discount could not be found that could be applied to the Price of a Product Variant, a [NoMatchingProductDiscountFound](ctp:api:type:NoMatchingProductDiscountFoundError) error is returned.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDiscountMatchQuery'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDiscount'

        "404":
          $ref: '#/components/responses/errorable_404'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/product-discounts/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: ID
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_products:{projectKey}"
      operationId: ByProjectKeyProductDiscountsByIDGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDiscount'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_products:{projectKey}"
      operationId: ByProjectKeyProductDiscountsByIDPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDiscountUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDiscount'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_products:{projectKey}"
      operationId: ByProjectKeyProductDiscountsByIDDelete
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDiscount'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/product-projections:
    description: |-
      A projected representation of a product shows the product with its current or staged data. The current or staged
      representation of a product in a catalog is called a product projection.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_products:{projectKey}"
            - "view_published_products:{projectKey}"
      operationId: ByProjectKeyProductProjectionsGet
      description: |-
        Use the Product Projections query endpoint to get the current or staged representations of Products.
        When used with an API Client that has the `view_published_products:{projectKey}` scope,
        this endpoint only returns published (current) Product Projections.
      parameters:
        - name: staged
          x-annotation-default: false
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: priceCurrency
          in: query
          required: false
          style: form
          schema:
            $ref: '#/components/schemas/CurrencyCode'
          explode: true
        - name: priceCountry
          in: query
          required: false
          style: form
          schema:
            $ref: '#/components/schemas/CountryCode'
          explode: true
        - name: priceCustomerGroup
          in: query
          required: false
          style: form
          schema:
            type: "string"
          explode: true
        - name: priceChannel
          in: query
          required: false
          style: form
          schema:
            type: "string"
          explode: true
        - name: localeProjection
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Locale'
          explode: true
        - name: storeProjection
          in: query
          required: false
          style: form
          schema:
            type: "string"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Sort'
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: withTotal
          x-annotation-default: true
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/QueryPredicate'
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              type: "string"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductProjectionPagedQueryResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/product-projections/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: key
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_products:{projectKey}"
            - "view_published_products:{projectKey}"
      operationId: ByProjectKeyProductProjectionsKeyByKeyGet
      description: |-
        Gets the current or staged representation of a [Product](ctp:api:type:Product) found by Key.
        When used with an API Client that has the `view_published_products:{projectKey}` scope,
        this endpoint only returns published (current) Product Projections.
      parameters:
        - name: staged
          x-annotation-default: false
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: priceCurrency
          in: query
          required: false
          style: form
          schema:
            $ref: '#/components/schemas/CurrencyCode'
          explode: true
        - name: priceCountry
          in: query
          required: false
          style: form
          schema:
            $ref: '#/components/schemas/CountryCode'
          explode: true
        - name: priceCustomerGroup
          in: query
          required: false
          style: form
          schema:
            type: "string"
          explode: true
        - name: priceChannel
          in: query
          required: false
          style: form
          schema:
            type: "string"
          explode: true
        - name: localeProjection
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Locale'
          explode: true
        - name: storeProjection
          in: query
          required: false
          style: form
          schema:
            type: "string"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductProjection'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/product-projections/search:
    description: |-
      This endpoint provides high performance search queries over ProductProjections. The query result contains the
      ProductProjections for which at least one ProductVariant matches the search query. This means that variants can
      be included in the result also for which the search query does not match. To determine which ProductVariants match
      the search query, the returned ProductProjections include the additional field isMatchingVariant.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    post:
      security:
        - oauth_2_0:
            - "view_products:{projectKey}"
            - "view_published_products:{projectKey}"
      operationId: ByProjectKeyProductProjectionsSearchPost
      description: |-
        Product Projection Search
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: "string"

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductProjectionPagedSearchResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    get:
      security:
        - oauth_2_0:
            - "view_products:{projectKey}"
            - "view_published_products:{projectKey}"
      operationId: ByProjectKeyProductProjectionsSearchGet
      description: |-
        Product Projection Search
      parameters:
        - name: fuzzy
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: fuzzyLevel
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: markMatchingVariants
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: filter
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              type: "string"
          explode: true
        - name: filter.facets
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              type: "string"
          explode: true
        - name: filter.query
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              type: "string"
          explode: true
        - name: facet
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              type: "string"
          explode: true
        - name: /text.[a-z]{2}(-[A-Z]{2})?/
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              type: "string"
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Sort'
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: withTotal
          x-annotation-default: true
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: staged
          x-annotation-default: false
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: priceCurrency
          in: query
          required: false
          style: form
          schema:
            $ref: '#/components/schemas/CurrencyCode'
          explode: true
        - name: priceCountry
          in: query
          required: false
          style: form
          schema:
            $ref: '#/components/schemas/CountryCode'
          explode: true
        - name: priceCustomerGroup
          in: query
          required: false
          style: form
          schema:
            type: "string"
          explode: true
        - name: priceChannel
          in: query
          required: false
          style: form
          schema:
            type: "string"
          explode: true
        - name: localeProjection
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Locale'
          explode: true
        - name: storeProjection
          in: query
          required: false
          style: form
          schema:
            type: "string"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductProjectionPagedSearchResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/product-projections/suggest:
    description: |-
      The source of data for suggestions is the searchKeyword field in a product
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_products:{projectKey}"
            - "view_published_products:{projectKey}"
      operationId: ByProjectKeyProductProjectionsSuggestGet
      parameters:
        - name: fuzzy
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: /searchKeywords.[a-z]{2}(-[A-Z]{2})?/
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              type: "string"
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Sort'
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: withTotal
          x-annotation-default: true
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: staged
          x-annotation-default: false
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuggestionResult'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/product-projections/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: ID
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_products:{projectKey}"
            - "view_published_products:{projectKey}"
      operationId: ByProjectKeyProductProjectionsByIDGet
      description: |-
        Gets the current or staged representation of a [Product](ctp:api:type:Product) by its ID. When used with an API Client that has the `view_published_products:{projectKey}` scope, this endpoint only returns published (current) Product Projections.
      parameters:
        - name: staged
          x-annotation-default: false
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: priceCurrency
          in: query
          required: false
          style: form
          schema:
            $ref: '#/components/schemas/CurrencyCode'
          explode: true
        - name: priceCountry
          in: query
          required: false
          style: form
          schema:
            $ref: '#/components/schemas/CountryCode'
          explode: true
        - name: priceCustomerGroup
          in: query
          required: false
          style: form
          schema:
            type: "string"
          explode: true
        - name: priceChannel
          in: query
          required: false
          style: form
          schema:
            type: "string"
          explode: true
        - name: localeProjection
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Locale'
          explode: true
        - name: storeProjection
          in: query
          required: false
          style: form
          schema:
            type: "string"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductProjection'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/product-selections:
    description: |-
      Manage individual Store assortments through Product Selections.

      After you have created Product Selections and populated them with Products,
      you can manage Store assortments by assigning Product Selections to Stores.
      Product Selections may be used by a single Store or shared across several Stores.

      As a good practice, we recommend first creating Products in the project, and then creating Product Selection.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_product_selections:{projectKey}"
      operationId: ByProjectKeyProductSelectionsGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Sort'
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: withTotal
          x-annotation-default: true
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/QueryPredicate'
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              type: "string"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductSelectionPagedQueryResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_product_selections:{projectKey}"
      operationId: ByProjectKeyProductSelectionsPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductSelectionDraft'

      responses:
        "201":
          description: |-
            201
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductSelection'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/product-selections/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: key
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_product_selections:{projectKey}"
      operationId: ByProjectKeyProductSelectionsKeyByKeyGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductSelection'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_product_selections:{projectKey}"
      operationId: ByProjectKeyProductSelectionsKeyByKeyPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductSelectionUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductSelection'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_product_selections:{projectKey}"
      operationId: ByProjectKeyProductSelectionsKeyByKeyDelete
      description: |-
        Deletion will only succeed if the Product Selection is not assigned to any [Store](/../api/projects/stores#store).
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductSelection'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/product-selections/key={key}/products:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: key
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_product_selections:{projectKey}"
      operationId: ByProjectKeyProductSelectionsKeyByKeyProductsGet
      description: |-
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: withTotal
          x-annotation-default: true
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Sort'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductSelectionProductPagedQueryResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/product-selections/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: ID
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_product_selections:{projectKey}"
      operationId: ByProjectKeyProductSelectionsByIDGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductSelection'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_product_selections:{projectKey}"
      operationId: ByProjectKeyProductSelectionsByIDPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductSelectionUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductSelection'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_product_selections:{projectKey}"
      operationId: ByProjectKeyProductSelectionsByIDDelete
      description: |-
        Deletion will only succeed if the Product Selection is not assigned to any [Store](/../api/projects/stores#store).
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductSelection'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/product-selections/{ID}/products:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: ID
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_product_selections:{projectKey}"
      operationId: ByProjectKeyProductSelectionsByIDProductsGet
      description: |-
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: withTotal
          x-annotation-default: true
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Sort'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductSelectionProductPagedQueryResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/product-types:
    description: |-
      Product Types are used to describe common characteristics, most importantly common custom attributes,
      of many concrete products.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_products:{projectKey}"
      operationId: ByProjectKeyProductTypesGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Sort'
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: withTotal
          x-annotation-default: true
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/QueryPredicate'
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              type: "string"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductTypePagedQueryResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    head:
      security:
        - oauth_2_0:
            - "view_products:{projectKey}"
      operationId: ByProjectKeyProductTypesHead
      description: |-
        Check if Product Types exist. Responds with a `200 OK` status if any Product Types match the Query Predicate, or `404 Not Found` otherwise.
      parameters:
        - name: where
          in: query
          required: false
          style: form
          schema:
            $ref: '#/components/schemas/QueryPredicate'
          explode: true
      responses:
        "200":
          description: |-
            At least one ProductType matching the query exists
          content: {}
        "404":
          $ref: '#/components/responses/errorable_404'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_products:{projectKey}"
      operationId: ByProjectKeyProductTypesPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductTypeDraft'

      responses:
        "201":
          description: |-
            201
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductType'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/product-types/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: key
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_products:{projectKey}"
      operationId: ByProjectKeyProductTypesKeyByKeyGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductType'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    head:
      security:
        - oauth_2_0:
            - "view_products:{projectKey}"
      operationId: ByProjectKeyProductTypesKeyByKeyHead
      description: |-
        Checks if a Product Type with given `key` exists. Responds with a `200 OK` status if the `Product Type` exists or `404 Not Found` otherwise.
      responses:
        "200":
          description: |-
            The ProductType exists
          content: {}
        "404":
          $ref: '#/components/responses/errorable_404'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_products:{projectKey}"
      operationId: ByProjectKeyProductTypesKeyByKeyPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductTypeUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductType'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_products:{projectKey}"
      operationId: ByProjectKeyProductTypesKeyByKeyDelete
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductType'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/product-types/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: ID
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_products:{projectKey}"
      operationId: ByProjectKeyProductTypesByIDGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductType'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    head:
      security:
        - oauth_2_0:
            - "view_products:{projectKey}"
      operationId: ByProjectKeyProductTypesByIDHead
      description: |-
        Checks if a Product Type with given `id` exists. Responds with a `200 OK` status if the `Product Type` exists or `404 Not Found` otherwise.
      responses:
        "200":
          description: |-
            The ProductType exists
          content: {}
        "404":
          $ref: '#/components/responses/errorable_404'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_products:{projectKey}"
      operationId: ByProjectKeyProductTypesByIDPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductTypeUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductType'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_products:{projectKey}"
      operationId: ByProjectKeyProductTypesByIDDelete
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductType'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/products:
    description: |-
      Products themselves are not sellable. Instead, they act as a parent structure for sellable Product Variants.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_products:{projectKey}"
      operationId: ByProjectKeyProductsGet
      description: |-
        If [Price selection](ctp:api:type:ProductPriceSelection) query parameters are provided, the selected Prices are added to the response.
      parameters:
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/QueryPredicate'
          explode: true
        - name: priceCurrency
          in: query
          required: false
          style: form
          schema:
            $ref: '#/components/schemas/CurrencyCode'
          explode: true
        - name: priceCountry
          in: query
          required: false
          style: form
          schema:
            $ref: '#/components/schemas/CountryCode'
          explode: true
        - name: priceCustomerGroup
          in: query
          required: false
          style: form
          schema:
            type: "string"
          explode: true
        - name: priceChannel
          in: query
          required: false
          style: form
          schema:
            type: "string"
          explode: true
        - name: localeProjection
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Locale'
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Sort'
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: withTotal
          x-annotation-default: true
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              type: "string"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductPagedQueryResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    head:
      security:
        - oauth_2_0:
            - "view_products:{projectKey}"
      operationId: ByProjectKeyProductsHead
      description: |-
        Check if Products exist. Responds with a `200 OK` status if any Products match the Query Predicate, or `404 Not Found` otherwise.
      parameters:
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/QueryPredicate'
          explode: true
      responses:
        "200":
          description: |-
            At least one Product matching the query exists
          content: {}
        "404":
          $ref: '#/components/responses/errorable_404'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_products:{projectKey}"
      operationId: ByProjectKeyProductsPost
      description: |-
        To create a new Product, send a representation that is going to become the initial _staged_ representation of the new Product in the master catalog.
        If [Price Selection](ctp:api:type:ProductPriceSelection) query parameters are provided, selected Prices will be added to the response.
        Produces the [ProductCreated](/projects/messages#product-created) Message.
      parameters:
        - name: priceCurrency
          in: query
          required: false
          style: form
          schema:
            $ref: '#/components/schemas/CurrencyCode'
          explode: true
        - name: priceCountry
          in: query
          required: false
          style: form
          schema:
            $ref: '#/components/schemas/CountryCode'
          explode: true
        - name: priceCustomerGroup
          in: query
          required: false
          style: form
          schema:
            type: "string"
          explode: true
        - name: priceChannel
          in: query
          required: false
          style: form
          schema:
            type: "string"
          explode: true
        - name: localeProjection
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Locale'
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDraft'

      responses:
        "201":
          description: |-
            201
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/products/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: key
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_products:{projectKey}"
      operationId: ByProjectKeyProductsKeyByKeyGet
      description: |-
        If [Price selection](ctp:api:type:ProductPriceSelection) query parameters are provided, the selected Prices are added to the response.
      parameters:
        - name: priceCurrency
          in: query
          required: false
          style: form
          schema:
            $ref: '#/components/schemas/CurrencyCode'
          explode: true
        - name: priceCountry
          in: query
          required: false
          style: form
          schema:
            $ref: '#/components/schemas/CountryCode'
          explode: true
        - name: priceCustomerGroup
          in: query
          required: false
          style: form
          schema:
            type: "string"
          explode: true
        - name: priceChannel
          in: query
          required: false
          style: form
          schema:
            type: "string"
          explode: true
        - name: localeProjection
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Locale'
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    head:
      security:
        - oauth_2_0:
            - "view_products:{projectKey}"
      operationId: ByProjectKeyProductsKeyByKeyHead
      description: |-
        Check if a Product exists with a specified `key`. Responds with a `200 OK` status if the Product exists or `404 Not Found` otherwise.
      responses:
        "200":
          description: |-
            The Product exists
          content: {}
        "404":
          $ref: '#/components/responses/errorable_404'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_products:{projectKey}"
      operationId: ByProjectKeyProductsKeyByKeyPost
      description: |-
        A failed response can return a [DuplicatePriceScope](ctp:api:type:DuplicatePriceScopeError), [DuplicateVariantValues](ctp:api:type:DuplicateVariantValuesError), [DuplicateAttributeValue](ctp:api:type:DuplicateAttributeValueError), or [DuplicateAttributeValues](ctp:api:type:DuplicateAttributeValuesError) error.
      parameters:
        - name: priceCurrency
          in: query
          required: false
          style: form
          schema:
            $ref: '#/components/schemas/CurrencyCode'
          explode: true
        - name: priceCountry
          in: query
          required: false
          style: form
          schema:
            $ref: '#/components/schemas/CountryCode'
          explode: true
        - name: priceCustomerGroup
          in: query
          required: false
          style: form
          schema:
            type: "string"
          explode: true
        - name: priceChannel
          in: query
          required: false
          style: form
          schema:
            type: "string"
          explode: true
        - name: localeProjection
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Locale'
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_products:{projectKey}"
      operationId: ByProjectKeyProductsKeyByKeyDelete
      description: |-
        If [Price selection](ctp:api:type:ProductPriceSelection) query parameters are provided, the selected Prices are added to the response.
        Produces the [ProductDeleted](/projects/messages#product-deleted) Message.
      parameters:
        - name: priceCurrency
          in: query
          required: false
          style: form
          schema:
            $ref: '#/components/schemas/CurrencyCode'
          explode: true
        - name: priceCountry
          in: query
          required: false
          style: form
          schema:
            $ref: '#/components/schemas/CountryCode'
          explode: true
        - name: priceCustomerGroup
          in: query
          required: false
          style: form
          schema:
            type: "string"
          explode: true
        - name: priceChannel
          in: query
          required: false
          style: form
          schema:
            type: "string"
          explode: true
        - name: localeProjection
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Locale'
          explode: true
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/products/key={key}/product-selections:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: key
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_product_selections:{projectKey}"
      operationId: ByProjectKeyProductsKeyByKeyProductSelectionsGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Sort'
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: withTotal
          x-annotation-default: true
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/QueryPredicate'
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              type: "string"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssignedProductSelectionPagedQueryResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/products/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: ID
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_products:{projectKey}"
      operationId: ByProjectKeyProductsByIDGet
      description: |-
        If [Price selection](ctp:api:type:ProductPriceSelection) query parameters are provided, the selected Prices are added to the response.
      parameters:
        - name: priceCurrency
          in: query
          required: false
          style: form
          schema:
            $ref: '#/components/schemas/CurrencyCode'
          explode: true
        - name: priceCountry
          in: query
          required: false
          style: form
          schema:
            $ref: '#/components/schemas/CountryCode'
          explode: true
        - name: priceCustomerGroup
          in: query
          required: false
          style: form
          schema:
            type: "string"
          explode: true
        - name: priceChannel
          in: query
          required: false
          style: form
          schema:
            type: "string"
          explode: true
        - name: localeProjection
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Locale'
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    head:
      security:
        - oauth_2_0:
            - "view_products:{projectKey}"
      operationId: ByProjectKeyProductsByIDHead
      description: |-
        Check if a Product exists with a specified `id`. Responds with a `200 OK` status if the Product exists or `404 Not Found` otherwise.
      responses:
        "200":
          description: |-
            The Product exists
          content: {}
        "404":
          $ref: '#/components/responses/errorable_404'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_products:{projectKey}"
      operationId: ByProjectKeyProductsByIDPost
      description: |-
        If [Price selection](ctp:api:type:ProductPriceSelection) query parameters are provided, the selected Prices are added to the response.

        A failed response can return a [DuplicatePriceScope](ctp:api:type:DuplicatePriceScopeError), [DuplicateVariantValues](ctp:api:type:DuplicateVariantValuesError), [DuplicateAttributeValue](ctp:api:type:DuplicateAttributeValueError), or [DuplicateAttributeValues](ctp:api:type:DuplicateAttributeValuesError) error.
      parameters:
        - name: priceCurrency
          in: query
          required: false
          style: form
          schema:
            $ref: '#/components/schemas/CurrencyCode'
          explode: true
        - name: priceCountry
          in: query
          required: false
          style: form
          schema:
            $ref: '#/components/schemas/CountryCode'
          explode: true
        - name: priceCustomerGroup
          in: query
          required: false
          style: form
          schema:
            type: "string"
          explode: true
        - name: priceChannel
          in: query
          required: false
          style: form
          schema:
            type: "string"
          explode: true
        - name: localeProjection
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Locale'
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_products:{projectKey}"
      operationId: ByProjectKeyProductsByIDDelete
      description: |-
        If [Price selection](ctp:api:type:ProductPriceSelection) query parameters are provided, the selected Prices are added to the response.
        Produces the [ProductDeleted](/projects/messages#product-deleted) Message.
      parameters:
        - name: priceCurrency
          in: query
          required: false
          style: form
          schema:
            $ref: '#/components/schemas/CurrencyCode'
          explode: true
        - name: priceCountry
          in: query
          required: false
          style: form
          schema:
            $ref: '#/components/schemas/CountryCode'
          explode: true
        - name: priceCustomerGroup
          in: query
          required: false
          style: form
          schema:
            type: "string"
          explode: true
        - name: priceChannel
          in: query
          required: false
          style: form
          schema:
            type: "string"
          explode: true
        - name: localeProjection
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Locale'
          explode: true
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/products/{ID}/images:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: ID
        in: path
        required: true
        schema:
          type: "string"
    post:
      security:
        - oauth_2_0:
            - "manage_products:{projectKey}"
      operationId: ByProjectKeyProductsByIDImagesPost
      description: |-
        Upload a JPEG, PNG and GIF file to a [ProductVariant](ctp:api:type:ProductVariant). The maximum file size of the image is 10MB. `variant` or `sku` is required to update a specific ProductVariant. The image is uploaded to the Master Variant if `variant` or `sku` are not included. Produces the [ProductImageAdded](/projects/messages#product-image-added) Message when the `Small` version of the image has been uploaded to the CDN.
      parameters:
        - name: filename
          in: query
          required: false
          style: form
          schema:
            type: "string"
          explode: true
        - name: variant
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: sku
          in: query
          required: false
          style: form
          schema:
            type: "string"
          explode: true
        - name: staged
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
      requestBody:
        content:
          "*/*":
            schema:
              type: string
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'

  /{projectKey}/products/{ID}/product-selections:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: ID
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_product_selections:{projectKey}"
      operationId: ByProjectKeyProductsByIDProductSelectionsGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Sort'
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: withTotal
          x-annotation-default: true
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/QueryPredicate'
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              type: "string"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssignedProductSelectionPagedQueryResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/quote-requests:
    description: |-
      A request for a Quote holds product variants and can be ordered.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_quote_requests:{projectKey}"
      operationId: ByProjectKeyQuoteRequestsGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Sort'
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: withTotal
          x-annotation-default: true
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/QueryPredicate'
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              type: "string"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuoteRequestPagedQueryResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_quote_requests:{projectKey}"
      operationId: ByProjectKeyQuoteRequestsPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuoteRequestDraft'

      responses:
        "201":
          description: |-
            201
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuoteRequest'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/quote-requests/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: key
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_quote_requests:{projectKey}"
      operationId: ByProjectKeyQuoteRequestsKeyByKeyGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuoteRequest'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_quote_requests:{projectKey}"
      operationId: ByProjectKeyQuoteRequestsKeyByKeyPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuoteRequestUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuoteRequest'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_quote_requests:{projectKey}"
      operationId: ByProjectKeyQuoteRequestsKeyByKeyDelete
      parameters:
        - name: dataErasure
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuoteRequest'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/quote-requests/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: ID
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_quote_requests:{projectKey}"
      operationId: ByProjectKeyQuoteRequestsByIDGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuoteRequest'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_quote_requests:{projectKey}"
      operationId: ByProjectKeyQuoteRequestsByIDPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuoteRequestUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuoteRequest'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_quote_requests:{projectKey}"
      operationId: ByProjectKeyQuoteRequestsByIDDelete
      parameters:
        - name: dataErasure
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuoteRequest'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/quotes:
    description: |-
      A quote holds the negotiated offer.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_quotes:{projectKey}"
      operationId: ByProjectKeyQuotesGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Sort'
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: withTotal
          x-annotation-default: true
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/QueryPredicate'
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              type: "string"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuotePagedQueryResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_quotes:{projectKey}"
      operationId: ByProjectKeyQuotesPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuoteDraft'

      responses:
        "201":
          description: |-
            201
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quote'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/quotes/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: key
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_quotes:{projectKey}"
      operationId: ByProjectKeyQuotesKeyByKeyGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quote'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_quotes:{projectKey}"
      operationId: ByProjectKeyQuotesKeyByKeyPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuoteUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quote'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_quotes:{projectKey}"
      operationId: ByProjectKeyQuotesKeyByKeyDelete
      parameters:
        - name: dataErasure
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quote'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/quotes/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: ID
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_quotes:{projectKey}"
      operationId: ByProjectKeyQuotesByIDGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quote'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_quotes:{projectKey}"
      operationId: ByProjectKeyQuotesByIDPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuoteUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quote'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_quotes:{projectKey}"
      operationId: ByProjectKeyQuotesByIDDelete
      parameters:
        - name: dataErasure
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quote'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/reviews:
    description: |-
      Reviews are used to evaluate products and channels.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_products:{projectKey}"
      operationId: ByProjectKeyReviewsGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Sort'
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: withTotal
          x-annotation-default: true
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/QueryPredicate'
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              type: "string"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewPagedQueryResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_products:{projectKey}"
      operationId: ByProjectKeyReviewsPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewDraft'

      responses:
        "201":
          description: |-
            201
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/reviews/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: key
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_products:{projectKey}"
      operationId: ByProjectKeyReviewsKeyByKeyGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_products:{projectKey}"
      operationId: ByProjectKeyReviewsKeyByKeyPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_products:{projectKey}"
      operationId: ByProjectKeyReviewsKeyByKeyDelete
      parameters:
        - name: dataErasure
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/reviews/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: ID
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_products:{projectKey}"
      operationId: ByProjectKeyReviewsByIDGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_products:{projectKey}"
      operationId: ByProjectKeyReviewsByIDPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_products:{projectKey}"
      operationId: ByProjectKeyReviewsByIDDelete
      parameters:
        - name: dataErasure
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/shipping-methods:
    description: |-
      ShippingMethods define where orders can be shipped and what the costs are.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_orders:{projectKey}"
            - "view_shipping_methods:{projectKey}"
            - "manage_my_orders:{projectKey}"
      operationId: ByProjectKeyShippingMethodsGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Sort'
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: withTotal
          x-annotation-default: true
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/QueryPredicate'
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              type: "string"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShippingMethodPagedQueryResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_orders:{projectKey}"
            - "manage_shipping_methods:{projectKey}"
      operationId: ByProjectKeyShippingMethodsPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShippingMethodDraft'

      responses:
        "201":
          description: |-
            201
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShippingMethod'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/shipping-methods/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: key
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_orders:{projectKey}"
            - "view_shipping_methods:{projectKey}"
            - "manage_my_orders:{projectKey}"
      operationId: ByProjectKeyShippingMethodsKeyByKeyGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShippingMethod'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_orders:{projectKey}"
            - "manage_shipping_methods:{projectKey}"
      operationId: ByProjectKeyShippingMethodsKeyByKeyPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShippingMethodUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShippingMethod'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_orders:{projectKey}"
            - "manage_shipping_methods:{projectKey}"
      operationId: ByProjectKeyShippingMethodsKeyByKeyDelete
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShippingMethod'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/shipping-methods/matching-cart:
    description: |-
      Get ShippingMethods for a cart
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_orders:{projectKey}"
            - "view_shipping_methods:{projectKey}"
            - "manage_my_orders:{projectKey}"
      operationId: ByProjectKeyShippingMethodsMatchingCartGet
      description: |-
        Retrieves all the ShippingMethods that can ship to the shipping address of the given Cart.
        Each ShippingMethod contains exactly one ShippingRate with the flag `isMatching` set to `true`.
        This ShippingRate is used when the ShippingMethod is [added to the Cart](ctp:api:type:CartSetShippingMethodAction).
      parameters:
        - name: cartId
          in: query
          required: true
          style: form
          schema:
            type: "string"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShippingMethodPagedQueryResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/shipping-methods/matching-cart-location:
    description: |-
      Get ShippingMethods for a cart and location
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_orders:{projectKey}"
            - "view_shipping_methods:{projectKey}"
            - "manage_my_orders:{projectKey}"
      operationId: ByProjectKeyShippingMethodsMatchingCartLocationGet
      description: |-
        Retrieves all the ShippingMethods that can ship to the given [Location](/projects/zones#location)
        with a `predicate` that matches the given Cart.
        Each ShippingMethod contains exactly one ShippingRate with the flag `isMatching` set to `true`.
        This ShippingRate is used when the ShippingMethod is [added to the Cart](ctp:api:type:CartSetShippingMethodAction).
      parameters:
        - name: country
          in: query
          required: true
          style: form
          schema:
            type: "string"
          explode: true
        - name: state
          in: query
          required: false
          style: form
          schema:
            type: "string"
          explode: true
        - name: cartId
          in: query
          required: true
          style: form
          schema:
            type: "string"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShippingMethodPagedQueryResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/shipping-methods/matching-location:
    description: |-
      Get ShippingMethods for a location
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_orders:{projectKey}"
            - "view_shipping_methods:{projectKey}"
            - "manage_my_orders:{projectKey}"
      operationId: ByProjectKeyShippingMethodsMatchingLocationGet
      description: |-
        Retrieves all the ShippingMethods that can ship to the given [Location](/projects/zones#location).
        ShippingMethods that have a `predicate` defined are automatically disqualified.
        If the `currency` parameter is given, then the ShippingMethods must also have a rate defined in the specified currency.
        Each ShippingMethod contains at least one ShippingRate with the flag `isMatching` set to `true`.
        If the `currency` parameter is given, exactly one ShippingRate will contain it.
      parameters:
        - name: country
          in: query
          required: true
          style: form
          schema:
            type: "string"
          explode: true
        - name: state
          in: query
          required: false
          style: form
          schema:
            type: "string"
          explode: true
        - name: currency
          in: query
          required: false
          style: form
          schema:
            type: "string"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Sort'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShippingMethodPagedQueryResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/shipping-methods/matching-orderedit:
    description: |-
      Get ShippingMethods for an order edit
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_orders:{projectKey}"
            - "view_shipping_methods:{projectKey}"
      operationId: ByProjectKeyShippingMethodsMatchingOrdereditGet
      description: |-
        Retrieves all the ShippingMethods that can ship to the given [Location](/../api/projects/zones#location) for an [OrderEdit](/../api/projects/order-edits).

        If the OrderEdit preview cannot be generated, an [EditPreviewFailed](ctp:api:type:EditPreviewFailedError) error is returned.
      parameters:
        - name: orderEditId
          in: query
          required: true
          style: form
          schema:
            type: "string"
          explode: true
        - name: country
          in: query
          required: true
          style: form
          schema:
            type: "string"
          explode: true
        - name: state
          in: query
          required: false
          style: form
          schema:
            type: "string"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShippingMethodPagedQueryResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/shipping-methods/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: ID
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_orders:{projectKey}"
            - "view_shipping_methods:{projectKey}"
            - "manage_my_orders:{projectKey}"
      operationId: ByProjectKeyShippingMethodsByIDGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShippingMethod'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_orders:{projectKey}"
            - "manage_shipping_methods:{projectKey}"
      operationId: ByProjectKeyShippingMethodsByIDPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShippingMethodUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShippingMethod'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_orders:{projectKey}"
            - "manage_shipping_methods:{projectKey}"
      operationId: ByProjectKeyShippingMethodsByIDDelete
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShippingMethod'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/shopping-lists:
    description: |-
      shopping-lists e.g. for wishlist support
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_shopping_lists:{projectKey}"
      operationId: ByProjectKeyShoppingListsGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Sort'
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: withTotal
          x-annotation-default: true
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/QueryPredicate'
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              type: "string"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingListPagedQueryResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_shopping_lists:{projectKey}"
      operationId: ByProjectKeyShoppingListsPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShoppingListDraft'

      responses:
        "201":
          description: |-
            201
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingList'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/shopping-lists/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: key
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_shopping_lists:{projectKey}"
      operationId: ByProjectKeyShoppingListsKeyByKeyGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingList'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_shopping_lists:{projectKey}"
      operationId: ByProjectKeyShoppingListsKeyByKeyPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShoppingListUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingList'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_shopping_lists:{projectKey}"
      operationId: ByProjectKeyShoppingListsKeyByKeyDelete
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: dataErasure
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingList'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/shopping-lists/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: ID
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_shopping_lists:{projectKey}"
      operationId: ByProjectKeyShoppingListsByIDGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingList'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_shopping_lists:{projectKey}"
      operationId: ByProjectKeyShoppingListsByIDPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShoppingListUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingList'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_shopping_lists:{projectKey}"
      operationId: ByProjectKeyShoppingListsByIDDelete
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: dataErasure
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingList'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/staged-quotes:
    description: |-
      A staged quote holds the negotiation between the [Buyer](/../api/quotes-overview#buyer) and the [Seller](/../api/quotes-overview#seller).
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_staged_quotes:{projectKey}"
      operationId: ByProjectKeyStagedQuotesGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Sort'
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: withTotal
          x-annotation-default: true
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/QueryPredicate'
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              type: "string"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StagedQuotePagedQueryResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_staged_quotes:{projectKey}"
      operationId: ByProjectKeyStagedQuotesPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StagedQuoteDraft'

      responses:
        "201":
          description: |-
            201
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StagedQuote'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/staged-quotes/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: key
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_staged_quotes:{projectKey}"
      operationId: ByProjectKeyStagedQuotesKeyByKeyGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StagedQuote'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_staged_quotes:{projectKey}"
      operationId: ByProjectKeyStagedQuotesKeyByKeyPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StagedQuoteUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StagedQuote'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_staged_quotes:{projectKey}"
      operationId: ByProjectKeyStagedQuotesKeyByKeyDelete
      parameters:
        - name: dataErasure
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StagedQuote'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/staged-quotes/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: ID
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_staged_quotes:{projectKey}"
      operationId: ByProjectKeyStagedQuotesByIDGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StagedQuote'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_staged_quotes:{projectKey}"
      operationId: ByProjectKeyStagedQuotesByIDPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StagedQuoteUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StagedQuote'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_staged_quotes:{projectKey}"
      operationId: ByProjectKeyStagedQuotesByIDDelete
      parameters:
        - name: dataErasure
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StagedQuote'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/standalone-prices:
    description: |-
      A standalone price assigns a price to a product variant for a given scope. The API will use the standalone prices associated with a Product if its field [`priceMode`](/projects/products#pricemode) is set to `Standalone` [ProductPriceMode](ctp:api:type:ProductPriceModeEnum).
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_standalone_prices:{projectKey}"
      operationId: ByProjectKeyStandalonePricesGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Sort'
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: withTotal
          x-annotation-default: true
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/QueryPredicate'
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              type: "string"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandalonePricePagedQueryResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_standalone_prices:{projectKey}"
      operationId: ByProjectKeyStandalonePricesPost
      description: |-
        Produces the [StandalonePriceCreated](ctp:api:type:StandalonePriceCreatedMessage) Message.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StandalonePriceDraft'

      responses:
        "201":
          description: |-
            201
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandalonePrice'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/standalone-prices/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: key
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_standalone_prices:{projectKey}"
      operationId: ByProjectKeyStandalonePricesKeyByKeyGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandalonePrice'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_standalone_prices:{projectKey}"
      operationId: ByProjectKeyStandalonePricesKeyByKeyPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StandalonePriceUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandalonePrice'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_standalone_prices:{projectKey}"
      operationId: ByProjectKeyStandalonePricesKeyByKeyDelete
      description: |-
        Produces the [StandalonePriceDeleted](ctp:api:type:StandalonePriceDeletedMessage) Message.
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandalonePrice'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/standalone-prices/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: ID
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_standalone_prices:{projectKey}"
      operationId: ByProjectKeyStandalonePricesByIDGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandalonePrice'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_standalone_prices:{projectKey}"
      operationId: ByProjectKeyStandalonePricesByIDPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StandalonePriceUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandalonePrice'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_standalone_prices:{projectKey}"
      operationId: ByProjectKeyStandalonePricesByIDDelete
      description: |-
        Produces the [StandalonePriceDeleted](ctp:api:type:StandalonePriceDeletedMessage) Message.
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandalonePrice'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/states:
    description: |-
      commercetools Composable Commerce allows you to model states of certain objects, such as orders, line items, products,
      reviews, and payments in order to define finite state machines reflecting the business logic you'd like to
      implement.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_states:{projectKey}"
      operationId: ByProjectKeyStatesGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Sort'
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: withTotal
          x-annotation-default: true
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/QueryPredicate'
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              type: "string"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatePagedQueryResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_states:{projectKey}"
      operationId: ByProjectKeyStatesPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StateDraft'

      responses:
        "201":
          description: |-
            201
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/State'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/states/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: key
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_states:{projectKey}"
      operationId: ByProjectKeyStatesKeyByKeyGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/State'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_states:{projectKey}"
      operationId: ByProjectKeyStatesKeyByKeyPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StateUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/State'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_states:{projectKey}"
      operationId: ByProjectKeyStatesKeyByKeyDelete
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/State'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/states/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: ID
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_states:{projectKey}"
      operationId: ByProjectKeyStatesByIDGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/State'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_states:{projectKey}"
      operationId: ByProjectKeyStatesByIDPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StateUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/State'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_states:{projectKey}"
      operationId: ByProjectKeyStatesByIDDelete
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/State'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/stores:
    description: |-
      Stores let you model the context your customers shop in.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_stores:{projectKey}"
      operationId: ByProjectKeyStoresGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Sort'
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: withTotal
          x-annotation-default: true
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/QueryPredicate'
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              type: "string"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorePagedQueryResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_stores:{projectKey}"
      operationId: ByProjectKeyStoresPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreDraft'

      responses:
        "201":
          description: |-
            201
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Store'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/stores/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: key
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_stores:{projectKey}"
      operationId: ByProjectKeyStoresKeyByKeyGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Store'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_stores:{projectKey}"
      operationId: ByProjectKeyStoresKeyByKeyPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Store'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_stores:{projectKey}"
      operationId: ByProjectKeyStoresKeyByKeyDelete
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Store'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/stores/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: ID
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_stores:{projectKey}"
      operationId: ByProjectKeyStoresByIDGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Store'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_stores:{projectKey}"
      operationId: ByProjectKeyStoresByIDPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Store'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_stores:{projectKey}"
      operationId: ByProjectKeyStoresByIDDelete
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Store'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/subscriptions:
    description: |-
      Subscriptions allow you to be notified of new messages or changes via a Message Queue of your choice
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "manage_subscriptions:{projectKey}"
      operationId: ByProjectKeySubscriptionsGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Sort'
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: withTotal
          x-annotation-default: true
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/QueryPredicate'
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              type: "string"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionPagedQueryResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_subscriptions:{projectKey}"
      operationId: ByProjectKeySubscriptionsPost
      description: |-
        A test message is sent to ensure the correct configuration of the Destination. If the message cannot be delivered, the Subscription will not be created. The payload of the test message is a notification of type [ResourceCreated](/../api/projects/subscriptions#resourcecreateddeliverypayload) for the `resourceTypeId` `subscription`.
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionDraft'

      responses:
        "201":
          description: |-
            201
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/subscriptions/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: key
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "manage_subscriptions:{projectKey}"
      operationId: ByProjectKeySubscriptionsKeyByKeyGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_subscriptions:{projectKey}"
      operationId: ByProjectKeySubscriptionsKeyByKeyPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_subscriptions:{projectKey}"
      operationId: ByProjectKeySubscriptionsKeyByKeyDelete
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/subscriptions/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: ID
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "manage_subscriptions:{projectKey}"
      operationId: ByProjectKeySubscriptionsByIDGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_subscriptions:{projectKey}"
      operationId: ByProjectKeySubscriptionsByIDPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_subscriptions:{projectKey}"
      operationId: ByProjectKeySubscriptionsByIDDelete
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/subscriptions/{ID}/health:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: ID
        in: path
        required: true
        schema:
          type: "string"
    get:
      operationId: ByProjectKeySubscriptionsByIDHealthGet
      description: |-
        This endpoint can be polled by a monitoring or alerting system that checks the health of your Subscriptions. To ease integration with such systems this endpoint does not require [Authorization](/../api/authorization).
      responses:
        "200":
          description: |-
            Healthy
          content: {}
        "400":
          description: |-
            ConfigurationError and ConfigurationErrorDeliveryStopped
          content: {}
        "503":
          description: |-
            TemporaryError
          content: {}
  /{projectKey}/tax-categories:
    description: |-
      Tax Categories define how products are to be taxed in different countries.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_products:{projectKey}"
            - "view_tax_categories:{projectKey}"
      operationId: ByProjectKeyTaxCategoriesGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Sort'
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: withTotal
          x-annotation-default: true
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/QueryPredicate'
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              type: "string"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxCategoryPagedQueryResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_products:{projectKey}"
            - "manage_tax_categories:{projectKey}"
      operationId: ByProjectKeyTaxCategoriesPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaxCategoryDraft'

      responses:
        "201":
          description: |-
            201
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxCategory'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/tax-categories/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: key
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_products:{projectKey}"
            - "view_tax_categories:{projectKey}"
      operationId: ByProjectKeyTaxCategoriesKeyByKeyGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxCategory'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_products:{projectKey}"
            - "manage_tax_categories:{projectKey}"
      operationId: ByProjectKeyTaxCategoriesKeyByKeyPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaxCategoryUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxCategory'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_products:{projectKey}"
            - "manage_tax_categories:{projectKey}"
      operationId: ByProjectKeyTaxCategoriesKeyByKeyDelete
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxCategory'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/tax-categories/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: ID
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_products:{projectKey}"
            - "view_tax_categories:{projectKey}"
      operationId: ByProjectKeyTaxCategoriesByIDGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxCategory'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_products:{projectKey}"
            - "manage_tax_categories:{projectKey}"
      operationId: ByProjectKeyTaxCategoriesByIDPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaxCategoryUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxCategory'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_products:{projectKey}"
            - "manage_tax_categories:{projectKey}"
      operationId: ByProjectKeyTaxCategoriesByIDDelete
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxCategory'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/types:
    description: |-
      Types define custom fields that are used to enhance resources as you need.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_types:{projectKey}"
      operationId: ByProjectKeyTypesGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Sort'
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: withTotal
          x-annotation-default: true
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/QueryPredicate'
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              type: "string"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypePagedQueryResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_types:{projectKey}"
      operationId: ByProjectKeyTypesPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TypeDraft'

      responses:
        "201":
          description: |-
            201
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Type'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/types/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: key
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_types:{projectKey}"
      operationId: ByProjectKeyTypesKeyByKeyGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Type'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_types:{projectKey}"
      operationId: ByProjectKeyTypesKeyByKeyPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TypeUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Type'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_types:{projectKey}"
      operationId: ByProjectKeyTypesKeyByKeyDelete
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Type'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/types/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: ID
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_types:{projectKey}"
      operationId: ByProjectKeyTypesByIDGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Type'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_types:{projectKey}"
      operationId: ByProjectKeyTypesByIDPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TypeUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Type'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_types:{projectKey}"
      operationId: ByProjectKeyTypesByIDDelete
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Type'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/zones:
    description: |-
      Zones allow defining ShippingRates for specific Locations.
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_orders:{projectKey}"
      operationId: ByProjectKeyZonesGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
        - name: sort
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Sort'
          explode: true
        - name: limit
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: offset
          in: query
          required: false
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: withTotal
          x-annotation-default: true
          in: query
          required: false
          style: form
          schema:
            type: "boolean"
          explode: true
        - name: where
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/QueryPredicate'
          explode: true
        - name: /^var[.][a-zA-Z0-9]+$/
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              type: "string"
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ZonePagedQueryResponse'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_orders:{projectKey}"
      operationId: ByProjectKeyZonesPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ZoneDraft'

      responses:
        "201":
          description: |-
            201
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Zone'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/zones/key={key}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: key
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_orders:{projectKey}"
      operationId: ByProjectKeyZonesKeyByKeyGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Zone'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_orders:{projectKey}"
      operationId: ByProjectKeyZonesKeyByKeyPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ZoneUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Zone'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_orders:{projectKey}"
      operationId: ByProjectKeyZonesKeyByKeyDelete
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Zone'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
  /{projectKey}/zones/{ID}:
    parameters:
      - name: projectKey
        in: path
        required: true
        schema:
          type: "string"
      - name: ID
        in: path
        required: true
        schema:
          type: "string"
    get:
      security:
        - oauth_2_0:
            - "view_orders:{projectKey}"
      operationId: ByProjectKeyZonesByIDGet
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Zone'

        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    post:
      security:
        - oauth_2_0:
            - "manage_orders:{projectKey}"
      operationId: ByProjectKeyZonesByIDPost
      parameters:
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ZoneUpdate'

      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Zone'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'
    delete:
      security:
        - oauth_2_0:
            - "manage_orders:{projectKey}"
      operationId: ByProjectKeyZonesByIDDelete
      parameters:
        - name: version
          in: query
          required: true
          style: form
          schema:
            type: "number"
            format: "double"
          explode: true
        - name: expand
          in: query
          required: false
          style: form
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Expansion'
          explode: true
      responses:
        "200":
          description: |-
            200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Zone'

        "409":
          $ref: '#/components/responses/conflicting_409'
        "400":
          $ref: '#/components/responses/errorable_400'
        "401":
          $ref: '#/components/responses/errorable_401'
        "403":
          $ref: '#/components/responses/errorable_403'
        "404":
          $ref: '#/components/responses/errorable_404'
        "500":
          $ref: '#/components/responses/errorable_500'
        "502":
          $ref: '#/components/responses/errorable_502'
        "503":
          $ref: '#/components/responses/errorable_503'

components:

  securitySchemes:
    oauth_2_0:
      type: oauth2
      description: |
        HTTP API authorization uses [OAuth2](https://datatracker.ietf.org/doc/html/rfc6750).

        Clients must obtain an access token from the auth service using one of
        the authorization flows described below, before they are able to make authorized requests
        to other Composable Commerce APIs. On successful completion of an authorization flow,
        a client will be given an `access_token`, which they need to include in requests
        to authorized service endpoints via the HTTP `Authorization` header like this:

      flows:
          clientCredentials:
            tokenUrl: https://auth.europe-west1.gcp.commercetools.com/oauth/token
            scopes:
              "manage_project:{projectKey}": ""
              "manage_products:{projectKey}": ""
              "view_products:{projectKey}": ""
              "manage_orders:{projectKey}": ""
              "manage_orders:{projectKey}:{storeKey}": ""
              "view_orders:{projectKey}": ""
              "view_orders:{projectKey}:{storeKey}": ""
              "manage_customers:{projectKey}": ""
              "view_customers:{projectKey}": ""
              "manage_payments:{projectKey}": ""
              "view_payments:{projectKey}": ""
              "manage_subscriptions:{projectKey}": ""
              "manage_extensions:{projectKey}": ""
              "manage_types:{projectKey}": ""
              "view_types:{projectKey}": ""
              "view_shopping_lists:{projectKey}": ""
              "manage_shopping_lists:{projectKey}": ""
              "manage_my_orders:{projectKey}": ""
              "manage_my_orders:{projectKey}:{storeKey}": ""
              "manage_my_profile:{projectKey}": ""
              "view_project_settings:{projectKey}": ""
              "view_published_products:{projectKey}": ""
              "manage_cart_discounts:{projectKey}": ""
              "view_cart_discounts:{projectKey}": ""
              "manage_customer_groups:{projectKey}": ""
              "view_customer_groups:{projectKey}": ""
              "view_shipping_methods:{projectKey}": ""
              "manage_shipping_methods:{projectKey}": ""
              "manage_tax_categories:{projectKey}": ""
              "view_tax_categories:{projectKey}": ""
              "manage_categories:{projectKey}": ""
              "view_categories:{projectKey}": ""
              "manage_standalone_prices:{projectKey}": ""
              "view_standalone_prices:{projectKey}": ""
              "manage_quote_requests:{projectKey}": ""
              "view_quote_requests:{projectKey}": ""
              "manage_my_quote_requests:{projectKey}": ""
              "manage_staged_quotes:{projectKey}": ""
              "view_staged_quotes:{projectKey}": ""
              "manage_quotes:{projectKey}": ""
              "view_quotes:{projectKey}": ""
              "manage_attribute_groups:{projectKey}": ""
              "view_attribute_groups:{projectKey}": ""


  schemas:
    PagedQueryResponse:
      type: "object"
      required:
        - count
        - limit
        - offset
        - results
      properties:
        limit:
          type: "integer"
          format: "int64"
        offset:
          type: "integer"
          format: "int64"
        count:
          type: "integer"
          format: "int64"
        total:
          type: "integer"
          format: "int64"
        results:
          type: "array"
          items:
            $ref: '#/components/schemas/BaseResource'
        meta:
          type: "object"
    Update:
      type: "object"
      required:
        - actions
        - version
      properties:
        version:
          type: "integer"
          format: "int64"
        actions:
          type: "array"
          items:
            $ref: '#/components/schemas/UpdateAction'
    UpdateAction:
      type: "object"
      required:
        - action
      properties:
        action:
          type: "string"
    ApiClient:
      type: "object"
      required:
        - id
        - name
        - scope
      properties:
        id:
          type: "string"
        name:
          type: "string"
        scope:
          type: "string"
        secret:
          type: "string"
        lastUsedAt:
          type: "string"
          format: "date-only"
        deleteAt:
          type: "string"
          format: "datetime"
        createdAt:
          type: "string"
          format: "datetime"
        accessTokenValiditySeconds:
          type: "integer"
          format: "int32"
        refreshTokenValiditySeconds:
          type: "integer"
          format: "int32"
    ApiClientDraft:
      type: "object"
      required:
        - name
        - scope
      properties:
        name:
          type: "string"
        scope:
          type: "string"
        deleteDaysAfterCreation:
          type: "integer"
          format: "int64"
        accessTokenValiditySeconds:
          type: "integer"
          format: "int32"
        refreshTokenValiditySeconds:
          type: "integer"
          format: "int32"
    ApiClientPagedQueryResponse:
      type: "object"
      required:
        - count
        - limit
        - offset
        - results
      properties:
        limit:
          type: "integer"
          format: "int64"
        offset:
          type: "integer"
          format: "int64"
        count:
          type: "integer"
          format: "int64"
        total:
          type: "integer"
          format: "int64"
        results:
          type: "array"
          items:
            $ref: '#/components/schemas/ApiClient'
    AssociateRole:
      allOf:
        - $ref: '#/components/schemas/BaseResource'
        - type: "object"
          required:
            - buyerAssignable
            - createdAt
            - id
            - key
            - lastModifiedAt
            - permissions
            - version
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            key:
              type: "string"
            buyerAssignable:
              type: "boolean"
            name:
              type: "string"
            permissions:
              type: "array"
              items:
                $ref: '#/components/schemas/Permission'
            custom:
              $ref: '#/components/schemas/CustomFields'
    AssociateRoleDraft:
      type: "object"
      required:
        - key
      properties:
        key:
          type: "string"
        name:
          type: "string"
        buyerAssignable:
          type: "boolean"
        permissions:
          type: "array"
          items:
            $ref: '#/components/schemas/Permission'
        custom:
          $ref: '#/components/schemas/CustomFieldsDraft'
    AssociateRoleKeyReference:
      allOf:
        - $ref: '#/components/schemas/KeyReference'
        - type: "object"
          required:
            - key
          properties:
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            key:
              type: "string"
    AssociateRolePagedQueryResponse:
      type: "object"
      required:
        - count
        - limit
        - offset
        - results
      properties:
        limit:
          type: "integer"
          format: "int64"
        offset:
          type: "integer"
          format: "int64"
        count:
          type: "integer"
          format: "int64"
        total:
          type: "integer"
          format: "int64"
        results:
          type: "array"
          items:
            $ref: '#/components/schemas/AssociateRole'
    AssociateRoleReference:
      allOf:
        - $ref: '#/components/schemas/Reference'
        - type: "object"
          required:
            - id
          properties:
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            id:
              type: "string"
            obj:
              $ref: '#/components/schemas/AssociateRole'
    AssociateRoleResourceIdentifier:
      allOf:
        - $ref: '#/components/schemas/ResourceIdentifier'
        - type: "object"
          properties:
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            id:
              type: "string"
            key:
              type: "string"
    AssociateRoleUpdate:
      type: "object"
      required:
        - actions
        - version
      properties:
        version:
          type: "integer"
          format: "int64"
        actions:
          type: "array"
          items:
            $ref: '#/components/schemas/AssociateRoleUpdateAction'
    AssociateRoleUpdateAction:
      type: "object"
      discriminator:
        propertyName: action
        mapping:
          addPermission: '#/components/schemas/AssociateRoleAddPermissionAction'
          changeBuyerAssignable: '#/components/schemas/AssociateRoleChangeBuyerAssignableAction'
          removePermission: '#/components/schemas/AssociateRoleRemovePermissionAction'
          setCustomField: '#/components/schemas/AssociateRoleSetCustomFieldAction'
          setCustomType: '#/components/schemas/AssociateRoleSetCustomTypeAction'
          setName: '#/components/schemas/AssociateRoleSetNameAction'
          setPermissions: '#/components/schemas/AssociateRoleSetPermissionsAction'
      required:
        - action
      properties:
        action:
          type: "string"
    Permission:
      type: "string"
      enum:
        - AddChildUnits
        - UpdateAssociates
        - UpdateBusinessUnitDetails
        - UpdateParentUnit
        - ViewMyCarts
        - ViewOthersCarts
        - UpdateMyCarts
        - UpdateOthersCarts
        - CreateMyCarts
        - CreateOthersCarts
        - DeleteMyCarts
        - DeleteOthersCarts
        - ViewMyOrders
        - ViewOthersOrders
        - UpdateMyOrders
        - UpdateOthersOrders
        - CreateMyOrdersFromMyCarts
        - CreateMyOrdersFromMyQuotes
        - CreateOrdersFromOthersCarts
        - CreateOrdersFromOthersQuotes
        - ViewMyQuotes
        - ViewOthersQuotes
        - AcceptMyQuotes
        - AcceptOthersQuotes
        - DeclineMyQuotes
        - DeclineOthersQuotes
        - RenegotiateMyQuotes
        - RenegotiateOthersQuotes
        - ViewMyQuoteRequests
        - ViewOthersQuoteRequests
        - UpdateMyQuoteRequests
        - UpdateOthersQuoteRequests
        - CreateMyQuoteRequestsFromMyCarts
        - CreateQuoteRequestsFromOthersCarts
      x-annotation-package: "AssociateRole"
      x-annotation-docs-uri: "https://docs.commercetools.com/api/projects/associate-roles#permission"
      x-annotation-enumDescriptions:
        AddChildUnits: "An Associate can create a child Business Unit.n"
        UpdateAssociates: "An Associate can manage other Associates.n"
        UpdateBusinessUnitDetails: "An Associate can edit Business Unit details.n"
        UpdateParentUnit: "An Associate can assign a Business Unit to be the parent unit.
         Additionally, the Associate requires the `AddChildUnits` permission in the new
         parent to perform the assignment.n"
        CreateMyCarts: "An Associate can create their own B2B Carts.n"
        CreateOthersCarts: "An Associate can create B2B Carts that belong to other Associates.n"
        DeleteMyCarts: "An Associate can delete their own B2B Carts.n"
        DeleteOthersCarts: "An Associate can delete B2B Carts that belong to other Associates.n"
        UpdateMyCarts: "An Associate can update their own B2B Carts.n"
        UpdateOthersCarts: "An Associate can update B2B Carts that belong to other Associates.n"
        ViewMyCarts: "An Associate can view their own B2B Carts.n"
        ViewOthersCarts: "An Associate can view B2B Carts that belong to other Associates.n"
        CreateMyOrdersFromMyCarts: "An Associate can create Orders from their own B2B Carts.n"
        CreateOrdersFromOthersCarts: "An Associate can create Orders from B2B Carts that belong
         to other Associates.n"
        CreateMyOrdersFromMyQuotes: "An Associate can create Orders from their own B2B Quotes.n"
        CreateOrdersFromOthersQuotes: "An Associate can create Orders from B2B Quotes that
         belong to other Associates.n"
        UpdateMyOrders: "An Associate can update their own B2B Orders.n"
        UpdateOthersOrders: "An Associate can update B2B Orders that belong to other Associates.n"
        ViewMyOrders: "An Associate can view their own B2B Orders.n"
        ViewOthersOrders: "An Associate can view B2B Orders that belong to other Associates.n"
        AcceptMyQuotes: "An Associate can accept their own B2B Quotes.n"
        AcceptOthersQuotes: "An Associate can accept B2B Quotes that belong to other Associates.n"
        DeclineMyQuotes: "An Associate can decline their own B2B Quotes.n"
        DeclineOthersQuotes: "An Associate can decline B2B Quotes that belong to other Associates.n"
        RenegotiateMyQuotes: "An Associate can renegotiate their own B2B Quotes.n"
        RenegotiateOthersQuotes: "An Associate can renegotiate B2B Quotes that belong to other
         Associates.n"
        ViewMyQuotes: "An Associate can view their own B2B Quotes.n"
        ViewOthersQuotes: "An Associate can view B2B Quotes that belong to other Associates.n"
        CreateMyQuoteRequestsFromMyCarts: "An Associate can create their own Quote Requests
         from their own B2B Carts.n"
        CreateQuoteRequestsFromOthersCarts: "An Associate can create Quote Requests from B2B
         Carts that belong to other Associates.n"
        UpdateMyQuoteRequests: "An Associate can update their own B2B Quote Requests.n"
        UpdateOthersQuoteRequests: "An Associate can update B2B Quote Requests of other Associates.n"
        ViewMyQuoteRequests: "An Associate can view their own B2B Quote Requests.n"
        ViewOthersQuoteRequests: "An Associate can view B2B Quote Requests that belong to
         other Associates.n"
      x-annotation-enumGroups:
        AddChildUnits: "Business Unit Permissions"
        UpdateAssociates: "Business Unit Permissions"
        UpdateBusinessUnitDetails: "Business Unit Permissions"
        UpdateParentUnit: "Business Unit Permissions"
        ViewMyCarts: "Cart Permissions"
        ViewOthersCarts: "Cart Permissions"
        UpdateMyCarts: "Cart Permissions"
        UpdateOthersCarts: "Cart Permissions"
        CreateMyCarts: "Cart Permissions"
        CreateOthersCarts: "Cart Permissions"
        DeleteMyCarts: "Cart Permissions"
        DeleteOthersCarts: "Cart Permissions"
        ViewMyOrders: "Order Permissions"
        ViewOthersOrders: "Order Permissions"
        UpdateMyOrders: "Order Permissions"
        UpdateOthersOrders: "Order Permissions"
        CreateMyOrdersFromMyCarts: "Order Permissions"
        CreateOrdersFromOthersCarts: "Order Permissions"
        CreateMyOrdersFromMyQuotes: "Order Permissions"
        CreateOrdersFromOthersQuotes: "Order Permissions"
        ViewMyQuotes: "Quote Permissions"
        ViewOthersQuotes: "Quote Permissions"
        AcceptMyQuotes: "Quote Permissions"
        AcceptOthersQuotes: "Quote Permissions"
        DeclineMyQuotes: "Quote Permissions"
        DeclineOthersQuotes: "Quote Permissions"
        RenegotiateMyQuotes: "Quote Permissions"
        RenegotiateOthersQuotes: "Quote Permissions"
        ViewMyQuoteRequests: "Quote Request Permissions"
        ViewOthersQuoteRequests: "Quote Request Permissions"
        UpdateMyQuoteRequests: "Quote Request Permissions"
        UpdateOthersQuoteRequests: "Quote Request Permissions"
        CreateMyQuoteRequestsFromMyCarts: "Quote Request Permissions"
        CreateQuoteRequestsFromOthersCarts: "Quote Request Permissions"
    AssociateRoleAddPermissionAction:
      allOf:
        - $ref: '#/components/schemas/AssociateRoleUpdateAction'
        - type: "object"
          required:
            - permission
          properties:
            action:
              type: "string"
            permission:
              $ref: '#/components/schemas/Permission'
    AssociateRoleChangeBuyerAssignableAction:
      allOf:
        - $ref: '#/components/schemas/AssociateRoleUpdateAction'
        - type: "object"
          required:
            - buyerAssignable
          properties:
            action:
              type: "string"
            buyerAssignable:
              type: "boolean"
    AssociateRoleRemovePermissionAction:
      allOf:
        - $ref: '#/components/schemas/AssociateRoleUpdateAction'
        - type: "object"
          required:
            - permission
          properties:
            action:
              type: "string"
            permission:
              $ref: '#/components/schemas/Permission'
    AssociateRoleSetCustomFieldAction:
      allOf:
        - $ref: '#/components/schemas/AssociateRoleUpdateAction'
        - type: "object"
          required:
            - name
          properties:
            action:
              type: "string"
            name:
              type: "string"
            value:
              {}
    AssociateRoleSetCustomTypeAction:
      allOf:
        - $ref: '#/components/schemas/AssociateRoleUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            type:
              $ref: '#/components/schemas/TypeResourceIdentifier'
            fields:
              $ref: '#/components/schemas/FieldContainer'
    AssociateRoleSetNameAction:
      allOf:
        - $ref: '#/components/schemas/AssociateRoleUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            name:
              type: "string"
    AssociateRoleSetPermissionsAction:
      allOf:
        - $ref: '#/components/schemas/AssociateRoleUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            permissions:
              type: "array"
              items:
                $ref: '#/components/schemas/Permission'
    AttributeGroup:
      allOf:
        - $ref: '#/components/schemas/BaseResource'
        - type: "object"
          required:
            - attributes
            - createdAt
            - id
            - lastModifiedAt
            - name
            - version
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            name:
              $ref: '#/components/schemas/LocalizedString'
            description:
              $ref: '#/components/schemas/LocalizedString'
            attributes:
              type: "array"
              items:
                $ref: '#/components/schemas/AttributeReference'
            key:
              type: "string"
    AttributeGroupDraft:
      type: "object"
      required:
        - attributes
        - name
      properties:
        name:
          $ref: '#/components/schemas/LocalizedString'
        description:
          $ref: '#/components/schemas/LocalizedString'
        attributes:
          type: "array"
          items:
            $ref: '#/components/schemas/AttributeReference'
        key:
          type: "string"
    AttributeGroupPagedQueryResponse:
      type: "object"
      required:
        - count
        - limit
        - offset
        - results
      properties:
        limit:
          type: "integer"
          format: "int64"
        offset:
          type: "integer"
          format: "int64"
        count:
          type: "integer"
          format: "int64"
        total:
          type: "integer"
          format: "int64"
        results:
          type: "array"
          items:
            $ref: '#/components/schemas/AttributeGroup'
    AttributeGroupReference:
      allOf:
        - $ref: '#/components/schemas/Reference'
        - type: "object"
          required:
            - id
          properties:
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            id:
              type: "string"
            obj:
              $ref: '#/components/schemas/AttributeGroup'
    AttributeGroupResourceIdentifier:
      allOf:
        - $ref: '#/components/schemas/ResourceIdentifier'
        - type: "object"
          properties:
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            id:
              type: "string"
            key:
              type: "string"
    AttributeGroupUpdate:
      type: "object"
      required:
        - actions
        - version
      properties:
        version:
          type: "integer"
          format: "int64"
        actions:
          type: "array"
          items:
            $ref: '#/components/schemas/AttributeGroupUpdateAction'
    AttributeGroupUpdateAction:
      type: "object"
      discriminator:
        propertyName: action
        mapping:
          addAttribute: '#/components/schemas/AttributeGroupAddAttributeAction'
          changeName: '#/components/schemas/AttributeGroupChangeNameAction'
          removeAttribute: '#/components/schemas/AttributeGroupRemoveAttributeAction'
          setAttributes: '#/components/schemas/AttributeGroupSetAttributesAction'
          setDescription: '#/components/schemas/AttributeGroupSetDescriptionAction'
          setKey: '#/components/schemas/AttributeGroupSetKeyAction'
      required:
        - action
      properties:
        action:
          type: "string"
    AttributeReference:
      type: "object"
      required:
        - key
      properties:
        key:
          type: "string"
    AttributeGroupAddAttributeAction:
      allOf:
        - $ref: '#/components/schemas/AttributeGroupUpdateAction'
        - type: "object"
          required:
            - attribute
          properties:
            action:
              type: "string"
            attribute:
              $ref: '#/components/schemas/AttributeReference'
    AttributeGroupChangeNameAction:
      allOf:
        - $ref: '#/components/schemas/AttributeGroupUpdateAction'
        - type: "object"
          required:
            - name
          properties:
            action:
              type: "string"
            name:
              $ref: '#/components/schemas/LocalizedString'
    AttributeGroupRemoveAttributeAction:
      allOf:
        - $ref: '#/components/schemas/AttributeGroupUpdateAction'
        - type: "object"
          required:
            - attribute
          properties:
            action:
              type: "string"
            attribute:
              $ref: '#/components/schemas/AttributeReference'
    AttributeGroupSetAttributesAction:
      allOf:
        - $ref: '#/components/schemas/AttributeGroupUpdateAction'
        - type: "object"
          required:
            - attributes
          properties:
            action:
              type: "string"
            attributes:
              type: "array"
              items:
                $ref: '#/components/schemas/AttributeReference'
    AttributeGroupSetDescriptionAction:
      allOf:
        - $ref: '#/components/schemas/AttributeGroupUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            description:
              $ref: '#/components/schemas/LocalizedString'
    AttributeGroupSetKeyAction:
      allOf:
        - $ref: '#/components/schemas/AttributeGroupUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            key:
              type: "string"
    Associate:
      type: "object"
      required:
        - associateRoleAssignments
        - customer
        - roles
      properties:
        associateRoleAssignments:
          type: "array"
          items:
            $ref: '#/components/schemas/AssociateRoleAssignment'
        roles:
          type: "array"
          items:
            $ref: '#/components/schemas/AssociateRoleDeprecated'
        customer:
          $ref: '#/components/schemas/CustomerReference'
    AssociateDraft:
      type: "object"
      required:
        - customer
      properties:
        associateRoleAssignments:
          type: "array"
          items:
            $ref: '#/components/schemas/AssociateRoleAssignmentDraft'
        roles:
          type: "array"
          items:
            $ref: '#/components/schemas/AssociateRoleDeprecated'
        customer:
          $ref: '#/components/schemas/CustomerResourceIdentifier'
    AssociateRoleAssignment:
      type: "object"
      required:
        - associateRole
        - inheritance
      properties:
        associateRole:
          $ref: '#/components/schemas/AssociateRoleKeyReference'
        inheritance:
          $ref: '#/components/schemas/AssociateRoleInheritanceMode'
    AssociateRoleAssignmentDraft:
      type: "object"
      required:
        - associateRole
      properties:
        associateRole:
          $ref: '#/components/schemas/AssociateRoleResourceIdentifier'
        inheritance:
          $ref: '#/components/schemas/AssociateRoleInheritanceMode'
    AssociateRoleDeprecated:
      type: "string"
      enum:
        - Admin
        - Buyer
      x-annotation-package: "BusinessUnit"
      x-annotation-docs-uri: "https://docs.commercetools.com/api/projects/business-units#associateroledeprecated"
      x-markDeprecated: true
      x-annotation-enumDescriptions:
        Admin: "The Associate can update the Business Unit, create child Business Units and
         add or remove other Associates.n"
        Buyer: "The Associate can make purchases on behalf of the Business Unit.n"
    AssociateRoleInheritanceMode:
      type: "string"
      enum:
        - Enabled
        - Disabled
      x-annotation-package: "BusinessUnit"
      x-annotation-docs-uri: "https://docs.commercetools.com/api/projects/business-units#associateinheritancemode"
      x-annotation-enumDescriptions:
        Enabled: "The assignment can be inherited by child Business Units.n"
        Disabled: "The assignment cannot be inherited by child Business Units.n"
    BusinessUnit:
      allOf:
        - $ref: '#/components/schemas/BaseResource'
        - type: "object"
          discriminator:
            propertyName: unitType
            mapping:
              Company: '#/components/schemas/Company'
              Division: '#/components/schemas/Division'
          required:
            - addresses
            - associateMode
            - associates
            - createdAt
            - id
            - key
            - lastModifiedAt
            - name
            - status
            - storeMode
            - topLevelUnit
            - unitType
            - version
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            key:
              type: "string"
            status:
              $ref: '#/components/schemas/BusinessUnitStatus'
            stores:
              type: "array"
              items:
                $ref: '#/components/schemas/StoreKeyReference'
            storeMode:
              $ref: '#/components/schemas/BusinessUnitStoreMode'
            unitType:
              $ref: '#/components/schemas/BusinessUnitType'
            name:
              type: "string"
            contactEmail:
              type: "string"
            custom:
              $ref: '#/components/schemas/CustomFields'
            addresses:
              type: "array"
              items:
                $ref: '#/components/schemas/Address'
            shippingAddressIds:
              type: "array"
              items:
                type: "string"
            defaultShippingAddressId:
              type: "string"
            billingAddressIds:
              type: "array"
              items:
                type: "string"
            defaultBillingAddressId:
              type: "string"
            associateMode:
              $ref: '#/components/schemas/BusinessUnitAssociateMode'
            associates:
              type: "array"
              items:
                $ref: '#/components/schemas/Associate'
            inheritedAssociates:
              type: "array"
              items:
                $ref: '#/components/schemas/InheritedAssociate'
            parentUnit:
              $ref: '#/components/schemas/BusinessUnitKeyReference'
            topLevelUnit:
              $ref: '#/components/schemas/BusinessUnitKeyReference'
    BusinessUnitAssociateMode:
      type: "string"
      enum:
        - Explicit
        - ExplicitAndFromParent
      x-annotation-package: "BusinessUnit"
      x-annotation-docs-uri: "https://docs.commercetools.com/api/projects/business-units#associatemode"
      x-annotation-enumDescriptions:
        Explicit: "All Associates of a Business Unit must be explicitly assigned. The Business
         Unit cannot inherit Associates from a parent.n"
        ExplicitAndFromParent: "Associates of a Business Unit can be assigned explicitly and
         inherited from a parent.n"
    BusinessUnitDraft:
      type: "object"
      discriminator:
        propertyName: unitType
        mapping:
          Company: '#/components/schemas/CompanyDraft'
          Division: '#/components/schemas/DivisionDraft'
      required:
        - key
        - name
        - unitType
      properties:
        key:
          type: "string"
        status:
          $ref: '#/components/schemas/BusinessUnitStatus'
        stores:
          type: "array"
          items:
            $ref: '#/components/schemas/StoreResourceIdentifier'
        storeMode:
          $ref: '#/components/schemas/BusinessUnitStoreMode'
        unitType:
          $ref: '#/components/schemas/BusinessUnitType'
        name:
          type: "string"
        contactEmail:
          type: "string"
        associateMode:
          $ref: '#/components/schemas/BusinessUnitAssociateMode'
        associates:
          type: "array"
          items:
            $ref: '#/components/schemas/AssociateDraft'
        addresses:
          type: "array"
          items:
            $ref: '#/components/schemas/BaseAddress'
        shippingAddresses:
          type: "array"
          items:
            type: "integer"
            format: "int32"
        defaultShippingAddress:
          type: "integer"
          format: "int32"
        billingAddresses:
          type: "array"
          items:
            type: "integer"
            format: "int32"
        defaultBillingAddress:
          type: "integer"
          format: "int32"
        custom:
          $ref: '#/components/schemas/CustomFieldsDraft'
    BusinessUnitKeyReference:
      allOf:
        - $ref: '#/components/schemas/KeyReference'
        - type: "object"
          required:
            - key
          properties:
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            key:
              type: "string"
    BusinessUnitPagedQueryResponse:
      type: "object"
      required:
        - count
        - limit
        - offset
        - results
      properties:
        limit:
          type: "integer"
          format: "int64"
        offset:
          type: "integer"
          format: "int64"
        count:
          type: "integer"
          format: "int64"
        total:
          type: "integer"
          format: "int64"
        results:
          type: "array"
          items:
            $ref: '#/components/schemas/BusinessUnit'
    BusinessUnitReference:
      allOf:
        - $ref: '#/components/schemas/Reference'
        - type: "object"
          required:
            - id
          properties:
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            id:
              type: "string"
            obj:
              $ref: '#/components/schemas/BusinessUnit'
    BusinessUnitResourceIdentifier:
      allOf:
        - $ref: '#/components/schemas/ResourceIdentifier'
        - type: "object"
          properties:
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            id:
              type: "string"
            key:
              type: "string"
    BusinessUnitStatus:
      type: "string"
      enum:
        - Active
        - Inactive
      x-annotation-package: "BusinessUnit"
      x-annotation-docs-uri: "https://docs.commercetools.com/api/projects/business-units#businessunitstatus"
      x-annotation-enumDescriptions:
        Active: "The Business Unit can be used in Carts, Orders, Quote Requests, and Quotes
         and can be edited.n"
        Inactive: "The Business Unit cannot be used in Carts, Orders, Quote Requests, and
         Quotes and can only be edited using the [general endpoint](ctp:api:endpoint:/{projectKey}/me/business-units:POST).n"
    BusinessUnitStoreMode:
      type: "string"
      enum:
        - Explicit
        - FromParent
      x-annotation-package: "BusinessUnit"
      x-annotation-docs-uri: "https://docs.commercetools.com/api/projects/business-units#businessunitstoremode"
      x-annotation-enumDescriptions:
        Explicit: "Stores are defined on the Business Unit.n"
        FromParent: "Stores are inherited from the closest parent in the hierarchy that has
         Stores defined.n"
    BusinessUnitType:
      type: "string"
      enum:
        - Company
        - Division
      x-annotation-package: "BusinessUnit"
      x-annotation-docs-uri: "https://docs.commercetools.com/api/projects/business-units#businessunittype"
      x-annotation-enumDescriptions:
        Company: "Top-level Business Unit. Must not have a `parentUnit` defined.n"
        Division: "Business Unit with a `parentUnit` reference to a [Company](ctp:api:type:Division)
         or another Division.n"
    BusinessUnitUpdate:
      type: "object"
      required:
        - actions
        - version
      properties:
        version:
          type: "integer"
          format: "int64"
        actions:
          type: "array"
          items:
            $ref: '#/components/schemas/BusinessUnitUpdateAction'
    BusinessUnitUpdateAction:
      type: "object"
      discriminator:
        propertyName: action
        mapping:
          addAddress: '#/components/schemas/BusinessUnitAddAddressAction'
          addAssociate: '#/components/schemas/BusinessUnitAddAssociateAction'
          addBillingAddressId: '#/components/schemas/BusinessUnitAddBillingAddressIdAction'
          addShippingAddressId: '#/components/schemas/BusinessUnitAddShippingAddressIdAction'
          addStore: '#/components/schemas/BusinessUnitAddStoreAction'
          changeAddress: '#/components/schemas/BusinessUnitChangeAddressAction'
          changeAssociate: '#/components/schemas/BusinessUnitChangeAssociateAction'
          changeAssociateMode: '#/components/schemas/BusinessUnitChangeAssociateModeAction'
          changeName: '#/components/schemas/BusinessUnitChangeNameAction'
          changeParentUnit: '#/components/schemas/BusinessUnitChangeParentUnitAction'
          changeStatus: '#/components/schemas/BusinessUnitChangeStatusAction'
          removeAddress: '#/components/schemas/BusinessUnitRemoveAddressAction'
          removeAssociate: '#/components/schemas/BusinessUnitRemoveAssociateAction'
          removeBillingAddressId: '#/components/schemas/BusinessUnitRemoveBillingAddressIdAction'
          removeShippingAddressId: '#/components/schemas/BusinessUnitRemoveShippingAddressIdAction'
          removeStore: '#/components/schemas/BusinessUnitRemoveStoreAction'
          setAddressCustomField: '#/components/schemas/BusinessUnitSetAddressCustomFieldAction'
          setAddressCustomType: '#/components/schemas/BusinessUnitSetAddressCustomTypeAction'
          setAssociates: '#/components/schemas/BusinessUnitSetAssociatesAction'
          setContactEmail: '#/components/schemas/BusinessUnitSetContactEmailAction'
          setCustomField: '#/components/schemas/BusinessUnitSetCustomFieldAction'
          setCustomType: '#/components/schemas/BusinessUnitSetCustomTypeAction'
          setDefaultBillingAddress: '#/components/schemas/BusinessUnitSetDefaultBillingAddressAction'
          setDefaultShippingAddress: '#/components/schemas/BusinessUnitSetDefaultShippingAddressAction'
          setStoreMode: '#/components/schemas/BusinessUnitSetStoreModeAction'
          setStores: '#/components/schemas/BusinessUnitSetStoresAction'
      required:
        - action
      properties:
        action:
          type: "string"
    Company:
      allOf:
        - $ref: '#/components/schemas/BusinessUnit'
        - type: "object"
          required:
            - associateMode
            - storeMode
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            key:
              type: "string"
            status:
              $ref: '#/components/schemas/BusinessUnitStatus'
            stores:
              type: "array"
              items:
                $ref: '#/components/schemas/StoreKeyReference'
            storeMode:
              $ref: '#/components/schemas/BusinessUnitStoreMode'
            unitType:
              $ref: '#/components/schemas/BusinessUnitType'
            name:
              type: "string"
            contactEmail:
              type: "string"
            custom:
              $ref: '#/components/schemas/CustomFields'
            addresses:
              type: "array"
              items:
                $ref: '#/components/schemas/Address'
            shippingAddressIds:
              type: "array"
              items:
                type: "string"
            defaultShippingAddressId:
              type: "string"
            billingAddressIds:
              type: "array"
              items:
                type: "string"
            defaultBillingAddressId:
              type: "string"
            associateMode:
              $ref: '#/components/schemas/BusinessUnitAssociateMode'
            associates:
              type: "array"
              items:
                $ref: '#/components/schemas/Associate'
            inheritedAssociates:
              type: "array"
              items:
                $ref: '#/components/schemas/InheritedAssociate'
            parentUnit:
              $ref: '#/components/schemas/BusinessUnitKeyReference'
            topLevelUnit:
              $ref: '#/components/schemas/BusinessUnitKeyReference'
    CompanyDraft:
      allOf:
        - $ref: '#/components/schemas/BusinessUnitDraft'
        - type: "object"
          properties:
            key:
              type: "string"
            status:
              $ref: '#/components/schemas/BusinessUnitStatus'
            stores:
              type: "array"
              items:
                $ref: '#/components/schemas/StoreResourceIdentifier'
            storeMode:
              $ref: '#/components/schemas/BusinessUnitStoreMode'
            unitType:
              $ref: '#/components/schemas/BusinessUnitType'
            name:
              type: "string"
            contactEmail:
              type: "string"
            associateMode:
              $ref: '#/components/schemas/BusinessUnitAssociateMode'
            associates:
              type: "array"
              items:
                $ref: '#/components/schemas/AssociateDraft'
            addresses:
              type: "array"
              items:
                $ref: '#/components/schemas/BaseAddress'
            shippingAddresses:
              type: "array"
              items:
                type: "integer"
                format: "int32"
            defaultShippingAddress:
              type: "integer"
              format: "int32"
            billingAddresses:
              type: "array"
              items:
                type: "integer"
                format: "int32"
            defaultBillingAddress:
              type: "integer"
              format: "int32"
            custom:
              $ref: '#/components/schemas/CustomFieldsDraft'
    Division:
      allOf:
        - $ref: '#/components/schemas/BusinessUnit'
        - type: "object"
          required:
            - associateMode
            - parentUnit
            - storeMode
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            key:
              type: "string"
            status:
              $ref: '#/components/schemas/BusinessUnitStatus'
            stores:
              type: "array"
              items:
                $ref: '#/components/schemas/StoreKeyReference'
            storeMode:
              $ref: '#/components/schemas/BusinessUnitStoreMode'
            unitType:
              $ref: '#/components/schemas/BusinessUnitType'
            name:
              type: "string"
            contactEmail:
              type: "string"
            custom:
              $ref: '#/components/schemas/CustomFields'
            addresses:
              type: "array"
              items:
                $ref: '#/components/schemas/Address'
            shippingAddressIds:
              type: "array"
              items:
                type: "string"
            defaultShippingAddressId:
              type: "string"
            billingAddressIds:
              type: "array"
              items:
                type: "string"
            defaultBillingAddressId:
              type: "string"
            associateMode:
              $ref: '#/components/schemas/BusinessUnitAssociateMode'
            associates:
              type: "array"
              items:
                $ref: '#/components/schemas/Associate'
            inheritedAssociates:
              type: "array"
              items:
                $ref: '#/components/schemas/InheritedAssociate'
            parentUnit:
              $ref: '#/components/schemas/BusinessUnitKeyReference'
            topLevelUnit:
              $ref: '#/components/schemas/BusinessUnitKeyReference'
    DivisionDraft:
      allOf:
        - $ref: '#/components/schemas/BusinessUnitDraft'
        - type: "object"
          required:
            - parentUnit
          properties:
            key:
              type: "string"
            status:
              $ref: '#/components/schemas/BusinessUnitStatus'
            stores:
              type: "array"
              items:
                $ref: '#/components/schemas/StoreResourceIdentifier'
            storeMode:
              $ref: '#/components/schemas/BusinessUnitStoreMode'
            unitType:
              $ref: '#/components/schemas/BusinessUnitType'
            name:
              type: "string"
            contactEmail:
              type: "string"
            associateMode:
              $ref: '#/components/schemas/BusinessUnitAssociateMode'
            associates:
              type: "array"
              items:
                $ref: '#/components/schemas/AssociateDraft'
            addresses:
              type: "array"
              items:
                $ref: '#/components/schemas/BaseAddress'
            shippingAddresses:
              type: "array"
              items:
                type: "integer"
                format: "int32"
            defaultShippingAddress:
              type: "integer"
              format: "int32"
            billingAddresses:
              type: "array"
              items:
                type: "integer"
                format: "int32"
            defaultBillingAddress:
              type: "integer"
              format: "int32"
            custom:
              $ref: '#/components/schemas/CustomFieldsDraft'
            parentUnit:
              $ref: '#/components/schemas/BusinessUnitResourceIdentifier'
    InheritedAssociate:
      type: "object"
      required:
        - associateRoleAssignments
        - customer
      properties:
        associateRoleAssignments:
          type: "array"
          items:
            $ref: '#/components/schemas/InheritedAssociateRoleAssignment'
        customer:
          $ref: '#/components/schemas/CustomerReference'
    InheritedAssociateRoleAssignment:
      type: "object"
      required:
        - associateRole
        - source
      properties:
        associateRole:
          $ref: '#/components/schemas/AssociateRoleKeyReference'
        source:
          $ref: '#/components/schemas/BusinessUnitKeyReference'
    BusinessUnitAddAddressAction:
      allOf:
        - $ref: '#/components/schemas/BusinessUnitUpdateAction'
        - type: "object"
          required:
            - address
          properties:
            action:
              type: "string"
            address:
              $ref: '#/components/schemas/BaseAddress'
    BusinessUnitAddAssociateAction:
      allOf:
        - $ref: '#/components/schemas/BusinessUnitUpdateAction'
        - type: "object"
          required:
            - associate
          properties:
            action:
              type: "string"
            associate:
              $ref: '#/components/schemas/AssociateDraft'
    BusinessUnitAddBillingAddressIdAction:
      allOf:
        - $ref: '#/components/schemas/BusinessUnitUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            addressId:
              type: "string"
            addressKey:
              type: "string"
    BusinessUnitAddShippingAddressIdAction:
      allOf:
        - $ref: '#/components/schemas/BusinessUnitUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            addressId:
              type: "string"
            addressKey:
              type: "string"
    BusinessUnitAddStoreAction:
      allOf:
        - $ref: '#/components/schemas/BusinessUnitUpdateAction'
        - type: "object"
          required:
            - store
          properties:
            action:
              type: "string"
            store:
              $ref: '#/components/schemas/StoreResourceIdentifier'
    BusinessUnitChangeAddressAction:
      allOf:
        - $ref: '#/components/schemas/BusinessUnitUpdateAction'
        - type: "object"
          required:
            - address
          properties:
            action:
              type: "string"
            addressId:
              type: "string"
            addressKey:
              type: "string"
            address:
              $ref: '#/components/schemas/BaseAddress'
    BusinessUnitChangeAssociateAction:
      allOf:
        - $ref: '#/components/schemas/BusinessUnitUpdateAction'
        - type: "object"
          required:
            - associate
          properties:
            action:
              type: "string"
            associate:
              $ref: '#/components/schemas/AssociateDraft'
    BusinessUnitChangeAssociateModeAction:
      allOf:
        - $ref: '#/components/schemas/BusinessUnitUpdateAction'
        - type: "object"
          required:
            - associateMode
          properties:
            action:
              type: "string"
            associateMode:
              $ref: '#/components/schemas/BusinessUnitAssociateMode'
    BusinessUnitChangeNameAction:
      allOf:
        - $ref: '#/components/schemas/BusinessUnitUpdateAction'
        - type: "object"
          required:
            - name
          properties:
            action:
              type: "string"
            name:
              type: "string"
    BusinessUnitChangeParentUnitAction:
      allOf:
        - $ref: '#/components/schemas/BusinessUnitUpdateAction'
        - type: "object"
          required:
            - parentUnit
          properties:
            action:
              type: "string"
            parentUnit:
              $ref: '#/components/schemas/BusinessUnitResourceIdentifier'
    BusinessUnitChangeStatusAction:
      allOf:
        - $ref: '#/components/schemas/BusinessUnitUpdateAction'
        - type: "object"
          required:
            - status
          properties:
            action:
              type: "string"
            status:
              type: "string"
    BusinessUnitRemoveAddressAction:
      allOf:
        - $ref: '#/components/schemas/BusinessUnitUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            addressId:
              type: "string"
            addressKey:
              type: "string"
    BusinessUnitRemoveAssociateAction:
      allOf:
        - $ref: '#/components/schemas/BusinessUnitUpdateAction'
        - type: "object"
          required:
            - customer
          properties:
            action:
              type: "string"
            customer:
              $ref: '#/components/schemas/CustomerResourceIdentifier'
    BusinessUnitRemoveBillingAddressIdAction:
      allOf:
        - $ref: '#/components/schemas/BusinessUnitUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            addressId:
              type: "string"
            addressKey:
              type: "string"
    BusinessUnitRemoveShippingAddressIdAction:
      allOf:
        - $ref: '#/components/schemas/BusinessUnitUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            addressId:
              type: "string"
            addressKey:
              type: "string"
    BusinessUnitRemoveStoreAction:
      allOf:
        - $ref: '#/components/schemas/BusinessUnitUpdateAction'
        - type: "object"
          required:
            - store
          properties:
            action:
              type: "string"
            store:
              $ref: '#/components/schemas/StoreResourceIdentifier'
    BusinessUnitSetAddressCustomFieldAction:
      allOf:
        - $ref: '#/components/schemas/BusinessUnitUpdateAction'
        - type: "object"
          required:
            - addressId
            - name
          properties:
            action:
              type: "string"
            addressId:
              type: "string"
            name:
              type: "string"
            value:
              {}
    BusinessUnitSetAddressCustomTypeAction:
      allOf:
        - $ref: '#/components/schemas/BusinessUnitUpdateAction'
        - type: "object"
          required:
            - addressId
          properties:
            action:
              type: "string"
            type:
              $ref: '#/components/schemas/TypeResourceIdentifier'
            fields:
              $ref: '#/components/schemas/FieldContainer'
            addressId:
              type: "string"
    BusinessUnitSetAssociatesAction:
      allOf:
        - $ref: '#/components/schemas/BusinessUnitUpdateAction'
        - type: "object"
          required:
            - associates
          properties:
            action:
              type: "string"
            associates:
              type: "array"
              items:
                $ref: '#/components/schemas/AssociateDraft'
    BusinessUnitSetContactEmailAction:
      allOf:
        - $ref: '#/components/schemas/BusinessUnitUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            contactEmail:
              type: "string"
    BusinessUnitSetCustomFieldAction:
      allOf:
        - $ref: '#/components/schemas/BusinessUnitUpdateAction'
        - type: "object"
          required:
            - name
          properties:
            action:
              type: "string"
            name:
              type: "string"
            value:
              {}
    BusinessUnitSetCustomTypeAction:
      allOf:
        - $ref: '#/components/schemas/BusinessUnitUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            type:
              $ref: '#/components/schemas/TypeResourceIdentifier'
            fields:
              $ref: '#/components/schemas/FieldContainer'
    BusinessUnitSetDefaultBillingAddressAction:
      allOf:
        - $ref: '#/components/schemas/BusinessUnitUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            addressId:
              type: "string"
            addressKey:
              type: "string"
    BusinessUnitSetDefaultShippingAddressAction:
      allOf:
        - $ref: '#/components/schemas/BusinessUnitUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            addressId:
              type: "string"
            addressKey:
              type: "string"
    BusinessUnitSetStoreModeAction:
      allOf:
        - $ref: '#/components/schemas/BusinessUnitUpdateAction'
        - type: "object"
          required:
            - storeMode
          properties:
            action:
              type: "string"
            storeMode:
              $ref: '#/components/schemas/BusinessUnitStoreMode'
            stores:
              type: "array"
              items:
                $ref: '#/components/schemas/StoreResourceIdentifier'
    BusinessUnitSetStoresAction:
      allOf:
        - $ref: '#/components/schemas/BusinessUnitUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            stores:
              type: "array"
              items:
                $ref: '#/components/schemas/StoreResourceIdentifier'
    CartDiscount:
      allOf:
        - $ref: '#/components/schemas/BaseResource'
        - type: "object"
          required:
            - cartPredicate
            - createdAt
            - id
            - isActive
            - lastModifiedAt
            - name
            - references
            - requiresDiscountCode
            - sortOrder
            - stackingMode
            - value
            - version
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            name:
              $ref: '#/components/schemas/LocalizedString'
            key:
              type: "string"
            description:
              $ref: '#/components/schemas/LocalizedString'
            value:
              $ref: '#/components/schemas/CartDiscountValue'
            cartPredicate:
              type: "string"
            target:
              $ref: '#/components/schemas/CartDiscountTarget'
            sortOrder:
              type: "string"
            isActive:
              type: "boolean"
            validFrom:
              type: "string"
              format: "datetime"
            validUntil:
              type: "string"
              format: "datetime"
            requiresDiscountCode:
              type: "boolean"
            references:
              type: "array"
              items:
                $ref: '#/components/schemas/Reference'
            stackingMode:
              $ref: '#/components/schemas/StackingMode'
            custom:
              $ref: '#/components/schemas/CustomFields'
    CartDiscountCustomLineItemsTarget:
      allOf:
        - $ref: '#/components/schemas/CartDiscountTarget'
        - type: "object"
          required:
            - predicate
          properties:
            type:
              type: "string"
            predicate:
              type: "string"
    CartDiscountDraft:
      type: "object"
      required:
        - cartPredicate
        - name
        - sortOrder
        - value
      properties:
        name:
          $ref: '#/components/schemas/LocalizedString'
        key:
          type: "string"
        description:
          $ref: '#/components/schemas/LocalizedString'
        value:
          $ref: '#/components/schemas/CartDiscountValueDraft'
        cartPredicate:
          type: "string"
        target:
          $ref: '#/components/schemas/CartDiscountTarget'
        sortOrder:
          type: "string"
        isActive:
          type: "boolean"
        validFrom:
          type: "string"
          format: "datetime"
        validUntil:
          type: "string"
          format: "datetime"
        requiresDiscountCode:
          type: "boolean"
        stackingMode:
          $ref: '#/components/schemas/StackingMode'
        custom:
          $ref: '#/components/schemas/CustomFieldsDraft'
    CartDiscountLineItemsTarget:
      allOf:
        - $ref: '#/components/schemas/CartDiscountTarget'
        - type: "object"
          required:
            - predicate
          properties:
            type:
              type: "string"
            predicate:
              type: "string"
    CartDiscountPagedQueryResponse:
      type: "object"
      required:
        - count
        - limit
        - offset
        - results
      properties:
        limit:
          type: "integer"
          format: "int64"
        offset:
          type: "integer"
          format: "int64"
        count:
          type: "integer"
          format: "int64"
        total:
          type: "integer"
          format: "int64"
        results:
          type: "array"
          items:
            $ref: '#/components/schemas/CartDiscount'
    CartDiscountReference:
      allOf:
        - $ref: '#/components/schemas/Reference'
        - type: "object"
          required:
            - id
          properties:
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            id:
              type: "string"
            obj:
              $ref: '#/components/schemas/CartDiscount'
    CartDiscountResourceIdentifier:
      allOf:
        - $ref: '#/components/schemas/ResourceIdentifier'
        - type: "object"
          properties:
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            id:
              type: "string"
            key:
              type: "string"
    CartDiscountShippingCostTarget:
      allOf:
        - $ref: '#/components/schemas/CartDiscountTarget'
        - type: "object"
          properties:
            type:
              type: "string"
    CartDiscountTarget:
      type: "object"
      discriminator:
        propertyName: type
        mapping:
          customLineItems: '#/components/schemas/CartDiscountCustomLineItemsTarget'
          lineItems: '#/components/schemas/CartDiscountLineItemsTarget'
          shipping: '#/components/schemas/CartDiscountShippingCostTarget'
          multiBuyCustomLineItems: '#/components/schemas/MultiBuyCustomLineItemsTarget'
          multiBuyLineItems: '#/components/schemas/MultiBuyLineItemsTarget'
      required:
        - type
      properties:
        type:
          type: "string"
    CartDiscountUpdate:
      type: "object"
      required:
        - actions
        - version
      properties:
        version:
          type: "integer"
          format: "int64"
        actions:
          type: "array"
          items:
            $ref: '#/components/schemas/CartDiscountUpdateAction'
    CartDiscountUpdateAction:
      type: "object"
      discriminator:
        propertyName: action
        mapping:
          changeCartPredicate: '#/components/schemas/CartDiscountChangeCartPredicateAction'
          changeIsActive: '#/components/schemas/CartDiscountChangeIsActiveAction'
          changeName: '#/components/schemas/CartDiscountChangeNameAction'
          changeRequiresDiscountCode: '#/components/schemas/CartDiscountChangeRequiresDiscountCodeAction'
          changeSortOrder: '#/components/schemas/CartDiscountChangeSortOrderAction'
          changeStackingMode: '#/components/schemas/CartDiscountChangeStackingModeAction'
          changeTarget: '#/components/schemas/CartDiscountChangeTargetAction'
          changeValue: '#/components/schemas/CartDiscountChangeValueAction'
          setCustomField: '#/components/schemas/CartDiscountSetCustomFieldAction'
          setCustomType: '#/components/schemas/CartDiscountSetCustomTypeAction'
          setDescription: '#/components/schemas/CartDiscountSetDescriptionAction'
          setKey: '#/components/schemas/CartDiscountSetKeyAction'
          setValidFrom: '#/components/schemas/CartDiscountSetValidFromAction'
          setValidFromAndUntil: '#/components/schemas/CartDiscountSetValidFromAndUntilAction'
          setValidUntil: '#/components/schemas/CartDiscountSetValidUntilAction'
      required:
        - action
      properties:
        action:
          type: "string"
    CartDiscountValue:
      type: "object"
      discriminator:
        propertyName: type
        mapping:
          absolute: '#/components/schemas/CartDiscountValueAbsolute'
          fixed: '#/components/schemas/CartDiscountValueFixed'
          giftLineItem: '#/components/schemas/CartDiscountValueGiftLineItem'
          relative: '#/components/schemas/CartDiscountValueRelative'
      required:
        - type
      properties:
        type:
          type: "string"
    CartDiscountValueAbsolute:
      allOf:
        - $ref: '#/components/schemas/CartDiscountValue'
        - type: "object"
          required:
            - money
          properties:
            type:
              type: "string"
            money:
              type: "array"
              items:
                $ref: '#/components/schemas/CentPrecisionMoney'
    CartDiscountValueAbsoluteDraft:
      allOf:
        - $ref: '#/components/schemas/CartDiscountValueDraft'
        - type: "object"
          required:
            - money
          properties:
            type:
              type: "string"
            money:
              type: "array"
              items:
                $ref: '#/components/schemas/Money'
    CartDiscountValueDraft:
      type: "object"
      discriminator:
        propertyName: type
        mapping:
          absolute: '#/components/schemas/CartDiscountValueAbsoluteDraft'
          fixed: '#/components/schemas/CartDiscountValueFixedDraft'
          giftLineItem: '#/components/schemas/CartDiscountValueGiftLineItemDraft'
          relative: '#/components/schemas/CartDiscountValueRelativeDraft'
      required:
        - type
      properties:
        type:
          type: "string"
    CartDiscountValueFixed:
      allOf:
        - $ref: '#/components/schemas/CartDiscountValue'
        - type: "object"
          required:
            - money
          properties:
            type:
              type: "string"
            money:
              type: "array"
              items:
                $ref: '#/components/schemas/CentPrecisionMoney'
    CartDiscountValueFixedDraft:
      allOf:
        - $ref: '#/components/schemas/CartDiscountValueDraft'
        - type: "object"
          required:
            - money
          properties:
            type:
              type: "string"
            money:
              type: "array"
              items:
                $ref: '#/components/schemas/Money'
    CartDiscountValueGiftLineItem:
      allOf:
        - $ref: '#/components/schemas/CartDiscountValue'
        - type: "object"
          required:
            - product
            - variantId
          properties:
            type:
              type: "string"
            product:
              $ref: '#/components/schemas/ProductReference'
            variantId:
              type: "integer"
              format: "int64"
            supplyChannel:
              $ref: '#/components/schemas/ChannelReference'
            distributionChannel:
              $ref: '#/components/schemas/ChannelReference'
    CartDiscountValueGiftLineItemDraft:
      allOf:
        - $ref: '#/components/schemas/CartDiscountValueDraft'
        - type: "object"
          required:
            - product
            - variantId
          properties:
            type:
              type: "string"
            product:
              $ref: '#/components/schemas/ProductResourceIdentifier'
            variantId:
              type: "integer"
              format: "int64"
            supplyChannel:
              $ref: '#/components/schemas/ChannelResourceIdentifier'
            distributionChannel:
              $ref: '#/components/schemas/ChannelResourceIdentifier'
    CartDiscountValueRelative:
      allOf:
        - $ref: '#/components/schemas/CartDiscountValue'
        - type: "object"
          required:
            - permyriad
          properties:
            type:
              type: "string"
            permyriad:
              type: "integer"
              format: "int64"
    CartDiscountValueRelativeDraft:
      allOf:
        - $ref: '#/components/schemas/CartDiscountValueDraft'
        - type: "object"
          required:
            - permyriad
          properties:
            type:
              type: "string"
            permyriad:
              type: "integer"
              format: "int64"
    MultiBuyCustomLineItemsTarget:
      allOf:
        - $ref: '#/components/schemas/CartDiscountTarget'
        - type: "object"
          required:
            - discountedQuantity
            - predicate
            - selectionMode
            - triggerQuantity
          properties:
            type:
              type: "string"
            predicate:
              type: "string"
            triggerQuantity:
              type: "integer"
              format: "int32"
            discountedQuantity:
              type: "integer"
              format: "int32"
            maxOccurrence:
              type: "integer"
              format: "int32"
            selectionMode:
              $ref: '#/components/schemas/SelectionMode'
    MultiBuyLineItemsTarget:
      allOf:
        - $ref: '#/components/schemas/CartDiscountTarget'
        - type: "object"
          required:
            - discountedQuantity
            - predicate
            - selectionMode
            - triggerQuantity
          properties:
            type:
              type: "string"
            predicate:
              type: "string"
            triggerQuantity:
              type: "integer"
              format: "int32"
            discountedQuantity:
              type: "integer"
              format: "int32"
            maxOccurrence:
              type: "integer"
              format: "int32"
            selectionMode:
              $ref: '#/components/schemas/SelectionMode'
    SelectionMode:
      type: "string"
      enum:
        - Cheapest
        - MostExpensive
      x-annotation-package: "CartDiscount"
      x-annotation-enumDescriptions:
        Cheapest: "Select the cheapest items."
        MostExpensive: "Select the most expensive items."
    StackingMode:
      type: "string"
      enum:
        - Stacking
        - StopAfterThisDiscount
      x-annotation-package: "CartDiscount"
      x-annotation-enumDescriptions:
        Stacking: "Applies other matching Discounts after applying this one."
        StopAfterThisDiscount: "Doesn't apply any more matching Discounts after this one if
         it's successfully applied."
    CartDiscountChangeCartPredicateAction:
      allOf:
        - $ref: '#/components/schemas/CartDiscountUpdateAction'
        - type: "object"
          required:
            - cartPredicate
          properties:
            action:
              type: "string"
            cartPredicate:
              type: "string"
    CartDiscountChangeIsActiveAction:
      allOf:
        - $ref: '#/components/schemas/CartDiscountUpdateAction'
        - type: "object"
          required:
            - isActive
          properties:
            action:
              type: "string"
            isActive:
              type: "boolean"
    CartDiscountChangeNameAction:
      allOf:
        - $ref: '#/components/schemas/CartDiscountUpdateAction'
        - type: "object"
          required:
            - name
          properties:
            action:
              type: "string"
            name:
              $ref: '#/components/schemas/LocalizedString'
    CartDiscountChangeRequiresDiscountCodeAction:
      allOf:
        - $ref: '#/components/schemas/CartDiscountUpdateAction'
        - type: "object"
          required:
            - requiresDiscountCode
          properties:
            action:
              type: "string"
            requiresDiscountCode:
              type: "boolean"
    CartDiscountChangeSortOrderAction:
      allOf:
        - $ref: '#/components/schemas/CartDiscountUpdateAction'
        - type: "object"
          required:
            - sortOrder
          properties:
            action:
              type: "string"
            sortOrder:
              type: "string"
    CartDiscountChangeStackingModeAction:
      allOf:
        - $ref: '#/components/schemas/CartDiscountUpdateAction'
        - type: "object"
          required:
            - stackingMode
          properties:
            action:
              type: "string"
            stackingMode:
              $ref: '#/components/schemas/StackingMode'
    CartDiscountChangeTargetAction:
      allOf:
        - $ref: '#/components/schemas/CartDiscountUpdateAction'
        - type: "object"
          required:
            - target
          properties:
            action:
              type: "string"
            target:
              $ref: '#/components/schemas/CartDiscountTarget'
    CartDiscountChangeValueAction:
      allOf:
        - $ref: '#/components/schemas/CartDiscountUpdateAction'
        - type: "object"
          required:
            - value
          properties:
            action:
              type: "string"
            value:
              $ref: '#/components/schemas/CartDiscountValueDraft'
    CartDiscountSetCustomFieldAction:
      allOf:
        - $ref: '#/components/schemas/CartDiscountUpdateAction'
        - type: "object"
          required:
            - name
          properties:
            action:
              type: "string"
            name:
              type: "string"
            value:
              {}
    CartDiscountSetCustomTypeAction:
      allOf:
        - $ref: '#/components/schemas/CartDiscountUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            type:
              $ref: '#/components/schemas/TypeResourceIdentifier'
            fields:
              $ref: '#/components/schemas/FieldContainer'
    CartDiscountSetDescriptionAction:
      allOf:
        - $ref: '#/components/schemas/CartDiscountUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            description:
              $ref: '#/components/schemas/LocalizedString'
    CartDiscountSetKeyAction:
      allOf:
        - $ref: '#/components/schemas/CartDiscountUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            key:
              type: "string"
    CartDiscountSetValidFromAction:
      allOf:
        - $ref: '#/components/schemas/CartDiscountUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            validFrom:
              type: "string"
              format: "datetime"
    CartDiscountSetValidFromAndUntilAction:
      allOf:
        - $ref: '#/components/schemas/CartDiscountUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            validFrom:
              type: "string"
              format: "datetime"
            validUntil:
              type: "string"
              format: "datetime"
    CartDiscountSetValidUntilAction:
      allOf:
        - $ref: '#/components/schemas/CartDiscountUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            validUntil:
              type: "string"
              format: "datetime"
    Cart:
      allOf:
        - $ref: '#/components/schemas/BaseResource'
        - type: "object"
          required:
            - cartState
            - createdAt
            - customLineItems
            - directDiscounts
            - discountCodes
            - id
            - inventoryMode
            - itemShippingAddresses
            - lastModifiedAt
            - lineItems
            - origin
            - refusedGifts
            - shipping
            - shippingMode
            - taxCalculationMode
            - taxMode
            - taxRoundingMode
            - totalPrice
            - version
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            key:
              type: "string"
            customerId:
              type: "string"
            customerEmail:
              type: "string"
            customerGroup:
              $ref: '#/components/schemas/CustomerGroupReference'
            anonymousId:
              type: "string"
            businessUnit:
              $ref: '#/components/schemas/BusinessUnitKeyReference'
            store:
              $ref: '#/components/schemas/StoreKeyReference'
            lineItems:
              type: "array"
              items:
                $ref: '#/components/schemas/LineItem'
            customLineItems:
              type: "array"
              items:
                $ref: '#/components/schemas/CustomLineItem'
            totalLineItemQuantity:
              type: "integer"
              format: "int64"
            totalPrice:
              $ref: '#/components/schemas/CentPrecisionMoney'
            taxedPrice:
              $ref: '#/components/schemas/TaxedPrice'
            taxedShippingPrice:
              $ref: '#/components/schemas/TaxedPrice'
            taxMode:
              $ref: '#/components/schemas/TaxMode'
            taxRoundingMode:
              $ref: '#/components/schemas/RoundingMode'
            taxCalculationMode:
              $ref: '#/components/schemas/TaxCalculationMode'
            inventoryMode:
              $ref: '#/components/schemas/InventoryMode'
            cartState:
              $ref: '#/components/schemas/CartState'
            billingAddress:
              $ref: '#/components/schemas/Address'
            shippingAddress:
              $ref: '#/components/schemas/Address'
            shippingMode:
              $ref: '#/components/schemas/ShippingMode'
            shippingKey:
              type: "string"
            shippingInfo:
              $ref: '#/components/schemas/ShippingInfo'
            shippingRateInput:
              $ref: '#/components/schemas/ShippingRateInput'
            shippingCustomFields:
              $ref: '#/components/schemas/CustomFields'
            shipping:
              type: "array"
              items:
                $ref: '#/components/schemas/Shipping'
            itemShippingAddresses:
              type: "array"
              items:
                $ref: '#/components/schemas/Address'
            discountCodes:
              type: "array"
              items:
                $ref: '#/components/schemas/DiscountCodeInfo'
            directDiscounts:
              type: "array"
              items:
                $ref: '#/components/schemas/DirectDiscount'
            refusedGifts:
              type: "array"
              items:
                $ref: '#/components/schemas/CartDiscountReference'
            paymentInfo:
              $ref: '#/components/schemas/PaymentInfo'
            country:
              $ref: '#/components/schemas/CountryCode'
            locale:
              $ref: '#/components/schemas/Locale'
            origin:
              $ref: '#/components/schemas/CartOrigin'
            custom:
              $ref: '#/components/schemas/CustomFields'
            deleteDaysAfterLastModification:
              type: "integer"
              format: "int32"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
    CartDraft:
      type: "object"
      required:
        - currency
      properties:
        currency:
          $ref: '#/components/schemas/CurrencyCode'
        key:
          type: "string"
        customerId:
          type: "string"
        customerEmail:
          type: "string"
        customerGroup:
          $ref: '#/components/schemas/CustomerGroupResourceIdentifier'
        anonymousId:
          type: "string"
        businessUnit:
          $ref: '#/components/schemas/BusinessUnitResourceIdentifier'
        store:
          $ref: '#/components/schemas/StoreResourceIdentifier'
        lineItems:
          type: "array"
          items:
            $ref: '#/components/schemas/LineItemDraft'
        customLineItems:
          type: "array"
          items:
            $ref: '#/components/schemas/CustomLineItemDraft'
        taxMode:
          $ref: '#/components/schemas/TaxMode'
        externalTaxRateForShippingMethod:
          $ref: '#/components/schemas/ExternalTaxRateDraft'
        taxRoundingMode:
          $ref: '#/components/schemas/RoundingMode'
        taxCalculationMode:
          $ref: '#/components/schemas/TaxCalculationMode'
        inventoryMode:
          $ref: '#/components/schemas/InventoryMode'
        billingAddress:
          $ref: '#/components/schemas/BaseAddress'
        shippingAddress:
          $ref: '#/components/schemas/BaseAddress'
        shippingMethod:
          $ref: '#/components/schemas/ShippingMethodResourceIdentifier'
        shippingRateInput:
          $ref: '#/components/schemas/ShippingRateInputDraft'
        shippingMode:
          $ref: '#/components/schemas/ShippingMode'
        customShipping:
          type: "array"
          items:
            $ref: '#/components/schemas/CustomShippingDraft'
        shipping:
          type: "array"
          items:
            $ref: '#/components/schemas/ShippingDraft'
        itemShippingAddresses:
          type: "array"
          items:
            $ref: '#/components/schemas/BaseAddress'
        discountCodes:
          type: "array"
          items:
            type: "string"
        country:
          $ref: '#/components/schemas/CountryCode'
        locale:
          $ref: '#/components/schemas/Locale'
        origin:
          $ref: '#/components/schemas/CartOrigin'
        deleteDaysAfterLastModification:
          type: "integer"
          format: "int64"
        custom:
          $ref: '#/components/schemas/CustomFieldsDraft'
    CartOrigin:
      type: "string"
      enum:
        - Customer
        - Merchant
        - Quote
      x-annotation-package: "Cart"
      x-annotation-docs-uri: "https://docs.commercetools.com/api/projects/carts#cartorigin"
      x-annotation-enumDescriptions:
        Customer: "Cart was created by a Customer.nnThis is the default value.n"
        Merchant: "Cart was created by a merchant on behalf of a Customer.n"
        Quote: "Cart was created as part of a Quote (BETA).n"
    CartPagedQueryResponse:
      type: "object"
      required:
        - count
        - limit
        - offset
        - results
      properties:
        limit:
          type: "integer"
          format: "int64"
        offset:
          type: "integer"
          format: "int64"
        count:
          type: "integer"
          format: "int64"
        total:
          type: "integer"
          format: "int64"
        results:
          type: "array"
          items:
            $ref: '#/components/schemas/Cart'
    CartReference:
      allOf:
        - $ref: '#/components/schemas/Reference'
        - type: "object"
          required:
            - id
          properties:
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            id:
              type: "string"
            obj:
              $ref: '#/components/schemas/Cart'
    CartResourceIdentifier:
      allOf:
        - $ref: '#/components/schemas/ResourceIdentifier'
        - type: "object"
          properties:
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            id:
              type: "string"
            key:
              type: "string"
    CartState:
      type: "string"
      enum:
        - Active
        - Merged
        - Ordered
        - Frozen
      x-annotation-package: "Cart"
      x-annotation-docs-uri: "https://docs.commercetools.com/api/projects/carts#cartstate"
      x-annotation-enumDescriptions:
        Active: "The default state where a Cart can be updated and ordered.n"
        Merged: "An anonymous Cart was merged into a Customer's Cart on [sign-in](/../api/projects/customers#authenticate-sign-in-customer),
         and no further operations are allowed on the Cart.n"
        Ordered: "A Cart was [ordered](/../api/projects/orders#create-order-from-cart), and
         no further operations are allowed on the Cart.n"
        Frozen: "A Cart is [frozen](ctp:api:type:FrozenCarts). Update actions that can change
         the price of (Custom) Line Items are not allowed.nn  - [Add LineItem](ctp:api:type:CartAddLineItemAction)n
          - [Change LineItem Quantity](ctp:api:type:CartChangeLineItemQuantityAction)n
          - [Remove LineItem](ctp:api:type:CartRemoveLineItemAction)n  - [Set LineItem
         DistributionChannel](ctp:api:type:CartSetLineItemDistributionChannelAction)n
          - [Set LineItem SupplyChannel](ctp:api:type:CartSetLineItemSupplyChannelAction)n
          - [Add CustomLineItem](ctp:api:type:CartAddCustomLineItemAction)n  - [Change
         CustomLineItem Quantity](ctp:api:type:CartChangeCustomLineItemQuantityAction)n
          - [Remove CustomLineItem](ctp:api:type:CartRemoveCustomLineItemAction)n  - [Change
         TaxMode](ctp:api:type:CartChangeTaxModeAction)n  - [Set LineItem Price](ctp:api:type:CartSetLineItemPriceAction)n
          - [Set LineItem TotalPrice](ctp:api:type:CartSetLineItemTotalPriceAction)n"
    CartUpdate:
      type: "object"
      required:
        - actions
        - version
      properties:
        version:
          type: "integer"
          format: "int64"
        actions:
          type: "array"
          items:
            $ref: '#/components/schemas/CartUpdateAction'
    CartUpdateAction:
      type: "object"
      discriminator:
        propertyName: action
        mapping:
          addCustomLineItem: '#/components/schemas/CartAddCustomLineItemAction'
          addCustomShippingMethod: '#/components/schemas/CartAddCustomShippingMethodAction'
          addDiscountCode: '#/components/schemas/CartAddDiscountCodeAction'
          addItemShippingAddress: '#/components/schemas/CartAddItemShippingAddressAction'
          addLineItem: '#/components/schemas/CartAddLineItemAction'
          addPayment: '#/components/schemas/CartAddPaymentAction'
          addShippingMethod: '#/components/schemas/CartAddShippingMethodAction'
          addShoppingList: '#/components/schemas/CartAddShoppingListAction'
          applyDeltaToCustomLineItemShippingDetailsTargets: '#/components/schemas/CartApplyDeltaToCustomLineItemShippingDetailsTargetsAction'
          applyDeltaToLineItemShippingDetailsTargets: '#/components/schemas/CartApplyDeltaToLineItemShippingDetailsTargetsAction'
          changeCustomLineItemMoney: '#/components/schemas/CartChangeCustomLineItemMoneyAction'
          changeCustomLineItemPriceMode: '#/components/schemas/CartChangeCustomLineItemPriceModeAction'
          changeCustomLineItemQuantity: '#/components/schemas/CartChangeCustomLineItemQuantityAction'
          changeLineItemQuantity: '#/components/schemas/CartChangeLineItemQuantityAction'
          changeTaxCalculationMode: '#/components/schemas/CartChangeTaxCalculationModeAction'
          changeTaxMode: '#/components/schemas/CartChangeTaxModeAction'
          changeTaxRoundingMode: '#/components/schemas/CartChangeTaxRoundingModeAction'
          freezeCart: '#/components/schemas/CartFreezeCartAction'
          recalculate: '#/components/schemas/CartRecalculateAction'
          removeCustomLineItem: '#/components/schemas/CartRemoveCustomLineItemAction'
          removeDiscountCode: '#/components/schemas/CartRemoveDiscountCodeAction'
          removeItemShippingAddress: '#/components/schemas/CartRemoveItemShippingAddressAction'
          removeLineItem: '#/components/schemas/CartRemoveLineItemAction'
          removePayment: '#/components/schemas/CartRemovePaymentAction'
          removeShippingMethod: '#/components/schemas/CartRemoveShippingMethodAction'
          setAnonymousId: '#/components/schemas/CartSetAnonymousIdAction'
          setBillingAddress: '#/components/schemas/CartSetBillingAddressAction'
          setBillingAddressCustomField: '#/components/schemas/CartSetBillingAddressCustomFieldAction'
          setBillingAddressCustomType: '#/components/schemas/CartSetBillingAddressCustomTypeAction'
          setBusinessUnit: '#/components/schemas/CartSetBusinessUnitAction'
          setCartTotalTax: '#/components/schemas/CartSetCartTotalTaxAction'
          setCountry: '#/components/schemas/CartSetCountryAction'
          setCustomField: '#/components/schemas/CartSetCustomFieldAction'
          setCustomLineItemCustomField: '#/components/schemas/CartSetCustomLineItemCustomFieldAction'
          setCustomLineItemCustomType: '#/components/schemas/CartSetCustomLineItemCustomTypeAction'
          setCustomLineItemShippingDetails: '#/components/schemas/CartSetCustomLineItemShippingDetailsAction'
          setCustomLineItemTaxAmount: '#/components/schemas/CartSetCustomLineItemTaxAmountAction'
          setCustomLineItemTaxRate: '#/components/schemas/CartSetCustomLineItemTaxRateAction'
          setCustomShippingMethod: '#/components/schemas/CartSetCustomShippingMethodAction'
          setCustomType: '#/components/schemas/CartSetCustomTypeAction'
          setCustomerEmail: '#/components/schemas/CartSetCustomerEmailAction'
          setCustomerGroup: '#/components/schemas/CartSetCustomerGroupAction'
          setCustomerId: '#/components/schemas/CartSetCustomerIdAction'
          setDeleteDaysAfterLastModification: '#/components/schemas/CartSetDeleteDaysAfterLastModificationAction'
          setDeliveryAddressCustomField: '#/components/schemas/CartSetDeliveryAddressCustomFieldAction'
          setDeliveryAddressCustomType: '#/components/schemas/CartSetDeliveryAddressCustomTypeAction'
          setDirectDiscounts: '#/components/schemas/CartSetDirectDiscountsAction'
          setItemShippingAddressCustomField: '#/components/schemas/CartSetItemShippingAddressCustomFieldAction'
          setItemShippingAddressCustomType: '#/components/schemas/CartSetItemShippingAddressCustomTypeAction'
          setKey: '#/components/schemas/CartSetKeyAction'
          setLineItemCustomField: '#/components/schemas/CartSetLineItemCustomFieldAction'
          setLineItemCustomType: '#/components/schemas/CartSetLineItemCustomTypeAction'
          setLineItemDistributionChannel: '#/components/schemas/CartSetLineItemDistributionChannelAction'
          setLineItemPrice: '#/components/schemas/CartSetLineItemPriceAction'
          setLineItemShippingDetails: '#/components/schemas/CartSetLineItemShippingDetailsAction'
          setLineItemSupplyChannel: '#/components/schemas/CartSetLineItemSupplyChannelAction'
          setLineItemTaxAmount: '#/components/schemas/CartSetLineItemTaxAmountAction'
          setLineItemTaxRate: '#/components/schemas/CartSetLineItemTaxRateAction'
          setLineItemTotalPrice: '#/components/schemas/CartSetLineItemTotalPriceAction'
          setLocale: '#/components/schemas/CartSetLocaleAction'
          setShippingAddress: '#/components/schemas/CartSetShippingAddressAction'
          setShippingAddressCustomField: '#/components/schemas/CartSetShippingAddressCustomFieldAction'
          setShippingAddressCustomType: '#/components/schemas/CartSetShippingAddressCustomTypeAction'
          setShippingCustomField: '#/components/schemas/CartSetShippingCustomFieldAction'
          setShippingCustomType: '#/components/schemas/CartSetShippingCustomTypeAction'
          setShippingMethod: '#/components/schemas/CartSetShippingMethodAction'
          setShippingMethodTaxAmount: '#/components/schemas/CartSetShippingMethodTaxAmountAction'
          setShippingMethodTaxRate: '#/components/schemas/CartSetShippingMethodTaxRateAction'
          setShippingRateInput: '#/components/schemas/CartSetShippingRateInputAction'
          unfreezeCart: '#/components/schemas/CartUnfreezeCartAction'
          updateItemShippingAddress: '#/components/schemas/CartUpdateItemShippingAddressAction'
      required:
        - action
      properties:
        action:
          type: "string"
    ClassificationShippingRateInput:
      allOf:
        - $ref: '#/components/schemas/ShippingRateInput'
        - type: "object"
          required:
            - key
            - label
          properties:
            type:
              type: "string"
            key:
              type: "string"
            label:
              $ref: '#/components/schemas/LocalizedString'
    ClassificationShippingRateInputDraft:
      allOf:
        - $ref: '#/components/schemas/ShippingRateInputDraft'
        - type: "object"
          required:
            - key
          properties:
            type:
              type: "string"
            key:
              type: "string"
    CustomLineItem:
      type: "object"
      required:
        - discountedPricePerQuantity
        - id
        - money
        - name
        - priceMode
        - quantity
        - slug
        - state
        - totalPrice
      properties:
        id:
          type: "string"
        name:
          $ref: '#/components/schemas/LocalizedString'
        money:
          $ref: '#/components/schemas/TypedMoney'
        taxedPrice:
          $ref: '#/components/schemas/TaxedItemPrice'
        totalPrice:
          $ref: '#/components/schemas/CentPrecisionMoney'
        slug:
          type: "string"
        quantity:
          type: "integer"
          format: "int64"
        state:
          type: "array"
          items:
            $ref: '#/components/schemas/ItemState'
        taxCategory:
          $ref: '#/components/schemas/TaxCategoryReference'
        taxRate:
          $ref: '#/components/schemas/TaxRate'
        discountedPricePerQuantity:
          type: "array"
          items:
            $ref: '#/components/schemas/DiscountedLineItemPriceForQuantity'
        custom:
          $ref: '#/components/schemas/CustomFields'
        shippingDetails:
          $ref: '#/components/schemas/ItemShippingDetails'
        priceMode:
          $ref: '#/components/schemas/CustomLineItemPriceMode'
    CustomLineItemDraft:
      type: "object"
      required:
        - money
        - name
        - priceMode
        - slug
      properties:
        name:
          $ref: '#/components/schemas/LocalizedString'
        quantity:
          type: "integer"
          format: "int64"
        money:
          $ref: '#/components/schemas/Money'
        slug:
          type: "string"
        taxCategory:
          $ref: '#/components/schemas/TaxCategoryResourceIdentifier'
        externalTaxRate:
          $ref: '#/components/schemas/ExternalTaxRateDraft'
        custom:
          $ref: '#/components/schemas/CustomFieldsDraft'
        shippingDetails:
          $ref: '#/components/schemas/ItemShippingDetailsDraft'
        priceMode:
          $ref: '#/components/schemas/CustomLineItemPriceMode'
    CustomLineItemPriceMode:
      type: "string"
      enum:
        - Standard
        - External
      x-annotation-package: "Cart"
      x-annotation-enumDescriptions:
        Standard: "Allows application of [Cart Discounts](/../api/projects/cartDiscounts)
         for the Custom Line Item.nnThis is the default mode for backwards compatibility.n"
        External: "Deactivates application of Cart Discounts for the Custom Line Item despite
         a matching [CartDiscountCustomLineItemsTarget](ctp:api:type:CartDiscountCustomLineItemsTarget).n"
    CustomShippingDraft:
      type: "object"
      required:
        - key
        - shippingMethodName
        - shippingRate
      properties:
        key:
          type: "string"
        shippingMethodName:
          type: "string"
        shippingAddress:
          $ref: '#/components/schemas/BaseAddress'
        shippingRate:
          $ref: '#/components/schemas/ShippingRateDraft'
        shippingRateInput:
          $ref: '#/components/schemas/ShippingRateInputDraft'
        taxCategory:
          $ref: '#/components/schemas/TaxCategoryResourceIdentifier'
        externalTaxRate:
          $ref: '#/components/schemas/ExternalTaxRateDraft'
        deliveries:
          type: "array"
          items:
            $ref: '#/components/schemas/DeliveryDraft'
        custom:
          $ref: '#/components/schemas/CustomFieldsDraft'
    DirectDiscount:
      type: "object"
      required:
        - id
        - value
      properties:
        id:
          type: "string"
        value:
          $ref: '#/components/schemas/CartDiscountValue'
        target:
          $ref: '#/components/schemas/CartDiscountTarget'
    DirectDiscountDraft:
      type: "object"
      required:
        - value
      properties:
        value:
          $ref: '#/components/schemas/CartDiscountValue'
        target:
          $ref: '#/components/schemas/CartDiscountTarget'
    DirectDiscountReference:
      allOf:
        - $ref: '#/components/schemas/Reference'
        - type: "object"
          required:
            - id
          properties:
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            id:
              type: "string"
    DiscountCodeInfo:
      type: "object"
      required:
        - discountCode
        - state
      properties:
        discountCode:
          $ref: '#/components/schemas/DiscountCodeReference'
        state:
          $ref: '#/components/schemas/DiscountCodeState'
    DiscountCodeState:
      type: "string"
      enum:
        - NotActive
        - NotValid
        - DoesNotMatchCart
        - MatchesCart
        - MaxApplicationReached
        - ApplicationStoppedByPreviousDiscount
      x-annotation-package: "Cart"
      x-annotation-docs-uri: "https://docs.commercetools.com/api/projects/carts#discountcodestate"
      x-annotation-enumDescriptions:
        NotActive: "The Discount Code is not active or does not contain any active Cart Discounts.n"
        NotValid: "The Discount Code is not valid or does not contain any valid Cart Discounts.n
        Validity is determined by the [CartDiscount](ctp:api:type:CartDiscount) `validFrom`
         and `validUntil` dates.n"
        DoesNotMatchCart: "The Discount Code is active and contains at least one active and
         valid Cart Discount.nThe [DiscountCode](ctp:api:type:DiscountCode) `cartPredicate`
         does not match the Cart or the contained active discount's cart predicates do
         no match the Cart.n"
        MatchesCart: "The Discount Code is active and contains at least one active and valid
         Cart Discount.nThe [DiscountCode](ctp:api:type:DiscountCode) `cartPredicate`
         matches the Cart and at least one of the contained active discount's cart predicates
         matches the Cart.n"
        MaxApplicationReached: "The `maxApplications` or `maxApplicationsPerCustomer` for
         a [DiscountCode](ctp:api:type:DiscountCode) has been reached.n"
        ApplicationStoppedByPreviousDiscount: "The Discount Code is active and no discounts
         are applied after a discount with `StopAfterThisDiscount` [StackingMode](ctp:api:type:StackingMode)
         is defined.n"
    DiscountedLineItemPortion:
      type: "object"
      required:
        - discount
        - discountedAmount
      properties:
        discount:
          $ref: '#/components/schemas/Reference'
        discountedAmount:
          $ref: '#/components/schemas/TypedMoney'
    DiscountedLineItemPrice:
      type: "object"
      required:
        - includedDiscounts
        - value
      properties:
        value:
          $ref: '#/components/schemas/TypedMoney'
        includedDiscounts:
          type: "array"
          items:
            $ref: '#/components/schemas/DiscountedLineItemPortion'
    DiscountedLineItemPriceForQuantity:
      type: "object"
      required:
        - discountedPrice
        - quantity
      properties:
        quantity:
          type: "integer"
          format: "int64"
        discountedPrice:
          $ref: '#/components/schemas/DiscountedLineItemPrice'
    ExternalLineItemTotalPrice:
      type: "object"
      required:
        - price
        - totalPrice
      properties:
        price:
          $ref: '#/components/schemas/Money'
        totalPrice:
          $ref: '#/components/schemas/Money'
    ExternalTaxAmountDraft:
      type: "object"
      required:
        - taxRate
        - totalGross
      properties:
        totalGross:
          $ref: '#/components/schemas/Money'
        taxRate:
          $ref: '#/components/schemas/ExternalTaxRateDraft'
    ExternalTaxRateDraft:
      type: "object"
      required:
        - country
        - name
      properties:
        name:
          type: "string"
        amount:
          type: "number"
          format: "double"
        includedInPrice:
          type: "boolean"
        country:
          $ref: '#/components/schemas/CountryCode'
        state:
          type: "string"
        subRates:
          type: "array"
          items:
            $ref: '#/components/schemas/SubRate'
    InventoryMode:
      type: "string"
      enum:
        - None
        - TrackOnly
        - ReserveOnOrder
      x-annotation-package: "Cart"
      x-annotation-docs-uri: "https://docs.commercetools.com/api/projects/carts#inventorymode"
      x-annotation-enumDescriptions:
        None: "Adding and ordering items from a Cart are independent of the Inventory with
         no inventory checks or modifications.nnThis is the default mode.n"
        TrackOnly: "Orders are tracked on the Inventory, and ordering a [LineItem](ctp:api:type:LineItem)
         deducts the available quantity on the respective [InventoryEntry](ctp:api:type:InventoryEntry).n
        nAn [Order can be created](/../api/projects/orders#create-order) even if the Line
         Item quantity is zero or negative, but if no matching Inventory Entry exists for
         the Line Item, an [OutOfStock](ctp:api:type:OutOfStockError) error is returned.n"
        ReserveOnOrder: "Line Items in a Cart are only reserved for the duration of the ordering
         transaction.nIf a Line Item is not available when [creating an Order](/../api/projects/orders#create-order),
         an [OutOfStock](ctp:api:type:OutOfStockError) error is returned.nThis is because
         the [InventoryEntry](ctp:api:type:InventoryEntry) `availableQuantity` is insufficient
         (but is still updated) for the ordered Line Item quantity.nnHowever, an Order
         can be created if the [InventoryEntry](ctp:api:type:InventoryEntry) `restockableInDays`
         is set (including `0`).n"
    ItemShippingDetails:
      type: "object"
      required:
        - targets
        - valid
      properties:
        targets:
          type: "array"
          items:
            $ref: '#/components/schemas/ItemShippingTarget'
        valid:
          type: "boolean"
    ItemShippingDetailsDraft:
      type: "object"
      required:
        - targets
      properties:
        targets:
          type: "array"
          items:
            $ref: '#/components/schemas/ItemShippingTarget'
    ItemShippingTarget:
      type: "object"
      required:
        - addressKey
        - quantity
      properties:
        addressKey:
          type: "string"
        quantity:
          type: "integer"
          format: "int64"
        shippingMethodKey:
          type: "string"
    LineItem:
      type: "object"
      required:
        - discountedPricePerQuantity
        - id
        - lineItemMode
        - name
        - perMethodTaxRate
        - price
        - priceMode
        - productId
        - productType
        - quantity
        - state
        - taxedPricePortions
        - totalPrice
        - variant
      properties:
        id:
          type: "string"
        productId:
          type: "string"
        productKey:
          type: "string"
        name:
          $ref: '#/components/schemas/LocalizedString'
        productSlug:
          $ref: '#/components/schemas/LocalizedString'
        productType:
          $ref: '#/components/schemas/ProductTypeReference'
        variant:
          $ref: '#/components/schemas/ProductVariant'
        price:
          $ref: '#/components/schemas/Price'
        quantity:
          type: "integer"
          format: "int64"
        totalPrice:
          $ref: '#/components/schemas/CentPrecisionMoney'
        discountedPricePerQuantity:
          type: "array"
          items:
            $ref: '#/components/schemas/DiscountedLineItemPriceForQuantity'
        taxedPrice:
          $ref: '#/components/schemas/TaxedItemPrice'
        taxedPricePortions:
          type: "array"
          items:
            $ref: '#/components/schemas/MethodTaxedPrice'
        state:
          type: "array"
          items:
            $ref: '#/components/schemas/ItemState'
        taxRate:
          $ref: '#/components/schemas/TaxRate'
        perMethodTaxRate:
          type: "array"
          items:
            $ref: '#/components/schemas/MethodTaxRate'
        supplyChannel:
          $ref: '#/components/schemas/ChannelReference'
        distributionChannel:
          $ref: '#/components/schemas/ChannelReference'
        priceMode:
          $ref: '#/components/schemas/LineItemPriceMode'
        lineItemMode:
          $ref: '#/components/schemas/LineItemMode'
        inventoryMode:
          $ref: '#/components/schemas/InventoryMode'
        shippingDetails:
          $ref: '#/components/schemas/ItemShippingDetails'
        custom:
          $ref: '#/components/schemas/CustomFields'
        addedAt:
          type: "string"
          format: "datetime"
        lastModifiedAt:
          type: "string"
          format: "datetime"
    LineItemDraft:
      type: "object"
      properties:
        productId:
          type: "string"
        variantId:
          type: "integer"
          format: "int64"
        sku:
          type: "string"
        quantity:
          type: "integer"
          format: "int64"
        addedAt:
          type: "string"
          format: "datetime"
        distributionChannel:
          $ref: '#/components/schemas/ChannelResourceIdentifier'
        supplyChannel:
          $ref: '#/components/schemas/ChannelResourceIdentifier'
        externalPrice:
          $ref: '#/components/schemas/Money'
        externalTotalPrice:
          $ref: '#/components/schemas/ExternalLineItemTotalPrice'
        externalTaxRate:
          $ref: '#/components/schemas/ExternalTaxRateDraft'
        inventoryMode:
          $ref: '#/components/schemas/InventoryMode'
        shippingDetails:
          $ref: '#/components/schemas/ItemShippingDetailsDraft'
        custom:
          $ref: '#/components/schemas/CustomFieldsDraft'
    LineItemMode:
      type: "string"
      enum:
        - Standard
        - GiftLineItem
      x-annotation-package: "Cart"
      x-annotation-docs-uri: "https://docs.commercetools.com/api/projects/carts#lineitemmode"
      x-annotation-enumDescriptions:
        Standard: "The Line Item is added during [Cart creation](/../api/projects/carts#create-cart)
         or using the [Add LineItem](ctp:api:type:CartAddLineItemAction) update action.n
        The Line Item quantity can be changed without restriction.n"
        GiftLineItem: "The Line Item is added automatically by a Cart Discount with [CartDiscountValueGiftLineItem](ctp:api:type:CartDiscountValueGiftLineItem).n
        nThe quantity cannot be [increased](ctp:api:type:CartChangeLineItemQuantityAction),
         and it won't be merged when the same Line Item is [added](ctp:api:type:CartAddLineItemAction)
         to the Cart.nIf the gift is [removed](ctp:api:type:CartRemoveLineItemAction),
         an entry is added to the `refusedGifts` array and the discount won't be applied
         to the Cart.nThe price cannot be changed [externally](ctp:api:type:CartSetLineItemTotalPriceAction).n
        nAll other updates, such as the ones related to Custom Fields, can be used.n"
    LineItemPriceMode:
      type: "string"
      enum:
        - Platform
        - ExternalPrice
        - ExternalTotal
      x-annotation-package: "Cart"
      x-annotation-docs-uri: "https://docs.commercetools.com/api/projects/carts#lineitempricemode"
      x-annotation-enumDescriptions:
        Platform: "The [price is selected](ctp:api:type:LineItemPriceSelection) from the Product
         Variant.nThis is the default mode.n"
        ExternalPrice: "The Line Item price is set externally.nCart Discounts can apply to
         Line Items with this price mode.nAll update actions that change the quantity
         of a Line Item with this price mode require the `externalPrice` field to be given.n"
        ExternalTotal: "The Line Item price with the total is set externally.nCart Discounts
         are deactivated for Line Items with this price mode.nAlthough a Line Item with
         this price mode has both `price` and `totalPrice` set externally, only `totalPrice`
         is used to calculate the total price of a Cart.nAll update actions that change
         the quantity of a Line Item with this price mode can set the new price with the
         `externalTotal` field.nIf the `externalTotal` field is not given in the update
         actions, the external price is unset and the price mode is set to `Platform`.n"
    MethodTaxRate:
      type: "object"
      required:
        - shippingMethodKey
      properties:
        shippingMethodKey:
          type: "string"
        taxRate:
          $ref: '#/components/schemas/TaxRate'
    MethodTaxedPrice:
      type: "object"
      required:
        - shippingMethodKey
      properties:
        shippingMethodKey:
          type: "string"
        taxedPrice:
          $ref: '#/components/schemas/TaxedItemPrice'
    ReplicaCartDraft:
      type: "object"
      required:
        - reference
      properties:
        reference:
          oneOf:
            - $ref: '#/components/schemas/CartReference'
            - $ref: '#/components/schemas/OrderReference'
        key:
          type: "string"
    RoundingMode:
      type: "string"
      enum:
        - HalfEven
        - HalfUp
        - HalfDown
      x-annotation-package: "Cart"
      x-annotation-docs-uri: "https://docs.commercetools.com/api/projects/carts#roundingmode"
      x-annotation-enumDescriptions:
        HalfEven: "[Round half to even](https://en.wikipedia.org/wiki/Rounding#Round_half_to_even)n
        nDefault mode for a new Cart.n"
        HalfUp: "[Round half up](https://en.wikipedia.org/wiki/Rounding#Round_half_up)n"
        HalfDown: "[Round half down](https://en.wikipedia.org/wiki/Rounding#Round_half_down)n"
    ScoreShippingRateInput:
      allOf:
        - $ref: '#/components/schemas/ShippingRateInput'
        - type: "object"
          required:
            - score
          properties:
            type:
              type: "string"
            score:
              type: "integer"
              format: "int64"
    ScoreShippingRateInputDraft:
      allOf:
        - $ref: '#/components/schemas/ShippingRateInputDraft'
        - type: "object"
          required:
            - score
          properties:
            type:
              type: "string"
            score:
              type: "integer"
              format: "int64"
    Shipping:
      type: "object"
      required:
        - shippingAddress
        - shippingInfo
        - shippingKey
      properties:
        shippingKey:
          type: "string"
        shippingInfo:
          $ref: '#/components/schemas/ShippingInfo'
        shippingAddress:
          $ref: '#/components/schemas/Address'
        shippingRateInput:
          $ref: '#/components/schemas/ShippingRateInput'
        shippingCustomFields:
          $ref: '#/components/schemas/CustomFields'
    ShippingDraft:
      type: "object"
      required:
        - key
        - shippingAddress
      properties:
        key:
          type: "string"
        shippingMethod:
          $ref: '#/components/schemas/ShippingMethodReference'
        shippingAddress:
          $ref: '#/components/schemas/BaseAddress'
        shippingRateInput:
          $ref: '#/components/schemas/ShippingRateInputDraft'
        externalTaxRate:
          $ref: '#/components/schemas/ExternalTaxRateDraft'
        deliveries:
          type: "array"
          items:
            $ref: '#/components/schemas/DeliveryDraft'
        custom:
          $ref: '#/components/schemas/CustomFieldsDraft'
    ShippingInfo:
      type: "object"
      required:
        - price
        - shippingMethodName
        - shippingMethodState
        - shippingRate
      properties:
        shippingMethodName:
          type: "string"
        price:
          $ref: '#/components/schemas/CentPrecisionMoney'
        shippingRate:
          $ref: '#/components/schemas/ShippingRate'
        taxedPrice:
          $ref: '#/components/schemas/TaxedItemPrice'
        taxRate:
          $ref: '#/components/schemas/TaxRate'
        taxCategory:
          $ref: '#/components/schemas/TaxCategoryReference'
        shippingMethod:
          $ref: '#/components/schemas/ShippingMethodReference'
        deliveries:
          type: "array"
          items:
            $ref: '#/components/schemas/Delivery'
        discountedPrice:
          $ref: '#/components/schemas/DiscountedLineItemPrice'
        shippingMethodState:
          $ref: '#/components/schemas/ShippingMethodState'
    ShippingMethodState:
      type: "string"
      enum:
        - DoesNotMatchCart
        - MatchesCart
      x-annotation-package: "Cart"
      x-annotation-docs-uri: "https://docs.commercetools.com/api/projects/carts#shippingmethodstate"
      x-annotation-enumDescriptions:
        DoesNotMatchCart: "The [ShippingMethod](ctp:api:type:ShippingMethod) `predicate` does
         not match the Cart.nnOrdering this Cart returns an [ShippingMethodDoesNotMatchCart](ctp:api:type:ShippingMethodDoesNotMatchCartError)
         error.n"
        MatchesCart: "Either the [ShippingMethod](ctp:api:type:ShippingMethod) `predicate`
         matches the Cart or there is no `predicate` defined."
    ShippingMode:
      type: "string"
      enum:
        - Single
        - Multiple
      x-annotation-package: "Cart"
      x-annotation-docs-uri: "https://docs.commercetools.com/api/projects/carts#shippingmode"
      x-annotation-enumDescriptions:
        Single: "Cart can contain only a single Shipping Method.nThis is the default mode
         for backwards compatibilty.n"
        Multiple: "Cart can contain multiple Shipping Methods.n"
    ShippingRateInput:
      type: "object"
      discriminator:
        propertyName: type
        mapping:
          Classification: '#/components/schemas/ClassificationShippingRateInput'
          Score: '#/components/schemas/ScoreShippingRateInput'
      required:
        - type
      properties:
        type:
          type: "string"
    ShippingRateInputDraft:
      type: "object"
      discriminator:
        propertyName: type
        mapping:
          Classification: '#/components/schemas/ClassificationShippingRateInputDraft'
          Score: '#/components/schemas/ScoreShippingRateInputDraft'
      required:
        - type
      properties:
        type:
          type: "string"
    TaxCalculationMode:
      type: "string"
      enum:
        - LineItemLevel
        - UnitPriceLevel
      x-annotation-package: "Cart"
      x-annotation-docs-uri: "https://docs.commercetools.com/api/projects/carts#taxcalculationmode"
      x-annotation-enumDescriptions:
        LineItemLevel: "Taxes are calculated **after** the unit price is multiplied by the
         quantity. This is the default mode.nnFor example, `($1.08 * 3 = $3.24) * 1.19
         = $3.8556 -> $3.86 rounded`n"
        UnitPriceLevel: "Taxes are calculated on the unit price **before** multiplying by
         the quantity.nnFor example, `($1.08 * 1.19 = $1.2852 -> $1.29 rounded) * 3 =
         $3.87`n"
    TaxMode:
      type: "string"
      enum:
        - Platform
        - External
        - ExternalAmount
        - Disabled
      x-annotation-package: "Cart"
      x-annotation-docs-uri: "https://docs.commercetools.com/api/projects/carts#taxmode"
      x-annotation-enumDescriptions:
        Platform: "Tax Rates are selected automatically from the [TaxCategories](ctp:api:type:TaxCategory)
         based on the [Cart](ctp:api:type:Cart) `shippingAddress`.nThis is the default
         tax mode for a new Cart.nn`totalNet`, `totalGross`, and `taxPortions` fields
         are calculated based on the `taxRoundingMode`.n"
        External: "Tax Rates are set externally per [ExternalTaxRateDraft](ctp:api:type:ExternalTaxRateDraft).n
        A Cart can be ordered only if all Line Items, Custom Line Items, and the Shipping
         Method have an external Tax Rate set.nn`totalNet`, `totalGross`, and `taxPortions`
         fields are calculated based on the `taxRoundingMode`.n"
        ExternalAmount: "Tax amounts, Tax Rates, and tax portions are set externally per [ExternalTaxAmountDraft](ctp:api:type:ExternalTaxAmountDraft).n
        A Cart can be ordered only if the Cart and all Line Items, Custom Line Items, and
         the Shipping Method have an external tax amount and rate set.nnPrice-specific
         update actions on Carts require external recalculation of the total gross price.n
        Hence, the `externalTaxAmount` is removed in these cases and must be reset with
         [Set LineItem TaxAmount](ctp:api:type:CartSetLineItemTaxAmountAction), [Set CustomLineItem
         TaxAmount](ctp:api:type:CartSetCustomLineItemTaxAmountAction), or [Set ShippingMethod
         TaxAmount](ctp:api:type:CartSetShippingMethodTaxAmountAction) update actions.n"
        Disabled: "No taxes are added to the Cart.nnNote that this tax mode cannot be set
         on the [My Carts](/../api/projects/me-carts) API.n"
    TaxPortion:
      type: "object"
      required:
        - amount
        - rate
      properties:
        name:
          type: "string"
        rate:
          type: "number"
          format: "double"
        amount:
          $ref: '#/components/schemas/CentPrecisionMoney'
    TaxPortionDraft:
      type: "object"
      required:
        - amount
        - rate
      properties:
        name:
          type: "string"
        rate:
          type: "number"
          format: "double"
        amount:
          $ref: '#/components/schemas/Money'
    TaxedItemPrice:
      type: "object"
      required:
        - totalGross
        - totalNet
      properties:
        totalNet:
          $ref: '#/components/schemas/CentPrecisionMoney'
        totalGross:
          $ref: '#/components/schemas/CentPrecisionMoney'
        totalTax:
          $ref: '#/components/schemas/CentPrecisionMoney'
    TaxedPrice:
      type: "object"
      required:
        - taxPortions
        - totalGross
        - totalNet
      properties:
        totalNet:
          $ref: '#/components/schemas/CentPrecisionMoney'
        totalGross:
          $ref: '#/components/schemas/CentPrecisionMoney'
        taxPortions:
          type: "array"
          items:
            $ref: '#/components/schemas/TaxPortion'
        totalTax:
          $ref: '#/components/schemas/CentPrecisionMoney'
    TaxedPriceDraft:
      type: "object"
      required:
        - taxPortions
        - totalGross
        - totalNet
      properties:
        totalNet:
          $ref: '#/components/schemas/Money'
        totalGross:
          $ref: '#/components/schemas/Money'
        taxPortions:
          type: "array"
          items:
            $ref: '#/components/schemas/TaxPortionDraft'
    CartAddCustomLineItemAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          required:
            - money
            - name
            - slug
          properties:
            action:
              type: "string"
            money:
              $ref: '#/components/schemas/Money'
            name:
              $ref: '#/components/schemas/LocalizedString'
            quantity:
              type: "integer"
              format: "int64"
            slug:
              type: "string"
            taxCategory:
              $ref: '#/components/schemas/TaxCategoryResourceIdentifier'
            externalTaxRate:
              $ref: '#/components/schemas/ExternalTaxRateDraft'
            shippingDetails:
              $ref: '#/components/schemas/ItemShippingDetailsDraft'
            custom:
              $ref: '#/components/schemas/CustomFieldsDraft'
            priceMode:
              $ref: '#/components/schemas/CustomLineItemPriceMode'
    CartAddCustomShippingMethodAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          required:
            - shippingAddress
            - shippingKey
            - shippingMethodName
            - shippingRate
          properties:
            action:
              type: "string"
            shippingKey:
              type: "string"
            shippingMethodName:
              type: "string"
            shippingAddress:
              $ref: '#/components/schemas/BaseAddress'
            shippingRate:
              $ref: '#/components/schemas/ShippingRateDraft'
            shippingRateInput:
              $ref: '#/components/schemas/ShippingRateInputDraft'
            taxCategory:
              $ref: '#/components/schemas/TaxCategoryResourceIdentifier'
            externalTaxRate:
              $ref: '#/components/schemas/ExternalTaxRateDraft'
            deliveries:
              type: "array"
              items:
                $ref: '#/components/schemas/DeliveryDraft'
            custom:
              $ref: '#/components/schemas/CustomFieldsDraft'
    CartAddDiscountCodeAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          required:
            - code
          properties:
            action:
              type: "string"
            code:
              type: "string"
    CartAddItemShippingAddressAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          required:
            - address
          properties:
            action:
              type: "string"
            address:
              $ref: '#/components/schemas/BaseAddress'
    CartAddLineItemAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            productId:
              type: "string"
            variantId:
              type: "integer"
              format: "int64"
            sku:
              type: "string"
            quantity:
              type: "integer"
              format: "int64"
            addedAt:
              type: "string"
              format: "datetime"
            distributionChannel:
              $ref: '#/components/schemas/ChannelResourceIdentifier'
            supplyChannel:
              $ref: '#/components/schemas/ChannelResourceIdentifier'
            externalPrice:
              $ref: '#/components/schemas/Money'
            externalTotalPrice:
              $ref: '#/components/schemas/ExternalLineItemTotalPrice'
            externalTaxRate:
              $ref: '#/components/schemas/ExternalTaxRateDraft'
            inventoryMode:
              $ref: '#/components/schemas/InventoryMode'
            shippingDetails:
              $ref: '#/components/schemas/ItemShippingDetailsDraft'
            custom:
              $ref: '#/components/schemas/CustomFieldsDraft'
    CartAddPaymentAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          required:
            - payment
          properties:
            action:
              type: "string"
            payment:
              $ref: '#/components/schemas/PaymentResourceIdentifier'
    CartAddShippingMethodAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          required:
            - shippingAddress
            - shippingKey
            - shippingMethod
          properties:
            action:
              type: "string"
            shippingKey:
              type: "string"
            shippingMethod:
              $ref: '#/components/schemas/ShippingMethodResourceIdentifier'
            shippingAddress:
              $ref: '#/components/schemas/BaseAddress'
            shippingRateInput:
              $ref: '#/components/schemas/ShippingRateInputDraft'
            externalTaxRate:
              $ref: '#/components/schemas/ExternalTaxRateDraft'
            deliveries:
              type: "array"
              items:
                $ref: '#/components/schemas/DeliveryDraft'
            custom:
              $ref: '#/components/schemas/CustomFieldsDraft'
    CartAddShoppingListAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          required:
            - shoppingList
          properties:
            action:
              type: "string"
            shoppingList:
              $ref: '#/components/schemas/ShoppingListResourceIdentifier'
            distributionChannel:
              $ref: '#/components/schemas/ChannelResourceIdentifier'
            supplyChannel:
              $ref: '#/components/schemas/ChannelResourceIdentifier'
    CartApplyDeltaToCustomLineItemShippingDetailsTargetsAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          required:
            - customLineItemId
            - targetsDelta
          properties:
            action:
              type: "string"
            customLineItemId:
              type: "string"
            targetsDelta:
              type: "array"
              items:
                $ref: '#/components/schemas/ItemShippingTarget'
    CartApplyDeltaToLineItemShippingDetailsTargetsAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          required:
            - lineItemId
            - targetsDelta
          properties:
            action:
              type: "string"
            lineItemId:
              type: "string"
            targetsDelta:
              type: "array"
              items:
                $ref: '#/components/schemas/ItemShippingTarget'
    CartChangeCustomLineItemMoneyAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          required:
            - customLineItemId
            - money
          properties:
            action:
              type: "string"
            customLineItemId:
              type: "string"
            money:
              $ref: '#/components/schemas/Money'
    CartChangeCustomLineItemPriceModeAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          required:
            - customLineItemId
            - mode
          properties:
            action:
              type: "string"
            customLineItemId:
              type: "string"
            mode:
              $ref: '#/components/schemas/CustomLineItemPriceMode'
    CartChangeCustomLineItemQuantityAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          required:
            - customLineItemId
            - quantity
          properties:
            action:
              type: "string"
            customLineItemId:
              type: "string"
            quantity:
              type: "integer"
              format: "int64"
    CartChangeLineItemQuantityAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          required:
            - lineItemId
            - quantity
          properties:
            action:
              type: "string"
            lineItemId:
              type: "string"
            quantity:
              type: "integer"
              format: "int64"
            externalPrice:
              $ref: '#/components/schemas/Money'
            externalTotalPrice:
              $ref: '#/components/schemas/ExternalLineItemTotalPrice'
    CartChangeTaxCalculationModeAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          required:
            - taxCalculationMode
          properties:
            action:
              type: "string"
            taxCalculationMode:
              $ref: '#/components/schemas/TaxCalculationMode'
    CartChangeTaxModeAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          required:
            - taxMode
          properties:
            action:
              type: "string"
            taxMode:
              $ref: '#/components/schemas/TaxMode'
    CartChangeTaxRoundingModeAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          required:
            - taxRoundingMode
          properties:
            action:
              type: "string"
            taxRoundingMode:
              $ref: '#/components/schemas/RoundingMode'
    CartFreezeCartAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
    CartRecalculateAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            updateProductData:
              type: "boolean"
    CartRemoveCustomLineItemAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          required:
            - customLineItemId
          properties:
            action:
              type: "string"
            customLineItemId:
              type: "string"
    CartRemoveDiscountCodeAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          required:
            - discountCode
          properties:
            action:
              type: "string"
            discountCode:
              $ref: '#/components/schemas/DiscountCodeReference'
    CartRemoveItemShippingAddressAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          required:
            - addressKey
          properties:
            action:
              type: "string"
            addressKey:
              type: "string"
    CartRemoveLineItemAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          required:
            - lineItemId
          properties:
            action:
              type: "string"
            lineItemId:
              type: "string"
            quantity:
              type: "integer"
              format: "int64"
            externalPrice:
              $ref: '#/components/schemas/Money'
            externalTotalPrice:
              $ref: '#/components/schemas/ExternalLineItemTotalPrice'
            shippingDetailsToRemove:
              $ref: '#/components/schemas/ItemShippingDetailsDraft'
    CartRemovePaymentAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          required:
            - payment
          properties:
            action:
              type: "string"
            payment:
              $ref: '#/components/schemas/PaymentResourceIdentifier'
    CartRemoveShippingMethodAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          required:
            - shippingKey
          properties:
            action:
              type: "string"
            shippingKey:
              type: "string"
    CartSetAnonymousIdAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            anonymousId:
              type: "string"
    CartSetBillingAddressAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            address:
              $ref: '#/components/schemas/BaseAddress'
    CartSetBillingAddressCustomFieldAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          required:
            - name
          properties:
            action:
              type: "string"
            name:
              type: "string"
            value:
              {}
    CartSetBillingAddressCustomTypeAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            type:
              $ref: '#/components/schemas/TypeResourceIdentifier'
            fields:
              $ref: '#/components/schemas/FieldContainer'
    CartSetBusinessUnitAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          required:
            - businessUnit
          properties:
            action:
              type: "string"
            businessUnit:
              $ref: '#/components/schemas/BusinessUnitResourceIdentifier'
    CartSetCartTotalTaxAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          required:
            - externalTotalGross
          properties:
            action:
              type: "string"
            externalTotalGross:
              $ref: '#/components/schemas/Money'
            externalTaxPortions:
              type: "array"
              items:
                $ref: '#/components/schemas/TaxPortionDraft'
    CartSetCountryAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            country:
              $ref: '#/components/schemas/CountryCode'
    CartSetCustomFieldAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          required:
            - name
          properties:
            action:
              type: "string"
            name:
              type: "string"
            value:
              {}
    CartSetCustomLineItemCustomFieldAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          required:
            - customLineItemId
            - name
          properties:
            action:
              type: "string"
            customLineItemId:
              type: "string"
            name:
              type: "string"
            value:
              {}
    CartSetCustomLineItemCustomTypeAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          required:
            - customLineItemId
          properties:
            action:
              type: "string"
            customLineItemId:
              type: "string"
            type:
              $ref: '#/components/schemas/TypeResourceIdentifier'
            fields:
              $ref: '#/components/schemas/FieldContainer'
    CartSetCustomLineItemShippingDetailsAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          required:
            - customLineItemId
          properties:
            action:
              type: "string"
            customLineItemId:
              type: "string"
            shippingDetails:
              $ref: '#/components/schemas/ItemShippingDetailsDraft'
    CartSetCustomLineItemTaxAmountAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          required:
            - customLineItemId
          properties:
            action:
              type: "string"
            customLineItemId:
              type: "string"
            externalTaxAmount:
              $ref: '#/components/schemas/ExternalTaxAmountDraft'
    CartSetCustomLineItemTaxRateAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          required:
            - customLineItemId
          properties:
            action:
              type: "string"
            customLineItemId:
              type: "string"
            externalTaxRate:
              $ref: '#/components/schemas/ExternalTaxRateDraft'
    CartSetCustomShippingMethodAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          required:
            - shippingMethodName
            - shippingRate
          properties:
            action:
              type: "string"
            shippingMethodName:
              type: "string"
            shippingRate:
              $ref: '#/components/schemas/ShippingRateDraft'
            taxCategory:
              $ref: '#/components/schemas/TaxCategoryResourceIdentifier'
            externalTaxRate:
              $ref: '#/components/schemas/ExternalTaxRateDraft'
    CartSetCustomTypeAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            type:
              $ref: '#/components/schemas/TypeResourceIdentifier'
            fields:
              $ref: '#/components/schemas/FieldContainer'
    CartSetCustomerEmailAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            email:
              type: "string"
    CartSetCustomerGroupAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            customerGroup:
              $ref: '#/components/schemas/CustomerGroupResourceIdentifier'
    CartSetCustomerIdAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            customerId:
              type: "string"
    CartSetDeleteDaysAfterLastModificationAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            deleteDaysAfterLastModification:
              type: "integer"
              format: "int32"
    CartSetDeliveryAddressCustomFieldAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          required:
            - deliveryId
            - name
          properties:
            action:
              type: "string"
            deliveryId:
              type: "string"
            name:
              type: "string"
            value:
              {}
    CartSetDeliveryAddressCustomTypeAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          required:
            - deliveryId
          properties:
            action:
              type: "string"
            deliveryId:
              type: "string"
            type:
              $ref: '#/components/schemas/TypeResourceIdentifier'
            fields:
              $ref: '#/components/schemas/FieldContainer'
    CartSetDirectDiscountsAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          required:
            - discounts
          properties:
            action:
              type: "string"
            discounts:
              type: "array"
              items:
                $ref: '#/components/schemas/DirectDiscountDraft'
    CartSetItemShippingAddressCustomFieldAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          required:
            - addressKey
            - name
          properties:
            action:
              type: "string"
            addressKey:
              type: "string"
            name:
              type: "string"
            value:
              {}
    CartSetItemShippingAddressCustomTypeAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          required:
            - addressKey
          properties:
            action:
              type: "string"
            addressKey:
              type: "string"
            type:
              $ref: '#/components/schemas/TypeResourceIdentifier'
            fields:
              $ref: '#/components/schemas/FieldContainer'
    CartSetKeyAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            key:
              type: "string"
    CartSetLineItemCustomFieldAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          required:
            - lineItemId
            - name
          properties:
            action:
              type: "string"
            lineItemId:
              type: "string"
            name:
              type: "string"
            value:
              {}
    CartSetLineItemCustomTypeAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          required:
            - lineItemId
          properties:
            action:
              type: "string"
            lineItemId:
              type: "string"
            type:
              $ref: '#/components/schemas/TypeResourceIdentifier'
            fields:
              $ref: '#/components/schemas/FieldContainer'
    CartSetLineItemDistributionChannelAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          required:
            - lineItemId
          properties:
            action:
              type: "string"
            lineItemId:
              type: "string"
            distributionChannel:
              $ref: '#/components/schemas/ChannelResourceIdentifier'
    CartSetLineItemPriceAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          required:
            - lineItemId
          properties:
            action:
              type: "string"
            lineItemId:
              type: "string"
            externalPrice:
              $ref: '#/components/schemas/Money'
    CartSetLineItemShippingDetailsAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          required:
            - lineItemId
          properties:
            action:
              type: "string"
            lineItemId:
              type: "string"
            shippingDetails:
              $ref: '#/components/schemas/ItemShippingDetailsDraft'
    CartSetLineItemSupplyChannelAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          required:
            - lineItemId
          properties:
            action:
              type: "string"
            lineItemId:
              type: "string"
            supplyChannel:
              $ref: '#/components/schemas/ChannelResourceIdentifier'
    CartSetLineItemTaxAmountAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          required:
            - lineItemId
          properties:
            action:
              type: "string"
            lineItemId:
              type: "string"
            externalTaxAmount:
              $ref: '#/components/schemas/ExternalTaxAmountDraft'
            shippingKey:
              type: "string"
    CartSetLineItemTaxRateAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          required:
            - lineItemId
          properties:
            action:
              type: "string"
            lineItemId:
              type: "string"
            externalTaxRate:
              $ref: '#/components/schemas/ExternalTaxRateDraft'
            shippingKey:
              type: "string"
    CartSetLineItemTotalPriceAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          required:
            - lineItemId
          properties:
            action:
              type: "string"
            lineItemId:
              type: "string"
            externalTotalPrice:
              $ref: '#/components/schemas/ExternalLineItemTotalPrice'
    CartSetLocaleAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            locale:
              $ref: '#/components/schemas/Locale'
    CartSetShippingAddressAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            address:
              $ref: '#/components/schemas/BaseAddress'
    CartSetShippingAddressCustomFieldAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          required:
            - name
          properties:
            action:
              type: "string"
            name:
              type: "string"
            value:
              {}
    CartSetShippingAddressCustomTypeAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            type:
              $ref: '#/components/schemas/TypeResourceIdentifier'
            fields:
              $ref: '#/components/schemas/FieldContainer'
    CartSetShippingCustomFieldAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          required:
            - name
          properties:
            action:
              type: "string"
            shippingKey:
              type: "string"
            name:
              type: "string"
            value:
              {}
    CartSetShippingCustomTypeAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            shippingKey:
              type: "string"
            type:
              $ref: '#/components/schemas/TypeResourceIdentifier'
            fields:
              $ref: '#/components/schemas/FieldContainer'
    CartSetShippingMethodAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            shippingMethod:
              $ref: '#/components/schemas/ShippingMethodResourceIdentifier'
            externalTaxRate:
              $ref: '#/components/schemas/ExternalTaxRateDraft'
    CartSetShippingMethodTaxAmountAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            externalTaxAmount:
              $ref: '#/components/schemas/ExternalTaxAmountDraft'
    CartSetShippingMethodTaxRateAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            externalTaxRate:
              $ref: '#/components/schemas/ExternalTaxRateDraft'
    CartSetShippingRateInputAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            shippingRateInput:
              $ref: '#/components/schemas/ShippingRateInputDraft'
    CartUnfreezeCartAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
    CartUpdateItemShippingAddressAction:
      allOf:
        - $ref: '#/components/schemas/CartUpdateAction'
        - type: "object"
          required:
            - address
          properties:
            action:
              type: "string"
            address:
              $ref: '#/components/schemas/BaseAddress'
    Category:
      allOf:
        - $ref: '#/components/schemas/BaseResource'
        - type: "object"
          required:
            - ancestors
            - createdAt
            - id
            - lastModifiedAt
            - name
            - orderHint
            - slug
            - version
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            name:
              $ref: '#/components/schemas/LocalizedString'
            slug:
              $ref: '#/components/schemas/LocalizedString'
            description:
              $ref: '#/components/schemas/LocalizedString'
            ancestors:
              type: "array"
              items:
                $ref: '#/components/schemas/CategoryReference'
            parent:
              $ref: '#/components/schemas/CategoryReference'
            orderHint:
              type: "string"
            externalId:
              type: "string"
            metaTitle:
              $ref: '#/components/schemas/LocalizedString'
            metaDescription:
              $ref: '#/components/schemas/LocalizedString'
            metaKeywords:
              $ref: '#/components/schemas/LocalizedString'
            custom:
              $ref: '#/components/schemas/CustomFields'
            assets:
              type: "array"
              items:
                $ref: '#/components/schemas/Asset'
            key:
              type: "string"
    CategoryDraft:
      type: "object"
      required:
        - name
        - slug
      properties:
        name:
          $ref: '#/components/schemas/LocalizedString'
        slug:
          $ref: '#/components/schemas/LocalizedString'
        description:
          $ref: '#/components/schemas/LocalizedString'
        parent:
          $ref: '#/components/schemas/CategoryResourceIdentifier'
        orderHint:
          type: "string"
        externalId:
          type: "string"
        metaTitle:
          $ref: '#/components/schemas/LocalizedString'
        metaDescription:
          $ref: '#/components/schemas/LocalizedString'
        metaKeywords:
          $ref: '#/components/schemas/LocalizedString'
        custom:
          $ref: '#/components/schemas/CustomFieldsDraft'
        assets:
          type: "array"
          items:
            $ref: '#/components/schemas/AssetDraft'
        key:
          type: "string"
    CategoryPagedQueryResponse:
      type: "object"
      required:
        - count
        - limit
        - offset
        - results
      properties:
        limit:
          type: "integer"
          format: "int64"
        offset:
          type: "integer"
          format: "int64"
        count:
          type: "integer"
          format: "int64"
        total:
          type: "integer"
          format: "int64"
        results:
          type: "array"
          items:
            $ref: '#/components/schemas/Category'
    CategoryReference:
      allOf:
        - $ref: '#/components/schemas/Reference'
        - type: "object"
          required:
            - id
          properties:
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            id:
              type: "string"
            obj:
              $ref: '#/components/schemas/Category'
    CategoryResourceIdentifier:
      allOf:
        - $ref: '#/components/schemas/ResourceIdentifier'
        - type: "object"
          properties:
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            id:
              type: "string"
            key:
              type: "string"
    CategoryUpdate:
      type: "object"
      required:
        - actions
        - version
      properties:
        version:
          type: "integer"
          format: "int64"
        actions:
          type: "array"
          items:
            $ref: '#/components/schemas/CategoryUpdateAction'
    CategoryUpdateAction:
      type: "object"
      discriminator:
        propertyName: action
        mapping:
          addAsset: '#/components/schemas/CategoryAddAssetAction'
          changeAssetName: '#/components/schemas/CategoryChangeAssetNameAction'
          changeAssetOrder: '#/components/schemas/CategoryChangeAssetOrderAction'
          changeName: '#/components/schemas/CategoryChangeNameAction'
          changeOrderHint: '#/components/schemas/CategoryChangeOrderHintAction'
          changeParent: '#/components/schemas/CategoryChangeParentAction'
          changeSlug: '#/components/schemas/CategoryChangeSlugAction'
          removeAsset: '#/components/schemas/CategoryRemoveAssetAction'
          setAssetCustomField: '#/components/schemas/CategorySetAssetCustomFieldAction'
          setAssetCustomType: '#/components/schemas/CategorySetAssetCustomTypeAction'
          setAssetDescription: '#/components/schemas/CategorySetAssetDescriptionAction'
          setAssetKey: '#/components/schemas/CategorySetAssetKeyAction'
          setAssetSources: '#/components/schemas/CategorySetAssetSourcesAction'
          setAssetTags: '#/components/schemas/CategorySetAssetTagsAction'
          setCustomField: '#/components/schemas/CategorySetCustomFieldAction'
          setCustomType: '#/components/schemas/CategorySetCustomTypeAction'
          setDescription: '#/components/schemas/CategorySetDescriptionAction'
          setExternalId: '#/components/schemas/CategorySetExternalIdAction'
          setKey: '#/components/schemas/CategorySetKeyAction'
          setMetaDescription: '#/components/schemas/CategorySetMetaDescriptionAction'
          setMetaKeywords: '#/components/schemas/CategorySetMetaKeywordsAction'
          setMetaTitle: '#/components/schemas/CategorySetMetaTitleAction'
      required:
        - action
      properties:
        action:
          type: "string"
    CategoryAddAssetAction:
      allOf:
        - $ref: '#/components/schemas/CategoryUpdateAction'
        - type: "object"
          required:
            - asset
          properties:
            action:
              type: "string"
            asset:
              $ref: '#/components/schemas/AssetDraft'
            position:
              type: "integer"
              format: "int32"
    CategoryChangeAssetNameAction:
      allOf:
        - $ref: '#/components/schemas/CategoryUpdateAction'
        - type: "object"
          required:
            - name
          properties:
            action:
              type: "string"
            assetId:
              type: "string"
            assetKey:
              type: "string"
            name:
              $ref: '#/components/schemas/LocalizedString'
    CategoryChangeAssetOrderAction:
      allOf:
        - $ref: '#/components/schemas/CategoryUpdateAction'
        - type: "object"
          required:
            - assetOrder
          properties:
            action:
              type: "string"
            assetOrder:
              type: "array"
              items:
                type: "string"
    CategoryChangeNameAction:
      allOf:
        - $ref: '#/components/schemas/CategoryUpdateAction'
        - type: "object"
          required:
            - name
          properties:
            action:
              type: "string"
            name:
              $ref: '#/components/schemas/LocalizedString'
    CategoryChangeOrderHintAction:
      allOf:
        - $ref: '#/components/schemas/CategoryUpdateAction'
        - type: "object"
          required:
            - orderHint
          properties:
            action:
              type: "string"
            orderHint:
              type: "string"
    CategoryChangeParentAction:
      allOf:
        - $ref: '#/components/schemas/CategoryUpdateAction'
        - type: "object"
          required:
            - parent
          properties:
            action:
              type: "string"
            parent:
              $ref: '#/components/schemas/CategoryResourceIdentifier'
    CategoryChangeSlugAction:
      allOf:
        - $ref: '#/components/schemas/CategoryUpdateAction'
        - type: "object"
          required:
            - slug
          properties:
            action:
              type: "string"
            slug:
              $ref: '#/components/schemas/LocalizedString'
    CategoryRemoveAssetAction:
      allOf:
        - $ref: '#/components/schemas/CategoryUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            assetId:
              type: "string"
            assetKey:
              type: "string"
    CategorySetAssetCustomFieldAction:
      allOf:
        - $ref: '#/components/schemas/CategoryUpdateAction'
        - type: "object"
          required:
            - name
          properties:
            action:
              type: "string"
            assetId:
              type: "string"
            assetKey:
              type: "string"
            name:
              type: "string"
            value:
              {}
    CategorySetAssetCustomTypeAction:
      allOf:
        - $ref: '#/components/schemas/CategoryUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            assetId:
              type: "string"
            assetKey:
              type: "string"
            type:
              $ref: '#/components/schemas/TypeResourceIdentifier'
            fields:
              $ref: '#/components/schemas/FieldContainer'
    CategorySetAssetDescriptionAction:
      allOf:
        - $ref: '#/components/schemas/CategoryUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            assetId:
              type: "string"
            assetKey:
              type: "string"
            description:
              $ref: '#/components/schemas/LocalizedString'
    CategorySetAssetKeyAction:
      allOf:
        - $ref: '#/components/schemas/CategoryUpdateAction'
        - type: "object"
          required:
            - assetId
          properties:
            action:
              type: "string"
            assetId:
              type: "string"
            assetKey:
              type: "string"
    CategorySetAssetSourcesAction:
      allOf:
        - $ref: '#/components/schemas/CategoryUpdateAction'
        - type: "object"
          required:
            - sources
          properties:
            action:
              type: "string"
            assetId:
              type: "string"
            assetKey:
              type: "string"
            sources:
              type: "array"
              items:
                $ref: '#/components/schemas/AssetSource'
    CategorySetAssetTagsAction:
      allOf:
        - $ref: '#/components/schemas/CategoryUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            assetId:
              type: "string"
            assetKey:
              type: "string"
            tags:
              type: "array"
              items:
                type: "string"
    CategorySetCustomFieldAction:
      allOf:
        - $ref: '#/components/schemas/CategoryUpdateAction'
        - type: "object"
          required:
            - name
          properties:
            action:
              type: "string"
            name:
              type: "string"
            value:
              {}
    CategorySetCustomTypeAction:
      allOf:
        - $ref: '#/components/schemas/CategoryUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            type:
              $ref: '#/components/schemas/TypeResourceIdentifier'
            fields:
              $ref: '#/components/schemas/FieldContainer'
    CategorySetDescriptionAction:
      allOf:
        - $ref: '#/components/schemas/CategoryUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            description:
              $ref: '#/components/schemas/LocalizedString'
    CategorySetExternalIdAction:
      allOf:
        - $ref: '#/components/schemas/CategoryUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            externalId:
              type: "string"
    CategorySetKeyAction:
      allOf:
        - $ref: '#/components/schemas/CategoryUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            key:
              type: "string"
    CategorySetMetaDescriptionAction:
      allOf:
        - $ref: '#/components/schemas/CategoryUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            metaDescription:
              $ref: '#/components/schemas/LocalizedString'
    CategorySetMetaKeywordsAction:
      allOf:
        - $ref: '#/components/schemas/CategoryUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            metaKeywords:
              $ref: '#/components/schemas/LocalizedString'
    CategorySetMetaTitleAction:
      allOf:
        - $ref: '#/components/schemas/CategoryUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            metaTitle:
              $ref: '#/components/schemas/LocalizedString'
    Channel:
      allOf:
        - $ref: '#/components/schemas/BaseResource'
        - type: "object"
          required:
            - createdAt
            - id
            - key
            - lastModifiedAt
            - roles
            - version
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            key:
              type: "string"
            roles:
              type: "array"
              items:
                $ref: '#/components/schemas/ChannelRoleEnum'
            name:
              $ref: '#/components/schemas/LocalizedString'
            description:
              $ref: '#/components/schemas/LocalizedString'
            address:
              $ref: '#/components/schemas/Address'
            reviewRatingStatistics:
              $ref: '#/components/schemas/ReviewRatingStatistics'
            custom:
              $ref: '#/components/schemas/CustomFields'
            geoLocation:
              $ref: '#/components/schemas/GeoJson'
    ChannelDraft:
      type: "object"
      required:
        - key
      properties:
        key:
          type: "string"
        roles:
          type: "array"
          items:
            $ref: '#/components/schemas/ChannelRoleEnum'
        name:
          $ref: '#/components/schemas/LocalizedString'
        description:
          $ref: '#/components/schemas/LocalizedString'
        address:
          $ref: '#/components/schemas/BaseAddress'
        custom:
          $ref: '#/components/schemas/CustomFieldsDraft'
        geoLocation:
          $ref: '#/components/schemas/GeoJson'
    ChannelPagedQueryResponse:
      type: "object"
      required:
        - count
        - limit
        - offset
        - results
      properties:
        limit:
          type: "integer"
          format: "int64"
        offset:
          type: "integer"
          format: "int64"
        count:
          type: "integer"
          format: "int64"
        total:
          type: "integer"
          format: "int64"
        results:
          type: "array"
          items:
            $ref: '#/components/schemas/Channel'
    ChannelReference:
      allOf:
        - $ref: '#/components/schemas/Reference'
        - type: "object"
          required:
            - id
          properties:
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            id:
              type: "string"
            obj:
              $ref: '#/components/schemas/Channel'
    ChannelResourceIdentifier:
      allOf:
        - $ref: '#/components/schemas/ResourceIdentifier'
        - type: "object"
          properties:
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            id:
              type: "string"
            key:
              type: "string"
    ChannelRoleEnum:
      type: "string"
      enum:
        - InventorySupply
        - ProductDistribution
        - OrderExport
        - OrderImport
        - Primary
      x-annotation-package: "Channel"
      x-annotation-docs-uri: "https://docs.commercetools.com/api/projects/channels#channelroleenum"
      x-annotation-enumDescriptions:
        InventorySupply: "Channel can be used to track inventory entries (for example, Channels
         with this role can be treated as warehouses).n"
        ProductDistribution: "Channel can be used to expose Products to a specific distribution
         Channel.nThe Channel can be used by a Cart to [select](ctp:api:type:LineItemPriceSelection)
         a Product Price.n"
        OrderExport: "Channel can be used to track order export activities.n"
        OrderImport: "Channel can be used to track order import activities.n"
        Primary: "This role can be combined with the other roles (for example, with `InventorySupply`).
         If used, the Channel is considered as the primary or main channel among Channels
         of the same type.n"
    ChannelUpdate:
      type: "object"
      required:
        - actions
        - version
      properties:
        version:
          type: "integer"
          format: "int64"
        actions:
          type: "array"
          items:
            $ref: '#/components/schemas/ChannelUpdateAction'
    ChannelUpdateAction:
      type: "object"
      discriminator:
        propertyName: action
        mapping:
          addRoles: '#/components/schemas/ChannelAddRolesAction'
          changeDescription: '#/components/schemas/ChannelChangeDescriptionAction'
          changeKey: '#/components/schemas/ChannelChangeKeyAction'
          changeName: '#/components/schemas/ChannelChangeNameAction'
          removeRoles: '#/components/schemas/ChannelRemoveRolesAction'
          setAddress: '#/components/schemas/ChannelSetAddressAction'
          setAddressCustomField: '#/components/schemas/ChannelSetAddressCustomFieldAction'
          setAddressCustomType: '#/components/schemas/ChannelSetAddressCustomTypeAction'
          setCustomField: '#/components/schemas/ChannelSetCustomFieldAction'
          setCustomType: '#/components/schemas/ChannelSetCustomTypeAction'
          setGeoLocation: '#/components/schemas/ChannelSetGeoLocationAction'
          setRoles: '#/components/schemas/ChannelSetRolesAction'
      required:
        - action
      properties:
        action:
          type: "string"
    ChannelAddRolesAction:
      allOf:
        - $ref: '#/components/schemas/ChannelUpdateAction'
        - type: "object"
          required:
            - roles
          properties:
            action:
              type: "string"
            roles:
              type: "array"
              items:
                $ref: '#/components/schemas/ChannelRoleEnum'
    ChannelChangeDescriptionAction:
      allOf:
        - $ref: '#/components/schemas/ChannelUpdateAction'
        - type: "object"
          required:
            - description
          properties:
            action:
              type: "string"
            description:
              $ref: '#/components/schemas/LocalizedString'
    ChannelChangeKeyAction:
      allOf:
        - $ref: '#/components/schemas/ChannelUpdateAction'
        - type: "object"
          required:
            - key
          properties:
            action:
              type: "string"
            key:
              type: "string"
    ChannelChangeNameAction:
      allOf:
        - $ref: '#/components/schemas/ChannelUpdateAction'
        - type: "object"
          required:
            - name
          properties:
            action:
              type: "string"
            name:
              $ref: '#/components/schemas/LocalizedString'
    ChannelRemoveRolesAction:
      allOf:
        - $ref: '#/components/schemas/ChannelUpdateAction'
        - type: "object"
          required:
            - roles
          properties:
            action:
              type: "string"
            roles:
              type: "array"
              items:
                $ref: '#/components/schemas/ChannelRoleEnum'
    ChannelSetAddressAction:
      allOf:
        - $ref: '#/components/schemas/ChannelUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            address:
              $ref: '#/components/schemas/BaseAddress'
    ChannelSetAddressCustomFieldAction:
      allOf:
        - $ref: '#/components/schemas/ChannelUpdateAction'
        - type: "object"
          required:
            - name
          properties:
            action:
              type: "string"
            name:
              type: "string"
            value:
              {}
    ChannelSetAddressCustomTypeAction:
      allOf:
        - $ref: '#/components/schemas/ChannelUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            type:
              $ref: '#/components/schemas/TypeResourceIdentifier'
            fields:
              $ref: '#/components/schemas/FieldContainer'
    ChannelSetCustomFieldAction:
      allOf:
        - $ref: '#/components/schemas/ChannelUpdateAction'
        - type: "object"
          required:
            - name
          properties:
            action:
              type: "string"
            name:
              type: "string"
            value:
              {}
    ChannelSetCustomTypeAction:
      allOf:
        - $ref: '#/components/schemas/ChannelUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            type:
              $ref: '#/components/schemas/TypeResourceIdentifier'
            fields:
              $ref: '#/components/schemas/FieldContainer'
    ChannelSetGeoLocationAction:
      allOf:
        - $ref: '#/components/schemas/ChannelUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            geoLocation:
              $ref: '#/components/schemas/GeoJson'
    ChannelSetRolesAction:
      allOf:
        - $ref: '#/components/schemas/ChannelUpdateAction'
        - type: "object"
          required:
            - roles
          properties:
            action:
              type: "string"
            roles:
              type: "array"
              items:
                $ref: '#/components/schemas/ChannelRoleEnum'
    Address:
      allOf:
        - $ref: '#/components/schemas/BaseAddress'
        - type: "object"
          properties:
            id:
              type: "string"
            key:
              type: "string"
            country:
              $ref: '#/components/schemas/CountryCode'
            title:
              type: "string"
            salutation:
              type: "string"
            firstName:
              type: "string"
            lastName:
              type: "string"
            streetName:
              type: "string"
            streetNumber:
              type: "string"
            additionalStreetInfo:
              type: "string"
            postalCode:
              type: "string"
            city:
              type: "string"
            region:
              type: "string"
            state:
              type: "string"
            company:
              type: "string"
            department:
              type: "string"
            building:
              type: "string"
            apartment:
              type: "string"
            pOBox:
              type: "string"
            phone:
              type: "string"
            mobile:
              type: "string"
            email:
              type: "string"
            fax:
              type: "string"
            additionalAddressInfo:
              type: "string"
            externalId:
              type: "string"
            custom:
              $ref: '#/components/schemas/CustomFields'
    AddressDraft:
      allOf:
        - $ref: '#/components/schemas/BaseAddress'
        - type: "object"
          properties:
            id:
              type: "string"
            key:
              type: "string"
            country:
              $ref: '#/components/schemas/CountryCode'
            title:
              type: "string"
            salutation:
              type: "string"
            firstName:
              type: "string"
            lastName:
              type: "string"
            streetName:
              type: "string"
            streetNumber:
              type: "string"
            additionalStreetInfo:
              type: "string"
            postalCode:
              type: "string"
            city:
              type: "string"
            region:
              type: "string"
            state:
              type: "string"
            company:
              type: "string"
            department:
              type: "string"
            building:
              type: "string"
            apartment:
              type: "string"
            pOBox:
              type: "string"
            phone:
              type: "string"
            mobile:
              type: "string"
            email:
              type: "string"
            fax:
              type: "string"
            additionalAddressInfo:
              type: "string"
            externalId:
              type: "string"
            custom:
              $ref: '#/components/schemas/CustomFieldsDraft'
    Asset:
      type: "object"
      required:
        - id
        - name
        - sources
      properties:
        id:
          type: "string"
        sources:
          type: "array"
          items:
            $ref: '#/components/schemas/AssetSource'
        name:
          $ref: '#/components/schemas/LocalizedString'
        description:
          $ref: '#/components/schemas/LocalizedString'
        tags:
          type: "array"
          items:
            type: "string"
        custom:
          $ref: '#/components/schemas/CustomFields'
        key:
          type: "string"
    AssetDimensions:
      type: "object"
      required:
        - h
        - w
      properties:
        w:
          type: "integer"
          format: "int32"
        h:
          type: "integer"
          format: "int32"
    AssetDraft:
      type: "object"
      required:
        - name
        - sources
      properties:
        sources:
          type: "array"
          items:
            $ref: '#/components/schemas/AssetSource'
        name:
          $ref: '#/components/schemas/LocalizedString'
        description:
          $ref: '#/components/schemas/LocalizedString'
        tags:
          type: "array"
          items:
            type: "string"
        custom:
          $ref: '#/components/schemas/CustomFieldsDraft'
        key:
          type: "string"
    AssetSource:
      type: "object"
      required:
        - uri
      properties:
        uri:
          type: "string"
        key:
          type: "string"
        dimensions:
          $ref: '#/components/schemas/AssetDimensions'
        contentType:
          type: "string"
    BaseAddress:
      type: "object"
      required:
        - country
      properties:
        id:
          type: "string"
        key:
          type: "string"
        country:
          $ref: '#/components/schemas/CountryCode'
        title:
          type: "string"
        salutation:
          type: "string"
        firstName:
          type: "string"
        lastName:
          type: "string"
        streetName:
          type: "string"
        streetNumber:
          type: "string"
        additionalStreetInfo:
          type: "string"
        postalCode:
          type: "string"
        city:
          type: "string"
        region:
          type: "string"
        state:
          type: "string"
        company:
          type: "string"
        department:
          type: "string"
        building:
          type: "string"
        apartment:
          type: "string"
        pOBox:
          type: "string"
        phone:
          type: "string"
        mobile:
          type: "string"
        email:
          type: "string"
        fax:
          type: "string"
        additionalAddressInfo:
          type: "string"
        externalId:
          type: "string"
    BaseResource:
      type: "object"
      required:
        - createdAt
        - id
        - lastModifiedAt
        - version
      properties:
        id:
          type: "string"
        version:
          type: "integer"
          format: "int64"
        createdAt:
          type: "string"
          format: "datetime"
        lastModifiedAt:
          type: "string"
          format: "datetime"
    CentPrecisionMoney:
      allOf:
        - $ref: '#/components/schemas/TypedMoney'
        - type: "object"
          required:
            - fractionDigits
          properties:
            centAmount:
              type: "integer"
              format: "int64"
            currencyCode:
              $ref: '#/components/schemas/CurrencyCode'
            type:
              $ref: '#/components/schemas/MoneyType'
            fractionDigits:
              type: "integer"
              format: "int32"
    CentPrecisionMoneyDraft:
      allOf:
        - $ref: '#/components/schemas/TypedMoneyDraft'
        - type: "object"
          properties:
            centAmount:
              type: "integer"
              format: "int64"
            currencyCode:
              $ref: '#/components/schemas/CurrencyCode'
            type:
              $ref: '#/components/schemas/MoneyType'
            fractionDigits:
              type: "integer"
              format: "int32"
    ClientLogging:
      type: "object"
      properties:
        clientId:
          type: "string"
        externalUserId:
          type: "string"
        customer:
          $ref: '#/components/schemas/CustomerReference'
        anonymousId:
          type: "string"
    CountryCode:
      type: "string"
    CreatedBy:
      allOf:
        - $ref: '#/components/schemas/ClientLogging'
        - type: "object"
          properties:
            clientId:
              type: "string"
            externalUserId:
              type: "string"
            customer:
              $ref: '#/components/schemas/CustomerReference'
            anonymousId:
              type: "string"
    CurrencyCode:
      type: "string"
    DiscountedPrice:
      type: "object"
      required:
        - discount
        - value
      properties:
        value:
          $ref: '#/components/schemas/TypedMoney'
        discount:
          $ref: '#/components/schemas/ProductDiscountReference'
    DiscountedPriceDraft:
      type: "object"
      required:
        - discount
        - value
      properties:
        value:
          $ref: '#/components/schemas/Money'
        discount:
          $ref: '#/components/schemas/ProductDiscountReference'
    Expansion:
      type: "string"
    GeoJson:
      type: "object"
      discriminator:
        propertyName: type
        mapping:
          Point: '#/components/schemas/GeoJsonPoint'
      required:
        - type
      properties:
        type:
          type: "string"
    GeoJsonPoint:
      allOf:
        - $ref: '#/components/schemas/GeoJson'
        - type: "object"
          required:
            - coordinates
          properties:
            type:
              type: "string"
            coordinates:
              type: "array"
              items:
                type: "number"
                format: "double"
    HighPrecisionMoney:
      allOf:
        - $ref: '#/components/schemas/TypedMoney'
        - type: "object"
          required:
            - fractionDigits
            - preciseAmount
          properties:
            centAmount:
              type: "integer"
              format: "int64"
            currencyCode:
              $ref: '#/components/schemas/CurrencyCode'
            type:
              $ref: '#/components/schemas/MoneyType'
            fractionDigits:
              type: "integer"
              format: "int32"
            preciseAmount:
              type: "integer"
              format: "int64"
    HighPrecisionMoneyDraft:
      allOf:
        - $ref: '#/components/schemas/TypedMoneyDraft'
        - type: "object"
          required:
            - fractionDigits
            - preciseAmount
          properties:
            centAmount:
              type: "integer"
              format: "int64"
            currencyCode:
              $ref: '#/components/schemas/CurrencyCode'
            type:
              $ref: '#/components/schemas/MoneyType'
            fractionDigits:
              type: "integer"
              format: "int32"
            preciseAmount:
              type: "integer"
              format: "int64"
    Image:
      type: "object"
      required:
        - dimensions
        - url
      properties:
        url:
          type: "string"
        dimensions:
          $ref: '#/components/schemas/ImageDimensions'
        label:
          type: "string"
    ImageDimensions:
      type: "object"
      required:
        - h
        - w
      properties:
        w:
          type: "integer"
          format: "int32"
        h:
          type: "integer"
          format: "int32"
    KeyReference:
      type: "object"
      discriminator:
        propertyName: typeId
        mapping:
          associate-role: '#/components/schemas/AssociateRoleKeyReference'
          business-unit: '#/components/schemas/BusinessUnitKeyReference'
          store: '#/components/schemas/StoreKeyReference'
      required:
        - key
        - typeId
      properties:
        typeId:
          $ref: '#/components/schemas/ReferenceTypeId'
        key:
          type: "string"
    LastModifiedBy:
      allOf:
        - $ref: '#/components/schemas/ClientLogging'
        - type: "object"
          properties:
            clientId:
              type: "string"
            externalUserId:
              type: "string"
            customer:
              $ref: '#/components/schemas/CustomerReference'
            anonymousId:
              type: "string"
    Locale:
      type: "string"
    LocalizedString:
      type: "object"
      required:
        - /^[a-z]{2}(-[A-Z]{2})?$/
      additionalProperties:
        type: "string"
    Money:
      type: "object"
      required:
        - centAmount
        - currencyCode
      properties:
        centAmount:
          type: "integer"
          format: "int64"
        currencyCode:
          $ref: '#/components/schemas/CurrencyCode'
    MoneyType:
      type: "string"
      enum:
        - centPrecision
        - highPrecision
      x-annotation-package: "Common"
      x-annotation-docs-uri: "https://docs.commercetools.com/http-api-types.html#money"
      x-annotation-enumDescriptions:
        centPrecision: "for [CentPrecisionMoney](#centprecisionmoney)."
        highPrecision: "for [HighPrecisionMoney](#highprecisionmoney)."
    Price:
      type: "object"
      required:
        - id
        - value
      properties:
        id:
          type: "string"
        key:
          type: "string"
        value:
          $ref: '#/components/schemas/TypedMoney'
        country:
          $ref: '#/components/schemas/CountryCode'
        customerGroup:
          $ref: '#/components/schemas/CustomerGroupReference'
        channel:
          $ref: '#/components/schemas/ChannelReference'
        validFrom:
          type: "string"
          format: "datetime"
        validUntil:
          type: "string"
          format: "datetime"
        discounted:
          $ref: '#/components/schemas/DiscountedPrice'
        tiers:
          type: "array"
          items:
            $ref: '#/components/schemas/PriceTier'
        custom:
          $ref: '#/components/schemas/CustomFields'
    PriceDraft:
      type: "object"
      required:
        - value
      properties:
        key:
          type: "string"
        value:
          $ref: '#/components/schemas/Money'
        country:
          $ref: '#/components/schemas/CountryCode'
        customerGroup:
          $ref: '#/components/schemas/CustomerGroupResourceIdentifier'
        channel:
          $ref: '#/components/schemas/ChannelResourceIdentifier'
        validFrom:
          type: "string"
          format: "datetime"
        validUntil:
          type: "string"
          format: "datetime"
        discounted:
          $ref: '#/components/schemas/DiscountedPriceDraft'
        tiers:
          type: "array"
          items:
            $ref: '#/components/schemas/PriceTierDraft'
        custom:
          $ref: '#/components/schemas/CustomFieldsDraft'
    PriceTier:
      type: "object"
      required:
        - minimumQuantity
        - value
      properties:
        minimumQuantity:
          type: "integer"
          format: "int64"
        value:
          $ref: '#/components/schemas/TypedMoney'
    PriceTierDraft:
      type: "object"
      required:
        - minimumQuantity
        - value
      properties:
        minimumQuantity:
          type: "integer"
          format: "int64"
        value:
          $ref: '#/components/schemas/Money'
    QueryPredicate:
      type: "string"
    QueryPrice:
      type: "object"
      required:
        - value
      properties:
        id:
          type: "string"
        value:
          $ref: '#/components/schemas/Money'
        country:
          $ref: '#/components/schemas/CountryCode'
        customerGroup:
          $ref: '#/components/schemas/CustomerGroupReference'
        channel:
          $ref: '#/components/schemas/ChannelReference'
        validFrom:
          type: "string"
          format: "datetime"
        validUntil:
          type: "string"
          format: "datetime"
        discounted:
          $ref: '#/components/schemas/DiscountedPriceDraft'
        custom:
          $ref: '#/components/schemas/CustomFields'
        tiers:
          type: "array"
          items:
            $ref: '#/components/schemas/PriceTierDraft'
    Reference:
      type: "object"
      discriminator:
        propertyName: typeId
        mapping:
          associate-role: '#/components/schemas/AssociateRoleReference'
          attribute-group: '#/components/schemas/AttributeGroupReference'
          business-unit: '#/components/schemas/BusinessUnitReference'
          cart-discount: '#/components/schemas/CartDiscountReference'
          cart: '#/components/schemas/CartReference'
          category: '#/components/schemas/CategoryReference'
          channel: '#/components/schemas/ChannelReference'
          key-value-document: '#/components/schemas/CustomObjectReference'
          customer-group: '#/components/schemas/CustomerGroupReference'
          customer: '#/components/schemas/CustomerReference'
          direct-discount: '#/components/schemas/DirectDiscountReference'
          discount-code: '#/components/schemas/DiscountCodeReference'
          inventory-entry: '#/components/schemas/InventoryEntryReference'
          order-edit: '#/components/schemas/OrderEditReference'
          order: '#/components/schemas/OrderReference'
          payment: '#/components/schemas/PaymentReference'
          product-discount: '#/components/schemas/ProductDiscountReference'
          product: '#/components/schemas/ProductReference'
          product-selection: '#/components/schemas/ProductSelectionReference'
          product-type: '#/components/schemas/ProductTypeReference'
          quote: '#/components/schemas/QuoteReference'
          quote-request: '#/components/schemas/QuoteRequestReference'
          review: '#/components/schemas/ReviewReference'
          shipping-method: '#/components/schemas/ShippingMethodReference'
          shopping-list: '#/components/schemas/ShoppingListReference'
          staged-quote: '#/components/schemas/StagedQuoteReference'
          standalone-price: '#/components/schemas/StandalonePriceReference'
          state: '#/components/schemas/StateReference'
          store: '#/components/schemas/StoreReference'
          tax-category: '#/components/schemas/TaxCategoryReference'
          type: '#/components/schemas/TypeReference'
          zone: '#/components/schemas/ZoneReference'
      required:
        - id
        - typeId
      properties:
        typeId:
          $ref: '#/components/schemas/ReferenceTypeId'
        id:
          type: "string"
    ReferenceTypeId:
      type: "string"
      enum:
        - associate-role
        - attribute-group
        - business-unit
        - cart
        - cart-discount
        - category
        - channel
        - customer
        - customer-group
        - direct-discount
        - discount-code
        - extension
        - inventory-entry
        - key-value-document
        - order
        - order-edit
        - payment
        - product
        - product-discount
        - product-price
        - product-selection
        - product-type
        - quote
        - quote-request
        - review
        - shipping-method
        - shopping-list
        - staged-quote
        - standalone-price
        - state
        - store
        - subscription
        - tax-category
        - type
        - zone
      x-annotation-package: "Common"
      x-annotation-enumDescriptions:
        attribute-group: "References an [AttributeGroup](ctp:api:type:AttributeGroup).n"
        associate-role: "References an [AssociateRole](ctp:api:type:AssociateRole).n"
        business-unit: "References a [BusinessUnit](ctp:api:type:BusinessUnit).n"
        cart: "References a [Cart](ctp:api:type:Cart).n"
        cart-discount: "References a [CartDiscount](ctp:api:type:CartDiscount).n"
        category: "References a [Category](ctp:api:type:Category).n"
        channel: "References a [Channel](ctp:api:type:Channel).n"
        customer: "References a [Customer](ctp:api:type:Customer).n"
        customer-group: "References a [CustomerGroup](ctp:api:type:CustomerGroup).n"
        direct-discount: "References a [DirectDiscount](ctp:api:type:DirectDiscount).n"
        discount-code: "References a [DiscountCode](ctp:api:type:DiscountCode).n"
        extension: "References an [Extension](ctp:api:type:Extension).n"
        inventory-entry: "References an [InventoryEntry](ctp:api:type:InventoryEntry).n"
        key-value-document: "References a [CustomObject](ctp:api:type:CustomObject).n"
        order: "References an [Order](ctp:api:type:Order).n"
        order-edit: "References an [Order Edit](ctp:api:type:OrderEdit).n"
        payment: "References a [Payment](ctp:api:type:Payment).n"
        product: "References a [Product](ctp:api:type:Product).n"
        product-discount: "References a [ProductDiscount](ctp:api:type:ProductDiscount).n"
        product-price: "References an [Embedded Price](/projects/products#embedded-price).n"
        product-selection: "References a [ProductSelection](ctp:api:type:ProductSelection).n"
        product-type: "References a [ProductType](ctp:api:type:ProductType).n"
        quote: "References a [Quote](ctp:api:type:Quote).n"
        quote-request: "References a [QuoteRequest](ctp:api:type:QuoteRequest).n"
        review: "References a [Review](ctp:api:type:Review).n"
        shipping-method: "References a [ShippingMethod](ctp:api:type:ShippingMethod).n"
        shopping-list: "References a [ShoppingList](ctp:api:type:ShoppingList).n"
        staged-quote: "References a [StagedQuote](ctp:api:type:StagedQuote).n"
        standalone-price: "References a [StandalonePrice](ctp:api:type:StandalonePrice).n"
        state: "References a [State](ctp:api:type:State).n"
        store: "References a [Store](ctp:api:type:Store).n"
        subscription: "References a [Subscription](ctp:api:type:Subscription).n"
        tax-category: "References a [TaxCategory](ctp:api:type:TaxCategory).n"
        type: "References a [Type](ctp:api:type:Type).n"
        zone: "References a [Zone](ctp:api:type:Zone).n"
    ResourceIdentifier:
      type: "object"
      discriminator:
        propertyName: typeId
        mapping:
          associate-role: '#/components/schemas/AssociateRoleResourceIdentifier'
          attribute-group: '#/components/schemas/AttributeGroupResourceIdentifier'
          business-unit: '#/components/schemas/BusinessUnitResourceIdentifier'
          cart-discount: '#/components/schemas/CartDiscountResourceIdentifier'
          cart: '#/components/schemas/CartResourceIdentifier'
          category: '#/components/schemas/CategoryResourceIdentifier'
          channel: '#/components/schemas/ChannelResourceIdentifier'
          customer-group: '#/components/schemas/CustomerGroupResourceIdentifier'
          customer: '#/components/schemas/CustomerResourceIdentifier'
          discount-code: '#/components/schemas/DiscountCodeResourceIdentifier'
          inventory-entry: '#/components/schemas/InventoryEntryResourceIdentifier'
          order-edit: '#/components/schemas/OrderEditResourceIdentifier'
          order: '#/components/schemas/OrderResourceIdentifier'
          payment: '#/components/schemas/PaymentResourceIdentifier'
          product-discount: '#/components/schemas/ProductDiscountResourceIdentifier'
          product: '#/components/schemas/ProductResourceIdentifier'
          product-selection: '#/components/schemas/ProductSelectionResourceIdentifier'
          product-type: '#/components/schemas/ProductTypeResourceIdentifier'
          quote-request: '#/components/schemas/QuoteRequestResourceIdentifier'
          quote: '#/components/schemas/QuoteResourceIdentifier'
          review: '#/components/schemas/ReviewResourceIdentifier'
          shipping-method: '#/components/schemas/ShippingMethodResourceIdentifier'
          shopping-list: '#/components/schemas/ShoppingListResourceIdentifier'
          staged-quote: '#/components/schemas/StagedQuoteResourceIdentifier'
          standalone-price: '#/components/schemas/StandalonePriceResourceIdentifier'
          state: '#/components/schemas/StateResourceIdentifier'
          store: '#/components/schemas/StoreResourceIdentifier'
          tax-category: '#/components/schemas/TaxCategoryResourceIdentifier'
          type: '#/components/schemas/TypeResourceIdentifier'
          zone: '#/components/schemas/ZoneResourceIdentifier'
      required:
        - typeId
      properties:
        typeId:
          $ref: '#/components/schemas/ReferenceTypeId'
        id:
          type: "string"
        key:
          type: "string"
    ScopedPrice:
      type: "object"
      required:
        - currentValue
        - id
        - value
      properties:
        id:
          type: "string"
        value:
          $ref: '#/components/schemas/TypedMoney'
        currentValue:
          $ref: '#/components/schemas/TypedMoney'
        country:
          $ref: '#/components/schemas/CountryCode'
        customerGroup:
          $ref: '#/components/schemas/CustomerGroupReference'
        channel:
          $ref: '#/components/schemas/ChannelReference'
        validFrom:
          type: "string"
          format: "datetime"
        validUntil:
          type: "string"
          format: "datetime"
        discounted:
          $ref: '#/components/schemas/DiscountedPrice'
        custom:
          $ref: '#/components/schemas/CustomFields'
    Sort:
      type: "string"
    TypedMoney:
      allOf:
        - $ref: '#/components/schemas/Money'
        - type: "object"
          discriminator:
            propertyName: type
            mapping:
              centPrecision: '#/components/schemas/CentPrecisionMoney'
              highPrecision: '#/components/schemas/HighPrecisionMoney'
          required:
            - fractionDigits
            - type
          properties:
            centAmount:
              type: "integer"
              format: "int64"
            currencyCode:
              $ref: '#/components/schemas/CurrencyCode'
            type:
              $ref: '#/components/schemas/MoneyType'
            fractionDigits:
              type: "integer"
              format: "int32"
    TypedMoneyDraft:
      allOf:
        - $ref: '#/components/schemas/Money'
        - type: "object"
          discriminator:
            propertyName: type
            mapping:
              centPrecision: '#/components/schemas/CentPrecisionMoneyDraft'
              highPrecision: '#/components/schemas/HighPrecisionMoneyDraft'
          required:
            - type
          properties:
            centAmount:
              type: "integer"
              format: "int64"
            currencyCode:
              $ref: '#/components/schemas/CurrencyCode'
            type:
              $ref: '#/components/schemas/MoneyType'
            fractionDigits:
              type: "integer"
              format: "int32"
    CustomObject:
      allOf:
        - $ref: '#/components/schemas/BaseResource'
        - type: "object"
          required:
            - container
            - createdAt
            - id
            - key
            - lastModifiedAt
            - value
            - version
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            container:
              type: "string"
            key:
              type: "string"
            value:
              {}
    CustomObjectDraft:
      type: "object"
      required:
        - container
        - key
        - value
      properties:
        container:
          type: "string"
        key:
          type: "string"
        value:
          {}
        version:
          type: "integer"
          format: "int64"
    CustomObjectPagedQueryResponse:
      type: "object"
      required:
        - count
        - limit
        - offset
        - results
      properties:
        limit:
          type: "integer"
          format: "int64"
        offset:
          type: "integer"
          format: "int64"
        count:
          type: "integer"
          format: "int64"
        total:
          type: "integer"
          format: "int64"
        results:
          type: "array"
          items:
            $ref: '#/components/schemas/CustomObject'
    CustomObjectReference:
      allOf:
        - $ref: '#/components/schemas/Reference'
        - type: "object"
          required:
            - id
          properties:
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            id:
              type: "string"
            obj:
              $ref: '#/components/schemas/CustomObject'
    CustomerGroup:
      allOf:
        - $ref: '#/components/schemas/BaseResource'
        - type: "object"
          required:
            - createdAt
            - id
            - lastModifiedAt
            - name
            - version
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            key:
              type: "string"
            name:
              type: "string"
            custom:
              $ref: '#/components/schemas/CustomFields'
    CustomerGroupDraft:
      type: "object"
      required:
        - groupName
      properties:
        key:
          type: "string"
        groupName:
          type: "string"
        custom:
          $ref: '#/components/schemas/CustomFieldsDraft'
    CustomerGroupPagedQueryResponse:
      type: "object"
      required:
        - count
        - limit
        - offset
        - results
      properties:
        limit:
          type: "integer"
          format: "int64"
        offset:
          type: "integer"
          format: "int64"
        count:
          type: "integer"
          format: "int64"
        total:
          type: "integer"
          format: "int64"
        results:
          type: "array"
          items:
            $ref: '#/components/schemas/CustomerGroup'
    CustomerGroupReference:
      allOf:
        - $ref: '#/components/schemas/Reference'
        - type: "object"
          required:
            - id
          properties:
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            id:
              type: "string"
            obj:
              $ref: '#/components/schemas/CustomerGroup'
    CustomerGroupResourceIdentifier:
      allOf:
        - $ref: '#/components/schemas/ResourceIdentifier'
        - type: "object"
          properties:
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            id:
              type: "string"
            key:
              type: "string"
    CustomerGroupUpdate:
      type: "object"
      required:
        - actions
        - version
      properties:
        version:
          type: "integer"
          format: "int64"
        actions:
          type: "array"
          items:
            $ref: '#/components/schemas/CustomerGroupUpdateAction'
    CustomerGroupUpdateAction:
      type: "object"
      discriminator:
        propertyName: action
        mapping:
          changeName: '#/components/schemas/CustomerGroupChangeNameAction'
          setCustomField: '#/components/schemas/CustomerGroupSetCustomFieldAction'
          setCustomType: '#/components/schemas/CustomerGroupSetCustomTypeAction'
          setKey: '#/components/schemas/CustomerGroupSetKeyAction'
      required:
        - action
      properties:
        action:
          type: "string"
    CustomerGroupChangeNameAction:
      allOf:
        - $ref: '#/components/schemas/CustomerGroupUpdateAction'
        - type: "object"
          required:
            - name
          properties:
            action:
              type: "string"
            name:
              type: "string"
    CustomerGroupSetCustomFieldAction:
      allOf:
        - $ref: '#/components/schemas/CustomerGroupUpdateAction'
        - type: "object"
          required:
            - name
          properties:
            action:
              type: "string"
            name:
              type: "string"
            value:
              {}
    CustomerGroupSetCustomTypeAction:
      allOf:
        - $ref: '#/components/schemas/CustomerGroupUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            type:
              $ref: '#/components/schemas/TypeResourceIdentifier'
            fields:
              $ref: '#/components/schemas/FieldContainer'
    CustomerGroupSetKeyAction:
      allOf:
        - $ref: '#/components/schemas/CustomerGroupUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            key:
              type: "string"
    AnonymousCartSignInMode:
      type: "string"
      enum:
        - MergeWithExistingCustomerCart
        - UseAsNewActiveCustomerCart
      x-annotation-package: "Customer"
      x-annotation-enumDescriptions:
        MergeWithExistingCustomerCart: "If set, [LineItems](ctp:api:type:LineItem) of an anonymous
         Cart are merged with the active Customer Cart that has been modified most recently.
         The [CartState](ctp:api:type:CartState) of the anonymous Cart changes to `Merged`
         while the [CartState](ctp:api:type:CartState) of the Customer's Cart remains `Active`.
         If a [LineItem](ctp:api:type:LineItem) or [CustomLineItem](ctp:api:type:CustomLineItem)
         in the anonymous Cart matches an existing Line Item or Custom Line Item in the
         Customer's Cart, the maximum quantity of both line items is used as the new quantity."
        UseAsNewActiveCustomerCart: "If set, an anonymous Cart is used as the new active Customer
         Cart, and no [LineItems](ctp:api:type:LineItem) are merged."
    AuthenticationMode:
      type: "string"
      enum:
        - Password
        - ExternalAuth
      x-annotation-package: "Customer"
      x-beta: true
      x-annotation-enumDescriptions:
        Password: "This is the default value. If set, the `password` field is required on
         [CustomerDraft](ctp:api:type:CustomerDraft) and is present on [Customer](ctp:api:type:Customer)."
        ExternalAuth: "If set, the `password` field is optional on [CustomerDraft](ctp:api:type:CustomerDraft)
         and is not present on [Customer](ctp:api:type:Customer)."
    Customer:
      allOf:
        - $ref: '#/components/schemas/BaseResource'
        - type: "object"
          required:
            - addresses
            - authenticationMode
            - createdAt
            - email
            - id
            - isEmailVerified
            - lastModifiedAt
            - version
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            key:
              type: "string"
            customerNumber:
              type: "string"
            externalId:
              type: "string"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            email:
              type: "string"
            password:
              type: "string"
            firstName:
              type: "string"
            lastName:
              type: "string"
            middleName:
              type: "string"
            title:
              type: "string"
            dateOfBirth:
              type: "string"
              format: "date-only"
            companyName:
              type: "string"
            vatId:
              type: "string"
            addresses:
              type: "array"
              items:
                $ref: '#/components/schemas/Address'
            defaultShippingAddressId:
              type: "string"
            shippingAddressIds:
              type: "array"
              items:
                type: "string"
            defaultBillingAddressId:
              type: "string"
            billingAddressIds:
              type: "array"
              items:
                type: "string"
            isEmailVerified:
              type: "boolean"
            customerGroup:
              $ref: '#/components/schemas/CustomerGroupReference'
            custom:
              $ref: '#/components/schemas/CustomFields'
            locale:
              $ref: '#/components/schemas/Locale'
            salutation:
              type: "string"
            stores:
              type: "array"
              items:
                $ref: '#/components/schemas/StoreKeyReference'
            authenticationMode:
              $ref: '#/components/schemas/AuthenticationMode'
    CustomerChangePassword:
      type: "object"
      required:
        - currentPassword
        - id
        - newPassword
        - version
      properties:
        id:
          type: "string"
        version:
          type: "integer"
          format: "int64"
        currentPassword:
          type: "string"
        newPassword:
          type: "string"
    CustomerCreateEmailToken:
      type: "object"
      required:
        - id
        - ttlMinutes
      properties:
        id:
          type: "string"
        version:
          type: "integer"
          format: "int64"
        ttlMinutes:
          type: "integer"
          format: "int64"
    CustomerCreatePasswordResetToken:
      type: "object"
      required:
        - email
      properties:
        email:
          type: "string"
        ttlMinutes:
          type: "integer"
          format: "int64"
    CustomerDraft:
      type: "object"
      required:
        - email
      properties:
        key:
          type: "string"
        customerNumber:
          type: "string"
        externalId:
          type: "string"
        email:
          type: "string"
        password:
          type: "string"
        firstName:
          type: "string"
        lastName:
          type: "string"
        middleName:
          type: "string"
        title:
          type: "string"
        anonymousCartId:
          type: "string"
        anonymousCart:
          $ref: '#/components/schemas/CartResourceIdentifier'
        anonymousId:
          type: "string"
        dateOfBirth:
          type: "string"
          format: "date-only"
        companyName:
          type: "string"
        vatId:
          type: "string"
        addresses:
          type: "array"
          items:
            $ref: '#/components/schemas/BaseAddress'
        defaultShippingAddress:
          type: "integer"
          format: "int32"
        shippingAddresses:
          type: "array"
          items:
            type: "integer"
            format: "int32"
        defaultBillingAddress:
          type: "integer"
          format: "int32"
        billingAddresses:
          type: "array"
          items:
            type: "integer"
            format: "int32"
        isEmailVerified:
          type: "boolean"
        customerGroup:
          $ref: '#/components/schemas/CustomerGroupResourceIdentifier'
        custom:
          $ref: '#/components/schemas/CustomFieldsDraft'
        locale:
          $ref: '#/components/schemas/Locale'
        salutation:
          type: "string"
        stores:
          type: "array"
          items:
            $ref: '#/components/schemas/StoreResourceIdentifier'
        authenticationMode:
          $ref: '#/components/schemas/AuthenticationMode'
    CustomerEmailVerify:
      type: "object"
      required:
        - tokenValue
      properties:
        version:
          type: "integer"
          format: "int64"
        tokenValue:
          type: "string"
    CustomerPagedQueryResponse:
      type: "object"
      required:
        - count
        - limit
        - offset
        - results
      properties:
        limit:
          type: "integer"
          format: "int64"
        offset:
          type: "integer"
          format: "int64"
        count:
          type: "integer"
          format: "int64"
        total:
          type: "integer"
          format: "int64"
        results:
          type: "array"
          items:
            $ref: '#/components/schemas/Customer'
    CustomerReference:
      allOf:
        - $ref: '#/components/schemas/Reference'
        - type: "object"
          required:
            - id
          properties:
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            id:
              type: "string"
            obj:
              $ref: '#/components/schemas/Customer'
    CustomerResetPassword:
      type: "object"
      required:
        - newPassword
        - tokenValue
      properties:
        tokenValue:
          type: "string"
        newPassword:
          type: "string"
        version:
          type: "integer"
          format: "int64"
    CustomerResourceIdentifier:
      allOf:
        - $ref: '#/components/schemas/ResourceIdentifier'
        - type: "object"
          properties:
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            id:
              type: "string"
            key:
              type: "string"
    CustomerSignInResult:
      type: "object"
      required:
        - customer
      properties:
        customer:
          $ref: '#/components/schemas/Customer'
        cart:
          $ref: '#/components/schemas/Cart'
    CustomerSignin:
      type: "object"
      required:
        - email
        - password
      properties:
        email:
          type: "string"
        password:
          type: "string"
        anonymousCartId:
          type: "string"
        anonymousCart:
          $ref: '#/components/schemas/CartResourceIdentifier'
        anonymousCartSignInMode:
          $ref: '#/components/schemas/AnonymousCartSignInMode'
        anonymousId:
          type: "string"
        updateProductData:
          type: "boolean"
    CustomerToken:
      type: "object"
      required:
        - createdAt
        - customerId
        - expiresAt
        - id
        - value
      properties:
        id:
          type: "string"
        createdAt:
          type: "string"
          format: "datetime"
        lastModifiedAt:
          type: "string"
          format: "datetime"
        customerId:
          type: "string"
        expiresAt:
          type: "string"
          format: "datetime"
        value:
          type: "string"
    CustomerUpdate:
      type: "object"
      required:
        - actions
        - version
      properties:
        version:
          type: "integer"
          format: "int64"
        actions:
          type: "array"
          items:
            $ref: '#/components/schemas/CustomerUpdateAction'
    CustomerUpdateAction:
      type: "object"
      discriminator:
        propertyName: action
        mapping:
          addAddress: '#/components/schemas/CustomerAddAddressAction'
          addBillingAddressId: '#/components/schemas/CustomerAddBillingAddressIdAction'
          addShippingAddressId: '#/components/schemas/CustomerAddShippingAddressIdAction'
          addStore: '#/components/schemas/CustomerAddStoreAction'
          changeAddress: '#/components/schemas/CustomerChangeAddressAction'
          changeEmail: '#/components/schemas/CustomerChangeEmailAction'
          removeAddress: '#/components/schemas/CustomerRemoveAddressAction'
          removeBillingAddressId: '#/components/schemas/CustomerRemoveBillingAddressIdAction'
          removeShippingAddressId: '#/components/schemas/CustomerRemoveShippingAddressIdAction'
          removeStore: '#/components/schemas/CustomerRemoveStoreAction'
          setAddressCustomField: '#/components/schemas/CustomerSetAddressCustomFieldAction'
          setAddressCustomType: '#/components/schemas/CustomerSetAddressCustomTypeAction'
          setAuthenticationMode: '#/components/schemas/CustomerSetAuthenticationModeAction'
          setCompanyName: '#/components/schemas/CustomerSetCompanyNameAction'
          setCustomField: '#/components/schemas/CustomerSetCustomFieldAction'
          setCustomType: '#/components/schemas/CustomerSetCustomTypeAction'
          setCustomerGroup: '#/components/schemas/CustomerSetCustomerGroupAction'
          setCustomerNumber: '#/components/schemas/CustomerSetCustomerNumberAction'
          setDateOfBirth: '#/components/schemas/CustomerSetDateOfBirthAction'
          setDefaultBillingAddress: '#/components/schemas/CustomerSetDefaultBillingAddressAction'
          setDefaultShippingAddress: '#/components/schemas/CustomerSetDefaultShippingAddressAction'
          setExternalId: '#/components/schemas/CustomerSetExternalIdAction'
          setFirstName: '#/components/schemas/CustomerSetFirstNameAction'
          setKey: '#/components/schemas/CustomerSetKeyAction'
          setLastName: '#/components/schemas/CustomerSetLastNameAction'
          setLocale: '#/components/schemas/CustomerSetLocaleAction'
          setMiddleName: '#/components/schemas/CustomerSetMiddleNameAction'
          setSalutation: '#/components/schemas/CustomerSetSalutationAction'
          setStores: '#/components/schemas/CustomerSetStoresAction'
          setTitle: '#/components/schemas/CustomerSetTitleAction'
          setVatId: '#/components/schemas/CustomerSetVatIdAction'
      required:
        - action
      properties:
        action:
          type: "string"
    MyCustomerChangePassword:
      type: "object"
      required:
        - currentPassword
        - newPassword
        - version
      properties:
        version:
          type: "integer"
          format: "int64"
        currentPassword:
          type: "string"
        newPassword:
          type: "string"
    MyCustomerEmailVerify:
      type: "object"
      required:
        - tokenValue
      properties:
        tokenValue:
          type: "string"
    MyCustomerResetPassword:
      type: "object"
      required:
        - newPassword
        - tokenValue
      properties:
        tokenValue:
          type: "string"
        newPassword:
          type: "string"
    MyCustomerSignin:
      type: "object"
      required:
        - email
        - password
      properties:
        email:
          type: "string"
        password:
          type: "string"
        activeCartSignInMode:
          $ref: '#/components/schemas/AnonymousCartSignInMode'
        updateProductData:
          type: "boolean"
    CustomerAddAddressAction:
      allOf:
        - $ref: '#/components/schemas/CustomerUpdateAction'
        - type: "object"
          required:
            - address
          properties:
            action:
              type: "string"
            address:
              $ref: '#/components/schemas/BaseAddress'
    CustomerAddBillingAddressIdAction:
      allOf:
        - $ref: '#/components/schemas/CustomerUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            addressId:
              type: "string"
            addressKey:
              type: "string"
    CustomerAddShippingAddressIdAction:
      allOf:
        - $ref: '#/components/schemas/CustomerUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            addressId:
              type: "string"
            addressKey:
              type: "string"
    CustomerAddStoreAction:
      allOf:
        - $ref: '#/components/schemas/CustomerUpdateAction'
        - type: "object"
          required:
            - store
          properties:
            action:
              type: "string"
            store:
              $ref: '#/components/schemas/StoreResourceIdentifier'
    CustomerChangeAddressAction:
      allOf:
        - $ref: '#/components/schemas/CustomerUpdateAction'
        - type: "object"
          required:
            - address
          properties:
            action:
              type: "string"
            addressId:
              type: "string"
            addressKey:
              type: "string"
            address:
              $ref: '#/components/schemas/BaseAddress'
    CustomerChangeEmailAction:
      allOf:
        - $ref: '#/components/schemas/CustomerUpdateAction'
        - type: "object"
          required:
            - email
          properties:
            action:
              type: "string"
            email:
              type: "string"
    CustomerRemoveAddressAction:
      allOf:
        - $ref: '#/components/schemas/CustomerUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            addressId:
              type: "string"
            addressKey:
              type: "string"
    CustomerRemoveBillingAddressIdAction:
      allOf:
        - $ref: '#/components/schemas/CustomerUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            addressId:
              type: "string"
            addressKey:
              type: "string"
    CustomerRemoveShippingAddressIdAction:
      allOf:
        - $ref: '#/components/schemas/CustomerUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            addressId:
              type: "string"
            addressKey:
              type: "string"
    CustomerRemoveStoreAction:
      allOf:
        - $ref: '#/components/schemas/CustomerUpdateAction'
        - type: "object"
          required:
            - store
          properties:
            action:
              type: "string"
            store:
              $ref: '#/components/schemas/StoreResourceIdentifier'
    CustomerSetAddressCustomFieldAction:
      allOf:
        - $ref: '#/components/schemas/CustomerUpdateAction'
        - type: "object"
          required:
            - addressId
            - name
          properties:
            action:
              type: "string"
            addressId:
              type: "string"
            name:
              type: "string"
            value:
              {}
    CustomerSetAddressCustomTypeAction:
      allOf:
        - $ref: '#/components/schemas/CustomerUpdateAction'
        - type: "object"
          required:
            - addressId
          properties:
            action:
              type: "string"
            addressId:
              type: "string"
            type:
              $ref: '#/components/schemas/TypeResourceIdentifier'
            fields:
              $ref: '#/components/schemas/FieldContainer'
    CustomerSetAuthenticationModeAction:
      allOf:
        - $ref: '#/components/schemas/CustomerUpdateAction'
        - type: "object"
          required:
            - authMode
          properties:
            action:
              type: "string"
            authMode:
              $ref: '#/components/schemas/AuthenticationMode'
            password:
              type: "string"
    CustomerSetCompanyNameAction:
      allOf:
        - $ref: '#/components/schemas/CustomerUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            companyName:
              type: "string"
    CustomerSetCustomFieldAction:
      allOf:
        - $ref: '#/components/schemas/CustomerUpdateAction'
        - type: "object"
          required:
            - name
          properties:
            action:
              type: "string"
            name:
              type: "string"
            value:
              {}
    CustomerSetCustomTypeAction:
      allOf:
        - $ref: '#/components/schemas/CustomerUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            type:
              $ref: '#/components/schemas/TypeResourceIdentifier'
            fields:
              $ref: '#/components/schemas/FieldContainer'
    CustomerSetCustomerGroupAction:
      allOf:
        - $ref: '#/components/schemas/CustomerUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            customerGroup:
              $ref: '#/components/schemas/CustomerGroupResourceIdentifier'
    CustomerSetCustomerNumberAction:
      allOf:
        - $ref: '#/components/schemas/CustomerUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            customerNumber:
              type: "string"
    CustomerSetDateOfBirthAction:
      allOf:
        - $ref: '#/components/schemas/CustomerUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            dateOfBirth:
              type: "string"
              format: "date-only"
    CustomerSetDefaultBillingAddressAction:
      allOf:
        - $ref: '#/components/schemas/CustomerUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            addressId:
              type: "string"
            addressKey:
              type: "string"
    CustomerSetDefaultShippingAddressAction:
      allOf:
        - $ref: '#/components/schemas/CustomerUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            addressId:
              type: "string"
            addressKey:
              type: "string"
    CustomerSetExternalIdAction:
      allOf:
        - $ref: '#/components/schemas/CustomerUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            externalId:
              type: "string"
    CustomerSetFirstNameAction:
      allOf:
        - $ref: '#/components/schemas/CustomerUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            firstName:
              type: "string"
    CustomerSetKeyAction:
      allOf:
        - $ref: '#/components/schemas/CustomerUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            key:
              type: "string"
    CustomerSetLastNameAction:
      allOf:
        - $ref: '#/components/schemas/CustomerUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            lastName:
              type: "string"
    CustomerSetLocaleAction:
      allOf:
        - $ref: '#/components/schemas/CustomerUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            locale:
              $ref: '#/components/schemas/Locale'
    CustomerSetMiddleNameAction:
      allOf:
        - $ref: '#/components/schemas/CustomerUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            middleName:
              type: "string"
    CustomerSetSalutationAction:
      allOf:
        - $ref: '#/components/schemas/CustomerUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            salutation:
              type: "string"
    CustomerSetStoresAction:
      allOf:
        - $ref: '#/components/schemas/CustomerUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            stores:
              type: "array"
              items:
                $ref: '#/components/schemas/StoreResourceIdentifier'
    CustomerSetTitleAction:
      allOf:
        - $ref: '#/components/schemas/CustomerUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            title:
              type: "string"
    CustomerSetVatIdAction:
      allOf:
        - $ref: '#/components/schemas/CustomerUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            vatId:
              type: "string"
    DiscountCode:
      allOf:
        - $ref: '#/components/schemas/BaseResource'
        - type: "object"
          required:
            - cartDiscounts
            - code
            - createdAt
            - groups
            - id
            - isActive
            - lastModifiedAt
            - references
            - version
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            name:
              $ref: '#/components/schemas/LocalizedString'
            description:
              $ref: '#/components/schemas/LocalizedString'
            code:
              type: "string"
            cartDiscounts:
              type: "array"
              items:
                $ref: '#/components/schemas/CartDiscountReference'
            cartPredicate:
              type: "string"
            isActive:
              type: "boolean"
            references:
              type: "array"
              items:
                $ref: '#/components/schemas/Reference'
            maxApplications:
              type: "integer"
              format: "int64"
            maxApplicationsPerCustomer:
              type: "integer"
              format: "int64"
            custom:
              $ref: '#/components/schemas/CustomFields'
            groups:
              type: "array"
              items:
                type: "string"
            validFrom:
              type: "string"
              format: "datetime"
            validUntil:
              type: "string"
              format: "datetime"
            applicationVersion:
              type: "integer"
              format: "int64"
    DiscountCodeDraft:
      type: "object"
      required:
        - cartDiscounts
        - code
      properties:
        name:
          $ref: '#/components/schemas/LocalizedString'
        description:
          $ref: '#/components/schemas/LocalizedString'
        code:
          type: "string"
        cartDiscounts:
          type: "array"
          items:
            $ref: '#/components/schemas/CartDiscountResourceIdentifier'
        cartPredicate:
          type: "string"
        isActive:
          type: "boolean"
        maxApplications:
          type: "integer"
          format: "int64"
        maxApplicationsPerCustomer:
          type: "integer"
          format: "int64"
        custom:
          $ref: '#/components/schemas/CustomFieldsDraft'
        groups:
          type: "array"
          items:
            type: "string"
        validFrom:
          type: "string"
          format: "datetime"
        validUntil:
          type: "string"
          format: "datetime"
    DiscountCodePagedQueryResponse:
      type: "object"
      required:
        - count
        - limit
        - offset
        - results
      properties:
        limit:
          type: "integer"
          format: "int64"
        offset:
          type: "integer"
          format: "int64"
        count:
          type: "integer"
          format: "int64"
        total:
          type: "integer"
          format: "int64"
        results:
          type: "array"
          items:
            $ref: '#/components/schemas/DiscountCode'
    DiscountCodeReference:
      allOf:
        - $ref: '#/components/schemas/Reference'
        - type: "object"
          required:
            - id
          properties:
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            id:
              type: "string"
            obj:
              $ref: '#/components/schemas/DiscountCode'
    DiscountCodeResourceIdentifier:
      allOf:
        - $ref: '#/components/schemas/ResourceIdentifier'
        - type: "object"
          properties:
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            id:
              type: "string"
            key:
              type: "string"
    DiscountCodeUpdate:
      type: "object"
      required:
        - actions
        - version
      properties:
        version:
          type: "integer"
          format: "int64"
        actions:
          type: "array"
          items:
            $ref: '#/components/schemas/DiscountCodeUpdateAction'
    DiscountCodeUpdateAction:
      type: "object"
      discriminator:
        propertyName: action
        mapping:
          changeCartDiscounts: '#/components/schemas/DiscountCodeChangeCartDiscountsAction'
          changeGroups: '#/components/schemas/DiscountCodeChangeGroupsAction'
          changeIsActive: '#/components/schemas/DiscountCodeChangeIsActiveAction'
          setCartPredicate: '#/components/schemas/DiscountCodeSetCartPredicateAction'
          setCustomField: '#/components/schemas/DiscountCodeSetCustomFieldAction'
          setCustomType: '#/components/schemas/DiscountCodeSetCustomTypeAction'
          setDescription: '#/components/schemas/DiscountCodeSetDescriptionAction'
          setMaxApplications: '#/components/schemas/DiscountCodeSetMaxApplicationsAction'
          setMaxApplicationsPerCustomer: '#/components/schemas/DiscountCodeSetMaxApplicationsPerCustomerAction'
          setName: '#/components/schemas/DiscountCodeSetNameAction'
          setValidFrom: '#/components/schemas/DiscountCodeSetValidFromAction'
          setValidFromAndUntil: '#/components/schemas/DiscountCodeSetValidFromAndUntilAction'
          setValidUntil: '#/components/schemas/DiscountCodeSetValidUntilAction'
      required:
        - action
      properties:
        action:
          type: "string"
    DiscountCodeChangeCartDiscountsAction:
      allOf:
        - $ref: '#/components/schemas/DiscountCodeUpdateAction'
        - type: "object"
          required:
            - cartDiscounts
          properties:
            action:
              type: "string"
            cartDiscounts:
              type: "array"
              items:
                $ref: '#/components/schemas/CartDiscountResourceIdentifier'
    DiscountCodeChangeGroupsAction:
      allOf:
        - $ref: '#/components/schemas/DiscountCodeUpdateAction'
        - type: "object"
          required:
            - groups
          properties:
            action:
              type: "string"
            groups:
              type: "array"
              items:
                type: "string"
    DiscountCodeChangeIsActiveAction:
      allOf:
        - $ref: '#/components/schemas/DiscountCodeUpdateAction'
        - type: "object"
          required:
            - isActive
          properties:
            action:
              type: "string"
            isActive:
              type: "boolean"
    DiscountCodeSetCartPredicateAction:
      allOf:
        - $ref: '#/components/schemas/DiscountCodeUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            cartPredicate:
              type: "string"
    DiscountCodeSetCustomFieldAction:
      allOf:
        - $ref: '#/components/schemas/DiscountCodeUpdateAction'
        - type: "object"
          required:
            - name
          properties:
            action:
              type: "string"
            name:
              type: "string"
            value:
              {}
    DiscountCodeSetCustomTypeAction:
      allOf:
        - $ref: '#/components/schemas/DiscountCodeUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            type:
              $ref: '#/components/schemas/TypeResourceIdentifier'
            fields:
              $ref: '#/components/schemas/FieldContainer'
    DiscountCodeSetDescriptionAction:
      allOf:
        - $ref: '#/components/schemas/DiscountCodeUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            description:
              $ref: '#/components/schemas/LocalizedString'
    DiscountCodeSetMaxApplicationsAction:
      allOf:
        - $ref: '#/components/schemas/DiscountCodeUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            maxApplications:
              type: "integer"
              format: "int64"
    DiscountCodeSetMaxApplicationsPerCustomerAction:
      allOf:
        - $ref: '#/components/schemas/DiscountCodeUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            maxApplicationsPerCustomer:
              type: "integer"
              format: "int64"
    DiscountCodeSetNameAction:
      allOf:
        - $ref: '#/components/schemas/DiscountCodeUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            name:
              $ref: '#/components/schemas/LocalizedString'
    DiscountCodeSetValidFromAction:
      allOf:
        - $ref: '#/components/schemas/DiscountCodeUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            validFrom:
              type: "string"
              format: "datetime"
    DiscountCodeSetValidFromAndUntilAction:
      allOf:
        - $ref: '#/components/schemas/DiscountCodeUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            validFrom:
              type: "string"
              format: "datetime"
            validUntil:
              type: "string"
              format: "datetime"
    DiscountCodeSetValidUntilAction:
      allOf:
        - $ref: '#/components/schemas/DiscountCodeUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            validUntil:
              type: "string"
              format: "datetime"
    AnonymousIdAlreadyInUseError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          required:
            - code
            - message
          properties:
            code:
              type: "string"
            message:
              type: "string"
          additionalProperties:
            type: "string"
    AssociateMissingPermissionError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          required:
            - associate
            - businessUnit
            - code
            - message
            - permissions
          properties:
            code:
              type: "string"
            message:
              type: "string"
            associate:
              $ref: '#/components/schemas/CustomerResourceIdentifier'
            businessUnit:
              $ref: '#/components/schemas/BusinessUnitResourceIdentifier'
            associateOnBehalf:
              $ref: '#/components/schemas/CustomerResourceIdentifier'
            permissions:
              type: "array"
              items:
                $ref: '#/components/schemas/Permission'
          additionalProperties:
            type: "string"
    AttributeDefinitionAlreadyExistsError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          required:
            - code
            - conflictingAttributeName
            - conflictingProductTypeId
            - conflictingProductTypeName
            - message
          properties:
            code:
              type: "string"
            message:
              type: "string"
            conflictingProductTypeId:
              type: "string"
            conflictingProductTypeName:
              type: "string"
            conflictingAttributeName:
              type: "string"
          additionalProperties:
            type: "string"
    AttributeDefinitionTypeConflictError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          required:
            - code
            - conflictingAttributeName
            - conflictingProductTypeId
            - conflictingProductTypeName
            - message
          properties:
            code:
              type: "string"
            message:
              type: "string"
            conflictingProductTypeId:
              type: "string"
            conflictingProductTypeName:
              type: "string"
            conflictingAttributeName:
              type: "string"
          additionalProperties:
            type: "string"
    AttributeNameDoesNotExistError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          required:
            - code
            - invalidAttributeName
            - message
          properties:
            code:
              type: "string"
            message:
              type: "string"
            invalidAttributeName:
              type: "string"
          additionalProperties:
            type: "string"
    AuthErrorResponse:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
        - type: "object"
          required:
            - error
            - errors
          properties:
            statusCode:
              type: "integer"
              format: "int32"
            message:
              type: "string"
            errors:
              type: "array"
              items:
                $ref: '#/components/schemas/ErrorObject'
            error:
              type: "string"
            error_description:
              type: "string"
    BadGatewayError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          required:
            - code
            - message
          properties:
            code:
              type: "string"
            message:
              type: "string"
          additionalProperties:
            type: "string"
    ConcurrentModificationError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          required:
            - code
            - message
          properties:
            code:
              type: "string"
            message:
              type: "string"
            currentVersion:
              type: "integer"
              format: "int64"
          additionalProperties:
            type: "string"
    CountryNotConfiguredInStoreError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          required:
            - code
            - country
            - message
            - storeCountries
          properties:
            code:
              type: "string"
            message:
              type: "string"
            storeCountries:
              type: "array"
              items:
                $ref: '#/components/schemas/CountryCode'
            country:
              $ref: '#/components/schemas/CountryCode'
          additionalProperties:
            type: "string"
    DiscountCodeNonApplicableError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          required:
            - code
            - message
          properties:
            code:
              type: "string"
            message:
              type: "string"
            discountCode:
              type: "string"
            reason:
              type: "string"
            discountCodeId:
              type: "string"
            validFrom:
              type: "string"
              format: "datetime"
            validUntil:
              type: "string"
              format: "datetime"
            validityCheckTime:
              type: "string"
              format: "datetime"
          additionalProperties:
            type: "string"
    DuplicateAttributeValueError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          required:
            - attribute
            - code
            - message
          properties:
            code:
              type: "string"
            message:
              type: "string"
            attribute:
              $ref: '#/components/schemas/Attribute'
          additionalProperties:
            type: "string"
    DuplicateAttributeValuesError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          required:
            - attributes
            - code
            - message
          properties:
            code:
              type: "string"
            message:
              type: "string"
            attributes:
              type: "array"
              items:
                $ref: '#/components/schemas/Attribute'
          additionalProperties:
            type: "string"
    DuplicateEnumValuesError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          required:
            - code
            - duplicates
            - message
          properties:
            code:
              type: "string"
            message:
              type: "string"
            duplicates:
              type: "array"
              items:
                type: "string"
          additionalProperties:
            type: "string"
    DuplicateFieldError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          required:
            - code
            - duplicateValue
            - field
            - message
          properties:
            code:
              type: "string"
            message:
              type: "string"
            field:
              type: "string"
            duplicateValue:
              {}
          additionalProperties:
            type: "string"
    DuplicateFieldWithConflictingResourceError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          required:
            - code
            - conflictingResource
            - duplicateValue
            - field
            - message
          properties:
            code:
              type: "string"
            message:
              type: "string"
            field:
              type: "string"
            duplicateValue:
              {}
            conflictingResource:
              $ref: '#/components/schemas/Reference'
          additionalProperties:
            type: "string"
    DuplicatePriceKeyError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          required:
            - code
            - conflictingPrice
            - message
          properties:
            code:
              type: "string"
            message:
              type: "string"
            conflictingPrice:
              $ref: '#/components/schemas/Price'
          additionalProperties:
            type: "string"
    DuplicatePriceScopeError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          required:
            - code
            - conflictingPrice
            - message
          properties:
            code:
              type: "string"
            message:
              type: "string"
            conflictingPrice:
              $ref: '#/components/schemas/Price'
          additionalProperties:
            type: "string"
    DuplicateStandalonePriceScopeError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          required:
            - code
            - conflictingStandalonePrice
            - currency
            - message
            - sku
          properties:
            code:
              type: "string"
            message:
              type: "string"
            conflictingStandalonePrice:
              $ref: '#/components/schemas/StandalonePriceReference'
            sku:
              type: "string"
            currency:
              $ref: '#/components/schemas/CurrencyCode'
            country:
              $ref: '#/components/schemas/CountryCode'
            customerGroup:
              $ref: '#/components/schemas/CustomerGroupResourceIdentifier'
            channel:
              $ref: '#/components/schemas/ChannelResourceIdentifier'
            validFrom:
              type: "string"
              format: "datetime"
            validUntil:
              type: "string"
              format: "datetime"
          additionalProperties:
            type: "string"
    DuplicateVariantValuesError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          required:
            - code
            - message
            - variantValues
          properties:
            code:
              type: "string"
            message:
              type: "string"
            variantValues:
              $ref: '#/components/schemas/VariantValues'
          additionalProperties:
            type: "string"
    EditPreviewFailedError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          required:
            - code
            - message
            - result
          properties:
            code:
              type: "string"
            message:
              type: "string"
            result:
              $ref: '#/components/schemas/OrderEditPreviewFailure'
          additionalProperties:
            type: "string"
    EnumKeyAlreadyExistsError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          required:
            - code
            - conflictingAttributeName
            - conflictingEnumKey
            - message
          properties:
            code:
              type: "string"
            message:
              type: "string"
            conflictingEnumKey:
              type: "string"
            conflictingAttributeName:
              type: "string"
          additionalProperties:
            type: "string"
    EnumKeyDoesNotExistError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          required:
            - code
            - conflictingAttributeName
            - conflictingEnumKey
            - message
          properties:
            code:
              type: "string"
            message:
              type: "string"
            conflictingEnumKey:
              type: "string"
            conflictingAttributeName:
              type: "string"
          additionalProperties:
            type: "string"
    EnumValueIsUsedError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          required:
            - code
            - message
          properties:
            code:
              type: "string"
            message:
              type: "string"
          additionalProperties:
            type: "string"
    EnumValuesMustMatchError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          required:
            - code
            - message
          properties:
            code:
              type: "string"
            message:
              type: "string"
          additionalProperties:
            type: "string"
    ErrorByExtension:
      type: "object"
      required:
        - id
      properties:
        id:
          type: "string"
        key:
          type: "string"
    ErrorObject:
      type: "object"
      discriminator:
        propertyName: code
        mapping:
          AnonymousIdAlreadyInUse: '#/components/schemas/AnonymousIdAlreadyInUseError'
          AssociateMissingPermission: '#/components/schemas/AssociateMissingPermissionError'
          AttributeDefinitionAlreadyExists: '#/components/schemas/AttributeDefinitionAlreadyExistsError'
          AttributeDefinitionTypeConflict: '#/components/schemas/AttributeDefinitionTypeConflictError'
          AttributeNameDoesNotExist: '#/components/schemas/AttributeNameDoesNotExistError'
          BadGateway: '#/components/schemas/BadGatewayError'
          ConcurrentModification: '#/components/schemas/ConcurrentModificationError'
          CountryNotConfiguredInStore: '#/components/schemas/CountryNotConfiguredInStoreError'
          DiscountCodeNonApplicable: '#/components/schemas/DiscountCodeNonApplicableError'
          DuplicateAttributeValue: '#/components/schemas/DuplicateAttributeValueError'
          DuplicateAttributeValues: '#/components/schemas/DuplicateAttributeValuesError'
          DuplicateEnumValues: '#/components/schemas/DuplicateEnumValuesError'
          DuplicateField: '#/components/schemas/DuplicateFieldError'
          DuplicateFieldWithConflictingResource: '#/components/schemas/DuplicateFieldWithConflictingResourceError'
          DuplicatePriceKey: '#/components/schemas/DuplicatePriceKeyError'
          DuplicatePriceScope: '#/components/schemas/DuplicatePriceScopeError'
          DuplicateStandalonePriceScope: '#/components/schemas/DuplicateStandalonePriceScopeError'
          DuplicateVariantValues: '#/components/schemas/DuplicateVariantValuesError'
          EditPreviewFailed: '#/components/schemas/EditPreviewFailedError'
          EnumKeyAlreadyExists: '#/components/schemas/EnumKeyAlreadyExistsError'
          EnumKeyDoesNotExist: '#/components/schemas/EnumKeyDoesNotExistError'
          EnumValueIsUsed: '#/components/schemas/EnumValueIsUsedError'
          EnumValuesMustMatch: '#/components/schemas/EnumValuesMustMatchError'
          ExtensionBadResponse: '#/components/schemas/ExtensionBadResponseError'
          ExtensionNoResponse: '#/components/schemas/ExtensionNoResponseError'
          ExtensionPredicateEvaluationFailed: '#/components/schemas/ExtensionPredicateEvaluationFailedError'
          ExtensionUpdateActionsFailed: '#/components/schemas/ExtensionUpdateActionsFailedError'
          ExternalOAuthFailed: '#/components/schemas/ExternalOAuthFailedError'
          FeatureRemoved: '#/components/schemas/FeatureRemovedError'
          General: '#/components/schemas/GeneralError'
          insufficient_scope: '#/components/schemas/InsufficientScopeError'
          InternalConstraintViolated: '#/components/schemas/InternalConstraintViolatedError'
          InvalidCredentials: '#/components/schemas/InvalidCredentialsError'
          InvalidCurrentPassword: '#/components/schemas/InvalidCurrentPasswordError'
          InvalidField: '#/components/schemas/InvalidFieldError'
          InvalidInput: '#/components/schemas/InvalidInputError'
          InvalidItemShippingDetails: '#/components/schemas/InvalidItemShippingDetailsError'
          InvalidJsonInput: '#/components/schemas/InvalidJsonInputError'
          InvalidOperation: '#/components/schemas/InvalidOperationError'
          InvalidSubject: '#/components/schemas/InvalidSubjectError'
          invalid_token: '#/components/schemas/InvalidTokenError'
          LanguageUsedInStores: '#/components/schemas/LanguageUsedInStoresError'
          MatchingPriceNotFound: '#/components/schemas/MatchingPriceNotFoundError'
          MaxResourceLimitExceeded: '#/components/schemas/MaxResourceLimitExceededError'
          MissingRoleOnChannel: '#/components/schemas/MissingRoleOnChannelError'
          MissingTaxRateForCountry: '#/components/schemas/MissingTaxRateForCountryError'
          NoMatchingProductDiscountFound: '#/components/schemas/NoMatchingProductDiscountFoundError'
          NotEnabled: '#/components/schemas/NotEnabledError'
          ObjectNotFound: '#/components/schemas/ObjectNotFoundError'
          OutOfStock: '#/components/schemas/OutOfStockError'
          OverCapacity: '#/components/schemas/OverCapacityError'
          OverlappingStandalonePriceValidity: '#/components/schemas/OverlappingStandalonePriceValidityError'
          PendingOperation: '#/components/schemas/PendingOperationError'
          PriceChanged: '#/components/schemas/PriceChangedError'
          ProductAssignmentMissing: '#/components/schemas/ProductAssignmentMissingError'
          ProductPresentWithDifferentVariantSelection: '#/components/schemas/ProductPresentWithDifferentVariantSelectionError'
          ProjectNotConfiguredForLanguages: '#/components/schemas/ProjectNotConfiguredForLanguagesError'
          QueryComplexityLimitExceeded: '#/components/schemas/QueryComplexityLimitExceededError'
          QueryTimedOut: '#/components/schemas/QueryTimedOutError'
          ReferenceExists: '#/components/schemas/ReferenceExistsError'
          ReferencedResourceNotFound: '#/components/schemas/ReferencedResourceNotFoundError'
          RequiredField: '#/components/schemas/RequiredFieldError'
          ResourceNotFound: '#/components/schemas/ResourceNotFoundError'
          ResourceSizeLimitExceeded: '#/components/schemas/ResourceSizeLimitExceededError'
          SearchDeactivated: '#/components/schemas/SearchDeactivatedError'
          SearchExecutionFailure: '#/components/schemas/SearchExecutionFailureError'
          SearchFacetPathNotFound: '#/components/schemas/SearchFacetPathNotFoundError'
          SearchIndexingInProgress: '#/components/schemas/SearchIndexingInProgressError'
          SemanticError: '#/components/schemas/SemanticErrorError'
          ShippingMethodDoesNotMatchCart: '#/components/schemas/ShippingMethodDoesNotMatchCartError'
          SyntaxError: '#/components/schemas/SyntaxErrorError'
      required:
        - //
        - code
        - message
      properties:
        code:
          type: "string"
        message:
          type: "string"
      additionalProperties:
        type: "string"
    ErrorResponse:
      type: "object"
      required:
        - message
        - statusCode
      properties:
        statusCode:
          type: "integer"
          format: "int32"
        message:
          type: "string"
        errors:
          type: "array"
          items:
            $ref: '#/components/schemas/ErrorObject'
    ExtensionBadResponseError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          required:
            - code
            - extensionErrors
            - extensionId
            - message
          properties:
            code:
              type: "string"
            message:
              type: "string"
            localizedMessage:
              $ref: '#/components/schemas/LocalizedString'
            extensionExtraInfo:
              type: "object"
            extensionErrors:
              type: "array"
              items:
                $ref: '#/components/schemas/ExtensionError'
            extensionBody:
              type: "string"
            extensionStatusCode:
              type: "integer"
              format: "int32"
            extensionId:
              type: "string"
            extensionKey:
              type: "string"
          additionalProperties:
            type: "string"
    ExtensionError:
      type: "object"
      required:
        - //
        - code
        - extensionId
        - message
      properties:
        code:
          type: "string"
        message:
          type: "string"
        extensionId:
          type: "string"
        extensionKey:
          type: "string"
      additionalProperties:
        type: "string"
    ExtensionNoResponseError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          required:
            - code
            - extensionId
            - message
          properties:
            code:
              type: "string"
            message:
              type: "string"
            extensionId:
              type: "string"
            extensionKey:
              type: "string"
          additionalProperties:
            type: "string"
    ExtensionPredicateEvaluationFailedError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          required:
            - code
            - errorByExtension
            - message
          properties:
            code:
              type: "string"
            message:
              type: "string"
            errorByExtension:
              $ref: '#/components/schemas/ErrorByExtension'
          additionalProperties:
            type: "string"
    ExtensionUpdateActionsFailedError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          required:
            - code
            - extensionErrors
            - message
          properties:
            code:
              type: "string"
            message:
              type: "string"
            localizedMessage:
              $ref: '#/components/schemas/LocalizedString'
            extensionExtraInfo:
              type: "object"
            extensionErrors:
              type: "array"
              items:
                $ref: '#/components/schemas/ExtensionError'
          additionalProperties:
            type: "string"
    ExternalOAuthFailedError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          required:
            - code
            - message
          properties:
            code:
              type: "string"
            message:
              type: "string"
          additionalProperties:
            type: "string"
    FeatureRemovedError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          required:
            - code
            - message
          properties:
            code:
              type: "string"
            message:
              type: "string"
          additionalProperties:
            type: "string"
    GeneralError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          required:
            - code
            - message
          properties:
            code:
              type: "string"
            message:
              type: "string"
          additionalProperties:
            type: "string"
    InsufficientScopeError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          properties:
            code:
              type: "string"
            message:
              type: "string"
          additionalProperties:
            type: "string"
    InternalConstraintViolatedError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          required:
            - code
            - message
          properties:
            code:
              type: "string"
            message:
              type: "string"
          additionalProperties:
            type: "string"
    InvalidCredentialsError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          required:
            - code
            - message
          properties:
            code:
              type: "string"
            message:
              type: "string"
          additionalProperties:
            type: "string"
    InvalidCurrentPasswordError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          required:
            - code
            - message
          properties:
            code:
              type: "string"
            message:
              type: "string"
          additionalProperties:
            type: "string"
    InvalidFieldError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          required:
            - code
            - field
            - invalidValue
            - message
          properties:
            code:
              type: "string"
            message:
              type: "string"
            field:
              type: "string"
            invalidValue:
              {}
            allowedValues:
              type: "array"
              items:
                {}
          additionalProperties:
            type: "string"
    InvalidInputError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          required:
            - code
            - message
          properties:
            code:
              type: "string"
            message:
              type: "string"
          additionalProperties:
            type: "string"
    InvalidItemShippingDetailsError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          required:
            - code
            - itemId
            - message
            - subject
          properties:
            code:
              type: "string"
            message:
              type: "string"
            subject:
              type: "string"
            itemId:
              type: "string"
          additionalProperties:
            type: "string"
    InvalidJsonInputError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          required:
            - code
            - detailedErrorMessage
            - message
          properties:
            code:
              type: "string"
            message:
              type: "string"
            detailedErrorMessage:
              type: "string"
          additionalProperties:
            type: "string"
    InvalidOperationError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          required:
            - code
            - message
          properties:
            code:
              type: "string"
            message:
              type: "string"
          additionalProperties:
            type: "string"
    InvalidSubjectError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          properties:
            code:
              type: "string"
            message:
              type: "string"
          additionalProperties:
            type: "string"
    InvalidTokenError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          properties:
            code:
              type: "string"
            message:
              type: "string"
          additionalProperties:
            type: "string"
    LanguageUsedInStoresError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          required:
            - code
            - message
          properties:
            code:
              type: "string"
            message:
              type: "string"
          additionalProperties:
            type: "string"
    MatchingPriceNotFoundError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          required:
            - code
            - message
            - productId
            - variantId
          properties:
            code:
              type: "string"
            message:
              type: "string"
            productId:
              type: "string"
            variantId:
              type: "integer"
              format: "int32"
            currency:
              $ref: '#/components/schemas/CurrencyCode'
            country:
              $ref: '#/components/schemas/CountryCode'
            customerGroup:
              $ref: '#/components/schemas/CustomerGroupReference'
            channel:
              $ref: '#/components/schemas/ChannelReference'
          additionalProperties:
            type: "string"
    MaxResourceLimitExceededError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          required:
            - code
            - exceededResource
            - message
          properties:
            code:
              type: "string"
            message:
              type: "string"
            exceededResource:
              $ref: '#/components/schemas/ReferenceTypeId'
          additionalProperties:
            type: "string"
    MissingRoleOnChannelError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          required:
            - code
            - message
            - missingRole
          properties:
            code:
              type: "string"
            message:
              type: "string"
            channel:
              $ref: '#/components/schemas/ChannelResourceIdentifier'
            missingRole:
              $ref: '#/components/schemas/ChannelRoleEnum'
          additionalProperties:
            type: "string"
    MissingTaxRateForCountryError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          required:
            - code
            - message
            - taxCategoryId
          properties:
            code:
              type: "string"
            message:
              type: "string"
            taxCategoryId:
              type: "string"
            country:
              $ref: '#/components/schemas/CountryCode'
            state:
              type: "string"
          additionalProperties:
            type: "string"
    NoMatchingProductDiscountFoundError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          required:
            - code
            - message
          properties:
            code:
              type: "string"
            message:
              type: "string"
          additionalProperties:
            type: "string"
    NotEnabledError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          required:
            - code
            - message
          properties:
            code:
              type: "string"
            message:
              type: "string"
          additionalProperties:
            type: "string"
    ObjectNotFoundError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          required:
            - code
            - message
          properties:
            code:
              type: "string"
            message:
              type: "string"
          additionalProperties:
            type: "string"
    OutOfStockError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          required:
            - code
            - lineItems
            - message
            - skus
          properties:
            code:
              type: "string"
            message:
              type: "string"
            lineItems:
              type: "array"
              items:
                type: "string"
            skus:
              type: "array"
              items:
                type: "string"
          additionalProperties:
            type: "string"
    OverCapacityError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          required:
            - code
            - message
          properties:
            code:
              type: "string"
            message:
              type: "string"
          additionalProperties:
            type: "string"
    OverlappingStandalonePriceValidityError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          required:
            - code
            - conflictingStandalonePrice
            - currency
            - message
            - sku
          properties:
            code:
              type: "string"
            message:
              type: "string"
            conflictingStandalonePrice:
              $ref: '#/components/schemas/StandalonePriceReference'
            sku:
              type: "string"
            currency:
              $ref: '#/components/schemas/CurrencyCode'
            country:
              $ref: '#/components/schemas/CountryCode'
            customerGroup:
              $ref: '#/components/schemas/CustomerGroupResourceIdentifier'
            channel:
              $ref: '#/components/schemas/ChannelResourceIdentifier'
            validFrom:
              type: "string"
              format: "datetime"
            validUntil:
              type: "string"
              format: "datetime"
            conflictingValidFrom:
              type: "string"
              format: "datetime"
            conflictingValidUntil:
              type: "string"
              format: "datetime"
          additionalProperties:
            type: "string"
    PendingOperationError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          required:
            - code
            - message
          properties:
            code:
              type: "string"
            message:
              type: "string"
          additionalProperties:
            type: "string"
    PriceChangedError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          required:
            - code
            - lineItems
            - message
            - shipping
          properties:
            code:
              type: "string"
            message:
              type: "string"
            lineItems:
              type: "array"
              items:
                type: "string"
            shipping:
              type: "boolean"
          additionalProperties:
            type: "string"
    ProductAssignmentMissingError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          required:
            - code
            - message
            - product
          properties:
            code:
              type: "string"
            message:
              type: "string"
            product:
              $ref: '#/components/schemas/ProductReference'
          additionalProperties:
            type: "string"
    ProductPresentWithDifferentVariantSelectionError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          required:
            - code
            - existingVariantSelection
            - message
            - product
          properties:
            code:
              type: "string"
            message:
              type: "string"
            product:
              $ref: '#/components/schemas/ProductReference'
            existingVariantSelection:
              $ref: '#/components/schemas/ProductVariantSelection'
          additionalProperties:
            type: "string"
    ProjectNotConfiguredForLanguagesError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          required:
            - code
            - message
          properties:
            code:
              type: "string"
            message:
              type: "string"
            languages:
              type: "array"
              items:
                $ref: '#/components/schemas/Locale'
          additionalProperties:
            type: "string"
    QueryComplexityLimitExceededError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          required:
            - code
            - message
          properties:
            code:
              type: "string"
            message:
              type: "string"
          additionalProperties:
            type: "string"
    QueryTimedOutError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          required:
            - code
            - message
          properties:
            code:
              type: "string"
            message:
              type: "string"
          additionalProperties:
            type: "string"
    ReferenceExistsError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          required:
            - code
            - message
          properties:
            code:
              type: "string"
            message:
              type: "string"
            referencedBy:
              $ref: '#/components/schemas/ReferenceTypeId'
          additionalProperties:
            type: "string"
    ReferencedResourceNotFoundError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          required:
            - code
            - message
            - typeId
          properties:
            code:
              type: "string"
            message:
              type: "string"
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            id:
              type: "string"
            key:
              type: "string"
          additionalProperties:
            type: "string"
    RequiredFieldError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          required:
            - code
            - field
            - message
          properties:
            code:
              type: "string"
            message:
              type: "string"
            field:
              type: "string"
          additionalProperties:
            type: "string"
    ResourceNotFoundError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          required:
            - code
            - message
          properties:
            code:
              type: "string"
            message:
              type: "string"
          additionalProperties:
            type: "string"
    ResourceSizeLimitExceededError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          required:
            - code
            - message
          properties:
            code:
              type: "string"
            message:
              type: "string"
          additionalProperties:
            type: "string"
    SearchDeactivatedError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          required:
            - code
            - message
          properties:
            code:
              type: "string"
            message:
              type: "string"
          additionalProperties:
            type: "string"
    SearchExecutionFailureError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          required:
            - code
            - message
          properties:
            code:
              type: "string"
            message:
              type: "string"
          additionalProperties:
            type: "string"
    SearchFacetPathNotFoundError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          required:
            - code
            - message
          properties:
            code:
              type: "string"
            message:
              type: "string"
          additionalProperties:
            type: "string"
    SearchIndexingInProgressError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          required:
            - code
            - message
          properties:
            code:
              type: "string"
            message:
              type: "string"
          additionalProperties:
            type: "string"
    SemanticErrorError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          required:
            - code
            - message
          properties:
            code:
              type: "string"
            message:
              type: "string"
          additionalProperties:
            type: "string"
    ShippingMethodDoesNotMatchCartError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          required:
            - code
            - message
          properties:
            code:
              type: "string"
            message:
              type: "string"
          additionalProperties:
            type: "string"
    SyntaxErrorError:
      allOf:
        - $ref: '#/components/schemas/ErrorObject'
        - type: "object"
          required:
            - code
            - message
          properties:
            code:
              type: "string"
            message:
              type: "string"
          additionalProperties:
            type: "string"
    VariantValues:
      type: "object"
      required:
        - attributes
        - prices
      properties:
        sku:
          type: "string"
        prices:
          type: "array"
          items:
            $ref: '#/components/schemas/PriceDraft'
        attributes:
          type: "array"
          items:
            $ref: '#/components/schemas/Attribute'
    GraphQLAnonymousIdAlreadyInUseError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          required:
            - code
          properties:
            code:
              type: "string"
          additionalProperties:
            type: "string"
    GraphQLAssociateMissingPermissionError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          required:
            - associate
            - businessUnit
            - code
            - permissions
          properties:
            code:
              type: "string"
            associate:
              $ref: '#/components/schemas/CustomerResourceIdentifier'
            businessUnit:
              $ref: '#/components/schemas/BusinessUnitResourceIdentifier'
            associateOnBehalf:
              $ref: '#/components/schemas/CustomerResourceIdentifier'
            permissions:
              type: "array"
              items:
                $ref: '#/components/schemas/Permission'
          additionalProperties:
            type: "string"
    GraphQLAttributeDefinitionAlreadyExistsError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          required:
            - code
            - conflictingAttributeName
            - conflictingProductTypeId
            - conflictingProductTypeName
          properties:
            code:
              type: "string"
            conflictingProductTypeId:
              type: "string"
            conflictingProductTypeName:
              type: "string"
            conflictingAttributeName:
              type: "string"
          additionalProperties:
            type: "string"
    GraphQLAttributeDefinitionTypeConflictError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          required:
            - code
            - conflictingAttributeName
            - conflictingProductTypeId
            - conflictingProductTypeName
          properties:
            code:
              type: "string"
            conflictingProductTypeId:
              type: "string"
            conflictingProductTypeName:
              type: "string"
            conflictingAttributeName:
              type: "string"
          additionalProperties:
            type: "string"
    GraphQLAttributeNameDoesNotExistError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          required:
            - code
            - invalidAttributeName
          properties:
            code:
              type: "string"
            invalidAttributeName:
              type: "string"
          additionalProperties:
            type: "string"
    GraphQLBadGatewayError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          required:
            - code
          properties:
            code:
              type: "string"
          additionalProperties:
            type: "string"
    GraphQLConcurrentModificationError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          required:
            - code
          properties:
            code:
              type: "string"
            currentVersion:
              type: "integer"
              format: "int64"
          additionalProperties:
            type: "string"
    GraphQLCountryNotConfiguredInStoreError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          required:
            - code
            - country
            - storeCountries
          properties:
            code:
              type: "string"
            storeCountries:
              type: "array"
              items:
                $ref: '#/components/schemas/CountryCode'
            country:
              $ref: '#/components/schemas/CountryCode'
          additionalProperties:
            type: "string"
    GraphQLDiscountCodeNonApplicableError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          required:
            - code
          properties:
            code:
              type: "string"
            discountCode:
              type: "string"
            reason:
              type: "string"
            discountCodeId:
              type: "string"
            validFrom:
              type: "string"
              format: "datetime"
            validUntil:
              type: "string"
              format: "datetime"
            validityCheckTime:
              type: "string"
              format: "datetime"
          additionalProperties:
            type: "string"
    GraphQLDuplicateAttributeValueError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          required:
            - attribute
            - code
          properties:
            code:
              type: "string"
            attribute:
              $ref: '#/components/schemas/Attribute'
          additionalProperties:
            type: "string"
    GraphQLDuplicateAttributeValuesError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          required:
            - attributes
            - code
          properties:
            code:
              type: "string"
            attributes:
              type: "array"
              items:
                $ref: '#/components/schemas/Attribute'
          additionalProperties:
            type: "string"
    GraphQLDuplicateEnumValuesError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          required:
            - code
            - duplicates
          properties:
            code:
              type: "string"
            duplicates:
              type: "array"
              items:
                type: "string"
          additionalProperties:
            type: "string"
    GraphQLDuplicateFieldError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          required:
            - code
            - duplicateValue
            - field
          properties:
            code:
              type: "string"
            field:
              type: "string"
            duplicateValue:
              {}
          additionalProperties:
            type: "string"
    GraphQLDuplicateFieldWithConflictingResourceError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          required:
            - code
            - conflictingResource
            - duplicateValue
            - field
          properties:
            code:
              type: "string"
            field:
              type: "string"
            duplicateValue:
              {}
            conflictingResource:
              $ref: '#/components/schemas/Reference'
          additionalProperties:
            type: "string"
    GraphQLDuplicatePriceKeyError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          required:
            - code
            - conflictingPrice
          properties:
            code:
              type: "string"
            conflictingPrice:
              $ref: '#/components/schemas/Price'
          additionalProperties:
            type: "string"
    GraphQLDuplicatePriceScopeError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          required:
            - code
            - conflictingPrice
          properties:
            code:
              type: "string"
            conflictingPrice:
              $ref: '#/components/schemas/Price'
          additionalProperties:
            type: "string"
    GraphQLDuplicateStandalonePriceScopeError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          required:
            - code
            - conflictingStandalonePrice
            - currency
            - sku
          properties:
            code:
              type: "string"
            conflictingStandalonePrice:
              $ref: '#/components/schemas/StandalonePriceReference'
            sku:
              type: "string"
            currency:
              $ref: '#/components/schemas/CurrencyCode'
            country:
              $ref: '#/components/schemas/CountryCode'
            customerGroup:
              $ref: '#/components/schemas/CustomerGroupResourceIdentifier'
            channel:
              $ref: '#/components/schemas/ChannelResourceIdentifier'
            validFrom:
              type: "string"
              format: "datetime"
            validUntil:
              type: "string"
              format: "datetime"
          additionalProperties:
            type: "string"
    GraphQLDuplicateVariantValuesError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          required:
            - code
            - variantValues
          properties:
            code:
              type: "string"
            variantValues:
              $ref: '#/components/schemas/VariantValues'
          additionalProperties:
            type: "string"
    GraphQLEditPreviewFailedError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          required:
            - code
            - result
          properties:
            code:
              type: "string"
            result:
              $ref: '#/components/schemas/OrderEditPreviewFailure'
          additionalProperties:
            type: "string"
    GraphQLEnumKeyAlreadyExistsError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          required:
            - code
            - conflictingAttributeName
            - conflictingEnumKey
          properties:
            code:
              type: "string"
            conflictingEnumKey:
              type: "string"
            conflictingAttributeName:
              type: "string"
          additionalProperties:
            type: "string"
    GraphQLEnumKeyDoesNotExistError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          required:
            - code
            - conflictingAttributeName
            - conflictingEnumKey
          properties:
            code:
              type: "string"
            conflictingEnumKey:
              type: "string"
            conflictingAttributeName:
              type: "string"
          additionalProperties:
            type: "string"
    GraphQLEnumValueIsUsedError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          required:
            - code
          properties:
            code:
              type: "string"
          additionalProperties:
            type: "string"
    GraphQLEnumValuesMustMatchError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          required:
            - code
          properties:
            code:
              type: "string"
          additionalProperties:
            type: "string"
    GraphQLErrorObject:
      type: "object"
      discriminator:
        propertyName: code
        mapping:
          AnonymousIdAlreadyInUse: '#/components/schemas/GraphQLAnonymousIdAlreadyInUseError'
          AssociateMissingPermission: '#/components/schemas/GraphQLAssociateMissingPermissionError'
          AttributeDefinitionAlreadyExists: '#/components/schemas/GraphQLAttributeDefinitionAlreadyExistsError'
          AttributeDefinitionTypeConflict: '#/components/schemas/GraphQLAttributeDefinitionTypeConflictError'
          AttributeNameDoesNotExist: '#/components/schemas/GraphQLAttributeNameDoesNotExistError'
          BadGateway: '#/components/schemas/GraphQLBadGatewayError'
          ConcurrentModification: '#/components/schemas/GraphQLConcurrentModificationError'
          CountryNotConfiguredInStore: '#/components/schemas/GraphQLCountryNotConfiguredInStoreError'
          DiscountCodeNonApplicable: '#/components/schemas/GraphQLDiscountCodeNonApplicableError'
          DuplicateAttributeValue: '#/components/schemas/GraphQLDuplicateAttributeValueError'
          DuplicateAttributeValues: '#/components/schemas/GraphQLDuplicateAttributeValuesError'
          DuplicateEnumValues: '#/components/schemas/GraphQLDuplicateEnumValuesError'
          DuplicateField: '#/components/schemas/GraphQLDuplicateFieldError'
          DuplicateFieldWithConflictingResource: '#/components/schemas/GraphQLDuplicateFieldWithConflictingResourceError'
          DuplicatePriceKey: '#/components/schemas/GraphQLDuplicatePriceKeyError'
          DuplicatePriceScope: '#/components/schemas/GraphQLDuplicatePriceScopeError'
          DuplicateStandalonePriceScope: '#/components/schemas/GraphQLDuplicateStandalonePriceScopeError'
          DuplicateVariantValues: '#/components/schemas/GraphQLDuplicateVariantValuesError'
          EditPreviewFailed: '#/components/schemas/GraphQLEditPreviewFailedError'
          EnumKeyAlreadyExists: '#/components/schemas/GraphQLEnumKeyAlreadyExistsError'
          EnumKeyDoesNotExist: '#/components/schemas/GraphQLEnumKeyDoesNotExistError'
          EnumValueIsUsed: '#/components/schemas/GraphQLEnumValueIsUsedError'
          EnumValuesMustMatch: '#/components/schemas/GraphQLEnumValuesMustMatchError'
          ExtensionBadResponse: '#/components/schemas/GraphQLExtensionBadResponseError'
          ExtensionNoResponse: '#/components/schemas/GraphQLExtensionNoResponseError'
          ExtensionPredicateEvaluationFailed: '#/components/schemas/GraphQLExtensionPredicateEvaluationFailedError'
          ExtensionUpdateActionsFailed: '#/components/schemas/GraphQLExtensionUpdateActionsFailedError'
          ExternalOAuthFailed: '#/components/schemas/GraphQLExternalOAuthFailedError'
          FeatureRemoved: '#/components/schemas/GraphQLFeatureRemovedError'
          General: '#/components/schemas/GraphQLGeneralError'
          insufficient_scope: '#/components/schemas/GraphQLInsufficientScopeError'
          InternalConstraintViolated: '#/components/schemas/GraphQLInternalConstraintViolatedError'
          InvalidCredentials: '#/components/schemas/GraphQLInvalidCredentialsError'
          InvalidCurrentPassword: '#/components/schemas/GraphQLInvalidCurrentPasswordError'
          InvalidField: '#/components/schemas/GraphQLInvalidFieldError'
          InvalidInput: '#/components/schemas/GraphQLInvalidInputError'
          InvalidItemShippingDetails: '#/components/schemas/GraphQLInvalidItemShippingDetailsError'
          InvalidJsonInput: '#/components/schemas/GraphQLInvalidJsonInputError'
          InvalidOperation: '#/components/schemas/GraphQLInvalidOperationError'
          InvalidSubject: '#/components/schemas/GraphQLInvalidSubjectError'
          invalid_token: '#/components/schemas/GraphQLInvalidTokenError'
          LanguageUsedInStores: '#/components/schemas/GraphQLLanguageUsedInStoresError'
          MatchingPriceNotFound: '#/components/schemas/GraphQLMatchingPriceNotFoundError'
          MaxResourceLimitExceeded: '#/components/schemas/GraphQLMaxResourceLimitExceededError'
          MissingRoleOnChannel: '#/components/schemas/GraphQLMissingRoleOnChannelError'
          MissingTaxRateForCountry: '#/components/schemas/GraphQLMissingTaxRateForCountryError'
          NoMatchingProductDiscountFound: '#/components/schemas/GraphQLNoMatchingProductDiscountFoundError'
          NotEnabled: '#/components/schemas/GraphQLNotEnabledError'
          ObjectNotFound: '#/components/schemas/GraphQLObjectNotFoundError'
          OutOfStock: '#/components/schemas/GraphQLOutOfStockError'
          OverCapacity: '#/components/schemas/GraphQLOverCapacityError'
          OverlappingStandalonePriceValidity: '#/components/schemas/GraphQLOverlappingStandalonePriceValidityError'
          PendingOperation: '#/components/schemas/GraphQLPendingOperationError'
          PriceChanged: '#/components/schemas/GraphQLPriceChangedError'
          ProductAssignmentMissing: '#/components/schemas/GraphQLProductAssignmentMissingError'
          ProductPresentWithDifferentVariantSelection: '#/components/schemas/GraphQLProductPresentWithDifferentVariantSelectionError'
          ProjectNotConfiguredForLanguages: '#/components/schemas/GraphQLProjectNotConfiguredForLanguagesError'
          QueryComplexityLimitExceeded: '#/components/schemas/GraphQLQueryComplexityLimitExceededError'
          QueryTimedOut: '#/components/schemas/GraphQLQueryTimedOutError'
          ReferenceExists: '#/components/schemas/GraphQLReferenceExistsError'
          ReferencedResourceNotFound: '#/components/schemas/GraphQLReferencedResourceNotFoundError'
          RequiredField: '#/components/schemas/GraphQLRequiredFieldError'
          ResourceNotFound: '#/components/schemas/GraphQLResourceNotFoundError'
          ResourceSizeLimitExceeded: '#/components/schemas/GraphQLResourceSizeLimitExceededError'
          SearchDeactivated: '#/components/schemas/GraphQLSearchDeactivatedError'
          SearchExecutionFailure: '#/components/schemas/GraphQLSearchExecutionFailureError'
          SearchFacetPathNotFound: '#/components/schemas/GraphQLSearchFacetPathNotFoundError'
          SearchIndexingInProgress: '#/components/schemas/GraphQLSearchIndexingInProgressError'
          SemanticError: '#/components/schemas/GraphQLSemanticErrorError'
          ShippingMethodDoesNotMatchCart: '#/components/schemas/GraphQLShippingMethodDoesNotMatchCartError'
          SyntaxError: '#/components/schemas/GraphQLSyntaxErrorError'
      required:
        - //
        - code
      properties:
        code:
          type: "string"
      additionalProperties:
        type: "string"
    GraphQLExtensionBadResponseError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          required:
            - code
            - extensionErrors
            - extensionId
          properties:
            code:
              type: "string"
            localizedMessage:
              $ref: '#/components/schemas/LocalizedString'
            extensionExtraInfo:
              type: "object"
            extensionErrors:
              type: "array"
              items:
                $ref: '#/components/schemas/ExtensionError'
            extensionBody:
              type: "string"
            extensionStatusCode:
              type: "integer"
              format: "int32"
            extensionId:
              type: "string"
            extensionKey:
              type: "string"
          additionalProperties:
            type: "string"
    GraphQLExtensionNoResponseError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          required:
            - code
            - extensionId
          properties:
            code:
              type: "string"
            extensionId:
              type: "string"
            extensionKey:
              type: "string"
          additionalProperties:
            type: "string"
    GraphQLExtensionPredicateEvaluationFailedError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          required:
            - code
            - errorByExtension
          properties:
            code:
              type: "string"
            errorByExtension:
              $ref: '#/components/schemas/ErrorByExtension'
          additionalProperties:
            type: "string"
    GraphQLExtensionUpdateActionsFailedError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          required:
            - code
            - extensionErrors
          properties:
            code:
              type: "string"
            localizedMessage:
              $ref: '#/components/schemas/LocalizedString'
            extensionExtraInfo:
              type: "object"
            extensionErrors:
              type: "array"
              items:
                $ref: '#/components/schemas/ExtensionError'
          additionalProperties:
            type: "string"
    GraphQLExternalOAuthFailedError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          required:
            - code
          properties:
            code:
              type: "string"
          additionalProperties:
            type: "string"
    GraphQLFeatureRemovedError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          required:
            - code
          properties:
            code:
              type: "string"
          additionalProperties:
            type: "string"
    GraphQLGeneralError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          required:
            - code
          properties:
            code:
              type: "string"
          additionalProperties:
            type: "string"
    GraphQLInsufficientScopeError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          properties:
            code:
              type: "string"
          additionalProperties:
            type: "string"
    GraphQLInternalConstraintViolatedError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          required:
            - code
          properties:
            code:
              type: "string"
          additionalProperties:
            type: "string"
    GraphQLInvalidCredentialsError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          required:
            - code
          properties:
            code:
              type: "string"
          additionalProperties:
            type: "string"
    GraphQLInvalidCurrentPasswordError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          required:
            - code
          properties:
            code:
              type: "string"
          additionalProperties:
            type: "string"
    GraphQLInvalidFieldError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          required:
            - code
            - field
            - invalidValue
          properties:
            code:
              type: "string"
            field:
              type: "string"
            invalidValue:
              {}
            allowedValues:
              type: "array"
              items:
                {}
          additionalProperties:
            type: "string"
    GraphQLInvalidInputError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          required:
            - code
          properties:
            code:
              type: "string"
          additionalProperties:
            type: "string"
    GraphQLInvalidItemShippingDetailsError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          required:
            - code
            - itemId
            - subject
          properties:
            code:
              type: "string"
            subject:
              type: "string"
            itemId:
              type: "string"
          additionalProperties:
            type: "string"
    GraphQLInvalidJsonInputError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          required:
            - code
            - detailedErrorMessage
          properties:
            code:
              type: "string"
            detailedErrorMessage:
              type: "string"
          additionalProperties:
            type: "string"
    GraphQLInvalidOperationError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          required:
            - code
          properties:
            code:
              type: "string"
          additionalProperties:
            type: "string"
    GraphQLInvalidSubjectError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          properties:
            code:
              type: "string"
          additionalProperties:
            type: "string"
    GraphQLInvalidTokenError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          properties:
            code:
              type: "string"
          additionalProperties:
            type: "string"
    GraphQLLanguageUsedInStoresError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          required:
            - code
          properties:
            code:
              type: "string"
          additionalProperties:
            type: "string"
    GraphQLMatchingPriceNotFoundError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          required:
            - code
            - productId
            - variantId
          properties:
            code:
              type: "string"
            productId:
              type: "string"
            variantId:
              type: "integer"
              format: "int32"
            currency:
              $ref: '#/components/schemas/CurrencyCode'
            country:
              $ref: '#/components/schemas/CountryCode'
            customerGroup:
              $ref: '#/components/schemas/CustomerGroupReference'
            channel:
              $ref: '#/components/schemas/ChannelReference'
          additionalProperties:
            type: "string"
    GraphQLMaxResourceLimitExceededError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          required:
            - code
            - exceededResource
          properties:
            code:
              type: "string"
            exceededResource:
              $ref: '#/components/schemas/ReferenceTypeId'
          additionalProperties:
            type: "string"
    GraphQLMissingRoleOnChannelError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          required:
            - code
            - missingRole
          properties:
            code:
              type: "string"
            channel:
              $ref: '#/components/schemas/ChannelResourceIdentifier'
            missingRole:
              $ref: '#/components/schemas/ChannelRoleEnum'
          additionalProperties:
            type: "string"
    GraphQLMissingTaxRateForCountryError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          required:
            - code
            - taxCategoryId
          properties:
            code:
              type: "string"
            taxCategoryId:
              type: "string"
            country:
              $ref: '#/components/schemas/CountryCode'
            state:
              type: "string"
          additionalProperties:
            type: "string"
    GraphQLNoMatchingProductDiscountFoundError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          required:
            - code
          properties:
            code:
              type: "string"
          additionalProperties:
            type: "string"
    GraphQLNotEnabledError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          required:
            - code
          properties:
            code:
              type: "string"
          additionalProperties:
            type: "string"
    GraphQLObjectNotFoundError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          required:
            - code
          properties:
            code:
              type: "string"
          additionalProperties:
            type: "string"
    GraphQLOutOfStockError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          required:
            - code
            - lineItems
            - skus
          properties:
            code:
              type: "string"
            lineItems:
              type: "array"
              items:
                type: "string"
            skus:
              type: "array"
              items:
                type: "string"
          additionalProperties:
            type: "string"
    GraphQLOverCapacityError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          required:
            - code
          properties:
            code:
              type: "string"
          additionalProperties:
            type: "string"
    GraphQLOverlappingStandalonePriceValidityError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          required:
            - code
            - conflictingStandalonePrice
            - currency
            - sku
          properties:
            code:
              type: "string"
            conflictingStandalonePrice:
              $ref: '#/components/schemas/StandalonePriceReference'
            sku:
              type: "string"
            currency:
              $ref: '#/components/schemas/CurrencyCode'
            country:
              $ref: '#/components/schemas/CountryCode'
            customerGroup:
              $ref: '#/components/schemas/CustomerGroupResourceIdentifier'
            channel:
              $ref: '#/components/schemas/ChannelResourceIdentifier'
            validFrom:
              type: "string"
              format: "datetime"
            validUntil:
              type: "string"
              format: "datetime"
            conflictingValidFrom:
              type: "string"
              format: "datetime"
            conflictingValidUntil:
              type: "string"
              format: "datetime"
          additionalProperties:
            type: "string"
    GraphQLPendingOperationError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          required:
            - code
          properties:
            code:
              type: "string"
          additionalProperties:
            type: "string"
    GraphQLPriceChangedError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          required:
            - code
            - lineItems
            - shipping
          properties:
            code:
              type: "string"
            lineItems:
              type: "array"
              items:
                type: "string"
            shipping:
              type: "boolean"
          additionalProperties:
            type: "string"
    GraphQLProductAssignmentMissingError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          required:
            - code
            - product
          properties:
            code:
              type: "string"
            product:
              $ref: '#/components/schemas/ProductReference'
          additionalProperties:
            type: "string"
    GraphQLProductPresentWithDifferentVariantSelectionError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          required:
            - code
            - existingVariantSelection
            - product
          properties:
            code:
              type: "string"
            product:
              $ref: '#/components/schemas/ProductReference'
            existingVariantSelection:
              $ref: '#/components/schemas/ProductVariantSelection'
          additionalProperties:
            type: "string"
    GraphQLProjectNotConfiguredForLanguagesError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          required:
            - code
          properties:
            code:
              type: "string"
            languages:
              type: "array"
              items:
                $ref: '#/components/schemas/Locale'
          additionalProperties:
            type: "string"
    GraphQLQueryComplexityLimitExceededError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          required:
            - code
          properties:
            code:
              type: "string"
          additionalProperties:
            type: "string"
    GraphQLQueryTimedOutError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          required:
            - code
          properties:
            code:
              type: "string"
          additionalProperties:
            type: "string"
    GraphQLReferenceExistsError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          required:
            - code
          properties:
            code:
              type: "string"
            referencedBy:
              $ref: '#/components/schemas/ReferenceTypeId'
          additionalProperties:
            type: "string"
    GraphQLReferencedResourceNotFoundError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          required:
            - code
            - typeId
          properties:
            code:
              type: "string"
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            id:
              type: "string"
            key:
              type: "string"
          additionalProperties:
            type: "string"
    GraphQLRequiredFieldError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          required:
            - code
            - field
          properties:
            code:
              type: "string"
            field:
              type: "string"
          additionalProperties:
            type: "string"
    GraphQLResourceNotFoundError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          required:
            - code
          properties:
            code:
              type: "string"
          additionalProperties:
            type: "string"
    GraphQLResourceSizeLimitExceededError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          required:
            - code
          properties:
            code:
              type: "string"
          additionalProperties:
            type: "string"
    GraphQLSearchDeactivatedError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          required:
            - code
          properties:
            code:
              type: "string"
          additionalProperties:
            type: "string"
    GraphQLSearchExecutionFailureError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          required:
            - code
          properties:
            code:
              type: "string"
          additionalProperties:
            type: "string"
    GraphQLSearchFacetPathNotFoundError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          required:
            - code
          properties:
            code:
              type: "string"
          additionalProperties:
            type: "string"
    GraphQLSearchIndexingInProgressError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          required:
            - code
          properties:
            code:
              type: "string"
          additionalProperties:
            type: "string"
    GraphQLSemanticErrorError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          required:
            - code
          properties:
            code:
              type: "string"
          additionalProperties:
            type: "string"
    GraphQLShippingMethodDoesNotMatchCartError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          required:
            - code
          properties:
            code:
              type: "string"
          additionalProperties:
            type: "string"
    GraphQLSyntaxErrorError:
      allOf:
        - $ref: '#/components/schemas/GraphQLErrorObject'
        - type: "object"
          required:
            - code
          properties:
            code:
              type: "string"
          additionalProperties:
            type: "string"
    AWSLambdaDestination:
      allOf:
        - $ref: '#/components/schemas/ExtensionDestination'
        - type: "object"
          required:
            - accessKey
            - accessSecret
            - arn
          properties:
            type:
              type: "string"
            arn:
              type: "string"
            accessKey:
              type: "string"
            accessSecret:
              type: "string"
    AuthorizationHeaderAuthentication:
      allOf:
        - $ref: '#/components/schemas/HttpDestinationAuthentication'
        - type: "object"
          required:
            - headerValue
          properties:
            type:
              type: "string"
            headerValue:
              type: "string"
    AzureFunctionsAuthentication:
      allOf:
        - $ref: '#/components/schemas/HttpDestinationAuthentication'
        - type: "object"
          required:
            - key
          properties:
            type:
              type: "string"
            key:
              type: "string"
    Extension:
      allOf:
        - $ref: '#/components/schemas/BaseResource'
        - type: "object"
          required:
            - createdAt
            - destination
            - id
            - lastModifiedAt
            - triggers
            - version
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            key:
              type: "string"
            destination:
              $ref: '#/components/schemas/ExtensionDestination'
            triggers:
              type: "array"
              items:
                $ref: '#/components/schemas/ExtensionTrigger'
            timeoutInMs:
              type: "integer"
              format: "int32"
    ExtensionAction:
      type: "string"
      enum:
        - Create
        - Update
      x-annotation-package: "Extension"
      x-annotation-enumDescriptions:
        Create: "An Extension gets called during a Create request."
        Update: "An Extension gets called during an Update request."
    ExtensionDestination:
      type: "object"
      discriminator:
        propertyName: type
        mapping:
          AWSLambda: '#/components/schemas/AWSLambdaDestination'
          GoogleCloudFunction: '#/components/schemas/GoogleCloudFunctionDestination'
          HTTP: '#/components/schemas/HttpDestination'
      required:
        - type
      properties:
        type:
          type: "string"
    ExtensionDraft:
      type: "object"
      required:
        - destination
        - triggers
      properties:
        key:
          type: "string"
        destination:
          $ref: '#/components/schemas/ExtensionDestination'
        triggers:
          type: "array"
          items:
            $ref: '#/components/schemas/ExtensionTrigger'
        timeoutInMs:
          type: "integer"
          format: "int32"
    ExtensionInput:
      type: "object"
      required:
        - action
        - resource
      properties:
        action:
          $ref: '#/components/schemas/ExtensionAction'
        resource:
          $ref: '#/components/schemas/Reference'
    ExtensionPagedQueryResponse:
      type: "object"
      required:
        - count
        - limit
        - offset
        - results
      properties:
        limit:
          type: "integer"
          format: "int64"
        offset:
          type: "integer"
          format: "int64"
        count:
          type: "integer"
          format: "int64"
        total:
          type: "integer"
          format: "int64"
        results:
          type: "array"
          items:
            $ref: '#/components/schemas/Extension'
    ExtensionResourceTypeId:
      type: "string"
      enum:
        - cart
        - order
        - payment
        - customer
        - quote-request
        - staged-quote
        - quote
        - business-unit
      x-annotation-package: "Extension"
      x-annotation-enumDescriptions:
        cart: "Extension triggered for operations on [Carts](/../api/projects/carts)."
        order: "Extension triggered for operations on [Orders](/../api/projects/orders)."
        payment: "Extension triggered for operations on [Payments](/../api/projects/payments)."
        customer: "Extension triggered for operations on [Customers](/../api/projects/customers)."
        quote-request: "Extension triggered for operations on [QuoteRequests](/../api/projects/quote-requests)."
        staged-quote: "Extension triggered for operations on [StagedQuotes](/../api/projects/staged-quotes)."
        quote: "Extension triggered for operations on [Quotes](/../api/projects/quotes)."
        business-unit: "Extension triggered for operations on [BusinessUnits](/../api/projects/business-units)."
    ExtensionTrigger:
      type: "object"
      required:
        - actions
        - resourceTypeId
      properties:
        resourceTypeId:
          $ref: '#/components/schemas/ExtensionResourceTypeId'
        actions:
          type: "array"
          items:
            $ref: '#/components/schemas/ExtensionAction'
        condition:
          type: "string"
    ExtensionUpdate:
      type: "object"
      required:
        - actions
        - version
      properties:
        version:
          type: "integer"
          format: "int64"
        actions:
          type: "array"
          items:
            $ref: '#/components/schemas/ExtensionUpdateAction'
    ExtensionUpdateAction:
      type: "object"
      discriminator:
        propertyName: action
        mapping:
          changeDestination: '#/components/schemas/ExtensionChangeDestinationAction'
          changeTriggers: '#/components/schemas/ExtensionChangeTriggersAction'
          setKey: '#/components/schemas/ExtensionSetKeyAction'
          setTimeoutInMs: '#/components/schemas/ExtensionSetTimeoutInMsAction'
      required:
        - action
      properties:
        action:
          type: "string"
    GoogleCloudFunctionDestination:
      allOf:
        - $ref: '#/components/schemas/ExtensionDestination'
        - type: "object"
          required:
            - url
          properties:
            type:
              type: "string"
            url:
              type: "string"
    HttpDestination:
      allOf:
        - $ref: '#/components/schemas/ExtensionDestination'
        - type: "object"
          required:
            - url
          properties:
            type:
              type: "string"
            url:
              type: "string"
            authentication:
              $ref: '#/components/schemas/HttpDestinationAuthentication'
    HttpDestinationAuthentication:
      type: "object"
      discriminator:
        propertyName: type
        mapping:
          AuthorizationHeader: '#/components/schemas/AuthorizationHeaderAuthentication'
          AzureFunctions: '#/components/schemas/AzureFunctionsAuthentication'
      required:
        - type
      properties:
        type:
          type: "string"
    ExtensionChangeDestinationAction:
      allOf:
        - $ref: '#/components/schemas/ExtensionUpdateAction'
        - type: "object"
          required:
            - destination
          properties:
            action:
              type: "string"
            destination:
              $ref: '#/components/schemas/ExtensionDestination'
    ExtensionChangeTriggersAction:
      allOf:
        - $ref: '#/components/schemas/ExtensionUpdateAction'
        - type: "object"
          required:
            - triggers
          properties:
            action:
              type: "string"
            triggers:
              type: "array"
              items:
                $ref: '#/components/schemas/ExtensionTrigger'
    ExtensionSetKeyAction:
      allOf:
        - $ref: '#/components/schemas/ExtensionUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            key:
              type: "string"
    ExtensionSetTimeoutInMsAction:
      allOf:
        - $ref: '#/components/schemas/ExtensionUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            timeoutInMs:
              type: "integer"
              format: "int32"
    GraphQLError:
      type: "object"
      required:
        - extensions
        - locations
        - message
      properties:
        message:
          type: "string"
        locations:
          type: "array"
          items:
            $ref: '#/components/schemas/GraphQLErrorLocation'
        path:
          type: "array"
          items:
            {}
        extensions:
          $ref: '#/components/schemas/GraphQLErrorObject'
    GraphQLErrorLocation:
      type: "object"
      required:
        - column
        - line
      properties:
        line:
          type: "integer"
          format: "int32"
        column:
          type: "integer"
          format: "int32"
    GraphQLRequest:
      type: "object"
      required:
        - query
      properties:
        query:
          type: "string"
        operationName:
          type: "string"
        variables:
          $ref: '#/components/schemas/GraphQLVariablesMap'
    GraphQLResponse:
      type: "object"
      properties:
        data:
          {}
        errors:
          type: "array"
          items:
            $ref: '#/components/schemas/GraphQLError'
    GraphQLVariablesMap:
      type: "object"
      required:
        - //
      additionalProperties:
        type: "string"
    InventoryEntry:
      allOf:
        - $ref: '#/components/schemas/BaseResource'
        - type: "object"
          required:
            - availableQuantity
            - createdAt
            - id
            - lastModifiedAt
            - quantityOnStock
            - sku
            - version
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            key:
              type: "string"
            sku:
              type: "string"
            supplyChannel:
              $ref: '#/components/schemas/ChannelReference'
            quantityOnStock:
              type: "integer"
              format: "int64"
            availableQuantity:
              type: "integer"
              format: "int64"
            restockableInDays:
              type: "integer"
              format: "int64"
            expectedDelivery:
              type: "string"
              format: "datetime"
            custom:
              $ref: '#/components/schemas/CustomFields'
    InventoryEntryDraft:
      type: "object"
      required:
        - quantityOnStock
        - sku
      properties:
        sku:
          type: "string"
        key:
          type: "string"
        supplyChannel:
          $ref: '#/components/schemas/ChannelResourceIdentifier'
        quantityOnStock:
          type: "integer"
          format: "int64"
        restockableInDays:
          type: "integer"
          format: "int64"
        expectedDelivery:
          type: "string"
          format: "datetime"
        custom:
          $ref: '#/components/schemas/CustomFieldsDraft'
    InventoryEntryReference:
      allOf:
        - $ref: '#/components/schemas/Reference'
        - type: "object"
          required:
            - id
          properties:
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            id:
              type: "string"
            obj:
              $ref: '#/components/schemas/InventoryEntry'
    InventoryEntryResourceIdentifier:
      allOf:
        - $ref: '#/components/schemas/ResourceIdentifier'
        - type: "object"
          properties:
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            id:
              type: "string"
            key:
              type: "string"
    InventoryEntryUpdate:
      type: "object"
      required:
        - actions
        - version
      properties:
        version:
          type: "integer"
          format: "int64"
        actions:
          type: "array"
          items:
            $ref: '#/components/schemas/InventoryEntryUpdateAction'
    InventoryEntryUpdateAction:
      type: "object"
      discriminator:
        propertyName: action
        mapping:
          addQuantity: '#/components/schemas/InventoryEntryAddQuantityAction'
          changeQuantity: '#/components/schemas/InventoryEntryChangeQuantityAction'
          removeQuantity: '#/components/schemas/InventoryEntryRemoveQuantityAction'
          setCustomField: '#/components/schemas/InventoryEntrySetCustomFieldAction'
          setCustomType: '#/components/schemas/InventoryEntrySetCustomTypeAction'
          setExpectedDelivery: '#/components/schemas/InventoryEntrySetExpectedDeliveryAction'
          setKey: '#/components/schemas/InventoryEntrySetKeyAction'
          setRestockableInDays: '#/components/schemas/InventoryEntrySetRestockableInDaysAction'
          setSupplyChannel: '#/components/schemas/InventoryEntrySetSupplyChannelAction'
      required:
        - action
      properties:
        action:
          type: "string"
    InventoryPagedQueryResponse:
      type: "object"
      required:
        - count
        - limit
        - offset
        - results
      properties:
        limit:
          type: "integer"
          format: "int64"
        offset:
          type: "integer"
          format: "int64"
        count:
          type: "integer"
          format: "int64"
        total:
          type: "integer"
          format: "int64"
        results:
          type: "array"
          items:
            $ref: '#/components/schemas/InventoryEntry'
    InventoryEntryAddQuantityAction:
      allOf:
        - $ref: '#/components/schemas/InventoryEntryUpdateAction'
        - type: "object"
          required:
            - quantity
          properties:
            action:
              type: "string"
            quantity:
              type: "integer"
              format: "int64"
    InventoryEntryChangeQuantityAction:
      allOf:
        - $ref: '#/components/schemas/InventoryEntryUpdateAction'
        - type: "object"
          required:
            - quantity
          properties:
            action:
              type: "string"
            quantity:
              type: "integer"
              format: "int64"
    InventoryEntryRemoveQuantityAction:
      allOf:
        - $ref: '#/components/schemas/InventoryEntryUpdateAction'
        - type: "object"
          required:
            - quantity
          properties:
            action:
              type: "string"
            quantity:
              type: "integer"
              format: "int64"
    InventoryEntrySetCustomFieldAction:
      allOf:
        - $ref: '#/components/schemas/InventoryEntryUpdateAction'
        - type: "object"
          required:
            - name
          properties:
            action:
              type: "string"
            name:
              type: "string"
            value:
              {}
    InventoryEntrySetCustomTypeAction:
      allOf:
        - $ref: '#/components/schemas/InventoryEntryUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            type:
              $ref: '#/components/schemas/TypeResourceIdentifier'
            fields:
              $ref: '#/components/schemas/FieldContainer'
    InventoryEntrySetExpectedDeliveryAction:
      allOf:
        - $ref: '#/components/schemas/InventoryEntryUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            expectedDelivery:
              type: "string"
              format: "datetime"
    InventoryEntrySetKeyAction:
      allOf:
        - $ref: '#/components/schemas/InventoryEntryUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            key:
              type: "string"
    InventoryEntrySetRestockableInDaysAction:
      allOf:
        - $ref: '#/components/schemas/InventoryEntryUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            restockableInDays:
              type: "integer"
              format: "int64"
    InventoryEntrySetSupplyChannelAction:
      allOf:
        - $ref: '#/components/schemas/InventoryEntryUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            supplyChannel:
              $ref: '#/components/schemas/ChannelResourceIdentifier'
    MyBusinessUnitAssociateDraft:
      type: "object"
      required:
        - customer
        - version
      properties:
        version:
          type: "integer"
          format: "int64"
        customer:
          $ref: '#/components/schemas/MyCustomerDraft'
    MyBusinessUnitDraft:
      type: "object"
      discriminator:
        propertyName: unitType
        mapping:
          Company: '#/components/schemas/MyCompanyDraft'
          Division: '#/components/schemas/MyDivisionDraft'
      required:
        - key
        - name
        - unitType
      properties:
        key:
          type: "string"
        unitType:
          $ref: '#/components/schemas/BusinessUnitType'
        name:
          type: "string"
        contactEmail:
          type: "string"
        custom:
          $ref: '#/components/schemas/CustomFields'
        addresses:
          type: "array"
          items:
            $ref: '#/components/schemas/BaseAddress'
        shippingAddresses:
          type: "array"
          items:
            type: "integer"
            format: "int32"
        defaultShippingAddress:
          type: "integer"
          format: "int32"
        billingAddresses:
          type: "array"
          items:
            type: "integer"
            format: "int32"
        defaultBillingAddress:
          type: "integer"
          format: "int32"
    MyBusinessUnitUpdate:
      type: "object"
      required:
        - actions
        - version
      properties:
        version:
          type: "integer"
          format: "int64"
        actions:
          type: "array"
          items:
            $ref: '#/components/schemas/BusinessUnitUpdateAction'
    MyBusinessUnitUpdateAction:
      type: "object"
      discriminator:
        propertyName: action
        mapping:
          addAddress: '#/components/schemas/MyBusinessUnitAddAddressAction'
          addBillingAddressId: '#/components/schemas/MyBusinessUnitAddBillingAddressIdAction'
          addShippingAddressId: '#/components/schemas/MyBusinessUnitAddShippingAddressIdAction'
          changeAddress: '#/components/schemas/MyBusinessUnitChangeAddressAction'
          changeAssociate: '#/components/schemas/MyBusinessUnitChangeAssociateAction'
          changeName: '#/components/schemas/MyBusinessUnitChangeNameAction'
          changeParentUnit: '#/components/schemas/MyBusinessUnitChangeParentUnitAction'
          removeAddress: '#/components/schemas/MyBusinessUnitRemoveAddressAction'
          removeAssociate: '#/components/schemas/MyBusinessUnitRemoveAssociateAction'
          removeBillingAddressId: '#/components/schemas/MyBusinessUnitRemoveBillingAddressIdAction'
          removeShippingAddressId: '#/components/schemas/MyBusinessUnitRemoveShippingAddressIdAction'
          setAddressCustomField: '#/components/schemas/MyBusinessUnitSetAddressCustomFieldAction'
          setAddressCustomType: '#/components/schemas/MyBusinessUnitSetAddressCustomTypeAction'
          setContactEmail: '#/components/schemas/MyBusinessUnitSetContactEmailAction'
          setCustomField: '#/components/schemas/MyBusinessUnitSetCustomFieldAction'
          setCustomType: '#/components/schemas/MyBusinessUnitSetCustomTypeAction'
          setDefaultBillingAddress: '#/components/schemas/MyBusinessUnitSetDefaultBillingAddressAction'
          setDefaultShippingAddress: '#/components/schemas/MyBusinessUnitSetDefaultShippingAddressAction'
      required:
        - action
      properties:
        action:
          type: "string"
    MyCartDraft:
      type: "object"
      required:
        - currency
      properties:
        currency:
          $ref: '#/components/schemas/CurrencyCode'
        customerEmail:
          type: "string"
        businessUnit:
          $ref: '#/components/schemas/BusinessUnitResourceIdentifier'
        store:
          $ref: '#/components/schemas/StoreResourceIdentifier'
        lineItems:
          type: "array"
          items:
            $ref: '#/components/schemas/MyLineItemDraft'
        taxMode:
          $ref: '#/components/schemas/TaxMode'
        inventoryMode:
          $ref: '#/components/schemas/InventoryMode'
        billingAddress:
          $ref: '#/components/schemas/BaseAddress'
        shippingAddress:
          $ref: '#/components/schemas/BaseAddress'
        shippingMethod:
          $ref: '#/components/schemas/ShippingMethodResourceIdentifier'
        itemShippingAddresses:
          type: "array"
          items:
            $ref: '#/components/schemas/BaseAddress'
        discountCodes:
          type: "array"
          items:
            type: "string"
        country:
          $ref: '#/components/schemas/CountryCode'
        locale:
          $ref: '#/components/schemas/Locale'
        deleteDaysAfterLastModification:
          type: "integer"
          format: "int64"
        custom:
          $ref: '#/components/schemas/CustomFieldsDraft'
    MyCartUpdate:
      type: "object"
      required:
        - actions
        - version
      properties:
        version:
          type: "integer"
          format: "int64"
        actions:
          type: "array"
          items:
            $ref: '#/components/schemas/MyCartUpdateAction'
    MyCartUpdateAction:
      type: "object"
      discriminator:
        propertyName: action
        mapping:
          addDiscountCode: '#/components/schemas/MyCartAddDiscountCodeAction'
          addItemShippingAddress: '#/components/schemas/MyCartAddItemShippingAddressAction'
          addLineItem: '#/components/schemas/MyCartAddLineItemAction'
          addPayment: '#/components/schemas/MyCartAddPaymentAction'
          applyDeltaToLineItemShippingDetailsTargets: '#/components/schemas/MyCartApplyDeltaToLineItemShippingDetailsTargetsAction'
          changeLineItemQuantity: '#/components/schemas/MyCartChangeLineItemQuantityAction'
          changeTaxMode: '#/components/schemas/MyCartChangeTaxModeAction'
          recalculate: '#/components/schemas/MyCartRecalculateAction'
          removeDiscountCode: '#/components/schemas/MyCartRemoveDiscountCodeAction'
          removeItemShippingAddress: '#/components/schemas/MyCartRemoveItemShippingAddressAction'
          removeLineItem: '#/components/schemas/MyCartRemoveLineItemAction'
          removePayment: '#/components/schemas/MyCartRemovePaymentAction'
          setBillingAddress: '#/components/schemas/MyCartSetBillingAddressAction'
          setBusinessUnit: '#/components/schemas/MyCartSetBusinessUnitAction'
          setCountry: '#/components/schemas/MyCartSetCountryAction'
          setCustomField: '#/components/schemas/MyCartSetCustomFieldAction'
          setCustomType: '#/components/schemas/MyCartSetCustomTypeAction'
          setCustomerEmail: '#/components/schemas/MyCartSetCustomerEmailAction'
          setDeleteDaysAfterLastModification: '#/components/schemas/MyCartSetDeleteDaysAfterLastModificationAction'
          setLineItemCustomField: '#/components/schemas/MyCartSetLineItemCustomFieldAction'
          setLineItemCustomType: '#/components/schemas/MyCartSetLineItemCustomTypeAction'
          setLineItemDistributionChannel: '#/components/schemas/MyCartSetLineItemDistributionChannelAction'
          setLineItemShippingDetails: '#/components/schemas/MyCartSetLineItemShippingDetailsAction'
          setLineItemSupplyChannel: '#/components/schemas/MyCartSetLineItemSupplyChannelAction'
          setLocale: '#/components/schemas/MyCartSetLocaleAction'
          setShippingAddress: '#/components/schemas/MyCartSetShippingAddressAction'
          setShippingMethod: '#/components/schemas/MyCartSetShippingMethodAction'
          updateItemShippingAddress: '#/components/schemas/MyCartUpdateItemShippingAddressAction'
      required:
        - action
      properties:
        action:
          type: "string"
    MyCompanyDraft:
      allOf:
        - $ref: '#/components/schemas/MyBusinessUnitDraft'
        - type: "object"
          properties:
            key:
              type: "string"
            unitType:
              $ref: '#/components/schemas/BusinessUnitType'
            name:
              type: "string"
            contactEmail:
              type: "string"
            custom:
              $ref: '#/components/schemas/CustomFields'
            addresses:
              type: "array"
              items:
                $ref: '#/components/schemas/BaseAddress'
            shippingAddresses:
              type: "array"
              items:
                type: "integer"
                format: "int32"
            defaultShippingAddress:
              type: "integer"
              format: "int32"
            billingAddresses:
              type: "array"
              items:
                type: "integer"
                format: "int32"
            defaultBillingAddress:
              type: "integer"
              format: "int32"
    MyCustomerDraft:
      type: "object"
      required:
        - email
        - password
      properties:
        email:
          type: "string"
        password:
          type: "string"
        firstName:
          type: "string"
        lastName:
          type: "string"
        middleName:
          type: "string"
        title:
          type: "string"
        salutation:
          type: "string"
        dateOfBirth:
          type: "string"
          format: "date-only"
        companyName:
          type: "string"
        vatId:
          type: "string"
        addresses:
          type: "array"
          items:
            $ref: '#/components/schemas/BaseAddress'
        defaultShippingAddress:
          type: "integer"
          format: "int64"
        defaultBillingAddress:
          type: "integer"
          format: "int64"
        custom:
          $ref: '#/components/schemas/CustomFieldsDraft'
        locale:
          $ref: '#/components/schemas/Locale'
        stores:
          type: "array"
          items:
            $ref: '#/components/schemas/StoreResourceIdentifier'
    MyCustomerUpdate:
      type: "object"
      required:
        - actions
        - version
      properties:
        version:
          type: "integer"
          format: "int64"
        actions:
          type: "array"
          items:
            $ref: '#/components/schemas/MyCustomerUpdateAction'
    MyCustomerUpdateAction:
      type: "object"
      discriminator:
        propertyName: action
        mapping:
          addAddress: '#/components/schemas/MyCustomerAddAddressAction'
          addBillingAddressId: '#/components/schemas/MyCustomerAddBillingAddressIdAction'
          addShippingAddressId: '#/components/schemas/MyCustomerAddShippingAddressIdAction'
          changeAddress: '#/components/schemas/MyCustomerChangeAddressAction'
          changeEmail: '#/components/schemas/MyCustomerChangeEmailAction'
          removeAddress: '#/components/schemas/MyCustomerRemoveAddressAction'
          removeBillingAddressId: '#/components/schemas/MyCustomerRemoveBillingAddressIdAction'
          removeShippingAddressId: '#/components/schemas/MyCustomerRemoveShippingAddressIdAction'
          setCompanyName: '#/components/schemas/MyCustomerSetCompanyNameAction'
          setCustomField: '#/components/schemas/MyCustomerSetCustomFieldAction'
          setCustomType: '#/components/schemas/MyCustomerSetCustomTypeAction'
          setDateOfBirth: '#/components/schemas/MyCustomerSetDateOfBirthAction'
          setDefaultBillingAddress: '#/components/schemas/MyCustomerSetDefaultBillingAddressAction'
          setDefaultShippingAddress: '#/components/schemas/MyCustomerSetDefaultShippingAddressAction'
          setFirstName: '#/components/schemas/MyCustomerSetFirstNameAction'
          setLastName: '#/components/schemas/MyCustomerSetLastNameAction'
          setLocale: '#/components/schemas/MyCustomerSetLocaleAction'
          setMiddleName: '#/components/schemas/MyCustomerSetMiddleNameAction'
          setSalutation: '#/components/schemas/MyCustomerSetSalutationAction'
          setTitle: '#/components/schemas/MyCustomerSetTitleAction'
          setVatId: '#/components/schemas/MyCustomerSetVatIdAction'
      required:
        - action
      properties:
        action:
          type: "string"
    MyDivisionDraft:
      allOf:
        - $ref: '#/components/schemas/MyBusinessUnitDraft'
        - type: "object"
          required:
            - parentUnit
          properties:
            key:
              type: "string"
            unitType:
              $ref: '#/components/schemas/BusinessUnitType'
            name:
              type: "string"
            contactEmail:
              type: "string"
            custom:
              $ref: '#/components/schemas/CustomFields'
            addresses:
              type: "array"
              items:
                $ref: '#/components/schemas/BaseAddress'
            shippingAddresses:
              type: "array"
              items:
                type: "integer"
                format: "int32"
            defaultShippingAddress:
              type: "integer"
              format: "int32"
            billingAddresses:
              type: "array"
              items:
                type: "integer"
                format: "int32"
            defaultBillingAddress:
              type: "integer"
              format: "int32"
            parentUnit:
              $ref: '#/components/schemas/BusinessUnitResourceIdentifier'
    MyLineItemDraft:
      type: "object"
      properties:
        productId:
          type: "string"
        variantId:
          type: "integer"
          format: "int64"
        sku:
          type: "string"
        quantity:
          type: "integer"
          format: "int64"
        addedAt:
          type: "string"
          format: "datetime"
        supplyChannel:
          $ref: '#/components/schemas/ChannelResourceIdentifier'
        distributionChannel:
          $ref: '#/components/schemas/ChannelResourceIdentifier'
        shippingDetails:
          $ref: '#/components/schemas/ItemShippingDetailsDraft'
        custom:
          $ref: '#/components/schemas/CustomFieldsDraft'
    MyOrderFromCartDraft:
      type: "object"
      required:
        - id
        - version
      properties:
        id:
          type: "string"
        version:
          type: "integer"
          format: "int64"
    MyOrderFromQuoteDraft:
      type: "object"
      required:
        - id
        - version
      properties:
        id:
          type: "string"
        version:
          type: "integer"
          format: "int64"
        quoteStateToAccepted:
          type: "boolean"
    MyPayment:
      type: "object"
      required:
        - amountPlanned
        - id
        - paymentMethodInfo
        - transactions
        - version
      properties:
        id:
          type: "string"
        version:
          type: "integer"
          format: "int64"
        customer:
          $ref: '#/components/schemas/CustomerReference'
        anonymousId:
          type: "string"
        amountPlanned:
          $ref: '#/components/schemas/CentPrecisionMoney'
        paymentMethodInfo:
          $ref: '#/components/schemas/PaymentMethodInfo'
        transactions:
          type: "array"
          items:
            $ref: '#/components/schemas/Transaction'
        custom:
          $ref: '#/components/schemas/CustomFields'
    MyPaymentDraft:
      type: "object"
      required:
        - amountPlanned
      properties:
        amountPlanned:
          $ref: '#/components/schemas/Money'
        paymentMethodInfo:
          $ref: '#/components/schemas/PaymentMethodInfo'
        custom:
          $ref: '#/components/schemas/CustomFieldsDraft'
        transaction:
          $ref: '#/components/schemas/MyTransactionDraft'
    MyPaymentPagedQueryResponse:
      type: "object"
      required:
        - count
        - limit
        - offset
        - results
      properties:
        limit:
          type: "integer"
          format: "int64"
        count:
          type: "integer"
          format: "int64"
        total:
          type: "integer"
          format: "int64"
        offset:
          type: "integer"
          format: "int64"
        results:
          type: "array"
          items:
            $ref: '#/components/schemas/MyPayment'
    MyPaymentUpdate:
      type: "object"
      required:
        - actions
        - version
      properties:
        version:
          type: "integer"
          format: "int64"
        actions:
          type: "array"
          items:
            $ref: '#/components/schemas/MyPaymentUpdateAction'
    MyPaymentUpdateAction:
      type: "object"
      discriminator:
        propertyName: action
        mapping:
          addTransaction: '#/components/schemas/MyPaymentAddTransactionAction'
          changeAmountPlanned: '#/components/schemas/MyPaymentChangeAmountPlannedAction'
          setCustomField: '#/components/schemas/MyPaymentSetCustomFieldAction'
          setMethodInfoInterface: '#/components/schemas/MyPaymentSetMethodInfoInterfaceAction'
          setMethodInfoMethod: '#/components/schemas/MyPaymentSetMethodInfoMethodAction'
          setMethodInfoName: '#/components/schemas/MyPaymentSetMethodInfoNameAction'
          setTransactionCustomField: '#/components/schemas/MyPaymentSetTransactionCustomFieldAction'
      required:
        - action
      properties:
        action:
          type: "string"
    MyQuoteRequestDraft:
      type: "object"
      required:
        - cartId
        - cartVersion
        - comment
      properties:
        cartId:
          type: "string"
        cartVersion:
          type: "integer"
          format: "int64"
        comment:
          type: "string"
    MyQuoteRequestUpdate:
      type: "object"
      required:
        - actions
        - version
      properties:
        version:
          type: "integer"
          format: "int64"
        actions:
          type: "array"
          items:
            $ref: '#/components/schemas/MyQuoteRequestUpdateAction'
    MyQuoteRequestUpdateAction:
      type: "object"
      discriminator:
        propertyName: action
        mapping:
          cancelQuoteRequest: '#/components/schemas/MyQuoteRequestCancelAction'
      required:
        - action
      properties:
        action:
          type: "string"
    MyQuoteState:
      type: "string"
      enum:
        - Declined
        - Accepted
      x-annotation-package: "Me"
      x-annotation-docs-uri: "https://docs.commercetools.com/http-api-projects-me-quotes.html#myquotestate"
      x-annotation-enumDescriptions:
        Declined: "A state indicating that the [Buyer](/../api/quotes-overview#buyer) has
         declined the [Quote](ctp:api:type:Quote).n"
        Accepted: "A state indicating that the [Buyer](/../api/quotes-overview#buyer) has
         accepted the [Quote](ctp:api:type:Quote).n"
    MyQuoteUpdate:
      type: "object"
      required:
        - actions
        - version
      properties:
        version:
          type: "integer"
          format: "int64"
        actions:
          type: "array"
          items:
            $ref: '#/components/schemas/MyQuoteUpdateAction'
    MyQuoteUpdateAction:
      type: "object"
      discriminator:
        propertyName: action
        mapping:
          changeMyQuoteState: '#/components/schemas/MyQuoteChangeMyQuoteStateAction'
      required:
        - action
      properties:
        action:
          type: "string"
    MyShoppingListDraft:
      type: "object"
      required:
        - name
      properties:
        name:
          $ref: '#/components/schemas/LocalizedString'
        description:
          $ref: '#/components/schemas/LocalizedString'
        lineItems:
          type: "array"
          items:
            $ref: '#/components/schemas/ShoppingListLineItemDraft'
        textLineItems:
          type: "array"
          items:
            $ref: '#/components/schemas/TextLineItemDraft'
        custom:
          $ref: '#/components/schemas/CustomFieldsDraft'
        deleteDaysAfterLastModification:
          type: "integer"
          format: "int64"
        store:
          $ref: '#/components/schemas/StoreResourceIdentifier'
    MyShoppingListUpdate:
      type: "object"
      required:
        - actions
        - version
      properties:
        version:
          type: "integer"
          format: "int64"
        actions:
          type: "array"
          items:
            $ref: '#/components/schemas/MyShoppingListUpdateAction'
    MyShoppingListUpdateAction:
      type: "object"
      discriminator:
        propertyName: action
        mapping:
          addLineItem: '#/components/schemas/MyShoppingListAddLineItemAction'
          addTextLineItem: '#/components/schemas/MyShoppingListAddTextLineItemAction'
          changeLineItemQuantity: '#/components/schemas/MyShoppingListChangeLineItemQuantityAction'
          changeLineItemsOrder: '#/components/schemas/MyShoppingListChangeLineItemsOrderAction'
          changeName: '#/components/schemas/MyShoppingListChangeNameAction'
          changeTextLineItemName: '#/components/schemas/MyShoppingListChangeTextLineItemNameAction'
          changeTextLineItemQuantity: '#/components/schemas/MyShoppingListChangeTextLineItemQuantityAction'
          changeTextLineItemsOrder: '#/components/schemas/MyShoppingListChangeTextLineItemsOrderAction'
          removeLineItem: '#/components/schemas/MyShoppingListRemoveLineItemAction'
          removeTextLineItem: '#/components/schemas/MyShoppingListRemoveTextLineItemAction'
          setCustomField: '#/components/schemas/MyShoppingListSetCustomFieldAction'
          setCustomType: '#/components/schemas/MyShoppingListSetCustomTypeAction'
          setDeleteDaysAfterLastModification: '#/components/schemas/MyShoppingListSetDeleteDaysAfterLastModificationAction'
          setDescription: '#/components/schemas/MyShoppingListSetDescriptionAction'
          setLineItemCustomField: '#/components/schemas/MyShoppingListSetLineItemCustomFieldAction'
          setLineItemCustomType: '#/components/schemas/MyShoppingListSetLineItemCustomTypeAction'
          setTextLineItemCustomField: '#/components/schemas/MyShoppingListSetTextLineItemCustomFieldAction'
          setTextLineItemCustomType: '#/components/schemas/MyShoppingListSetTextLineItemCustomTypeAction'
          setTextLineItemDescription: '#/components/schemas/MyShoppingListSetTextLineItemDescriptionAction'
      required:
        - action
      properties:
        action:
          type: "string"
    MyTransactionDraft:
      type: "object"
      required:
        - amount
        - type
      properties:
        timestamp:
          type: "string"
          format: "datetime"
        type:
          $ref: '#/components/schemas/TransactionType'
        amount:
          $ref: '#/components/schemas/Money'
        interactionId:
          type: "string"
        custom:
          $ref: '#/components/schemas/CustomFieldsDraft'
    ReplicaMyCartDraft:
      type: "object"
      required:
        - reference
      properties:
        reference:
          oneOf:
            - $ref: '#/components/schemas/CartReference'
            - $ref: '#/components/schemas/OrderReference'
    MyBusinessUnitAddAddressAction:
      allOf:
        - $ref: '#/components/schemas/MyBusinessUnitUpdateAction'
        - type: "object"
          required:
            - address
          properties:
            action:
              type: "string"
            address:
              $ref: '#/components/schemas/BaseAddress'
    MyBusinessUnitAddBillingAddressIdAction:
      allOf:
        - $ref: '#/components/schemas/MyBusinessUnitUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            addressId:
              type: "string"
            addressKey:
              type: "string"
    MyBusinessUnitAddShippingAddressIdAction:
      allOf:
        - $ref: '#/components/schemas/MyBusinessUnitUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            addressId:
              type: "string"
            addressKey:
              type: "string"
    MyBusinessUnitChangeAddressAction:
      allOf:
        - $ref: '#/components/schemas/MyBusinessUnitUpdateAction'
        - type: "object"
          required:
            - address
          properties:
            action:
              type: "string"
            addressId:
              type: "string"
            addressKey:
              type: "string"
            address:
              $ref: '#/components/schemas/BaseAddress'
    MyBusinessUnitChangeAssociateAction:
      allOf:
        - $ref: '#/components/schemas/MyBusinessUnitUpdateAction'
        - type: "object"
          required:
            - associate
          properties:
            action:
              type: "string"
            associate:
              $ref: '#/components/schemas/AssociateDraft'
    MyBusinessUnitChangeNameAction:
      allOf:
        - $ref: '#/components/schemas/MyBusinessUnitUpdateAction'
        - type: "object"
          required:
            - name
          properties:
            action:
              type: "string"
            name:
              type: "string"
    MyBusinessUnitChangeParentUnitAction:
      allOf:
        - $ref: '#/components/schemas/MyBusinessUnitUpdateAction'
        - type: "object"
          required:
            - parentUnit
          properties:
            action:
              type: "string"
            parentUnit:
              $ref: '#/components/schemas/BusinessUnitResourceIdentifier'
    MyBusinessUnitRemoveAddressAction:
      allOf:
        - $ref: '#/components/schemas/MyBusinessUnitUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            addressId:
              type: "string"
            addressKey:
              type: "string"
    MyBusinessUnitRemoveAssociateAction:
      allOf:
        - $ref: '#/components/schemas/MyBusinessUnitUpdateAction'
        - type: "object"
          required:
            - customer
          properties:
            action:
              type: "string"
            customer:
              $ref: '#/components/schemas/CustomerResourceIdentifier'
    MyBusinessUnitRemoveBillingAddressIdAction:
      allOf:
        - $ref: '#/components/schemas/MyBusinessUnitUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            addressId:
              type: "string"
            addressKey:
              type: "string"
    MyBusinessUnitRemoveShippingAddressIdAction:
      allOf:
        - $ref: '#/components/schemas/MyBusinessUnitUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            addressId:
              type: "string"
            addressKey:
              type: "string"
    MyBusinessUnitSetAddressCustomFieldAction:
      allOf:
        - $ref: '#/components/schemas/MyBusinessUnitUpdateAction'
        - type: "object"
          required:
            - addressId
            - name
          properties:
            action:
              type: "string"
            addressId:
              type: "string"
            name:
              type: "string"
            value:
              {}
    MyBusinessUnitSetAddressCustomTypeAction:
      allOf:
        - $ref: '#/components/schemas/MyBusinessUnitUpdateAction'
        - type: "object"
          required:
            - addressId
          properties:
            action:
              type: "string"
            type:
              $ref: '#/components/schemas/TypeResourceIdentifier'
            fields:
              $ref: '#/components/schemas/FieldContainer'
            addressId:
              type: "string"
    MyBusinessUnitSetContactEmailAction:
      allOf:
        - $ref: '#/components/schemas/MyBusinessUnitUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            contactEmail:
              type: "string"
    MyBusinessUnitSetCustomFieldAction:
      allOf:
        - $ref: '#/components/schemas/MyBusinessUnitUpdateAction'
        - type: "object"
          required:
            - name
          properties:
            action:
              type: "string"
            name:
              type: "string"
            value:
              {}
    MyBusinessUnitSetCustomTypeAction:
      allOf:
        - $ref: '#/components/schemas/MyBusinessUnitUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            type:
              $ref: '#/components/schemas/TypeResourceIdentifier'
            fields:
              $ref: '#/components/schemas/FieldContainer'
    MyBusinessUnitSetDefaultBillingAddressAction:
      allOf:
        - $ref: '#/components/schemas/MyBusinessUnitUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            addressId:
              type: "string"
            addressKey:
              type: "string"
    MyBusinessUnitSetDefaultShippingAddressAction:
      allOf:
        - $ref: '#/components/schemas/MyBusinessUnitUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            addressId:
              type: "string"
            addressKey:
              type: "string"
    MyCartAddDiscountCodeAction:
      allOf:
        - $ref: '#/components/schemas/MyCartUpdateAction'
        - type: "object"
          required:
            - code
          properties:
            action:
              type: "string"
            code:
              type: "string"
    MyCartAddItemShippingAddressAction:
      allOf:
        - $ref: '#/components/schemas/MyCartUpdateAction'
        - type: "object"
          required:
            - address
          properties:
            action:
              type: "string"
            address:
              $ref: '#/components/schemas/BaseAddress'
    MyCartAddLineItemAction:
      allOf:
        - $ref: '#/components/schemas/MyCartUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            productId:
              type: "string"
            variantId:
              type: "integer"
              format: "int64"
            sku:
              type: "string"
            quantity:
              type: "integer"
              format: "int64"
            addedAt:
              type: "string"
              format: "datetime"
            distributionChannel:
              $ref: '#/components/schemas/ChannelResourceIdentifier'
            supplyChannel:
              $ref: '#/components/schemas/ChannelResourceIdentifier'
            shippingDetails:
              $ref: '#/components/schemas/ItemShippingDetailsDraft'
            custom:
              $ref: '#/components/schemas/CustomFieldsDraft'
    MyCartAddPaymentAction:
      allOf:
        - $ref: '#/components/schemas/MyCartUpdateAction'
        - type: "object"
          required:
            - payment
          properties:
            action:
              type: "string"
            payment:
              $ref: '#/components/schemas/PaymentResourceIdentifier'
    MyCartApplyDeltaToLineItemShippingDetailsTargetsAction:
      allOf:
        - $ref: '#/components/schemas/MyCartUpdateAction'
        - type: "object"
          required:
            - lineItemId
            - targetsDelta
          properties:
            action:
              type: "string"
            lineItemId:
              type: "string"
            targetsDelta:
              type: "array"
              items:
                $ref: '#/components/schemas/ItemShippingTarget'
    MyCartChangeLineItemQuantityAction:
      allOf:
        - $ref: '#/components/schemas/MyCartUpdateAction'
        - type: "object"
          required:
            - lineItemId
            - quantity
          properties:
            action:
              type: "string"
            lineItemId:
              type: "string"
            quantity:
              type: "integer"
              format: "int64"
            externalPrice:
              $ref: '#/components/schemas/Money'
            externalTotalPrice:
              $ref: '#/components/schemas/ExternalLineItemTotalPrice'
    MyCartChangeTaxModeAction:
      allOf:
        - $ref: '#/components/schemas/MyCartUpdateAction'
        - type: "object"
          required:
            - taxMode
          properties:
            action:
              type: "string"
            taxMode:
              $ref: '#/components/schemas/TaxMode'
    MyCartRecalculateAction:
      allOf:
        - $ref: '#/components/schemas/MyCartUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            updateProductData:
              type: "boolean"
    MyCartRemoveDiscountCodeAction:
      allOf:
        - $ref: '#/components/schemas/MyCartUpdateAction'
        - type: "object"
          required:
            - discountCode
          properties:
            action:
              type: "string"
            discountCode:
              $ref: '#/components/schemas/DiscountCodeReference'
    MyCartRemoveItemShippingAddressAction:
      allOf:
        - $ref: '#/components/schemas/MyCartUpdateAction'
        - type: "object"
          required:
            - addressKey
          properties:
            action:
              type: "string"
            addressKey:
              type: "string"
    MyCartRemoveLineItemAction:
      allOf:
        - $ref: '#/components/schemas/MyCartUpdateAction'
        - type: "object"
          required:
            - lineItemId
          properties:
            action:
              type: "string"
            lineItemId:
              type: "string"
            quantity:
              type: "integer"
              format: "int64"
            externalPrice:
              $ref: '#/components/schemas/Money'
            externalTotalPrice:
              $ref: '#/components/schemas/ExternalLineItemTotalPrice'
            shippingDetailsToRemove:
              $ref: '#/components/schemas/ItemShippingDetailsDraft'
    MyCartRemovePaymentAction:
      allOf:
        - $ref: '#/components/schemas/MyCartUpdateAction'
        - type: "object"
          required:
            - payment
          properties:
            action:
              type: "string"
            payment:
              $ref: '#/components/schemas/PaymentResourceIdentifier'
    MyCartSetBillingAddressAction:
      allOf:
        - $ref: '#/components/schemas/MyCartUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            address:
              $ref: '#/components/schemas/BaseAddress'
    MyCartSetBusinessUnitAction:
      allOf:
        - $ref: '#/components/schemas/MyCartUpdateAction'
        - type: "object"
          required:
            - businessUnit
          properties:
            action:
              type: "string"
            businessUnit:
              $ref: '#/components/schemas/BusinessUnitResourceIdentifier'
    MyCartSetCountryAction:
      allOf:
        - $ref: '#/components/schemas/MyCartUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            country:
              $ref: '#/components/schemas/CountryCode'
    MyCartSetCustomFieldAction:
      allOf:
        - $ref: '#/components/schemas/MyCartUpdateAction'
        - type: "object"
          required:
            - name
          properties:
            action:
              type: "string"
            name:
              type: "string"
            value:
              {}
    MyCartSetCustomTypeAction:
      allOf:
        - $ref: '#/components/schemas/MyCartUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            type:
              $ref: '#/components/schemas/TypeResourceIdentifier'
            fields:
              $ref: '#/components/schemas/FieldContainer'
    MyCartSetCustomerEmailAction:
      allOf:
        - $ref: '#/components/schemas/MyCartUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            email:
              type: "string"
    MyCartSetDeleteDaysAfterLastModificationAction:
      allOf:
        - $ref: '#/components/schemas/MyCartUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            deleteDaysAfterLastModification:
              type: "integer"
              format: "int32"
    MyCartSetLineItemCustomFieldAction:
      allOf:
        - $ref: '#/components/schemas/MyCartUpdateAction'
        - type: "object"
          required:
            - lineItemId
            - name
          properties:
            action:
              type: "string"
            lineItemId:
              type: "string"
            name:
              type: "string"
            value:
              {}
    MyCartSetLineItemCustomTypeAction:
      allOf:
        - $ref: '#/components/schemas/MyCartUpdateAction'
        - type: "object"
          required:
            - lineItemId
          properties:
            action:
              type: "string"
            lineItemId:
              type: "string"
            type:
              $ref: '#/components/schemas/TypeResourceIdentifier'
            fields:
              $ref: '#/components/schemas/FieldContainer'
    MyCartSetLineItemDistributionChannelAction:
      allOf:
        - $ref: '#/components/schemas/MyCartUpdateAction'
        - type: "object"
          required:
            - lineItemId
          properties:
            action:
              type: "string"
            lineItemId:
              type: "string"
            distributionChannel:
              $ref: '#/components/schemas/ChannelResourceIdentifier'
    MyCartSetLineItemShippingDetailsAction:
      allOf:
        - $ref: '#/components/schemas/MyCartUpdateAction'
        - type: "object"
          required:
            - lineItemId
          properties:
            action:
              type: "string"
            lineItemId:
              type: "string"
            shippingDetails:
              $ref: '#/components/schemas/ItemShippingDetailsDraft'
    MyCartSetLineItemSupplyChannelAction:
      allOf:
        - $ref: '#/components/schemas/MyCartUpdateAction'
        - type: "object"
          required:
            - lineItemId
          properties:
            action:
              type: "string"
            lineItemId:
              type: "string"
            supplyChannel:
              $ref: '#/components/schemas/ChannelResourceIdentifier'
    MyCartSetLocaleAction:
      allOf:
        - $ref: '#/components/schemas/MyCartUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            locale:
              $ref: '#/components/schemas/Locale'
    MyCartSetShippingAddressAction:
      allOf:
        - $ref: '#/components/schemas/MyCartUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            address:
              $ref: '#/components/schemas/BaseAddress'
    MyCartSetShippingMethodAction:
      allOf:
        - $ref: '#/components/schemas/MyCartUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            shippingMethod:
              $ref: '#/components/schemas/ShippingMethodResourceIdentifier'
            externalTaxRate:
              $ref: '#/components/schemas/ExternalTaxRateDraft'
    MyCartUpdateItemShippingAddressAction:
      allOf:
        - $ref: '#/components/schemas/MyCartUpdateAction'
        - type: "object"
          required:
            - address
          properties:
            action:
              type: "string"
            address:
              $ref: '#/components/schemas/BaseAddress'
    MyCustomerAddAddressAction:
      allOf:
        - $ref: '#/components/schemas/MyCustomerUpdateAction'
        - type: "object"
          required:
            - address
          properties:
            action:
              type: "string"
            address:
              $ref: '#/components/schemas/BaseAddress'
    MyCustomerAddBillingAddressIdAction:
      allOf:
        - $ref: '#/components/schemas/MyCustomerUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            addressId:
              type: "string"
            addressKey:
              type: "string"
    MyCustomerAddShippingAddressIdAction:
      allOf:
        - $ref: '#/components/schemas/MyCustomerUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            addressId:
              type: "string"
            addressKey:
              type: "string"
    MyCustomerChangeAddressAction:
      allOf:
        - $ref: '#/components/schemas/MyCustomerUpdateAction'
        - type: "object"
          required:
            - address
          properties:
            action:
              type: "string"
            addressId:
              type: "string"
            addressKey:
              type: "string"
            address:
              $ref: '#/components/schemas/BaseAddress'
    MyCustomerChangeEmailAction:
      allOf:
        - $ref: '#/components/schemas/MyCustomerUpdateAction'
        - type: "object"
          required:
            - email
          properties:
            action:
              type: "string"
            email:
              type: "string"
    MyCustomerRemoveAddressAction:
      allOf:
        - $ref: '#/components/schemas/MyCustomerUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            addressId:
              type: "string"
            addressKey:
              type: "string"
    MyCustomerRemoveBillingAddressIdAction:
      allOf:
        - $ref: '#/components/schemas/MyCustomerUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            addressId:
              type: "string"
            addressKey:
              type: "string"
    MyCustomerRemoveShippingAddressIdAction:
      allOf:
        - $ref: '#/components/schemas/MyCustomerUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            addressId:
              type: "string"
            addressKey:
              type: "string"
    MyCustomerSetCompanyNameAction:
      allOf:
        - $ref: '#/components/schemas/MyCustomerUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            companyName:
              type: "string"
    MyCustomerSetCustomFieldAction:
      allOf:
        - $ref: '#/components/schemas/MyCustomerUpdateAction'
        - type: "object"
          required:
            - name
          properties:
            action:
              type: "string"
            name:
              type: "string"
            value:
              {}
    MyCustomerSetCustomTypeAction:
      allOf:
        - $ref: '#/components/schemas/MyCustomerUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            type:
              $ref: '#/components/schemas/TypeResourceIdentifier'
            fields:
              $ref: '#/components/schemas/FieldContainer'
    MyCustomerSetDateOfBirthAction:
      allOf:
        - $ref: '#/components/schemas/MyCustomerUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            dateOfBirth:
              type: "string"
              format: "date-only"
    MyCustomerSetDefaultBillingAddressAction:
      allOf:
        - $ref: '#/components/schemas/MyCustomerUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            addressId:
              type: "string"
            addressKey:
              type: "string"
    MyCustomerSetDefaultShippingAddressAction:
      allOf:
        - $ref: '#/components/schemas/MyCustomerUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            addressId:
              type: "string"
            addressKey:
              type: "string"
    MyCustomerSetFirstNameAction:
      allOf:
        - $ref: '#/components/schemas/MyCustomerUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            firstName:
              type: "string"
    MyCustomerSetLastNameAction:
      allOf:
        - $ref: '#/components/schemas/MyCustomerUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            lastName:
              type: "string"
    MyCustomerSetLocaleAction:
      allOf:
        - $ref: '#/components/schemas/MyCustomerUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            locale:
              $ref: '#/components/schemas/Locale'
    MyCustomerSetMiddleNameAction:
      allOf:
        - $ref: '#/components/schemas/MyCustomerUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            middleName:
              type: "string"
    MyCustomerSetSalutationAction:
      allOf:
        - $ref: '#/components/schemas/MyCustomerUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            salutation:
              type: "string"
    MyCustomerSetTitleAction:
      allOf:
        - $ref: '#/components/schemas/MyCustomerUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            title:
              type: "string"
    MyCustomerSetVatIdAction:
      allOf:
        - $ref: '#/components/schemas/MyCustomerUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            vatId:
              type: "string"
    MyPaymentAddTransactionAction:
      allOf:
        - $ref: '#/components/schemas/MyPaymentUpdateAction'
        - type: "object"
          required:
            - transaction
          properties:
            action:
              type: "string"
            transaction:
              $ref: '#/components/schemas/TransactionDraft'
    MyPaymentChangeAmountPlannedAction:
      allOf:
        - $ref: '#/components/schemas/MyPaymentUpdateAction'
        - type: "object"
          required:
            - amount
          properties:
            action:
              type: "string"
            amount:
              $ref: '#/components/schemas/Money'
    MyPaymentSetCustomFieldAction:
      allOf:
        - $ref: '#/components/schemas/MyPaymentUpdateAction'
        - type: "object"
          required:
            - name
          properties:
            action:
              type: "string"
            name:
              type: "string"
            value:
              {}
    MyPaymentSetMethodInfoInterfaceAction:
      allOf:
        - $ref: '#/components/schemas/MyPaymentUpdateAction'
        - type: "object"
          required:
            - interface
          properties:
            action:
              type: "string"
            interface:
              type: "string"
    MyPaymentSetMethodInfoMethodAction:
      allOf:
        - $ref: '#/components/schemas/MyPaymentUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            method:
              type: "string"
    MyPaymentSetMethodInfoNameAction:
      allOf:
        - $ref: '#/components/schemas/MyPaymentUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            name:
              $ref: '#/components/schemas/LocalizedString'
    MyPaymentSetTransactionCustomFieldAction:
      allOf:
        - $ref: '#/components/schemas/MyPaymentUpdateAction'
        - type: "object"
          required:
            - name
          properties:
            action:
              type: "string"
            name:
              type: "string"
            value:
              {}
    MyQuoteChangeMyQuoteStateAction:
      allOf:
        - $ref: '#/components/schemas/MyQuoteUpdateAction'
        - type: "object"
          required:
            - quoteState
          properties:
            action:
              type: "string"
            quoteState:
              $ref: '#/components/schemas/MyQuoteState'
    MyQuoteRequestCancelAction:
      allOf:
        - $ref: '#/components/schemas/MyQuoteRequestUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
    MyShoppingListAddLineItemAction:
      allOf:
        - $ref: '#/components/schemas/MyShoppingListUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            sku:
              type: "string"
            productId:
              type: "string"
            variantId:
              type: "integer"
              format: "int64"
            quantity:
              type: "integer"
              format: "int64"
            addedAt:
              type: "string"
              format: "datetime"
            custom:
              $ref: '#/components/schemas/CustomFieldsDraft'
    MyShoppingListAddTextLineItemAction:
      allOf:
        - $ref: '#/components/schemas/MyShoppingListUpdateAction'
        - type: "object"
          required:
            - name
          properties:
            action:
              type: "string"
            name:
              $ref: '#/components/schemas/LocalizedString'
            description:
              $ref: '#/components/schemas/LocalizedString'
            quantity:
              type: "integer"
              format: "int64"
            addedAt:
              type: "string"
              format: "datetime"
            custom:
              $ref: '#/components/schemas/CustomFieldsDraft'
    MyShoppingListChangeLineItemQuantityAction:
      allOf:
        - $ref: '#/components/schemas/MyShoppingListUpdateAction'
        - type: "object"
          required:
            - lineItemId
            - quantity
          properties:
            action:
              type: "string"
            lineItemId:
              type: "string"
            quantity:
              type: "integer"
              format: "int64"
    MyShoppingListChangeLineItemsOrderAction:
      allOf:
        - $ref: '#/components/schemas/MyShoppingListUpdateAction'
        - type: "object"
          required:
            - lineItemOrder
          properties:
            action:
              type: "string"
            lineItemOrder:
              type: "array"
              items:
                type: "string"
    MyShoppingListChangeNameAction:
      allOf:
        - $ref: '#/components/schemas/MyShoppingListUpdateAction'
        - type: "object"
          required:
            - name
          properties:
            action:
              type: "string"
            name:
              $ref: '#/components/schemas/LocalizedString'
    MyShoppingListChangeTextLineItemNameAction:
      allOf:
        - $ref: '#/components/schemas/MyShoppingListUpdateAction'
        - type: "object"
          required:
            - name
            - textLineItemId
          properties:
            action:
              type: "string"
            textLineItemId:
              type: "string"
            name:
              $ref: '#/components/schemas/LocalizedString'
    MyShoppingListChangeTextLineItemQuantityAction:
      allOf:
        - $ref: '#/components/schemas/MyShoppingListUpdateAction'
        - type: "object"
          required:
            - quantity
            - textLineItemId
          properties:
            action:
              type: "string"
            textLineItemId:
              type: "string"
            quantity:
              type: "integer"
              format: "int64"
    MyShoppingListChangeTextLineItemsOrderAction:
      allOf:
        - $ref: '#/components/schemas/MyShoppingListUpdateAction'
        - type: "object"
          required:
            - textLineItemOrder
          properties:
            action:
              type: "string"
            textLineItemOrder:
              type: "array"
              items:
                type: "string"
    MyShoppingListRemoveLineItemAction:
      allOf:
        - $ref: '#/components/schemas/MyShoppingListUpdateAction'
        - type: "object"
          required:
            - lineItemId
          properties:
            action:
              type: "string"
            lineItemId:
              type: "string"
            quantity:
              type: "integer"
              format: "int64"
    MyShoppingListRemoveTextLineItemAction:
      allOf:
        - $ref: '#/components/schemas/MyShoppingListUpdateAction'
        - type: "object"
          required:
            - textLineItemId
          properties:
            action:
              type: "string"
            textLineItemId:
              type: "string"
            quantity:
              type: "integer"
              format: "int64"
    MyShoppingListSetCustomFieldAction:
      allOf:
        - $ref: '#/components/schemas/MyShoppingListUpdateAction'
        - type: "object"
          required:
            - name
          properties:
            action:
              type: "string"
            name:
              type: "string"
            value:
              {}
    MyShoppingListSetCustomTypeAction:
      allOf:
        - $ref: '#/components/schemas/MyShoppingListUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            type:
              $ref: '#/components/schemas/TypeResourceIdentifier'
            fields:
              $ref: '#/components/schemas/FieldContainer'
    MyShoppingListSetDeleteDaysAfterLastModificationAction:
      allOf:
        - $ref: '#/components/schemas/MyShoppingListUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            deleteDaysAfterLastModification:
              type: "integer"
              format: "int64"
    MyShoppingListSetDescriptionAction:
      allOf:
        - $ref: '#/components/schemas/MyShoppingListUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            description:
              $ref: '#/components/schemas/LocalizedString'
    MyShoppingListSetLineItemCustomFieldAction:
      allOf:
        - $ref: '#/components/schemas/MyShoppingListUpdateAction'
        - type: "object"
          required:
            - lineItemId
            - name
          properties:
            action:
              type: "string"
            lineItemId:
              type: "string"
            name:
              type: "string"
            value:
              {}
    MyShoppingListSetLineItemCustomTypeAction:
      allOf:
        - $ref: '#/components/schemas/MyShoppingListUpdateAction'
        - type: "object"
          required:
            - lineItemId
          properties:
            action:
              type: "string"
            lineItemId:
              type: "string"
            type:
              $ref: '#/components/schemas/TypeResourceIdentifier'
            fields:
              $ref: '#/components/schemas/FieldContainer'
    MyShoppingListSetTextLineItemCustomFieldAction:
      allOf:
        - $ref: '#/components/schemas/MyShoppingListUpdateAction'
        - type: "object"
          required:
            - name
            - textLineItemId
          properties:
            action:
              type: "string"
            textLineItemId:
              type: "string"
            name:
              type: "string"
            value:
              {}
    MyShoppingListSetTextLineItemCustomTypeAction:
      allOf:
        - $ref: '#/components/schemas/MyShoppingListUpdateAction'
        - type: "object"
          required:
            - textLineItemId
          properties:
            action:
              type: "string"
            textLineItemId:
              type: "string"
            type:
              $ref: '#/components/schemas/TypeResourceIdentifier'
            fields:
              $ref: '#/components/schemas/FieldContainer'
    MyShoppingListSetTextLineItemDescriptionAction:
      allOf:
        - $ref: '#/components/schemas/MyShoppingListUpdateAction'
        - type: "object"
          required:
            - textLineItemId
          properties:
            action:
              type: "string"
            textLineItemId:
              type: "string"
            description:
              $ref: '#/components/schemas/LocalizedString'
    AssociateRoleBuyerAssignableChangedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - buyerAssignable
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            buyerAssignable:
              type: "boolean"
    AssociateRoleCreatedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - associateRole
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            associateRole:
              $ref: '#/components/schemas/AssociateRole'
    AssociateRoleDeletedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
    AssociateRoleNameChangedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - name
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            name:
              type: "string"
    AssociateRolePermissionAddedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - permission
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            permission:
              $ref: '#/components/schemas/Permission'
    AssociateRolePermissionRemovedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - permission
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            permission:
              $ref: '#/components/schemas/Permission'
    AssociateRolePermissionsSetMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - permissions
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            permissions:
              type: "array"
              items:
                $ref: '#/components/schemas/Permission'
    BusinessUnitAddressAddedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - address
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            address:
              $ref: '#/components/schemas/Address'
    BusinessUnitAddressChangedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - address
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            address:
              $ref: '#/components/schemas/Address'
    BusinessUnitAddressRemovedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - address
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            address:
              $ref: '#/components/schemas/Address'
    BusinessUnitAssociateAddedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - associate
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            associate:
              $ref: '#/components/schemas/Associate'
    BusinessUnitAssociateChangedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - associate
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            associate:
              $ref: '#/components/schemas/Associate'
    BusinessUnitAssociateModeChangedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - associateMode
            - oldAssociateMode
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            associateMode:
              $ref: '#/components/schemas/BusinessUnitAssociateMode'
            oldAssociateMode:
              $ref: '#/components/schemas/BusinessUnitAssociateMode'
    BusinessUnitAssociateRemovedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - associate
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            associate:
              $ref: '#/components/schemas/Associate'
    BusinessUnitAssociatesSetMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - associates
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            associates:
              type: "array"
              items:
                $ref: '#/components/schemas/Associate'
    BusinessUnitBillingAddressAddedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - address
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            address:
              $ref: '#/components/schemas/Address'
    BusinessUnitBillingAddressRemovedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - address
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            address:
              $ref: '#/components/schemas/Address'
    BusinessUnitContactEmailSetMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            contactEmail:
              type: "string"
    BusinessUnitCreatedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - businessUnit
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            businessUnit:
              $ref: '#/components/schemas/BusinessUnit'
    BusinessUnitDefaultBillingAddressSetMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            address:
              $ref: '#/components/schemas/Address'
    BusinessUnitDefaultShippingAddressSetMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            address:
              $ref: '#/components/schemas/Address'
    BusinessUnitDeletedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
    BusinessUnitNameChangedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - name
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            name:
              type: "string"
    BusinessUnitParentUnitChangedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            oldParentUnit:
              $ref: '#/components/schemas/BusinessUnitKeyReference'
            newParentUnit:
              $ref: '#/components/schemas/BusinessUnitKeyReference'
    BusinessUnitShippingAddressAddedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - address
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            address:
              $ref: '#/components/schemas/Address'
    BusinessUnitShippingAddressRemovedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - address
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            address:
              $ref: '#/components/schemas/Address'
    BusinessUnitStatusChangedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - active
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            active:
              $ref: '#/components/schemas/BusinessUnitStatus'
    BusinessUnitStoreAddedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - store
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            store:
              $ref: '#/components/schemas/StoreKeyReference'
    BusinessUnitStoreModeChangedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - oldStoreMode
            - oldStores
            - storeMode
            - stores
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            stores:
              type: "array"
              items:
                $ref: '#/components/schemas/StoreKeyReference'
            storeMode:
              $ref: '#/components/schemas/BusinessUnitStoreMode'
            oldStores:
              type: "array"
              items:
                $ref: '#/components/schemas/StoreKeyReference'
            oldStoreMode:
              $ref: '#/components/schemas/BusinessUnitStoreMode'
    BusinessUnitStoreRemovedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - store
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            store:
              $ref: '#/components/schemas/StoreKeyReference'
    BusinessUnitStoresSetMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - stores
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            stores:
              type: "array"
              items:
                $ref: '#/components/schemas/StoreKeyReference'
    CategoryCreatedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - category
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            category:
              $ref: '#/components/schemas/Category'
    CategorySlugChangedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - slug
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            slug:
              $ref: '#/components/schemas/LocalizedString'
            oldSlug:
              $ref: '#/components/schemas/LocalizedString'
    ContainerAndKey:
      type: "object"
      required:
        - container
        - key
      properties:
        key:
          type: "string"
        container:
          type: "string"
    CustomLineItemStateTransitionMessage:
      allOf:
        - $ref: '#/components/schemas/OrderMessage'
        - type: "object"
          required:
            - customLineItemId
            - fromState
            - quantity
            - toState
            - transitionDate
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            customLineItemId:
              type: "string"
            transitionDate:
              type: "string"
              format: "datetime"
            quantity:
              type: "integer"
              format: "int64"
            fromState:
              $ref: '#/components/schemas/StateReference'
            toState:
              $ref: '#/components/schemas/StateReference'
    CustomerAddressAddedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - address
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            address:
              $ref: '#/components/schemas/Address'
    CustomerAddressChangedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - address
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            address:
              $ref: '#/components/schemas/Address'
    CustomerAddressRemovedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - address
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            address:
              $ref: '#/components/schemas/Address'
    CustomerCompanyNameSetMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            companyName:
              type: "string"
    CustomerCreatedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - customer
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            customer:
              $ref: '#/components/schemas/Customer'
    CustomerDateOfBirthSetMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            dateOfBirth:
              type: "string"
              format: "date-only"
    CustomerDeletedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
    CustomerEmailChangedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - email
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            email:
              type: "string"
    CustomerEmailVerifiedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
    CustomerFirstNameSetMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            firstName:
              type: "string"
    CustomerGroupSetMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            customerGroup:
              $ref: '#/components/schemas/CustomerGroupReference'
    CustomerLastNameSetMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            lastName:
              type: "string"
    CustomerPasswordUpdatedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - reset
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            reset:
              type: "boolean"
    CustomerTitleSetMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            title:
              type: "string"
    DeliveryAddedMessage:
      allOf:
        - $ref: '#/components/schemas/OrderMessage'
        - type: "object"
          required:
            - delivery
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            delivery:
              $ref: '#/components/schemas/Delivery'
            shippingKey:
              type: "string"
    DeliveryAddressSetMessage:
      allOf:
        - $ref: '#/components/schemas/OrderMessage'
        - type: "object"
          required:
            - deliveryId
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            deliveryId:
              type: "string"
            address:
              $ref: '#/components/schemas/Address'
            oldAddress:
              $ref: '#/components/schemas/Address'
            shippingKey:
              type: "string"
    DeliveryItemsUpdatedMessage:
      allOf:
        - $ref: '#/components/schemas/OrderMessage'
        - type: "object"
          required:
            - deliveryId
            - items
            - oldItems
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            deliveryId:
              type: "string"
            items:
              type: "array"
              items:
                $ref: '#/components/schemas/DeliveryItem'
            oldItems:
              type: "array"
              items:
                $ref: '#/components/schemas/DeliveryItem'
            shippingKey:
              type: "string"
    DeliveryRemovedMessage:
      allOf:
        - $ref: '#/components/schemas/OrderMessage'
        - type: "object"
          required:
            - delivery
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            delivery:
              $ref: '#/components/schemas/Delivery'
            shippingKey:
              type: "string"
    InventoryEntryCreatedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - inventoryEntry
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            inventoryEntry:
              $ref: '#/components/schemas/InventoryEntry'
    InventoryEntryDeletedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - sku
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            sku:
              type: "string"
            supplyChannel:
              $ref: '#/components/schemas/ChannelReference'
    InventoryEntryQuantitySetMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - newAvailableQuantity
            - newQuantityOnStock
            - oldAvailableQuantity
            - oldQuantityOnStock
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            oldQuantityOnStock:
              type: "integer"
              format: "int64"
            newQuantityOnStock:
              type: "integer"
              format: "int64"
            oldAvailableQuantity:
              type: "integer"
              format: "int64"
            newAvailableQuantity:
              type: "integer"
              format: "int64"
            supplyChannel:
              $ref: '#/components/schemas/ChannelReference'
    LineItemStateTransitionMessage:
      allOf:
        - $ref: '#/components/schemas/OrderMessage'
        - type: "object"
          required:
            - fromState
            - lineItemId
            - quantity
            - toState
            - transitionDate
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            lineItemId:
              type: "string"
            transitionDate:
              type: "string"
              format: "datetime"
            quantity:
              type: "integer"
              format: "int64"
            fromState:
              $ref: '#/components/schemas/StateReference'
            toState:
              $ref: '#/components/schemas/StateReference'
    Message:
      allOf:
        - $ref: '#/components/schemas/BaseResource'
        - type: "object"
          discriminator:
            propertyName: type
            mapping:
              AssociateRoleBuyerAssignableChanged: '#/components/schemas/AssociateRoleBuyerAssignableChangedMessage'
              AssociateRoleCreated: '#/components/schemas/AssociateRoleCreatedMessage'
              AssociateRoleDeleted: '#/components/schemas/AssociateRoleDeletedMessage'
              AssociateRoleNameSet: '#/components/schemas/AssociateRoleNameChangedMessage'
              AssociateRolePermissionAdded: '#/components/schemas/AssociateRolePermissionAddedMessage'
              AssociateRolePermissionRemoved: '#/components/schemas/AssociateRolePermissionRemovedMessage'
              AssociateRolePermissionsSet: '#/components/schemas/AssociateRolePermissionsSetMessage'
              BusinessUnitAddressAdded: '#/components/schemas/BusinessUnitAddressAddedMessage'
              BusinessUnitAddressChanged: '#/components/schemas/BusinessUnitAddressChangedMessage'
              BusinessUnitAddressRemoved: '#/components/schemas/BusinessUnitAddressRemovedMessage'
              BusinessUnitAssociateAdded: '#/components/schemas/BusinessUnitAssociateAddedMessage'
              BusinessUnitAssociateChanged: '#/components/schemas/BusinessUnitAssociateChangedMessage'
              BusinessUnitAssociateModeChanged: '#/components/schemas/BusinessUnitAssociateModeChangedMessage'
              BusinessUnitAssociateRemoved: '#/components/schemas/BusinessUnitAssociateRemovedMessage'
              BusinessUnitAssociatesSet: '#/components/schemas/BusinessUnitAssociatesSetMessage'
              BusinessUnitBillingAddressAdded: '#/components/schemas/BusinessUnitBillingAddressAddedMessage'
              BusinessUnitBillingAddressRemoved: '#/components/schemas/BusinessUnitBillingAddressRemovedMessage'
              BusinessUnitContactEmailSet: '#/components/schemas/BusinessUnitContactEmailSetMessage'
              BusinessUnitCreated: '#/components/schemas/BusinessUnitCreatedMessage'
              BusinessUnitDefaultBillingAddressSet: '#/components/schemas/BusinessUnitDefaultBillingAddressSetMessage'
              BusinessUnitDefaultShippingAddressSet: '#/components/schemas/BusinessUnitDefaultShippingAddressSetMessage'
              BusinessUnitDeleted: '#/components/schemas/BusinessUnitDeletedMessage'
              BusinessUnitNameChanged: '#/components/schemas/BusinessUnitNameChangedMessage'
              BusinessUnitParentUnitChanged: '#/components/schemas/BusinessUnitParentUnitChangedMessage'
              BusinessUnitShippingAddressAdded: '#/components/schemas/BusinessUnitShippingAddressAddedMessage'
              BusinessUnitShippingAddressRemoved: '#/components/schemas/BusinessUnitShippingAddressRemovedMessage'
              BusinessUnitStatusChanged: '#/components/schemas/BusinessUnitStatusChangedMessage'
              BusinessUnitStoreAdded: '#/components/schemas/BusinessUnitStoreAddedMessage'
              BusinessUnitStoreModeChanged: '#/components/schemas/BusinessUnitStoreModeChangedMessage'
              BusinessUnitStoreRemoved: '#/components/schemas/BusinessUnitStoreRemovedMessage'
              BusinessUnitStoresSet: '#/components/schemas/BusinessUnitStoresSetMessage'
              CategoryCreated: '#/components/schemas/CategoryCreatedMessage'
              CategorySlugChanged: '#/components/schemas/CategorySlugChangedMessage'
              CustomerAddressAdded: '#/components/schemas/CustomerAddressAddedMessage'
              CustomerAddressChanged: '#/components/schemas/CustomerAddressChangedMessage'
              CustomerAddressRemoved: '#/components/schemas/CustomerAddressRemovedMessage'
              CustomerCompanyNameSet: '#/components/schemas/CustomerCompanyNameSetMessage'
              CustomerCreated: '#/components/schemas/CustomerCreatedMessage'
              CustomerDateOfBirthSet: '#/components/schemas/CustomerDateOfBirthSetMessage'
              CustomerDeleted: '#/components/schemas/CustomerDeletedMessage'
              CustomerEmailChanged: '#/components/schemas/CustomerEmailChangedMessage'
              CustomerEmailVerified: '#/components/schemas/CustomerEmailVerifiedMessage'
              CustomerFirstNameSet: '#/components/schemas/CustomerFirstNameSetMessage'
              CustomerGroupSet: '#/components/schemas/CustomerGroupSetMessage'
              CustomerLastNameSet: '#/components/schemas/CustomerLastNameSetMessage'
              CustomerPasswordUpdated: '#/components/schemas/CustomerPasswordUpdatedMessage'
              CustomerTitleSet: '#/components/schemas/CustomerTitleSetMessage'
              InventoryEntryCreated: '#/components/schemas/InventoryEntryCreatedMessage'
              InventoryEntryDeleted: '#/components/schemas/InventoryEntryDeletedMessage'
              InventoryEntryQuantitySet: '#/components/schemas/InventoryEntryQuantitySetMessage'
              OrderPaymentAdded: '#/components/schemas/OrderPaymentAddedMessage'
              PaymentCreated: '#/components/schemas/PaymentCreatedMessage'
              PaymentInteractionAdded: '#/components/schemas/PaymentInteractionAddedMessage'
              PaymentStatusInterfaceCodeSet: '#/components/schemas/PaymentStatusInterfaceCodeSetMessage'
              PaymentStatusStateTransition: '#/components/schemas/PaymentStatusStateTransitionMessage'
              PaymentTransactionAdded: '#/components/schemas/PaymentTransactionAddedMessage'
              PaymentTransactionStateChanged: '#/components/schemas/PaymentTransactionStateChangedMessage'
              ProductAddedToCategory: '#/components/schemas/ProductAddedToCategoryMessage'
              ProductCreated: '#/components/schemas/ProductCreatedMessage'
              ProductDeleted: '#/components/schemas/ProductDeletedMessage'
              ProductImageAdded: '#/components/schemas/ProductImageAddedMessage'
              ProductPriceAdded: '#/components/schemas/ProductPriceAddedMessage'
              ProductPriceChanged: '#/components/schemas/ProductPriceChangedMessage'
              ProductPriceDiscountsSet: '#/components/schemas/ProductPriceDiscountsSetMessage'
              ProductPriceExternalDiscountSet: '#/components/schemas/ProductPriceExternalDiscountSetMessage'
              ProductPriceKeySet: '#/components/schemas/ProductPriceKeySetMessage'
              ProductPriceModeSet: '#/components/schemas/ProductPriceModeSetMessage'
              ProductPriceRemoved: '#/components/schemas/ProductPriceRemovedMessage'
              ProductPricesSet: '#/components/schemas/ProductPricesSetMessage'
              ProductPublished: '#/components/schemas/ProductPublishedMessage'
              ProductRemovedFromCategory: '#/components/schemas/ProductRemovedFromCategoryMessage'
              ProductRevertedStagedChanges: '#/components/schemas/ProductRevertedStagedChangesMessage'
              ProductSelectionCreated: '#/components/schemas/ProductSelectionCreatedMessage'
              ProductSelectionDeleted: '#/components/schemas/ProductSelectionDeletedMessage'
              ProductSelectionProductAdded: '#/components/schemas/ProductSelectionProductAddedMessage'
              ProductSelectionProductExcluded: '#/components/schemas/ProductSelectionProductExcludedMessage'
              ProductSelectionProductRemoved: '#/components/schemas/ProductSelectionProductRemovedMessage'
              ProductSelectionVariantExclusionChanged: '#/components/schemas/ProductSelectionVariantExclusionChangedMessage'
              ProductSelectionVariantSelectionChanged: '#/components/schemas/ProductSelectionVariantSelectionChangedMessage'
              ProductSlugChanged: '#/components/schemas/ProductSlugChangedMessage'
              ProductStateTransition: '#/components/schemas/ProductStateTransitionMessage'
              ProductUnpublished: '#/components/schemas/ProductUnpublishedMessage'
              ProductVariantAdded: '#/components/schemas/ProductVariantAddedMessage'
              ProductVariantDeleted: '#/components/schemas/ProductVariantDeletedMessage'
              QuoteCreated: '#/components/schemas/QuoteCreatedMessage'
              QuoteDeleted: '#/components/schemas/QuoteDeletedMessage'
              QuoteRequestCreated: '#/components/schemas/QuoteRequestCreatedMessage'
              QuoteRequestDeleted: '#/components/schemas/QuoteRequestDeletedMessage'
              QuoteRequestStateChanged: '#/components/schemas/QuoteRequestStateChangedMessage'
              QuoteRequestStateTransition: '#/components/schemas/QuoteRequestStateTransitionMessage'
              QuoteStateChanged: '#/components/schemas/QuoteStateChangedMessage'
              QuoteStateTransition: '#/components/schemas/QuoteStateTransitionMessage'
              ReviewCreated: '#/components/schemas/ReviewCreatedMessage'
              ReviewRatingSet: '#/components/schemas/ReviewRatingSetMessage'
              ReviewStateTransition: '#/components/schemas/ReviewStateTransitionMessage'
              StagedQuoteCreated: '#/components/schemas/StagedQuoteCreatedMessage'
              StagedQuoteDeleted: '#/components/schemas/StagedQuoteDeletedMessage'
              StagedQuoteSellerCommentSet: '#/components/schemas/StagedQuoteSellerCommentSetMessage'
              StagedQuoteStateChanged: '#/components/schemas/StagedQuoteStateChangedMessage'
              StagedQuoteStateTransition: '#/components/schemas/StagedQuoteStateTransitionMessage'
              StagedQuoteValidToSet: '#/components/schemas/StagedQuoteValidToSetMessage'
              StandalonePriceActiveChanged: '#/components/schemas/StandalonePriceActiveChangedMessage'
              StandalonePriceCreated: '#/components/schemas/StandalonePriceCreatedMessage'
              StandalonePriceDeleted: '#/components/schemas/StandalonePriceDeletedMessage'
              StandalonePriceDiscountSet: '#/components/schemas/StandalonePriceDiscountSetMessage'
              StandalonePriceExternalDiscountSet: '#/components/schemas/StandalonePriceExternalDiscountSetMessage'
              StandalonePriceKeySet: '#/components/schemas/StandalonePriceKeySetMessage'
              StandalonePriceStagedChangesApplied: '#/components/schemas/StandalonePriceStagedChangesAppliedMessage'
              StandalonePriceValueChanged: '#/components/schemas/StandalonePriceValueChangedMessage'
              StoreCountriesChanged: '#/components/schemas/StoreCountriesChangedMessage'
              StoreCreated: '#/components/schemas/StoreCreatedMessage'
              StoreDeleted: '#/components/schemas/StoreDeletedMessage'
              StoreDistributionChannelsChanged: '#/components/schemas/StoreDistributionChannelsChangedMessage'
              StoreLanguagesChanged: '#/components/schemas/StoreLanguagesChangedMessage'
              StoreNameSet: '#/components/schemas/StoreNameSetMessage'
              StoreProductSelectionsChanged: '#/components/schemas/StoreProductSelectionsChangedMessage'
              StoreSupplyChannelsChanged: '#/components/schemas/StoreSupplyChannelsChangedMessage'
          required:
            - createdAt
            - id
            - lastModifiedAt
            - resource
            - resourceVersion
            - sequenceNumber
            - type
            - version
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
    MessagePagedQueryResponse:
      type: "object"
      required:
        - count
        - limit
        - offset
        - results
      properties:
        limit:
          type: "integer"
          format: "int64"
        count:
          type: "integer"
          format: "int64"
        total:
          type: "integer"
          format: "int64"
        offset:
          type: "integer"
          format: "int64"
        results:
          type: "array"
          items:
            $ref: '#/components/schemas/Message'
    MessagesConfiguration:
      type: "object"
      required:
        - enabled
      properties:
        enabled:
          type: "boolean"
        deleteDaysAfterCreation:
          type: "integer"
          format: "int32"
    MessagesConfigurationDraft:
      type: "object"
      required:
        - deleteDaysAfterCreation
        - enabled
      properties:
        enabled:
          type: "boolean"
        deleteDaysAfterCreation:
          type: "integer"
          format: "int32"
    OrderBillingAddressSetMessage:
      allOf:
        - $ref: '#/components/schemas/OrderMessage'
        - type: "object"
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            address:
              $ref: '#/components/schemas/Address'
            oldAddress:
              $ref: '#/components/schemas/Address'
    OrderCreatedMessage:
      allOf:
        - $ref: '#/components/schemas/OrderMessage'
        - type: "object"
          required:
            - order
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            order:
              $ref: '#/components/schemas/Order'
    OrderCustomLineItemAddedMessage:
      allOf:
        - $ref: '#/components/schemas/OrderMessage'
        - type: "object"
          required:
            - customLineItem
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            customLineItem:
              $ref: '#/components/schemas/CustomLineItem'
    OrderCustomLineItemDiscountSetMessage:
      allOf:
        - $ref: '#/components/schemas/OrderMessage'
        - type: "object"
          required:
            - customLineItemId
            - discountedPricePerQuantity
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            customLineItemId:
              type: "string"
            discountedPricePerQuantity:
              type: "array"
              items:
                $ref: '#/components/schemas/DiscountedLineItemPriceForQuantity'
            taxedPrice:
              $ref: '#/components/schemas/TaxedItemPrice'
    OrderCustomLineItemQuantityChangedMessage:
      allOf:
        - $ref: '#/components/schemas/OrderMessage'
        - type: "object"
          required:
            - customLineItemId
            - oldQuantity
            - quantity
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            customLineItemId:
              type: "string"
            quantity:
              type: "integer"
              format: "int64"
            oldQuantity:
              type: "integer"
              format: "int64"
    OrderCustomLineItemRemovedMessage:
      allOf:
        - $ref: '#/components/schemas/OrderMessage'
        - type: "object"
          required:
            - customLineItem
            - customLineItemId
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            customLineItemId:
              type: "string"
            customLineItem:
              $ref: '#/components/schemas/CustomLineItem'
    OrderCustomerEmailSetMessage:
      allOf:
        - $ref: '#/components/schemas/OrderMessage'
        - type: "object"
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            email:
              type: "string"
            oldEmail:
              type: "string"
    OrderCustomerGroupSetMessage:
      allOf:
        - $ref: '#/components/schemas/OrderMessage'
        - type: "object"
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            customerGroup:
              $ref: '#/components/schemas/CustomerGroupReference'
            oldCustomerGroup:
              $ref: '#/components/schemas/CustomerGroupReference'
    OrderCustomerSetMessage:
      allOf:
        - $ref: '#/components/schemas/OrderMessage'
        - type: "object"
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            customer:
              $ref: '#/components/schemas/CustomerReference'
            customerGroup:
              $ref: '#/components/schemas/CustomerGroupReference'
            oldCustomer:
              $ref: '#/components/schemas/CustomerReference'
            oldCustomerGroup:
              $ref: '#/components/schemas/CustomerGroupReference'
    OrderDeletedMessage:
      allOf:
        - $ref: '#/components/schemas/OrderMessage'
        - type: "object"
          required:
            - order
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            order:
              $ref: '#/components/schemas/Order'
    OrderDiscountCodeAddedMessage:
      allOf:
        - $ref: '#/components/schemas/OrderMessage'
        - type: "object"
          required:
            - discountCode
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            discountCode:
              $ref: '#/components/schemas/DiscountCodeReference'
    OrderDiscountCodeRemovedMessage:
      allOf:
        - $ref: '#/components/schemas/OrderMessage'
        - type: "object"
          required:
            - discountCode
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            discountCode:
              $ref: '#/components/schemas/DiscountCodeReference'
    OrderDiscountCodeStateSetMessage:
      allOf:
        - $ref: '#/components/schemas/OrderMessage'
        - type: "object"
          required:
            - discountCode
            - state
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            discountCode:
              $ref: '#/components/schemas/DiscountCodeReference'
            state:
              $ref: '#/components/schemas/DiscountCodeState'
            oldState:
              $ref: '#/components/schemas/DiscountCodeState'
    OrderEditAppliedMessage:
      allOf:
        - $ref: '#/components/schemas/OrderMessage'
        - type: "object"
          required:
            - edit
            - result
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            edit:
              $ref: '#/components/schemas/OrderEdit'
            result:
              $ref: '#/components/schemas/OrderEditApplied'
    OrderImportedMessage:
      allOf:
        - $ref: '#/components/schemas/OrderMessage'
        - type: "object"
          required:
            - order
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            order:
              $ref: '#/components/schemas/Order'
    OrderLineItemAddedMessage:
      allOf:
        - $ref: '#/components/schemas/OrderMessage'
        - type: "object"
          required:
            - addedQuantity
            - lineItem
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            lineItem:
              $ref: '#/components/schemas/LineItem'
            addedQuantity:
              type: "integer"
              format: "int64"
    OrderLineItemDiscountSetMessage:
      allOf:
        - $ref: '#/components/schemas/OrderMessage'
        - type: "object"
          required:
            - discountedPricePerQuantity
            - lineItemId
            - taxedPricePortions
            - totalPrice
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            lineItemId:
              type: "string"
            discountedPricePerQuantity:
              type: "array"
              items:
                $ref: '#/components/schemas/DiscountedLineItemPriceForQuantity'
            totalPrice:
              $ref: '#/components/schemas/Money'
            taxedPrice:
              $ref: '#/components/schemas/TaxedItemPrice'
            taxedPricePortions:
              type: "array"
              items:
                $ref: '#/components/schemas/MethodTaxedPrice'
    OrderLineItemDistributionChannelSetMessage:
      allOf:
        - $ref: '#/components/schemas/OrderMessage'
        - type: "object"
          required:
            - lineItemId
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            lineItemId:
              type: "string"
            distributionChannel:
              $ref: '#/components/schemas/ChannelReference'
    OrderLineItemRemovedMessage:
      allOf:
        - $ref: '#/components/schemas/OrderMessage'
        - type: "object"
          required:
            - lineItemId
            - newQuantity
            - newState
            - newTotalPrice
            - removedQuantity
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            lineItemId:
              type: "string"
            removedQuantity:
              type: "integer"
              format: "int64"
            newQuantity:
              type: "integer"
              format: "int64"
            newState:
              type: "array"
              items:
                $ref: '#/components/schemas/ItemState'
            newTotalPrice:
              $ref: '#/components/schemas/CentPrecisionMoney'
            newTaxedPrice:
              $ref: '#/components/schemas/TaxedItemPrice'
            newPrice:
              $ref: '#/components/schemas/Price'
            newShippingDetail:
              $ref: '#/components/schemas/ItemShippingDetails'
    OrderMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
    OrderPaymentAddedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - payment
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            payment:
              $ref: '#/components/schemas/PaymentReference'
    OrderPaymentStateChangedMessage:
      allOf:
        - $ref: '#/components/schemas/OrderMessage'
        - type: "object"
          required:
            - paymentState
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            paymentState:
              $ref: '#/components/schemas/PaymentState'
            oldPaymentState:
              $ref: '#/components/schemas/PaymentState'
    OrderPurchaseOrderNumberSetMessage:
      allOf:
        - $ref: '#/components/schemas/OrderMessage'
        - type: "object"
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            purchaseOrderNumber:
              type: "string"
            oldPurchaseOrderNumber:
              type: "string"
    OrderReturnShipmentStateChangedMessage:
      allOf:
        - $ref: '#/components/schemas/OrderMessage'
        - type: "object"
          required:
            - returnItemId
            - returnShipmentState
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            returnItemId:
              type: "string"
            returnShipmentState:
              $ref: '#/components/schemas/ReturnShipmentState'
    OrderShipmentStateChangedMessage:
      allOf:
        - $ref: '#/components/schemas/OrderMessage'
        - type: "object"
          required:
            - oldShipmentState
            - shipmentState
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            shipmentState:
              $ref: '#/components/schemas/ShipmentState'
            oldShipmentState:
              $ref: '#/components/schemas/ShipmentState'
    OrderShippingAddressSetMessage:
      allOf:
        - $ref: '#/components/schemas/OrderMessage'
        - type: "object"
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            address:
              $ref: '#/components/schemas/Address'
            oldAddress:
              $ref: '#/components/schemas/Address'
    OrderShippingInfoSetMessage:
      allOf:
        - $ref: '#/components/schemas/OrderMessage'
        - type: "object"
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            shippingInfo:
              $ref: '#/components/schemas/ShippingInfo'
            oldShippingInfo:
              $ref: '#/components/schemas/ShippingInfo'
    OrderShippingRateInputSetMessage:
      allOf:
        - $ref: '#/components/schemas/OrderMessage'
        - type: "object"
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            shippingRateInput:
              $ref: '#/components/schemas/ShippingRateInput'
            oldShippingRateInput:
              $ref: '#/components/schemas/ShippingRateInput'
    OrderStateChangedMessage:
      allOf:
        - $ref: '#/components/schemas/OrderMessage'
        - type: "object"
          required:
            - oldOrderState
            - orderState
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            orderState:
              $ref: '#/components/schemas/OrderState'
            oldOrderState:
              $ref: '#/components/schemas/OrderState'
    OrderStateTransitionMessage:
      allOf:
        - $ref: '#/components/schemas/OrderMessage'
        - type: "object"
          required:
            - force
            - state
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            state:
              $ref: '#/components/schemas/StateReference'
            oldState:
              $ref: '#/components/schemas/StateReference'
            force:
              type: "boolean"
    OrderStoreSetMessage:
      allOf:
        - $ref: '#/components/schemas/OrderMessage'
        - type: "object"
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            store:
              $ref: '#/components/schemas/StoreKeyReference'
    ParcelAddedToDeliveryMessage:
      allOf:
        - $ref: '#/components/schemas/OrderMessage'
        - type: "object"
          required:
            - delivery
            - parcel
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            delivery:
              $ref: '#/components/schemas/Delivery'
            parcel:
              $ref: '#/components/schemas/Parcel'
            shippingKey:
              type: "string"
    ParcelItemsUpdatedMessage:
      allOf:
        - $ref: '#/components/schemas/OrderMessage'
        - type: "object"
          required:
            - deliveryId
            - items
            - oldItems
            - parcelId
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            parcelId:
              type: "string"
            deliveryId:
              type: "string"
            items:
              type: "array"
              items:
                $ref: '#/components/schemas/DeliveryItem'
            oldItems:
              type: "array"
              items:
                $ref: '#/components/schemas/DeliveryItem'
            shippingKey:
              type: "string"
    ParcelMeasurementsUpdatedMessage:
      allOf:
        - $ref: '#/components/schemas/OrderMessage'
        - type: "object"
          required:
            - deliveryId
            - parcelId
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            deliveryId:
              type: "string"
            parcelId:
              type: "string"
            measurements:
              $ref: '#/components/schemas/ParcelMeasurements'
            shippingKey:
              type: "string"
    ParcelRemovedFromDeliveryMessage:
      allOf:
        - $ref: '#/components/schemas/OrderMessage'
        - type: "object"
          required:
            - deliveryId
            - parcel
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            deliveryId:
              type: "string"
            parcel:
              $ref: '#/components/schemas/Parcel'
            shippingKey:
              type: "string"
    ParcelTrackingDataUpdatedMessage:
      allOf:
        - $ref: '#/components/schemas/OrderMessage'
        - type: "object"
          required:
            - deliveryId
            - parcelId
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            deliveryId:
              type: "string"
            parcelId:
              type: "string"
            trackingData:
              $ref: '#/components/schemas/TrackingData'
            shippingKey:
              type: "string"
    PaymentCreatedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - payment
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            payment:
              $ref: '#/components/schemas/Payment'
    PaymentInteractionAddedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - interaction
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            interaction:
              $ref: '#/components/schemas/CustomFields'
    PaymentStatusInterfaceCodeSetMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - paymentId
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            paymentId:
              type: "string"
            interfaceCode:
              type: "string"
    PaymentStatusStateTransitionMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - force
            - state
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            state:
              $ref: '#/components/schemas/StateReference'
            force:
              type: "boolean"
    PaymentTransactionAddedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - transaction
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            transaction:
              $ref: '#/components/schemas/Transaction'
    PaymentTransactionStateChangedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - state
            - transactionId
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            transactionId:
              type: "string"
            state:
              $ref: '#/components/schemas/TransactionState'
    ProductAddedToCategoryMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - category
            - staged
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            category:
              $ref: '#/components/schemas/CategoryReference'
            staged:
              type: "boolean"
    ProductCreatedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - productProjection
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            productProjection:
              $ref: '#/components/schemas/ProductProjection'
    ProductDeletedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - removedImageUrls
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            removedImageUrls:
              type: "array"
              items:
                type: "string"
            currentProjection:
              $ref: '#/components/schemas/ProductProjection'
    ProductImageAddedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - image
            - staged
            - variantId
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            variantId:
              type: "integer"
              format: "int64"
            image:
              $ref: '#/components/schemas/Image'
            staged:
              type: "boolean"
    ProductPriceAddedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - price
            - staged
            - variantId
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            variantId:
              type: "integer"
              format: "int64"
            price:
              $ref: '#/components/schemas/Price'
            staged:
              type: "boolean"
    ProductPriceChangedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - newPrice
            - oldPrice
            - staged
            - variantId
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            variantId:
              type: "integer"
              format: "int64"
            oldPrice:
              $ref: '#/components/schemas/Price'
            newPrice:
              $ref: '#/components/schemas/Price'
            staged:
              type: "boolean"
            oldStagedPrice:
              $ref: '#/components/schemas/Price'
    ProductPriceDiscountsSetMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - updatedPrices
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            updatedPrices:
              type: "array"
              items:
                $ref: '#/components/schemas/ProductPriceDiscountsSetUpdatedPrice'
    ProductPriceDiscountsSetUpdatedPrice:
      type: "object"
      required:
        - priceId
        - staged
        - variantId
      properties:
        variantId:
          type: "integer"
          format: "int32"
        variantKey:
          type: "string"
        sku:
          type: "string"
        priceId:
          type: "string"
        discounted:
          $ref: '#/components/schemas/DiscountedPrice'
        staged:
          type: "boolean"
    ProductPriceExternalDiscountSetMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - priceId
            - staged
            - variantId
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            variantId:
              type: "integer"
              format: "int32"
            variantKey:
              type: "string"
            sku:
              type: "string"
            priceId:
              type: "string"
            discounted:
              $ref: '#/components/schemas/DiscountedPrice'
            staged:
              type: "boolean"
    ProductPriceKeySetMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - staged
            - variantId
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            variantId:
              type: "integer"
              format: "int64"
            priceId:
              type: "string"
            oldKey:
              type: "string"
            key:
              type: "string"
            staged:
              type: "boolean"
    ProductPriceModeSetMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - to
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            to:
              $ref: '#/components/schemas/ProductPriceModeEnum'
    ProductPriceRemovedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - price
            - staged
            - variantId
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            variantId:
              type: "integer"
              format: "int64"
            price:
              $ref: '#/components/schemas/Price'
            staged:
              type: "boolean"
    ProductPricesSetMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - prices
            - staged
            - variantId
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            variantId:
              type: "integer"
              format: "int64"
            prices:
              type: "array"
              items:
                $ref: '#/components/schemas/Price'
            staged:
              type: "boolean"
    ProductPublishedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - productProjection
            - removedImageUrls
            - scope
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            removedImageUrls:
              type: "array"
              items:
                type: "string"
            productProjection:
              $ref: '#/components/schemas/ProductProjection'
            scope:
              $ref: '#/components/schemas/ProductPublishScope'
    ProductRemovedFromCategoryMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - category
            - staged
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            category:
              $ref: '#/components/schemas/CategoryReference'
            staged:
              type: "boolean"
    ProductRevertedStagedChangesMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - removedImageUrls
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            removedImageUrls:
              type: "array"
              items:
                type: "string"
    ProductSelectionCreatedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - productSelection
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            productSelection:
              $ref: '#/components/schemas/ProductSelection'
    ProductSelectionDeletedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
    ProductSelectionProductAddedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - product
            - variantSelection
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            product:
              $ref: '#/components/schemas/ProductReference'
            variantSelection:
              $ref: '#/components/schemas/ProductVariantSelection'
    ProductSelectionProductExcludedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - product
            - variantExclusion
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            product:
              $ref: '#/components/schemas/ProductReference'
            variantExclusion:
              $ref: '#/components/schemas/ProductVariantExclusion'
    ProductSelectionProductRemovedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - product
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            product:
              $ref: '#/components/schemas/ProductReference'
    ProductSelectionVariantExclusionChangedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - newVariantExclusion
            - oldVariantExclusion
            - product
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            product:
              $ref: '#/components/schemas/ProductReference'
            oldVariantExclusion:
              $ref: '#/components/schemas/ProductVariantExclusion'
            newVariantExclusion:
              $ref: '#/components/schemas/ProductVariantExclusion'
    ProductSelectionVariantSelectionChangedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - newVariantSelection
            - oldVariantSelection
            - product
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            product:
              $ref: '#/components/schemas/ProductReference'
            oldVariantSelection:
              $ref: '#/components/schemas/ProductVariantSelection'
            newVariantSelection:
              $ref: '#/components/schemas/ProductVariantSelection'
    ProductSlugChangedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - slug
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            slug:
              $ref: '#/components/schemas/LocalizedString'
            oldSlug:
              $ref: '#/components/schemas/LocalizedString'
    ProductStateTransitionMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - force
            - state
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            state:
              $ref: '#/components/schemas/StateReference'
            force:
              type: "boolean"
    ProductUnpublishedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
    ProductVariantAddedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - staged
            - variant
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            variant:
              $ref: '#/components/schemas/ProductVariant'
            staged:
              type: "boolean"
    ProductVariantDeletedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - removedImageUrls
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            variant:
              $ref: '#/components/schemas/ProductVariant'
            removedImageUrls:
              type: "array"
              items:
                type: "string"
    QuoteCreatedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - quote
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            quote:
              $ref: '#/components/schemas/Quote'
    QuoteDeletedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
    QuoteRequestCreatedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - quoteRequest
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            quoteRequest:
              $ref: '#/components/schemas/QuoteRequest'
    QuoteRequestDeletedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
    QuoteRequestStateChangedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - oldQuoteRequestState
            - quoteRequestState
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            quoteRequestState:
              $ref: '#/components/schemas/QuoteRequestState'
            oldQuoteRequestState:
              $ref: '#/components/schemas/QuoteRequestState'
    QuoteRequestStateTransitionMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - force
            - state
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            state:
              $ref: '#/components/schemas/StateReference'
            oldState:
              $ref: '#/components/schemas/StateReference'
            force:
              type: "boolean"
    QuoteStateChangedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - oldQuoteState
            - quoteState
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            quoteState:
              $ref: '#/components/schemas/QuoteState'
            oldQuoteState:
              $ref: '#/components/schemas/QuoteState'
    QuoteStateTransitionMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - force
            - state
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            state:
              $ref: '#/components/schemas/StateReference'
            oldState:
              $ref: '#/components/schemas/StateReference'
            force:
              type: "boolean"
    ReturnInfoAddedMessage:
      allOf:
        - $ref: '#/components/schemas/OrderMessage'
        - type: "object"
          required:
            - returnInfo
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            returnInfo:
              $ref: '#/components/schemas/ReturnInfo'
    ReturnInfoSetMessage:
      allOf:
        - $ref: '#/components/schemas/OrderMessage'
        - type: "object"
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            returnInfo:
              type: "array"
              items:
                $ref: '#/components/schemas/ReturnInfo'
    ReviewCreatedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - review
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            review:
              $ref: '#/components/schemas/Review'
    ReviewRatingSetMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - includedInStatistics
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            oldRating:
              type: "number"
              format: "double"
            newRating:
              type: "number"
              format: "double"
            includedInStatistics:
              type: "boolean"
            target:
              $ref: '#/components/schemas/Reference'
    ReviewStateTransitionMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - force
            - newIncludedInStatistics
            - newState
            - oldIncludedInStatistics
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            oldState:
              $ref: '#/components/schemas/StateReference'
            newState:
              $ref: '#/components/schemas/StateReference'
            oldIncludedInStatistics:
              type: "boolean"
            newIncludedInStatistics:
              type: "boolean"
            target:
              $ref: '#/components/schemas/Reference'
            force:
              type: "boolean"
    StagedQuoteCreatedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - stagedQuote
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            stagedQuote:
              $ref: '#/components/schemas/StagedQuote'
    StagedQuoteDeletedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
    StagedQuoteSellerCommentSetMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - sellerComment
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            sellerComment:
              type: "string"
    StagedQuoteStateChangedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - oldStagedQuoteState
            - stagedQuoteState
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            stagedQuoteState:
              $ref: '#/components/schemas/StagedQuoteState'
            oldStagedQuoteState:
              $ref: '#/components/schemas/StagedQuoteState'
    StagedQuoteStateTransitionMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - force
            - state
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            state:
              $ref: '#/components/schemas/StateReference'
            oldState:
              $ref: '#/components/schemas/StateReference'
            force:
              type: "boolean"
    StagedQuoteValidToSetMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - validTo
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            validTo:
              type: "string"
              format: "datetime"
    StandalonePriceActiveChangedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - active
            - oldActive
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            active:
              type: "boolean"
            oldActive:
              type: "boolean"
    StandalonePriceCreatedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - standalonePrice
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            standalonePrice:
              $ref: '#/components/schemas/StandalonePrice'
    StandalonePriceDeletedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
    StandalonePriceDiscountSetMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            discounted:
              $ref: '#/components/schemas/DiscountedPrice'
    StandalonePriceExternalDiscountSetMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            discounted:
              $ref: '#/components/schemas/DiscountedPrice'
    StandalonePriceKeySetMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            key:
              type: "string"
            oldKey:
              type: "string"
    StandalonePriceStagedChangesAppliedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - stagedChanges
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            stagedChanges:
              $ref: '#/components/schemas/StagedStandalonePrice'
    StandalonePriceValueChangedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - staged
            - value
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            value:
              $ref: '#/components/schemas/Money'
            staged:
              type: "boolean"
            oldValue:
              $ref: '#/components/schemas/Money'
    StoreCountriesChangedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            addedCountries:
              type: "array"
              items:
                $ref: '#/components/schemas/StoreCountry'
            removedCountries:
              type: "array"
              items:
                $ref: '#/components/schemas/StoreCountry'
    StoreCreatedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          required:
            - distributionChannels
            - productSelections
            - supplyChannels
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            name:
              $ref: '#/components/schemas/LocalizedString'
            languages:
              type: "array"
              items:
                type: "string"
            countries:
              type: "array"
              items:
                $ref: '#/components/schemas/StoreCountry'
            distributionChannels:
              type: "array"
              items:
                $ref: '#/components/schemas/ChannelReference'
            supplyChannels:
              type: "array"
              items:
                $ref: '#/components/schemas/ChannelReference'
            productSelections:
              type: "array"
              items:
                $ref: '#/components/schemas/ProductSelectionSetting'
            custom:
              $ref: '#/components/schemas/CustomFields'
    StoreDeletedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
    StoreDistributionChannelsChangedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            addedDistributionChannels:
              type: "array"
              items:
                $ref: '#/components/schemas/ChannelReference'
            removedDistributionChannels:
              type: "array"
              items:
                $ref: '#/components/schemas/ChannelReference'
    StoreLanguagesChangedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            addedLanguages:
              type: "array"
              items:
                $ref: '#/components/schemas/Locale'
            removedLanguages:
              type: "array"
              items:
                $ref: '#/components/schemas/Locale'
    StoreNameSetMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            name:
              $ref: '#/components/schemas/LocalizedString'
            nameAllLocales:
              type: "array"
              items:
                $ref: '#/components/schemas/LocalizedString'
    StoreProductSelectionsChangedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            addedProductSelections:
              type: "array"
              items:
                $ref: '#/components/schemas/ProductSelectionSetting'
            removedProductSelections:
              type: "array"
              items:
                $ref: '#/components/schemas/ProductSelectionSetting'
            updatedProductSelections:
              type: "array"
              items:
                $ref: '#/components/schemas/ProductSelectionSetting'
    StoreSupplyChannelsChangedMessage:
      allOf:
        - $ref: '#/components/schemas/Message'
        - type: "object"
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            sequenceNumber:
              type: "integer"
              format: "int64"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceVersion:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            addedSupplyChannels:
              type: "array"
              items:
                $ref: '#/components/schemas/ChannelReference'
            removedSupplyChannels:
              type: "array"
              items:
                $ref: '#/components/schemas/ChannelReference'
    UserProvidedIdentifiers:
      type: "object"
      properties:
        key:
          type: "string"
        externalId:
          type: "string"
        orderNumber:
          type: "string"
        customerNumber:
          type: "string"
        sku:
          type: "string"
        slug:
          $ref: '#/components/schemas/LocalizedString'
        containerAndKey:
          $ref: '#/components/schemas/ContainerAndKey'
    AssociateRoleBuyerAssignableChangedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - buyerAssignable
          properties:
            type:
              type: "string"
            buyerAssignable:
              type: "boolean"
    AssociateRoleCreatedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - associateRole
          properties:
            type:
              type: "string"
            associateRole:
              $ref: '#/components/schemas/AssociateRole'
    AssociateRoleDeletedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          properties:
            type:
              type: "string"
    AssociateRoleNameChangedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - name
          properties:
            type:
              type: "string"
            name:
              type: "string"
    AssociateRolePermissionAddedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - permission
          properties:
            type:
              type: "string"
            permission:
              $ref: '#/components/schemas/Permission'
    AssociateRolePermissionRemovedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - permission
          properties:
            type:
              type: "string"
            permission:
              $ref: '#/components/schemas/Permission'
    AssociateRolePermissionsSetMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - permissions
          properties:
            type:
              type: "string"
            permissions:
              type: "array"
              items:
                $ref: '#/components/schemas/Permission'
    BusinessUnitAddressAddedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - address
          properties:
            type:
              type: "string"
            address:
              $ref: '#/components/schemas/Address'
    BusinessUnitAddressChangedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - address
          properties:
            type:
              type: "string"
            address:
              $ref: '#/components/schemas/Address'
    BusinessUnitAddressRemovedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - address
          properties:
            type:
              type: "string"
            address:
              $ref: '#/components/schemas/Address'
    BusinessUnitAssociateAddedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - associate
          properties:
            type:
              type: "string"
            associate:
              $ref: '#/components/schemas/Associate'
    BusinessUnitAssociateChangedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - associate
          properties:
            type:
              type: "string"
            associate:
              $ref: '#/components/schemas/Associate'
    BusinessUnitAssociateModeChangedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - associateMode
            - oldAssociateMode
          properties:
            type:
              type: "string"
            associateMode:
              $ref: '#/components/schemas/BusinessUnitAssociateMode'
            oldAssociateMode:
              $ref: '#/components/schemas/BusinessUnitAssociateMode'
    BusinessUnitAssociateRemovedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - associate
          properties:
            type:
              type: "string"
            associate:
              $ref: '#/components/schemas/Associate'
    BusinessUnitAssociatesSetMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - associates
          properties:
            type:
              type: "string"
            associates:
              type: "array"
              items:
                $ref: '#/components/schemas/Associate'
    BusinessUnitBillingAddressAddedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - address
          properties:
            type:
              type: "string"
            address:
              $ref: '#/components/schemas/Address'
    BusinessUnitBillingAddressRemovedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - address
          properties:
            type:
              type: "string"
            address:
              $ref: '#/components/schemas/Address'
    BusinessUnitContactEmailSetMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          properties:
            type:
              type: "string"
            contactEmail:
              type: "string"
    BusinessUnitCreatedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - businessUnit
          properties:
            type:
              type: "string"
            businessUnit:
              $ref: '#/components/schemas/BusinessUnit'
    BusinessUnitDefaultBillingAddressSetMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          properties:
            type:
              type: "string"
            address:
              $ref: '#/components/schemas/Address'
    BusinessUnitDefaultShippingAddressSetMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          properties:
            type:
              type: "string"
            address:
              $ref: '#/components/schemas/Address'
    BusinessUnitDeletedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          properties:
            type:
              type: "string"
    BusinessUnitNameChangedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - name
          properties:
            type:
              type: "string"
            name:
              type: "string"
    BusinessUnitParentUnitChangedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          properties:
            type:
              type: "string"
            oldParentUnit:
              $ref: '#/components/schemas/BusinessUnitKeyReference'
            newParentUnit:
              $ref: '#/components/schemas/BusinessUnitKeyReference'
    BusinessUnitShippingAddressAddedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - address
          properties:
            type:
              type: "string"
            address:
              $ref: '#/components/schemas/Address'
    BusinessUnitShippingAddressRemovedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - address
          properties:
            type:
              type: "string"
            address:
              $ref: '#/components/schemas/Address'
    BusinessUnitStatusChangedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - active
          properties:
            type:
              type: "string"
            active:
              $ref: '#/components/schemas/BusinessUnitStatus'
    BusinessUnitStoreAddedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - store
          properties:
            type:
              type: "string"
            store:
              $ref: '#/components/schemas/StoreKeyReference'
    BusinessUnitStoreModeChangedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - oldStoreMode
            - oldStores
            - storeMode
            - stores
          properties:
            type:
              type: "string"
            stores:
              type: "array"
              items:
                $ref: '#/components/schemas/StoreKeyReference'
            storeMode:
              $ref: '#/components/schemas/BusinessUnitStoreMode'
            oldStores:
              type: "array"
              items:
                $ref: '#/components/schemas/StoreKeyReference'
            oldStoreMode:
              $ref: '#/components/schemas/BusinessUnitStoreMode'
    BusinessUnitStoreRemovedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - store
          properties:
            type:
              type: "string"
            store:
              $ref: '#/components/schemas/StoreKeyReference'
    BusinessUnitStoresSetMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - stores
          properties:
            type:
              type: "string"
            stores:
              type: "array"
              items:
                $ref: '#/components/schemas/StoreKeyReference'
    CategoryCreatedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - category
          properties:
            type:
              type: "string"
            category:
              $ref: '#/components/schemas/Category'
    CategorySlugChangedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - slug
          properties:
            type:
              type: "string"
            slug:
              $ref: '#/components/schemas/LocalizedString'
            oldSlug:
              $ref: '#/components/schemas/LocalizedString'
    CustomLineItemStateTransitionMessagePayload:
      allOf:
        - $ref: '#/components/schemas/OrderMessagePayload'
        - type: "object"
          required:
            - customLineItemId
            - fromState
            - quantity
            - toState
            - transitionDate
          properties:
            type:
              type: "string"
            customLineItemId:
              type: "string"
            transitionDate:
              type: "string"
              format: "datetime"
            quantity:
              type: "integer"
              format: "int64"
            fromState:
              $ref: '#/components/schemas/StateReference'
            toState:
              $ref: '#/components/schemas/StateReference'
    CustomerAddressAddedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - address
          properties:
            type:
              type: "string"
            address:
              $ref: '#/components/schemas/Address'
    CustomerAddressChangedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - address
          properties:
            type:
              type: "string"
            address:
              $ref: '#/components/schemas/Address'
    CustomerAddressRemovedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - address
          properties:
            type:
              type: "string"
            address:
              $ref: '#/components/schemas/Address'
    CustomerCompanyNameSetMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          properties:
            type:
              type: "string"
            companyName:
              type: "string"
    CustomerCreatedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - customer
          properties:
            type:
              type: "string"
            customer:
              $ref: '#/components/schemas/Customer'
    CustomerDateOfBirthSetMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          properties:
            type:
              type: "string"
            dateOfBirth:
              type: "string"
              format: "date-only"
    CustomerDeletedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          properties:
            type:
              type: "string"
    CustomerEmailChangedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - email
          properties:
            type:
              type: "string"
            email:
              type: "string"
    CustomerEmailVerifiedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          properties:
            type:
              type: "string"
    CustomerFirstNameSetMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          properties:
            type:
              type: "string"
            firstName:
              type: "string"
    CustomerGroupSetMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          properties:
            type:
              type: "string"
            customerGroup:
              $ref: '#/components/schemas/CustomerGroupReference'
    CustomerLastNameSetMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          properties:
            type:
              type: "string"
            lastName:
              type: "string"
    CustomerPasswordUpdatedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - reset
          properties:
            type:
              type: "string"
            reset:
              type: "boolean"
    CustomerTitleSetMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          properties:
            type:
              type: "string"
            title:
              type: "string"
    DeliveryAddedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/OrderMessagePayload'
        - type: "object"
          required:
            - delivery
          properties:
            type:
              type: "string"
            delivery:
              $ref: '#/components/schemas/Delivery'
            shippingKey:
              type: "string"
    DeliveryAddressSetMessagePayload:
      allOf:
        - $ref: '#/components/schemas/OrderMessagePayload'
        - type: "object"
          required:
            - deliveryId
          properties:
            type:
              type: "string"
            deliveryId:
              type: "string"
            address:
              $ref: '#/components/schemas/Address'
            oldAddress:
              $ref: '#/components/schemas/Address'
            shippingKey:
              type: "string"
    DeliveryItemsUpdatedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/OrderMessagePayload'
        - type: "object"
          required:
            - deliveryId
            - items
            - oldItems
          properties:
            type:
              type: "string"
            deliveryId:
              type: "string"
            items:
              type: "array"
              items:
                $ref: '#/components/schemas/DeliveryItem'
            oldItems:
              type: "array"
              items:
                $ref: '#/components/schemas/DeliveryItem'
            shippingKey:
              type: "string"
    DeliveryRemovedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/OrderMessagePayload'
        - type: "object"
          required:
            - delivery
          properties:
            type:
              type: "string"
            delivery:
              $ref: '#/components/schemas/Delivery'
            shippingKey:
              type: "string"
    InventoryEntryCreatedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - inventoryEntry
          properties:
            type:
              type: "string"
            inventoryEntry:
              $ref: '#/components/schemas/InventoryEntry'
    InventoryEntryDeletedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - sku
          properties:
            type:
              type: "string"
            sku:
              type: "string"
            supplyChannel:
              $ref: '#/components/schemas/ChannelReference'
    InventoryEntryQuantitySetMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - newAvailableQuantity
            - newQuantityOnStock
            - oldAvailableQuantity
            - oldQuantityOnStock
          properties:
            type:
              type: "string"
            oldQuantityOnStock:
              type: "integer"
              format: "int64"
            newQuantityOnStock:
              type: "integer"
              format: "int64"
            oldAvailableQuantity:
              type: "integer"
              format: "int64"
            newAvailableQuantity:
              type: "integer"
              format: "int64"
            supplyChannel:
              $ref: '#/components/schemas/ChannelReference'
    LineItemStateTransitionMessagePayload:
      allOf:
        - $ref: '#/components/schemas/OrderMessagePayload'
        - type: "object"
          required:
            - fromState
            - lineItemId
            - quantity
            - toState
            - transitionDate
          properties:
            type:
              type: "string"
            lineItemId:
              type: "string"
            transitionDate:
              type: "string"
              format: "datetime"
            quantity:
              type: "integer"
              format: "int64"
            fromState:
              $ref: '#/components/schemas/StateReference'
            toState:
              $ref: '#/components/schemas/StateReference'
    MessagePayload:
      type: "object"
      discriminator:
        propertyName: type
        mapping:
          AssociateRoleBuyerAssignableChanged: '#/components/schemas/AssociateRoleBuyerAssignableChangedMessagePayload'
          AssociateRoleCreated: '#/components/schemas/AssociateRoleCreatedMessagePayload'
          AssociateRoleDeleted: '#/components/schemas/AssociateRoleDeletedMessagePayload'
          AssociateRoleNameSet: '#/components/schemas/AssociateRoleNameChangedMessagePayload'
          AssociateRolePermissionAdded: '#/components/schemas/AssociateRolePermissionAddedMessagePayload'
          AssociateRolePermissionRemoved: '#/components/schemas/AssociateRolePermissionRemovedMessagePayload'
          AssociateRolePermissionsSet: '#/components/schemas/AssociateRolePermissionsSetMessagePayload'
          BusinessUnitAddressAdded: '#/components/schemas/BusinessUnitAddressAddedMessagePayload'
          BusinessUnitAddressChanged: '#/components/schemas/BusinessUnitAddressChangedMessagePayload'
          BusinessUnitAddressRemoved: '#/components/schemas/BusinessUnitAddressRemovedMessagePayload'
          BusinessUnitAssociateAdded: '#/components/schemas/BusinessUnitAssociateAddedMessagePayload'
          BusinessUnitAssociateChanged: '#/components/schemas/BusinessUnitAssociateChangedMessagePayload'
          BusinessUnitAssociateModeChanged: '#/components/schemas/BusinessUnitAssociateModeChangedMessagePayload'
          BusinessUnitAssociateRemoved: '#/components/schemas/BusinessUnitAssociateRemovedMessagePayload'
          BusinessUnitAssociatesSet: '#/components/schemas/BusinessUnitAssociatesSetMessagePayload'
          BusinessUnitBillingAddressAdded: '#/components/schemas/BusinessUnitBillingAddressAddedMessagePayload'
          BusinessUnitBillingAddressRemoved: '#/components/schemas/BusinessUnitBillingAddressRemovedMessagePayload'
          BusinessUnitContactEmailSet: '#/components/schemas/BusinessUnitContactEmailSetMessagePayload'
          BusinessUnitCreated: '#/components/schemas/BusinessUnitCreatedMessagePayload'
          BusinessUnitDefaultBillingAddressSet: '#/components/schemas/BusinessUnitDefaultBillingAddressSetMessagePayload'
          BusinessUnitDefaultShippingAddressSet: '#/components/schemas/BusinessUnitDefaultShippingAddressSetMessagePayload'
          BusinessUnitDeleted: '#/components/schemas/BusinessUnitDeletedMessagePayload'
          BusinessUnitNameChanged: '#/components/schemas/BusinessUnitNameChangedMessagePayload'
          BusinessUnitParentUnitChanged: '#/components/schemas/BusinessUnitParentUnitChangedMessagePayload'
          BusinessUnitShippingAddressAdded: '#/components/schemas/BusinessUnitShippingAddressAddedMessagePayload'
          BusinessUnitShippingAddressRemoved: '#/components/schemas/BusinessUnitShippingAddressRemovedMessagePayload'
          BusinessUnitStatusChanged: '#/components/schemas/BusinessUnitStatusChangedMessagePayload'
          BusinessUnitStoreAdded: '#/components/schemas/BusinessUnitStoreAddedMessagePayload'
          BusinessUnitStoreModeChanged: '#/components/schemas/BusinessUnitStoreModeChangedMessagePayload'
          BusinessUnitStoreRemoved: '#/components/schemas/BusinessUnitStoreRemovedMessagePayload'
          BusinessUnitStoresSet: '#/components/schemas/BusinessUnitStoresSetMessagePayload'
          CategoryCreated: '#/components/schemas/CategoryCreatedMessagePayload'
          CategorySlugChanged: '#/components/schemas/CategorySlugChangedMessagePayload'
          CustomerAddressAdded: '#/components/schemas/CustomerAddressAddedMessagePayload'
          CustomerAddressChanged: '#/components/schemas/CustomerAddressChangedMessagePayload'
          CustomerAddressRemoved: '#/components/schemas/CustomerAddressRemovedMessagePayload'
          CustomerCompanyNameSet: '#/components/schemas/CustomerCompanyNameSetMessagePayload'
          CustomerCreated: '#/components/schemas/CustomerCreatedMessagePayload'
          CustomerDateOfBirthSet: '#/components/schemas/CustomerDateOfBirthSetMessagePayload'
          CustomerDeleted: '#/components/schemas/CustomerDeletedMessagePayload'
          CustomerEmailChanged: '#/components/schemas/CustomerEmailChangedMessagePayload'
          CustomerEmailVerified: '#/components/schemas/CustomerEmailVerifiedMessagePayload'
          CustomerFirstNameSet: '#/components/schemas/CustomerFirstNameSetMessagePayload'
          CustomerGroupSet: '#/components/schemas/CustomerGroupSetMessagePayload'
          CustomerLastNameSet: '#/components/schemas/CustomerLastNameSetMessagePayload'
          CustomerPasswordUpdated: '#/components/schemas/CustomerPasswordUpdatedMessagePayload'
          CustomerTitleSet: '#/components/schemas/CustomerTitleSetMessagePayload'
          InventoryEntryCreated: '#/components/schemas/InventoryEntryCreatedMessagePayload'
          InventoryEntryDeleted: '#/components/schemas/InventoryEntryDeletedMessagePayload'
          InventoryEntryQuantitySet: '#/components/schemas/InventoryEntryQuantitySetMessagePayload'
          OrderPaymentAdded: '#/components/schemas/OrderPaymentAddedMessagePayload'
          PaymentCreated: '#/components/schemas/PaymentCreatedMessagePayload'
          PaymentInteractionAdded: '#/components/schemas/PaymentInteractionAddedMessagePayload'
          PaymentStatusInterfaceCodeSet: '#/components/schemas/PaymentStatusInterfaceCodeSetMessagePayload'
          PaymentStatusStateTransition: '#/components/schemas/PaymentStatusStateTransitionMessagePayload'
          PaymentTransactionAdded: '#/components/schemas/PaymentTransactionAddedMessagePayload'
          PaymentTransactionStateChanged: '#/components/schemas/PaymentTransactionStateChangedMessagePayload'
          ProductAddedToCategory: '#/components/schemas/ProductAddedToCategoryMessagePayload'
          ProductCreated: '#/components/schemas/ProductCreatedMessagePayload'
          ProductDeleted: '#/components/schemas/ProductDeletedMessagePayload'
          ProductImageAdded: '#/components/schemas/ProductImageAddedMessagePayload'
          ProductPriceAdded: '#/components/schemas/ProductPriceAddedMessagePayload'
          ProductPriceChanged: '#/components/schemas/ProductPriceChangedMessagePayload'
          ProductPriceDiscountsSet: '#/components/schemas/ProductPriceDiscountsSetMessagePayload'
          ProductPriceExternalDiscountSet: '#/components/schemas/ProductPriceExternalDiscountSetMessagePayload'
          ProductPriceKeySet: '#/components/schemas/ProductPriceKeySetMessagePayload'
          ProductPriceModeSet: '#/components/schemas/ProductPriceModeSetMessagePayload'
          ProductPriceRemoved: '#/components/schemas/ProductPriceRemovedMessagePayload'
          ProductPricesSet: '#/components/schemas/ProductPricesSetMessagePayload'
          ProductPublished: '#/components/schemas/ProductPublishedMessagePayload'
          ProductRemovedFromCategory: '#/components/schemas/ProductRemovedFromCategoryMessagePayload'
          ProductRevertedStagedChanges: '#/components/schemas/ProductRevertedStagedChangesMessagePayload'
          ProductSelectionCreated: '#/components/schemas/ProductSelectionCreatedMessagePayload'
          ProductSelectionDeleted: '#/components/schemas/ProductSelectionDeletedMessagePayload'
          ProductSelectionProductAdded: '#/components/schemas/ProductSelectionProductAddedMessagePayload'
          ProductSelectionProductExcluded: '#/components/schemas/ProductSelectionProductExcludedMessagePayload'
          ProductSelectionProductRemoved: '#/components/schemas/ProductSelectionProductRemovedMessagePayload'
          ProductSelectionVariantExclusionChanged: '#/components/schemas/ProductSelectionVariantExclusionChangedMessagePayload'
          ProductSelectionVariantSelectionChanged: '#/components/schemas/ProductSelectionVariantSelectionChangedMessagePayload'
          ProductSlugChanged: '#/components/schemas/ProductSlugChangedMessagePayload'
          ProductStateTransition: '#/components/schemas/ProductStateTransitionMessagePayload'
          ProductUnpublished: '#/components/schemas/ProductUnpublishedMessagePayload'
          ProductVariantAdded: '#/components/schemas/ProductVariantAddedMessagePayload'
          ProductVariantDeleted: '#/components/schemas/ProductVariantDeletedMessagePayload'
          QuoteCreated: '#/components/schemas/QuoteCreatedMessagePayload'
          QuoteDeleted: '#/components/schemas/QuoteDeletedMessagePayload'
          QuoteRequestCreated: '#/components/schemas/QuoteRequestCreatedMessagePayload'
          QuoteRequestDeleted: '#/components/schemas/QuoteRequestDeletedMessagePayload'
          QuoteRequestStateChanged: '#/components/schemas/QuoteRequestStateChangedMessagePayload'
          QuoteRequestStateTransition: '#/components/schemas/QuoteRequestStateTransitionMessagePayload'
          QuoteStateChanged: '#/components/schemas/QuoteStateChangedMessagePayload'
          QuoteStateTransition: '#/components/schemas/QuoteStateTransitionMessagePayload'
          ReviewCreated: '#/components/schemas/ReviewCreatedMessagePayload'
          ReviewRatingSet: '#/components/schemas/ReviewRatingSetMessagePayload'
          ReviewStateTransition: '#/components/schemas/ReviewStateTransitionMessagePayload'
          ShoppingListStoreSet: '#/components/schemas/ShoppingListStoreSetMessagePayload'
          StagedQuoteCreated: '#/components/schemas/StagedQuoteCreatedMessagePayload'
          StagedQuoteDeleted: '#/components/schemas/StagedQuoteDeletedMessagePayload'
          StagedQuoteSellerCommentSet: '#/components/schemas/StagedQuoteSellerCommentSetMessagePayload'
          StagedQuoteStateChanged: '#/components/schemas/StagedQuoteStateChangedMessagePayload'
          StagedQuoteStateTransition: '#/components/schemas/StagedQuoteStateTransitionMessagePayload'
          StagedQuoteValidToSet: '#/components/schemas/StagedQuoteValidToSetMessagePayload'
          StandalonePriceActiveChanged: '#/components/schemas/StandalonePriceActiveChangedMessagePayload'
          StandalonePriceCreated: '#/components/schemas/StandalonePriceCreatedMessagePayload'
          StandalonePriceDeleted: '#/components/schemas/StandalonePriceDeletedMessagePayload'
          StandalonePriceDiscountSet: '#/components/schemas/StandalonePriceDiscountSetMessagePayload'
          StandalonePriceExternalDiscountSet: '#/components/schemas/StandalonePriceExternalDiscountSetMessagePayload'
          StandalonePriceKeySet: '#/components/schemas/StandalonePriceKeySetMessagePayload'
          StandalonePriceStagedChangesApplied: '#/components/schemas/StandalonePriceStagedChangesAppliedMessagePayload'
          StandalonePriceValueChanged: '#/components/schemas/StandalonePriceValueChangedMessagePayload'
          StoreCountriesChanged: '#/components/schemas/StoreCountriesChangedMessagePayload'
          StoreCreated: '#/components/schemas/StoreCreatedMessagePayload'
          StoreDeleted: '#/components/schemas/StoreDeletedMessagePayload'
          StoreDistributionChannelsChanged: '#/components/schemas/StoreDistributionChannelsChangedMessagePayload'
          StoreLanguagesChanged: '#/components/schemas/StoreLanguagesChangedMessagePayload'
          StoreNameSet: '#/components/schemas/StoreNameSetMessagePayload'
          StoreProductSelectionsChanged: '#/components/schemas/StoreProductSelectionsChangedMessagePayload'
          StoreSupplyChannelsChanged: '#/components/schemas/StoreSupplyChannelsChangedMessagePayload'
      required:
        - type
      properties:
        type:
          type: "string"
    OrderBillingAddressSetMessagePayload:
      allOf:
        - $ref: '#/components/schemas/OrderMessagePayload'
        - type: "object"
          properties:
            type:
              type: "string"
            address:
              $ref: '#/components/schemas/Address'
            oldAddress:
              $ref: '#/components/schemas/Address'
    OrderCreatedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/OrderMessagePayload'
        - type: "object"
          required:
            - order
          properties:
            type:
              type: "string"
            order:
              $ref: '#/components/schemas/Order'
    OrderCustomLineItemAddedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/OrderMessagePayload'
        - type: "object"
          required:
            - customLineItem
          properties:
            type:
              type: "string"
            customLineItem:
              $ref: '#/components/schemas/CustomLineItem'
    OrderCustomLineItemDiscountSetMessagePayload:
      allOf:
        - $ref: '#/components/schemas/OrderMessagePayload'
        - type: "object"
          required:
            - customLineItemId
            - discountedPricePerQuantity
          properties:
            type:
              type: "string"
            customLineItemId:
              type: "string"
            discountedPricePerQuantity:
              type: "array"
              items:
                $ref: '#/components/schemas/DiscountedLineItemPriceForQuantity'
            taxedPrice:
              $ref: '#/components/schemas/TaxedItemPrice'
    OrderCustomLineItemQuantityChangedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/OrderMessagePayload'
        - type: "object"
          required:
            - customLineItemId
            - oldQuantity
            - quantity
          properties:
            type:
              type: "string"
            customLineItemId:
              type: "string"
            quantity:
              type: "integer"
              format: "int64"
            oldQuantity:
              type: "integer"
              format: "int64"
    OrderCustomLineItemRemovedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/OrderMessagePayload'
        - type: "object"
          required:
            - customLineItem
            - customLineItemId
          properties:
            type:
              type: "string"
            customLineItemId:
              type: "string"
            customLineItem:
              $ref: '#/components/schemas/CustomLineItem'
    OrderCustomerEmailSetMessagePayload:
      allOf:
        - $ref: '#/components/schemas/OrderMessagePayload'
        - type: "object"
          properties:
            type:
              type: "string"
            email:
              type: "string"
            oldEmail:
              type: "string"
    OrderCustomerGroupSetMessagePayload:
      allOf:
        - $ref: '#/components/schemas/OrderMessagePayload'
        - type: "object"
          properties:
            type:
              type: "string"
            customerGroup:
              $ref: '#/components/schemas/CustomerGroupReference'
            oldCustomerGroup:
              $ref: '#/components/schemas/CustomerGroupReference'
    OrderCustomerSetMessagePayload:
      allOf:
        - $ref: '#/components/schemas/OrderMessagePayload'
        - type: "object"
          properties:
            type:
              type: "string"
            customer:
              $ref: '#/components/schemas/CustomerReference'
            customerGroup:
              $ref: '#/components/schemas/CustomerGroupReference'
            oldCustomer:
              $ref: '#/components/schemas/CustomerReference'
            oldCustomerGroup:
              $ref: '#/components/schemas/CustomerGroupReference'
    OrderDeletedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/OrderMessagePayload'
        - type: "object"
          required:
            - order
          properties:
            type:
              type: "string"
            order:
              $ref: '#/components/schemas/Order'
    OrderDiscountCodeAddedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/OrderMessagePayload'
        - type: "object"
          required:
            - discountCode
          properties:
            type:
              type: "string"
            discountCode:
              $ref: '#/components/schemas/DiscountCodeReference'
    OrderDiscountCodeRemovedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/OrderMessagePayload'
        - type: "object"
          required:
            - discountCode
          properties:
            type:
              type: "string"
            discountCode:
              $ref: '#/components/schemas/DiscountCodeReference'
    OrderDiscountCodeStateSetMessagePayload:
      allOf:
        - $ref: '#/components/schemas/OrderMessagePayload'
        - type: "object"
          required:
            - discountCode
            - state
          properties:
            type:
              type: "string"
            discountCode:
              $ref: '#/components/schemas/DiscountCodeReference'
            state:
              $ref: '#/components/schemas/DiscountCodeState'
            oldState:
              $ref: '#/components/schemas/DiscountCodeState'
    OrderEditAppliedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/OrderMessagePayload'
        - type: "object"
          required:
            - edit
            - result
          properties:
            type:
              type: "string"
            edit:
              $ref: '#/components/schemas/OrderEdit'
            result:
              $ref: '#/components/schemas/OrderEditApplied'
    OrderImportedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/OrderMessagePayload'
        - type: "object"
          required:
            - order
          properties:
            type:
              type: "string"
            order:
              $ref: '#/components/schemas/Order'
    OrderLineItemAddedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/OrderMessagePayload'
        - type: "object"
          required:
            - addedQuantity
            - lineItem
          properties:
            type:
              type: "string"
            lineItem:
              $ref: '#/components/schemas/LineItem'
            addedQuantity:
              type: "integer"
              format: "int64"
    OrderLineItemDiscountSetMessagePayload:
      allOf:
        - $ref: '#/components/schemas/OrderMessagePayload'
        - type: "object"
          required:
            - discountedPricePerQuantity
            - lineItemId
            - taxedPricePortions
            - totalPrice
          properties:
            type:
              type: "string"
            lineItemId:
              type: "string"
            discountedPricePerQuantity:
              type: "array"
              items:
                $ref: '#/components/schemas/DiscountedLineItemPriceForQuantity'
            totalPrice:
              $ref: '#/components/schemas/Money'
            taxedPrice:
              $ref: '#/components/schemas/TaxedItemPrice'
            taxedPricePortions:
              type: "array"
              items:
                $ref: '#/components/schemas/MethodTaxedPrice'
    OrderLineItemDistributionChannelSetMessagePayload:
      allOf:
        - $ref: '#/components/schemas/OrderMessagePayload'
        - type: "object"
          required:
            - lineItemId
          properties:
            type:
              type: "string"
            lineItemId:
              type: "string"
            distributionChannel:
              $ref: '#/components/schemas/ChannelReference'
    OrderLineItemRemovedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/OrderMessagePayload'
        - type: "object"
          required:
            - lineItemId
            - newQuantity
            - newState
            - newTotalPrice
            - removedQuantity
          properties:
            type:
              type: "string"
            lineItemId:
              type: "string"
            removedQuantity:
              type: "integer"
              format: "int64"
            newQuantity:
              type: "integer"
              format: "int64"
            newState:
              type: "array"
              items:
                $ref: '#/components/schemas/ItemState'
            newTotalPrice:
              $ref: '#/components/schemas/CentPrecisionMoney'
            newTaxedPrice:
              $ref: '#/components/schemas/TaxedItemPrice'
            newPrice:
              $ref: '#/components/schemas/Price'
            newShippingDetail:
              $ref: '#/components/schemas/ItemShippingDetails'
    OrderMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          properties:
            type:
              type: "string"
    OrderPaymentAddedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - payment
          properties:
            type:
              type: "string"
            payment:
              $ref: '#/components/schemas/PaymentReference'
    OrderPaymentStateChangedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/OrderMessagePayload'
        - type: "object"
          required:
            - paymentState
          properties:
            type:
              type: "string"
            paymentState:
              $ref: '#/components/schemas/PaymentState'
            oldPaymentState:
              $ref: '#/components/schemas/PaymentState'
    OrderPurchaseOrderNumberSetMessagePayload:
      allOf:
        - $ref: '#/components/schemas/OrderMessagePayload'
        - type: "object"
          properties:
            type:
              type: "string"
            purchaseOrderNumber:
              type: "string"
            oldPurchaseOrderNumber:
              type: "string"
    OrderReturnShipmentStateChangedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/OrderMessagePayload'
        - type: "object"
          required:
            - returnItemId
            - returnShipmentState
          properties:
            type:
              type: "string"
            returnItemId:
              type: "string"
            returnShipmentState:
              $ref: '#/components/schemas/ReturnShipmentState'
    OrderShipmentStateChangedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/OrderMessagePayload'
        - type: "object"
          required:
            - oldShipmentState
            - shipmentState
          properties:
            type:
              type: "string"
            shipmentState:
              $ref: '#/components/schemas/ShipmentState'
            oldShipmentState:
              $ref: '#/components/schemas/ShipmentState'
    OrderShippingAddressSetMessagePayload:
      allOf:
        - $ref: '#/components/schemas/OrderMessagePayload'
        - type: "object"
          properties:
            type:
              type: "string"
            address:
              $ref: '#/components/schemas/Address'
            oldAddress:
              $ref: '#/components/schemas/Address'
    OrderShippingInfoSetMessagePayload:
      allOf:
        - $ref: '#/components/schemas/OrderMessagePayload'
        - type: "object"
          properties:
            type:
              type: "string"
            shippingInfo:
              $ref: '#/components/schemas/ShippingInfo'
            oldShippingInfo:
              $ref: '#/components/schemas/ShippingInfo'
    OrderShippingRateInputSetMessagePayload:
      allOf:
        - $ref: '#/components/schemas/OrderMessagePayload'
        - type: "object"
          properties:
            type:
              type: "string"
            shippingRateInput:
              $ref: '#/components/schemas/ShippingRateInput'
            oldShippingRateInput:
              $ref: '#/components/schemas/ShippingRateInput'
    OrderStateChangedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/OrderMessagePayload'
        - type: "object"
          required:
            - oldOrderState
            - orderState
          properties:
            type:
              type: "string"
            orderState:
              $ref: '#/components/schemas/OrderState'
            oldOrderState:
              $ref: '#/components/schemas/OrderState'
    OrderStateTransitionMessagePayload:
      allOf:
        - $ref: '#/components/schemas/OrderMessagePayload'
        - type: "object"
          required:
            - force
            - state
          properties:
            type:
              type: "string"
            state:
              $ref: '#/components/schemas/StateReference'
            oldState:
              $ref: '#/components/schemas/StateReference'
            force:
              type: "boolean"
    OrderStoreSetMessagePayload:
      allOf:
        - $ref: '#/components/schemas/OrderMessagePayload'
        - type: "object"
          properties:
            type:
              type: "string"
            store:
              $ref: '#/components/schemas/StoreKeyReference'
    ParcelAddedToDeliveryMessagePayload:
      allOf:
        - $ref: '#/components/schemas/OrderMessagePayload'
        - type: "object"
          required:
            - delivery
            - parcel
          properties:
            type:
              type: "string"
            delivery:
              $ref: '#/components/schemas/Delivery'
            parcel:
              $ref: '#/components/schemas/Parcel'
            shippingKey:
              type: "string"
    ParcelItemsUpdatedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/OrderMessagePayload'
        - type: "object"
          required:
            - deliveryId
            - items
            - oldItems
            - parcelId
          properties:
            type:
              type: "string"
            parcelId:
              type: "string"
            deliveryId:
              type: "string"
            items:
              type: "array"
              items:
                $ref: '#/components/schemas/DeliveryItem'
            oldItems:
              type: "array"
              items:
                $ref: '#/components/schemas/DeliveryItem'
            shippingKey:
              type: "string"
    ParcelMeasurementsUpdatedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/OrderMessagePayload'
        - type: "object"
          required:
            - deliveryId
            - parcelId
          properties:
            type:
              type: "string"
            deliveryId:
              type: "string"
            parcelId:
              type: "string"
            measurements:
              $ref: '#/components/schemas/ParcelMeasurements'
            shippingKey:
              type: "string"
    ParcelRemovedFromDeliveryMessagePayload:
      allOf:
        - $ref: '#/components/schemas/OrderMessagePayload'
        - type: "object"
          required:
            - deliveryId
            - parcel
          properties:
            type:
              type: "string"
            deliveryId:
              type: "string"
            parcel:
              $ref: '#/components/schemas/Parcel'
            shippingKey:
              type: "string"
    ParcelTrackingDataUpdatedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/OrderMessagePayload'
        - type: "object"
          required:
            - deliveryId
            - parcelId
          properties:
            type:
              type: "string"
            deliveryId:
              type: "string"
            parcelId:
              type: "string"
            trackingData:
              $ref: '#/components/schemas/TrackingData'
            shippingKey:
              type: "string"
    PaymentCreatedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - payment
          properties:
            type:
              type: "string"
            payment:
              $ref: '#/components/schemas/Payment'
    PaymentInteractionAddedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - interaction
          properties:
            type:
              type: "string"
            interaction:
              $ref: '#/components/schemas/CustomFields'
    PaymentStatusInterfaceCodeSetMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - paymentId
          properties:
            type:
              type: "string"
            paymentId:
              type: "string"
            interfaceCode:
              type: "string"
    PaymentStatusStateTransitionMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - force
            - state
          properties:
            type:
              type: "string"
            state:
              $ref: '#/components/schemas/StateReference'
            force:
              type: "boolean"
    PaymentTransactionAddedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - transaction
          properties:
            type:
              type: "string"
            transaction:
              $ref: '#/components/schemas/Transaction'
    PaymentTransactionStateChangedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - state
            - transactionId
          properties:
            type:
              type: "string"
            transactionId:
              type: "string"
            state:
              $ref: '#/components/schemas/TransactionState'
    ProductAddedToCategoryMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - category
            - staged
          properties:
            type:
              type: "string"
            category:
              $ref: '#/components/schemas/CategoryReference'
            staged:
              type: "boolean"
    ProductCreatedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - productProjection
          properties:
            type:
              type: "string"
            productProjection:
              $ref: '#/components/schemas/ProductProjection'
    ProductDeletedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - removedImageUrls
          properties:
            type:
              type: "string"
            removedImageUrls:
              type: "array"
              items:
                type: "string"
            currentProjection:
              $ref: '#/components/schemas/ProductProjection'
    ProductImageAddedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - image
            - staged
            - variantId
          properties:
            type:
              type: "string"
            variantId:
              type: "integer"
              format: "int64"
            image:
              $ref: '#/components/schemas/Image'
            staged:
              type: "boolean"
    ProductPriceAddedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - price
            - staged
            - variantId
          properties:
            type:
              type: "string"
            variantId:
              type: "integer"
              format: "int64"
            price:
              $ref: '#/components/schemas/Price'
            staged:
              type: "boolean"
    ProductPriceChangedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - newPrice
            - oldPrice
            - staged
            - variantId
          properties:
            type:
              type: "string"
            variantId:
              type: "integer"
              format: "int64"
            oldPrice:
              $ref: '#/components/schemas/Price'
            newPrice:
              $ref: '#/components/schemas/Price'
            staged:
              type: "boolean"
            oldStagedPrice:
              $ref: '#/components/schemas/Price'
    ProductPriceDiscountsSetMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - updatedPrices
          properties:
            type:
              type: "string"
            updatedPrices:
              type: "array"
              items:
                $ref: '#/components/schemas/ProductPriceDiscountsSetUpdatedPrice'
    ProductPriceExternalDiscountSetMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - priceId
            - staged
            - variantId
          properties:
            type:
              type: "string"
            variantId:
              type: "integer"
              format: "int32"
            variantKey:
              type: "string"
            sku:
              type: "string"
            priceId:
              type: "string"
            discounted:
              $ref: '#/components/schemas/DiscountedPrice'
            staged:
              type: "boolean"
    ProductPriceKeySetMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - staged
            - variantId
          properties:
            type:
              type: "string"
            variantId:
              type: "integer"
              format: "int64"
            priceId:
              type: "string"
            oldKey:
              type: "string"
            key:
              type: "string"
            staged:
              type: "boolean"
    ProductPriceModeSetMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - to
          properties:
            type:
              type: "string"
            to:
              $ref: '#/components/schemas/ProductPriceModeEnum'
    ProductPriceRemovedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - price
            - staged
            - variantId
          properties:
            type:
              type: "string"
            variantId:
              type: "integer"
              format: "int64"
            price:
              $ref: '#/components/schemas/Price'
            staged:
              type: "boolean"
    ProductPricesSetMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - prices
            - staged
            - variantId
          properties:
            type:
              type: "string"
            variantId:
              type: "integer"
              format: "int64"
            prices:
              type: "array"
              items:
                $ref: '#/components/schemas/Price'
            staged:
              type: "boolean"
    ProductPublishedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - productProjection
            - removedImageUrls
            - scope
          properties:
            type:
              type: "string"
            removedImageUrls:
              type: "array"
              items:
                type: "string"
            productProjection:
              $ref: '#/components/schemas/ProductProjection'
            scope:
              $ref: '#/components/schemas/ProductPublishScope'
    ProductRemovedFromCategoryMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - category
            - staged
          properties:
            type:
              type: "string"
            category:
              $ref: '#/components/schemas/CategoryReference'
            staged:
              type: "boolean"
    ProductRevertedStagedChangesMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - removedImageUrls
          properties:
            type:
              type: "string"
            removedImageUrls:
              type: "array"
              items:
                type: "string"
    ProductSelectionCreatedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - productSelection
          properties:
            type:
              type: "string"
            productSelection:
              $ref: '#/components/schemas/ProductSelection'
    ProductSelectionDeletedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          properties:
            type:
              type: "string"
    ProductSelectionProductAddedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - product
            - variantSelection
          properties:
            type:
              type: "string"
            product:
              $ref: '#/components/schemas/ProductReference'
            variantSelection:
              $ref: '#/components/schemas/ProductVariantSelection'
    ProductSelectionProductExcludedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - product
            - variantExclusion
          properties:
            type:
              type: "string"
            product:
              $ref: '#/components/schemas/ProductReference'
            variantExclusion:
              $ref: '#/components/schemas/ProductVariantExclusion'
    ProductSelectionProductRemovedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - product
          properties:
            type:
              type: "string"
            product:
              $ref: '#/components/schemas/ProductReference'
    ProductSelectionVariantExclusionChangedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - newVariantExclusion
            - oldVariantExclusion
            - product
          properties:
            type:
              type: "string"
            product:
              $ref: '#/components/schemas/ProductReference'
            oldVariantExclusion:
              $ref: '#/components/schemas/ProductVariantExclusion'
            newVariantExclusion:
              $ref: '#/components/schemas/ProductVariantExclusion'
    ProductSelectionVariantSelectionChangedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - newVariantSelection
            - oldVariantSelection
            - product
          properties:
            type:
              type: "string"
            product:
              $ref: '#/components/schemas/ProductReference'
            oldVariantSelection:
              $ref: '#/components/schemas/ProductVariantSelection'
            newVariantSelection:
              $ref: '#/components/schemas/ProductVariantSelection'
    ProductSlugChangedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - slug
          properties:
            type:
              type: "string"
            slug:
              $ref: '#/components/schemas/LocalizedString'
            oldSlug:
              $ref: '#/components/schemas/LocalizedString'
    ProductStateTransitionMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - force
            - state
          properties:
            type:
              type: "string"
            state:
              $ref: '#/components/schemas/StateReference'
            force:
              type: "boolean"
    ProductUnpublishedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          properties:
            type:
              type: "string"
    ProductVariantAddedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - staged
            - variant
          properties:
            type:
              type: "string"
            variant:
              $ref: '#/components/schemas/ProductVariant'
            staged:
              type: "boolean"
    ProductVariantDeletedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - removedImageUrls
          properties:
            type:
              type: "string"
            variant:
              $ref: '#/components/schemas/ProductVariant'
            removedImageUrls:
              type: "array"
              items:
                type: "string"
    QuoteCreatedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - quote
          properties:
            type:
              type: "string"
            quote:
              $ref: '#/components/schemas/Quote'
    QuoteDeletedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          properties:
            type:
              type: "string"
    QuoteRequestCreatedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - quoteRequest
          properties:
            type:
              type: "string"
            quoteRequest:
              $ref: '#/components/schemas/QuoteRequest'
    QuoteRequestDeletedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          properties:
            type:
              type: "string"
    QuoteRequestStateChangedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - oldQuoteRequestState
            - quoteRequestState
          properties:
            type:
              type: "string"
            quoteRequestState:
              $ref: '#/components/schemas/QuoteRequestState'
            oldQuoteRequestState:
              $ref: '#/components/schemas/QuoteRequestState'
    QuoteRequestStateTransitionMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - force
            - state
          properties:
            type:
              type: "string"
            state:
              $ref: '#/components/schemas/StateReference'
            oldState:
              $ref: '#/components/schemas/StateReference'
            force:
              type: "boolean"
    QuoteStateChangedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - oldQuoteState
            - quoteState
          properties:
            type:
              type: "string"
            quoteState:
              $ref: '#/components/schemas/QuoteState'
            oldQuoteState:
              $ref: '#/components/schemas/QuoteState'
    QuoteStateTransitionMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - force
            - state
          properties:
            type:
              type: "string"
            state:
              $ref: '#/components/schemas/StateReference'
            oldState:
              $ref: '#/components/schemas/StateReference'
            force:
              type: "boolean"
    ReturnInfoAddedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/OrderMessagePayload'
        - type: "object"
          required:
            - returnInfo
          properties:
            type:
              type: "string"
            returnInfo:
              $ref: '#/components/schemas/ReturnInfo'
    ReturnInfoSetMessagePayload:
      allOf:
        - $ref: '#/components/schemas/OrderMessagePayload'
        - type: "object"
          properties:
            type:
              type: "string"
            returnInfo:
              type: "array"
              items:
                $ref: '#/components/schemas/ReturnInfo'
    ReviewCreatedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - review
          properties:
            type:
              type: "string"
            review:
              $ref: '#/components/schemas/Review'
    ReviewRatingSetMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - includedInStatistics
          properties:
            type:
              type: "string"
            oldRating:
              type: "number"
              format: "double"
            newRating:
              type: "number"
              format: "double"
            includedInStatistics:
              type: "boolean"
            target:
              $ref: '#/components/schemas/Reference'
    ReviewStateTransitionMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - force
            - newIncludedInStatistics
            - newState
            - oldIncludedInStatistics
          properties:
            type:
              type: "string"
            oldState:
              $ref: '#/components/schemas/StateReference'
            newState:
              $ref: '#/components/schemas/StateReference'
            oldIncludedInStatistics:
              type: "boolean"
            newIncludedInStatistics:
              type: "boolean"
            target:
              $ref: '#/components/schemas/Reference'
            force:
              type: "boolean"
    ShoppingListStoreSetMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - store
          properties:
            type:
              type: "string"
            store:
              $ref: '#/components/schemas/StoreKeyReference'
    StagedQuoteCreatedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - stagedQuote
          properties:
            type:
              type: "string"
            stagedQuote:
              $ref: '#/components/schemas/StagedQuote'
    StagedQuoteDeletedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          properties:
            type:
              type: "string"
    StagedQuoteSellerCommentSetMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - sellerComment
          properties:
            type:
              type: "string"
            sellerComment:
              type: "string"
    StagedQuoteStateChangedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - oldStagedQuoteState
            - stagedQuoteState
          properties:
            type:
              type: "string"
            stagedQuoteState:
              $ref: '#/components/schemas/StagedQuoteState'
            oldStagedQuoteState:
              $ref: '#/components/schemas/StagedQuoteState'
    StagedQuoteStateTransitionMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - force
            - state
          properties:
            type:
              type: "string"
            state:
              $ref: '#/components/schemas/StateReference'
            oldState:
              $ref: '#/components/schemas/StateReference'
            force:
              type: "boolean"
    StagedQuoteValidToSetMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - validTo
          properties:
            type:
              type: "string"
            validTo:
              type: "string"
              format: "datetime"
    StandalonePriceActiveChangedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - active
            - oldActive
          properties:
            type:
              type: "string"
            active:
              type: "boolean"
            oldActive:
              type: "boolean"
    StandalonePriceCreatedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - standalonePrice
          properties:
            type:
              type: "string"
            standalonePrice:
              $ref: '#/components/schemas/StandalonePrice'
    StandalonePriceDeletedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          properties:
            type:
              type: "string"
    StandalonePriceDiscountSetMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          properties:
            type:
              type: "string"
            discounted:
              $ref: '#/components/schemas/DiscountedPrice'
    StandalonePriceExternalDiscountSetMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          properties:
            type:
              type: "string"
            discounted:
              $ref: '#/components/schemas/DiscountedPrice'
    StandalonePriceKeySetMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          properties:
            type:
              type: "string"
            key:
              type: "string"
            oldKey:
              type: "string"
    StandalonePriceStagedChangesAppliedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - stagedChanges
          properties:
            type:
              type: "string"
            stagedChanges:
              $ref: '#/components/schemas/StagedStandalonePrice'
    StandalonePriceValueChangedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - staged
            - value
          properties:
            type:
              type: "string"
            value:
              $ref: '#/components/schemas/Money'
            staged:
              type: "boolean"
            oldValue:
              $ref: '#/components/schemas/Money'
    StoreCountriesChangedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          properties:
            type:
              type: "string"
            addedCountries:
              type: "array"
              items:
                $ref: '#/components/schemas/StoreCountry'
            removedCountries:
              type: "array"
              items:
                $ref: '#/components/schemas/StoreCountry'
    StoreCreatedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          required:
            - distributionChannels
            - productSelections
            - supplyChannels
          properties:
            type:
              type: "string"
            name:
              $ref: '#/components/schemas/LocalizedString'
            languages:
              type: "array"
              items:
                type: "string"
            countries:
              type: "array"
              items:
                $ref: '#/components/schemas/StoreCountry'
            distributionChannels:
              type: "array"
              items:
                $ref: '#/components/schemas/ChannelReference'
            supplyChannels:
              type: "array"
              items:
                $ref: '#/components/schemas/ChannelReference'
            productSelections:
              type: "array"
              items:
                $ref: '#/components/schemas/ProductSelectionSetting'
            custom:
              $ref: '#/components/schemas/CustomFields'
    StoreDeletedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          properties:
            type:
              type: "string"
    StoreDistributionChannelsChangedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          properties:
            type:
              type: "string"
            addedDistributionChannels:
              type: "array"
              items:
                $ref: '#/components/schemas/ChannelReference'
            removedDistributionChannels:
              type: "array"
              items:
                $ref: '#/components/schemas/ChannelReference'
    StoreLanguagesChangedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          properties:
            type:
              type: "string"
            addedLanguages:
              type: "array"
              items:
                $ref: '#/components/schemas/Locale'
            removedLanguages:
              type: "array"
              items:
                $ref: '#/components/schemas/Locale'
    StoreNameSetMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          properties:
            type:
              type: "string"
            name:
              $ref: '#/components/schemas/LocalizedString'
            nameAllLocales:
              type: "array"
              items:
                $ref: '#/components/schemas/LocalizedString'
    StoreProductSelectionsChangedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          properties:
            type:
              type: "string"
            addedProductSelections:
              type: "array"
              items:
                $ref: '#/components/schemas/ProductSelectionSetting'
            removedProductSelections:
              type: "array"
              items:
                $ref: '#/components/schemas/ProductSelectionSetting'
            updatedProductSelections:
              type: "array"
              items:
                $ref: '#/components/schemas/ProductSelectionSetting'
    StoreSupplyChannelsChangedMessagePayload:
      allOf:
        - $ref: '#/components/schemas/MessagePayload'
        - type: "object"
          properties:
            type:
              type: "string"
            addedSupplyChannels:
              type: "array"
              items:
                $ref: '#/components/schemas/ChannelReference'
            removedSupplyChannels:
              type: "array"
              items:
                $ref: '#/components/schemas/ChannelReference'
    OrderEdit:
      allOf:
        - $ref: '#/components/schemas/BaseResource'
        - type: "object"
          required:
            - createdAt
            - id
            - lastModifiedAt
            - resource
            - result
            - stagedActions
            - version
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            key:
              type: "string"
            resource:
              $ref: '#/components/schemas/OrderReference'
            stagedActions:
              type: "array"
              items:
                $ref: '#/components/schemas/StagedOrderUpdateAction'
            custom:
              $ref: '#/components/schemas/CustomFields'
            result:
              $ref: '#/components/schemas/OrderEditResult'
            comment:
              type: "string"
    OrderEditApplied:
      allOf:
        - $ref: '#/components/schemas/OrderEditResult'
        - type: "object"
          required:
            - appliedAt
            - excerptAfterEdit
            - excerptBeforeEdit
          properties:
            type:
              type: "string"
            appliedAt:
              type: "string"
              format: "datetime"
            excerptBeforeEdit:
              $ref: '#/components/schemas/OrderExcerpt'
            excerptAfterEdit:
              $ref: '#/components/schemas/OrderExcerpt'
    OrderEditApply:
      type: "object"
      required:
        - editVersion
        - resourceVersion
      properties:
        editVersion:
          type: "integer"
          format: "int64"
        resourceVersion:
          type: "integer"
          format: "int64"
    OrderEditDraft:
      type: "object"
      required:
        - resource
      properties:
        key:
          type: "string"
        resource:
          $ref: '#/components/schemas/OrderReference'
        stagedActions:
          type: "array"
          items:
            $ref: '#/components/schemas/StagedOrderUpdateAction'
        custom:
          $ref: '#/components/schemas/CustomFieldsDraft'
        comment:
          type: "string"
        dryRun:
          type: "boolean"
    OrderEditNotProcessed:
      allOf:
        - $ref: '#/components/schemas/OrderEditResult'
        - type: "object"
          properties:
            type:
              type: "string"
    OrderEditPagedQueryResponse:
      type: "object"
      required:
        - count
        - limit
        - offset
        - results
      properties:
        limit:
          type: "integer"
          format: "int64"
        count:
          type: "integer"
          format: "int64"
        total:
          type: "integer"
          format: "int64"
        offset:
          type: "integer"
          format: "int64"
        results:
          type: "array"
          items:
            $ref: '#/components/schemas/OrderEdit'
    OrderEditPreviewFailure:
      allOf:
        - $ref: '#/components/schemas/OrderEditResult'
        - type: "object"
          required:
            - errors
          properties:
            type:
              type: "string"
            errors:
              type: "array"
              items:
                $ref: '#/components/schemas/ErrorObject'
    OrderEditPreviewSuccess:
      allOf:
        - $ref: '#/components/schemas/OrderEditResult'
        - type: "object"
          required:
            - messagePayloads
            - preview
          properties:
            type:
              type: "string"
            preview:
              $ref: '#/components/schemas/StagedOrder'
            messagePayloads:
              type: "array"
              items:
                $ref: '#/components/schemas/MessagePayload'
    OrderEditReference:
      allOf:
        - $ref: '#/components/schemas/Reference'
        - type: "object"
          required:
            - id
          properties:
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            id:
              type: "string"
            obj:
              $ref: '#/components/schemas/OrderEdit'
    OrderEditResourceIdentifier:
      allOf:
        - $ref: '#/components/schemas/ResourceIdentifier'
        - type: "object"
          properties:
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            id:
              type: "string"
            key:
              type: "string"
    OrderEditResult:
      type: "object"
      discriminator:
        propertyName: type
        mapping:
          Applied: '#/components/schemas/OrderEditApplied'
          NotProcessed: '#/components/schemas/OrderEditNotProcessed'
          PreviewFailure: '#/components/schemas/OrderEditPreviewFailure'
          PreviewSuccess: '#/components/schemas/OrderEditPreviewSuccess'
      required:
        - type
      properties:
        type:
          type: "string"
    OrderEditUpdate:
      type: "object"
      required:
        - actions
        - version
      properties:
        version:
          type: "integer"
          format: "int64"
        actions:
          type: "array"
          items:
            $ref: '#/components/schemas/OrderEditUpdateAction'
        dryRun:
          type: "boolean"
    OrderEditUpdateAction:
      type: "object"
      discriminator:
        propertyName: action
        mapping:
          addStagedAction: '#/components/schemas/OrderEditAddStagedActionAction'
          setComment: '#/components/schemas/OrderEditSetCommentAction'
          setCustomField: '#/components/schemas/OrderEditSetCustomFieldAction'
          setCustomType: '#/components/schemas/OrderEditSetCustomTypeAction'
          setKey: '#/components/schemas/OrderEditSetKeyAction'
          setStagedActions: '#/components/schemas/OrderEditSetStagedActionsAction'
      required:
        - action
      properties:
        action:
          type: "string"
    OrderExcerpt:
      type: "object"
      required:
        - totalPrice
        - version
      properties:
        totalPrice:
          $ref: '#/components/schemas/TypedMoney'
        taxedPrice:
          $ref: '#/components/schemas/TaxedPrice'
        version:
          type: "integer"
          format: "int64"
    StagedOrder:
      allOf:
        - $ref: '#/components/schemas/Order'
        - type: "object"
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            completedAt:
              type: "string"
              format: "datetime"
            orderNumber:
              type: "string"
            customerId:
              type: "string"
            customerEmail:
              type: "string"
            anonymousId:
              type: "string"
            businessUnit:
              $ref: '#/components/schemas/BusinessUnitKeyReference'
            store:
              $ref: '#/components/schemas/StoreKeyReference'
            lineItems:
              type: "array"
              items:
                $ref: '#/components/schemas/LineItem'
            customLineItems:
              type: "array"
              items:
                $ref: '#/components/schemas/CustomLineItem'
            totalPrice:
              $ref: '#/components/schemas/TypedMoney'
            taxedPrice:
              $ref: '#/components/schemas/TaxedPrice'
            taxedShippingPrice:
              $ref: '#/components/schemas/TaxedPrice'
            shippingAddress:
              $ref: '#/components/schemas/Address'
            billingAddress:
              $ref: '#/components/schemas/Address'
            shippingMode:
              $ref: '#/components/schemas/ShippingMode'
            shippingKey:
              type: "string"
            shippingCustomFields:
              $ref: '#/components/schemas/CustomFields'
            shipping:
              type: "array"
              items:
                $ref: '#/components/schemas/Shipping'
            taxMode:
              $ref: '#/components/schemas/TaxMode'
            taxRoundingMode:
              $ref: '#/components/schemas/RoundingMode'
            customerGroup:
              $ref: '#/components/schemas/CustomerGroupReference'
            country:
              type: "string"
            orderState:
              $ref: '#/components/schemas/OrderState'
            state:
              $ref: '#/components/schemas/StateReference'
            shipmentState:
              $ref: '#/components/schemas/ShipmentState'
            paymentState:
              $ref: '#/components/schemas/PaymentState'
            shippingInfo:
              $ref: '#/components/schemas/ShippingInfo'
            syncInfo:
              type: "array"
              items:
                $ref: '#/components/schemas/SyncInfo'
            returnInfo:
              type: "array"
              items:
                $ref: '#/components/schemas/ReturnInfo'
            purchaseOrderNumber:
              type: "string"
            discountCodes:
              type: "array"
              items:
                $ref: '#/components/schemas/DiscountCodeInfo'
            lastMessageSequenceNumber:
              type: "integer"
              format: "int64"
            cart:
              $ref: '#/components/schemas/CartReference'
            quote:
              $ref: '#/components/schemas/QuoteReference'
            custom:
              $ref: '#/components/schemas/CustomFields'
            paymentInfo:
              $ref: '#/components/schemas/PaymentInfo'
            locale:
              type: "string"
            inventoryMode:
              $ref: '#/components/schemas/InventoryMode'
            origin:
              $ref: '#/components/schemas/CartOrigin'
            taxCalculationMode:
              $ref: '#/components/schemas/TaxCalculationMode'
            shippingRateInput:
              $ref: '#/components/schemas/ShippingRateInput'
            itemShippingAddresses:
              type: "array"
              items:
                $ref: '#/components/schemas/Address'
            refusedGifts:
              type: "array"
              items:
                $ref: '#/components/schemas/CartDiscountReference'
    StagedOrderUpdateAction:
      type: "object"
      discriminator:
        propertyName: action
        mapping:
          addCustomLineItem: '#/components/schemas/StagedOrderAddCustomLineItemAction'
          addDelivery: '#/components/schemas/StagedOrderAddDeliveryAction'
          addDiscountCode: '#/components/schemas/StagedOrderAddDiscountCodeAction'
          addItemShippingAddress: '#/components/schemas/StagedOrderAddItemShippingAddressAction'
          addLineItem: '#/components/schemas/StagedOrderAddLineItemAction'
          addParcelToDelivery: '#/components/schemas/StagedOrderAddParcelToDeliveryAction'
          addPayment: '#/components/schemas/StagedOrderAddPaymentAction'
          addReturnInfo: '#/components/schemas/StagedOrderAddReturnInfoAction'
          addShoppingList: '#/components/schemas/StagedOrderAddShoppingListAction'
          changeCustomLineItemMoney: '#/components/schemas/StagedOrderChangeCustomLineItemMoneyAction'
          changeCustomLineItemQuantity: '#/components/schemas/StagedOrderChangeCustomLineItemQuantityAction'
          changeLineItemQuantity: '#/components/schemas/StagedOrderChangeLineItemQuantityAction'
          changeOrderState: '#/components/schemas/StagedOrderChangeOrderStateAction'
          changePaymentState: '#/components/schemas/StagedOrderChangePaymentStateAction'
          changeShipmentState: '#/components/schemas/StagedOrderChangeShipmentStateAction'
          changeTaxCalculationMode: '#/components/schemas/StagedOrderChangeTaxCalculationModeAction'
          changeTaxMode: '#/components/schemas/StagedOrderChangeTaxModeAction'
          changeTaxRoundingMode: '#/components/schemas/StagedOrderChangeTaxRoundingModeAction'
          importCustomLineItemState: '#/components/schemas/StagedOrderImportCustomLineItemStateAction'
          importLineItemState: '#/components/schemas/StagedOrderImportLineItemStateAction'
          removeCustomLineItem: '#/components/schemas/StagedOrderRemoveCustomLineItemAction'
          removeDelivery: '#/components/schemas/StagedOrderRemoveDeliveryAction'
          removeDiscountCode: '#/components/schemas/StagedOrderRemoveDiscountCodeAction'
          removeItemShippingAddress: '#/components/schemas/StagedOrderRemoveItemShippingAddressAction'
          removeLineItem: '#/components/schemas/StagedOrderRemoveLineItemAction'
          removeParcelFromDelivery: '#/components/schemas/StagedOrderRemoveParcelFromDeliveryAction'
          removePayment: '#/components/schemas/StagedOrderRemovePaymentAction'
          setBillingAddress: '#/components/schemas/StagedOrderSetBillingAddressAction'
          setBillingAddressCustomField: '#/components/schemas/StagedOrderSetBillingAddressCustomFieldAction'
          setBillingAddressCustomType: '#/components/schemas/StagedOrderSetBillingAddressCustomTypeAction'
          setCountry: '#/components/schemas/StagedOrderSetCountryAction'
          setCustomField: '#/components/schemas/StagedOrderSetCustomFieldAction'
          setCustomLineItemCustomField: '#/components/schemas/StagedOrderSetCustomLineItemCustomFieldAction'
          setCustomLineItemCustomType: '#/components/schemas/StagedOrderSetCustomLineItemCustomTypeAction'
          setCustomLineItemShippingDetails: '#/components/schemas/StagedOrderSetCustomLineItemShippingDetailsAction'
          setCustomLineItemTaxAmount: '#/components/schemas/StagedOrderSetCustomLineItemTaxAmountAction'
          setCustomLineItemTaxRate: '#/components/schemas/StagedOrderSetCustomLineItemTaxRateAction'
          setCustomShippingMethod: '#/components/schemas/StagedOrderSetCustomShippingMethodAction'
          setCustomType: '#/components/schemas/StagedOrderSetCustomTypeAction'
          setCustomerEmail: '#/components/schemas/StagedOrderSetCustomerEmailAction'
          setCustomerGroup: '#/components/schemas/StagedOrderSetCustomerGroupAction'
          setCustomerId: '#/components/schemas/StagedOrderSetCustomerIdAction'
          setDeliveryAddress: '#/components/schemas/StagedOrderSetDeliveryAddressAction'
          setDeliveryAddressCustomField: '#/components/schemas/StagedOrderSetDeliveryAddressCustomFieldAction'
          setDeliveryAddressCustomType: '#/components/schemas/StagedOrderSetDeliveryAddressCustomTypeAction'
          setDeliveryCustomField: '#/components/schemas/StagedOrderSetDeliveryCustomFieldAction'
          setDeliveryCustomType: '#/components/schemas/StagedOrderSetDeliveryCustomTypeAction'
          setDeliveryItems: '#/components/schemas/StagedOrderSetDeliveryItemsAction'
          setItemShippingAddressCustomField: '#/components/schemas/StagedOrderSetItemShippingAddressCustomFieldAction'
          setItemShippingAddressCustomType: '#/components/schemas/StagedOrderSetItemShippingAddressCustomTypeAction'
          setLineItemCustomField: '#/components/schemas/StagedOrderSetLineItemCustomFieldAction'
          setLineItemCustomType: '#/components/schemas/StagedOrderSetLineItemCustomTypeAction'
          setLineItemDistributionChannel: '#/components/schemas/StagedOrderSetLineItemDistributionChannelAction'
          setLineItemPrice: '#/components/schemas/StagedOrderSetLineItemPriceAction'
          setLineItemShippingDetails: '#/components/schemas/StagedOrderSetLineItemShippingDetailsAction'
          setLineItemTaxAmount: '#/components/schemas/StagedOrderSetLineItemTaxAmountAction'
          setLineItemTaxRate: '#/components/schemas/StagedOrderSetLineItemTaxRateAction'
          setLineItemTotalPrice: '#/components/schemas/StagedOrderSetLineItemTotalPriceAction'
          setLocale: '#/components/schemas/StagedOrderSetLocaleAction'
          setOrderNumber: '#/components/schemas/StagedOrderSetOrderNumberAction'
          setOrderTotalTax: '#/components/schemas/StagedOrderSetOrderTotalTaxAction'
          setParcelCustomField: '#/components/schemas/StagedOrderSetParcelCustomFieldAction'
          setParcelCustomType: '#/components/schemas/StagedOrderSetParcelCustomTypeAction'
          setParcelItems: '#/components/schemas/StagedOrderSetParcelItemsAction'
          setParcelMeasurements: '#/components/schemas/StagedOrderSetParcelMeasurementsAction'
          setParcelTrackingData: '#/components/schemas/StagedOrderSetParcelTrackingDataAction'
          setPurchaseOrderNumber: '#/components/schemas/StagedOrderSetPurchaseOrderNumberAction'
          setReturnInfo: '#/components/schemas/StagedOrderSetReturnInfoAction'
          setReturnItemCustomField: '#/components/schemas/StagedOrderSetReturnItemCustomFieldAction'
          setReturnItemCustomType: '#/components/schemas/StagedOrderSetReturnItemCustomTypeAction'
          setReturnPaymentState: '#/components/schemas/StagedOrderSetReturnPaymentStateAction'
          setReturnShipmentState: '#/components/schemas/StagedOrderSetReturnShipmentStateAction'
          setShippingAddress: '#/components/schemas/StagedOrderSetShippingAddressAction'
          setShippingAddressAndCustomShippingMethod: '#/components/schemas/StagedOrderSetShippingAddressAndCustomShippingMethodAction'
          setShippingAddressAndShippingMethod: '#/components/schemas/StagedOrderSetShippingAddressAndShippingMethodAction'
          setShippingAddressCustomField: '#/components/schemas/StagedOrderSetShippingAddressCustomFieldAction'
          setShippingAddressCustomType: '#/components/schemas/StagedOrderSetShippingAddressCustomTypeAction'
          setShippingMethod: '#/components/schemas/StagedOrderSetShippingMethodAction'
          setShippingMethodTaxAmount: '#/components/schemas/StagedOrderSetShippingMethodTaxAmountAction'
          setShippingMethodTaxRate: '#/components/schemas/StagedOrderSetShippingMethodTaxRateAction'
          setShippingRateInput: '#/components/schemas/StagedOrderSetShippingRateInputAction'
          transitionCustomLineItemState: '#/components/schemas/StagedOrderTransitionCustomLineItemStateAction'
          transitionLineItemState: '#/components/schemas/StagedOrderTransitionLineItemStateAction'
          transitionState: '#/components/schemas/StagedOrderTransitionStateAction'
          updateItemShippingAddress: '#/components/schemas/StagedOrderUpdateItemShippingAddressAction'
          updateSyncInfo: '#/components/schemas/StagedOrderUpdateSyncInfoAction'
      required:
        - action
      properties:
        action:
          type: "string"
    OrderEditAddStagedActionAction:
      allOf:
        - $ref: '#/components/schemas/OrderEditUpdateAction'
        - type: "object"
          required:
            - stagedAction
          properties:
            action:
              type: "string"
            stagedAction:
              $ref: '#/components/schemas/StagedOrderUpdateAction'
    OrderEditSetCommentAction:
      allOf:
        - $ref: '#/components/schemas/OrderEditUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            comment:
              type: "string"
    OrderEditSetCustomFieldAction:
      allOf:
        - $ref: '#/components/schemas/OrderEditUpdateAction'
        - type: "object"
          required:
            - name
          properties:
            action:
              type: "string"
            name:
              type: "string"
            value:
              {}
    OrderEditSetCustomTypeAction:
      allOf:
        - $ref: '#/components/schemas/OrderEditUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            type:
              $ref: '#/components/schemas/TypeResourceIdentifier'
            fields:
              $ref: '#/components/schemas/FieldContainer'
    OrderEditSetKeyAction:
      allOf:
        - $ref: '#/components/schemas/OrderEditUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            key:
              type: "string"
    OrderEditSetStagedActionsAction:
      allOf:
        - $ref: '#/components/schemas/OrderEditUpdateAction'
        - type: "object"
          required:
            - stagedActions
          properties:
            action:
              type: "string"
            stagedActions:
              type: "array"
              items:
                $ref: '#/components/schemas/StagedOrderUpdateAction'
    StagedOrderAddCustomLineItemAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          required:
            - money
            - name
            - slug
          properties:
            action:
              type: "string"
            money:
              $ref: '#/components/schemas/Money'
            name:
              $ref: '#/components/schemas/LocalizedString'
            quantity:
              type: "integer"
              format: "int64"
            slug:
              type: "string"
            taxCategory:
              $ref: '#/components/schemas/TaxCategoryResourceIdentifier'
            custom:
              $ref: '#/components/schemas/CustomFieldsDraft'
            externalTaxRate:
              $ref: '#/components/schemas/ExternalTaxRateDraft'
            priceMode:
              $ref: '#/components/schemas/CustomLineItemPriceMode'
    StagedOrderAddDeliveryAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            items:
              type: "array"
              items:
                $ref: '#/components/schemas/DeliveryItem'
            address:
              $ref: '#/components/schemas/BaseAddress'
            parcels:
              type: "array"
              items:
                $ref: '#/components/schemas/ParcelDraft'
            custom:
              $ref: '#/components/schemas/CustomFieldsDraft'
    StagedOrderAddDiscountCodeAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          required:
            - code
          properties:
            action:
              type: "string"
            code:
              type: "string"
    StagedOrderAddItemShippingAddressAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          required:
            - address
          properties:
            action:
              type: "string"
            address:
              $ref: '#/components/schemas/BaseAddress'
    StagedOrderAddLineItemAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            custom:
              $ref: '#/components/schemas/CustomFieldsDraft'
            distributionChannel:
              $ref: '#/components/schemas/ChannelResourceIdentifier'
            externalTaxRate:
              $ref: '#/components/schemas/ExternalTaxRateDraft'
            productId:
              type: "string"
            variantId:
              type: "integer"
              format: "int64"
            sku:
              type: "string"
            quantity:
              type: "integer"
              format: "int64"
            addedAt:
              type: "string"
              format: "datetime"
            supplyChannel:
              $ref: '#/components/schemas/ChannelResourceIdentifier'
            externalPrice:
              $ref: '#/components/schemas/Money'
            externalTotalPrice:
              $ref: '#/components/schemas/ExternalLineItemTotalPrice'
            shippingDetails:
              $ref: '#/components/schemas/ItemShippingDetailsDraft'
    StagedOrderAddParcelToDeliveryAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          required:
            - deliveryId
          properties:
            action:
              type: "string"
            deliveryId:
              type: "string"
            measurements:
              $ref: '#/components/schemas/ParcelMeasurements'
            trackingData:
              $ref: '#/components/schemas/TrackingData'
            items:
              type: "array"
              items:
                $ref: '#/components/schemas/DeliveryItem'
    StagedOrderAddPaymentAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          required:
            - payment
          properties:
            action:
              type: "string"
            payment:
              $ref: '#/components/schemas/PaymentResourceIdentifier'
    StagedOrderAddReturnInfoAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          required:
            - items
          properties:
            action:
              type: "string"
            returnTrackingId:
              type: "string"
            items:
              type: "array"
              items:
                $ref: '#/components/schemas/ReturnItemDraft'
            returnDate:
              type: "string"
              format: "datetime"
    StagedOrderAddShoppingListAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          required:
            - shoppingList
          properties:
            action:
              type: "string"
            shoppingList:
              $ref: '#/components/schemas/ShoppingListResourceIdentifier'
            supplyChannel:
              $ref: '#/components/schemas/ChannelResourceIdentifier'
            distributionChannel:
              $ref: '#/components/schemas/ChannelResourceIdentifier'
    StagedOrderChangeCustomLineItemMoneyAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          required:
            - customLineItemId
            - money
          properties:
            action:
              type: "string"
            customLineItemId:
              type: "string"
            money:
              $ref: '#/components/schemas/Money'
    StagedOrderChangeCustomLineItemQuantityAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          required:
            - customLineItemId
            - quantity
          properties:
            action:
              type: "string"
            customLineItemId:
              type: "string"
            quantity:
              type: "integer"
              format: "int64"
    StagedOrderChangeLineItemQuantityAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          required:
            - lineItemId
            - quantity
          properties:
            action:
              type: "string"
            lineItemId:
              type: "string"
            quantity:
              type: "integer"
              format: "int64"
            externalPrice:
              $ref: '#/components/schemas/Money'
            externalTotalPrice:
              $ref: '#/components/schemas/ExternalLineItemTotalPrice'
    StagedOrderChangeOrderStateAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          required:
            - orderState
          properties:
            action:
              type: "string"
            orderState:
              $ref: '#/components/schemas/OrderState'
    StagedOrderChangePaymentStateAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            paymentState:
              $ref: '#/components/schemas/PaymentState'
    StagedOrderChangeShipmentStateAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            shipmentState:
              $ref: '#/components/schemas/ShipmentState'
    StagedOrderChangeTaxCalculationModeAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          required:
            - taxCalculationMode
          properties:
            action:
              type: "string"
            taxCalculationMode:
              $ref: '#/components/schemas/TaxCalculationMode'
    StagedOrderChangeTaxModeAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          required:
            - taxMode
          properties:
            action:
              type: "string"
            taxMode:
              $ref: '#/components/schemas/TaxMode'
    StagedOrderChangeTaxRoundingModeAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          required:
            - taxRoundingMode
          properties:
            action:
              type: "string"
            taxRoundingMode:
              $ref: '#/components/schemas/RoundingMode'
    StagedOrderImportCustomLineItemStateAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          required:
            - customLineItemId
            - state
          properties:
            action:
              type: "string"
            customLineItemId:
              type: "string"
            state:
              type: "array"
              items:
                $ref: '#/components/schemas/ItemState'
    StagedOrderImportLineItemStateAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          required:
            - lineItemId
            - state
          properties:
            action:
              type: "string"
            lineItemId:
              type: "string"
            state:
              type: "array"
              items:
                $ref: '#/components/schemas/ItemState'
    StagedOrderRemoveCustomLineItemAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          required:
            - customLineItemId
          properties:
            action:
              type: "string"
            customLineItemId:
              type: "string"
    StagedOrderRemoveDeliveryAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          required:
            - deliveryId
          properties:
            action:
              type: "string"
            deliveryId:
              type: "string"
    StagedOrderRemoveDiscountCodeAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          required:
            - discountCode
          properties:
            action:
              type: "string"
            discountCode:
              $ref: '#/components/schemas/DiscountCodeReference'
    StagedOrderRemoveItemShippingAddressAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          required:
            - addressKey
          properties:
            action:
              type: "string"
            addressKey:
              type: "string"
    StagedOrderRemoveLineItemAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          required:
            - lineItemId
          properties:
            action:
              type: "string"
            lineItemId:
              type: "string"
            quantity:
              type: "integer"
              format: "int64"
            externalPrice:
              $ref: '#/components/schemas/Money'
            externalTotalPrice:
              $ref: '#/components/schemas/ExternalLineItemTotalPrice'
            shippingDetailsToRemove:
              $ref: '#/components/schemas/ItemShippingDetailsDraft'
    StagedOrderRemoveParcelFromDeliveryAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          required:
            - parcelId
          properties:
            action:
              type: "string"
            parcelId:
              type: "string"
    StagedOrderRemovePaymentAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          required:
            - payment
          properties:
            action:
              type: "string"
            payment:
              $ref: '#/components/schemas/PaymentResourceIdentifier'
    StagedOrderSetBillingAddressAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            address:
              $ref: '#/components/schemas/BaseAddress'
    StagedOrderSetBillingAddressCustomFieldAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          required:
            - name
          properties:
            action:
              type: "string"
            name:
              type: "string"
            value:
              {}
    StagedOrderSetBillingAddressCustomTypeAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            type:
              $ref: '#/components/schemas/TypeResourceIdentifier'
            fields:
              $ref: '#/components/schemas/FieldContainer'
    StagedOrderSetCountryAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            country:
              type: "string"
    StagedOrderSetCustomFieldAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          required:
            - name
          properties:
            action:
              type: "string"
            name:
              type: "string"
            value:
              {}
    StagedOrderSetCustomLineItemCustomFieldAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          required:
            - customLineItemId
            - name
          properties:
            action:
              type: "string"
            customLineItemId:
              type: "string"
            name:
              type: "string"
            value:
              {}
    StagedOrderSetCustomLineItemCustomTypeAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          required:
            - customLineItemId
          properties:
            action:
              type: "string"
            customLineItemId:
              type: "string"
            type:
              $ref: '#/components/schemas/TypeResourceIdentifier'
            fields:
              $ref: '#/components/schemas/FieldContainer'
    StagedOrderSetCustomLineItemShippingDetailsAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          required:
            - customLineItemId
          properties:
            action:
              type: "string"
            customLineItemId:
              type: "string"
            shippingDetails:
              $ref: '#/components/schemas/ItemShippingDetailsDraft'
    StagedOrderSetCustomLineItemTaxAmountAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          required:
            - customLineItemId
          properties:
            action:
              type: "string"
            customLineItemId:
              type: "string"
            externalTaxAmount:
              $ref: '#/components/schemas/ExternalTaxAmountDraft'
    StagedOrderSetCustomLineItemTaxRateAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          required:
            - customLineItemId
          properties:
            action:
              type: "string"
            customLineItemId:
              type: "string"
            externalTaxRate:
              $ref: '#/components/schemas/ExternalTaxRateDraft'
    StagedOrderSetCustomShippingMethodAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          required:
            - shippingMethodName
            - shippingRate
          properties:
            action:
              type: "string"
            shippingMethodName:
              type: "string"
            shippingRate:
              $ref: '#/components/schemas/ShippingRateDraft'
            taxCategory:
              $ref: '#/components/schemas/TaxCategoryResourceIdentifier'
            externalTaxRate:
              $ref: '#/components/schemas/ExternalTaxRateDraft'
    StagedOrderSetCustomTypeAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            type:
              $ref: '#/components/schemas/TypeResourceIdentifier'
            fields:
              $ref: '#/components/schemas/FieldContainer'
    StagedOrderSetCustomerEmailAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            email:
              type: "string"
    StagedOrderSetCustomerGroupAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            customerGroup:
              $ref: '#/components/schemas/CustomerGroupResourceIdentifier'
    StagedOrderSetCustomerIdAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            customerId:
              type: "string"
    StagedOrderSetDeliveryAddressAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          required:
            - deliveryId
          properties:
            action:
              type: "string"
            deliveryId:
              type: "string"
            address:
              $ref: '#/components/schemas/BaseAddress'
    StagedOrderSetDeliveryAddressCustomFieldAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          required:
            - deliveryId
            - name
          properties:
            action:
              type: "string"
            deliveryId:
              type: "string"
            name:
              type: "string"
            value:
              {}
    StagedOrderSetDeliveryAddressCustomTypeAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          required:
            - deliveryId
          properties:
            action:
              type: "string"
            deliveryId:
              type: "string"
            type:
              $ref: '#/components/schemas/TypeResourceIdentifier'
            fields:
              $ref: '#/components/schemas/FieldContainer'
    StagedOrderSetDeliveryCustomFieldAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          required:
            - deliveryId
            - name
          properties:
            action:
              type: "string"
            deliveryId:
              type: "string"
            name:
              type: "string"
            value:
              {}
    StagedOrderSetDeliveryCustomTypeAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          required:
            - deliveryId
          properties:
            action:
              type: "string"
            deliveryId:
              type: "string"
            type:
              $ref: '#/components/schemas/TypeResourceIdentifier'
            fields:
              $ref: '#/components/schemas/FieldContainer'
    StagedOrderSetDeliveryItemsAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          required:
            - deliveryId
            - items
          properties:
            action:
              type: "string"
            deliveryId:
              type: "string"
            items:
              type: "array"
              items:
                $ref: '#/components/schemas/DeliveryItem'
    StagedOrderSetItemShippingAddressCustomFieldAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          required:
            - addressKey
            - name
          properties:
            action:
              type: "string"
            addressKey:
              type: "string"
            name:
              type: "string"
            value:
              {}
    StagedOrderSetItemShippingAddressCustomTypeAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          required:
            - addressKey
          properties:
            action:
              type: "string"
            addressKey:
              type: "string"
            type:
              $ref: '#/components/schemas/TypeResourceIdentifier'
            fields:
              $ref: '#/components/schemas/FieldContainer'
    StagedOrderSetLineItemCustomFieldAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          required:
            - lineItemId
            - name
          properties:
            action:
              type: "string"
            lineItemId:
              type: "string"
            name:
              type: "string"
            value:
              {}
    StagedOrderSetLineItemCustomTypeAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          required:
            - lineItemId
          properties:
            action:
              type: "string"
            lineItemId:
              type: "string"
            type:
              $ref: '#/components/schemas/TypeResourceIdentifier'
            fields:
              $ref: '#/components/schemas/FieldContainer'
    StagedOrderSetLineItemDistributionChannelAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          required:
            - lineItemId
          properties:
            action:
              type: "string"
            lineItemId:
              type: "string"
            distributionChannel:
              $ref: '#/components/schemas/ChannelResourceIdentifier'
    StagedOrderSetLineItemPriceAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          required:
            - lineItemId
          properties:
            action:
              type: "string"
            lineItemId:
              type: "string"
            externalPrice:
              $ref: '#/components/schemas/Money'
    StagedOrderSetLineItemShippingDetailsAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          required:
            - lineItemId
          properties:
            action:
              type: "string"
            lineItemId:
              type: "string"
            shippingDetails:
              $ref: '#/components/schemas/ItemShippingDetailsDraft'
    StagedOrderSetLineItemTaxAmountAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          required:
            - lineItemId
          properties:
            action:
              type: "string"
            lineItemId:
              type: "string"
            externalTaxAmount:
              $ref: '#/components/schemas/ExternalTaxAmountDraft'
            shippingKey:
              type: "string"
    StagedOrderSetLineItemTaxRateAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          required:
            - lineItemId
          properties:
            action:
              type: "string"
            lineItemId:
              type: "string"
            externalTaxRate:
              $ref: '#/components/schemas/ExternalTaxRateDraft'
            shippingKey:
              type: "string"
    StagedOrderSetLineItemTotalPriceAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          required:
            - lineItemId
          properties:
            action:
              type: "string"
            lineItemId:
              type: "string"
            externalTotalPrice:
              $ref: '#/components/schemas/ExternalLineItemTotalPrice'
    StagedOrderSetLocaleAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            locale:
              type: "string"
    StagedOrderSetOrderNumberAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            orderNumber:
              type: "string"
    StagedOrderSetOrderTotalTaxAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          required:
            - externalTotalGross
          properties:
            action:
              type: "string"
            externalTotalGross:
              $ref: '#/components/schemas/Money'
            externalTaxPortions:
              type: "array"
              items:
                $ref: '#/components/schemas/TaxPortionDraft'
    StagedOrderSetParcelCustomFieldAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          required:
            - name
            - parcelId
          properties:
            action:
              type: "string"
            parcelId:
              type: "string"
            name:
              type: "string"
            value:
              {}
    StagedOrderSetParcelCustomTypeAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          required:
            - parcelId
          properties:
            action:
              type: "string"
            parcelId:
              type: "string"
            type:
              $ref: '#/components/schemas/TypeResourceIdentifier'
            fields:
              $ref: '#/components/schemas/FieldContainer'
    StagedOrderSetParcelItemsAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          required:
            - items
            - parcelId
          properties:
            action:
              type: "string"
            parcelId:
              type: "string"
            items:
              type: "array"
              items:
                $ref: '#/components/schemas/DeliveryItem'
    StagedOrderSetParcelMeasurementsAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          required:
            - parcelId
          properties:
            action:
              type: "string"
            parcelId:
              type: "string"
            measurements:
              $ref: '#/components/schemas/ParcelMeasurements'
    StagedOrderSetParcelTrackingDataAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          required:
            - parcelId
          properties:
            action:
              type: "string"
            parcelId:
              type: "string"
            trackingData:
              $ref: '#/components/schemas/TrackingData'
    StagedOrderSetPurchaseOrderNumberAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            purchaseOrderNumber:
              type: "string"
    StagedOrderSetReturnInfoAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            items:
              type: "array"
              items:
                $ref: '#/components/schemas/ReturnInfoDraft'
    StagedOrderSetReturnItemCustomFieldAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          required:
            - name
            - returnItemId
          properties:
            action:
              type: "string"
            returnItemId:
              type: "string"
            name:
              type: "string"
            value:
              {}
    StagedOrderSetReturnItemCustomTypeAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          required:
            - returnItemId
          properties:
            action:
              type: "string"
            returnItemId:
              type: "string"
            type:
              $ref: '#/components/schemas/TypeResourceIdentifier'
            fields:
              $ref: '#/components/schemas/FieldContainer'
    StagedOrderSetReturnPaymentStateAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          required:
            - paymentState
            - returnItemId
          properties:
            action:
              type: "string"
            returnItemId:
              type: "string"
            paymentState:
              $ref: '#/components/schemas/ReturnPaymentState'
    StagedOrderSetReturnShipmentStateAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          required:
            - returnItemId
            - shipmentState
          properties:
            action:
              type: "string"
            returnItemId:
              type: "string"
            shipmentState:
              $ref: '#/components/schemas/ReturnShipmentState'
    StagedOrderSetShippingAddressAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            address:
              $ref: '#/components/schemas/BaseAddress'
    StagedOrderSetShippingAddressAndCustomShippingMethodAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          required:
            - address
            - shippingMethodName
            - shippingRate
          properties:
            action:
              type: "string"
            address:
              $ref: '#/components/schemas/BaseAddress'
            shippingMethodName:
              type: "string"
            shippingRate:
              $ref: '#/components/schemas/ShippingRateDraft'
            taxCategory:
              $ref: '#/components/schemas/TaxCategoryResourceIdentifier'
            externalTaxRate:
              $ref: '#/components/schemas/ExternalTaxRateDraft'
    StagedOrderSetShippingAddressAndShippingMethodAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          required:
            - address
          properties:
            action:
              type: "string"
            address:
              $ref: '#/components/schemas/BaseAddress'
            shippingMethod:
              $ref: '#/components/schemas/ShippingMethodResourceIdentifier'
            externalTaxRate:
              $ref: '#/components/schemas/ExternalTaxRateDraft'
    StagedOrderSetShippingAddressCustomFieldAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          required:
            - name
          properties:
            action:
              type: "string"
            name:
              type: "string"
            value:
              {}
    StagedOrderSetShippingAddressCustomTypeAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            type:
              $ref: '#/components/schemas/TypeResourceIdentifier'
            fields:
              $ref: '#/components/schemas/FieldContainer'
    StagedOrderSetShippingMethodAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            shippingMethod:
              $ref: '#/components/schemas/ShippingMethodResourceIdentifier'
            externalTaxRate:
              $ref: '#/components/schemas/ExternalTaxRateDraft'
    StagedOrderSetShippingMethodTaxAmountAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            externalTaxAmount:
              $ref: '#/components/schemas/ExternalTaxAmountDraft'
    StagedOrderSetShippingMethodTaxRateAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            externalTaxRate:
              $ref: '#/components/schemas/ExternalTaxRateDraft'
    StagedOrderSetShippingRateInputAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            shippingRateInput:
              $ref: '#/components/schemas/ShippingRateInputDraft'
    StagedOrderTransitionCustomLineItemStateAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          required:
            - customLineItemId
            - fromState
            - quantity
            - toState
          properties:
            action:
              type: "string"
            customLineItemId:
              type: "string"
            quantity:
              type: "integer"
              format: "int64"
            fromState:
              $ref: '#/components/schemas/StateResourceIdentifier'
            toState:
              $ref: '#/components/schemas/StateResourceIdentifier'
            actualTransitionDate:
              type: "string"
              format: "datetime"
    StagedOrderTransitionLineItemStateAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          required:
            - fromState
            - lineItemId
            - quantity
            - toState
          properties:
            action:
              type: "string"
            lineItemId:
              type: "string"
            quantity:
              type: "integer"
              format: "int64"
            fromState:
              $ref: '#/components/schemas/StateResourceIdentifier'
            toState:
              $ref: '#/components/schemas/StateResourceIdentifier'
            actualTransitionDate:
              type: "string"
              format: "datetime"
    StagedOrderTransitionStateAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          required:
            - state
          properties:
            action:
              type: "string"
            state:
              $ref: '#/components/schemas/StateResourceIdentifier'
            force:
              type: "boolean"
    StagedOrderUpdateItemShippingAddressAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          required:
            - address
          properties:
            action:
              type: "string"
            address:
              $ref: '#/components/schemas/BaseAddress'
    StagedOrderUpdateSyncInfoAction:
      allOf:
        - $ref: '#/components/schemas/StagedOrderUpdateAction'
        - type: "object"
          required:
            - channel
          properties:
            action:
              type: "string"
            channel:
              $ref: '#/components/schemas/ChannelResourceIdentifier'
            externalId:
              type: "string"
            syncedAt:
              type: "string"
              format: "datetime"
    Hit:
      type: "object"
      required:
        - id
        - version
      properties:
        id:
          type: "string"
        version:
          type: "integer"
          format: "int64"
        relevance:
          type: "number"
          format: "double"
    OrderPagedSearchResponse:
      type: "object"
      required:
        - hits
        - total
      properties:
        total:
          type: "integer"
          format: "int64"
        offset:
          type: "integer"
          format: "int64"
        limit:
          type: "integer"
          format: "int64"
        hits:
          type: "array"
          items:
            $ref: '#/components/schemas/Hit'
    OrderSearchAndExpression:
      allOf:
        - $ref: '#/components/schemas/OrderSearchCompoundExpression'
        - type: "object"
          required:
            - and
          properties:
            and:
              type: "array"
              items:
                $ref: '#/components/schemas/OrderSearchQuery'
    OrderSearchAnyValue:
      allOf:
        - $ref: '#/components/schemas/OrderSearchQueryExpressionValue'
        - type: "object"
          required:
            - value
          properties:
            field:
              type: "string"
            boost:
              type: "integer"
              format: "int32"
            customType:
              type: "string"
            value:
              {}
            language:
              type: "string"
            caseInsensitive:
              type: "boolean"
    OrderSearchCompoundExpression:
      allOf:
        - $ref: '#/components/schemas/OrderSearchQuery'
        - type: "object"
    OrderSearchDateRangeExpression:
      allOf:
        - $ref: '#/components/schemas/OrderSearchQueryExpression'
        - type: "object"
          required:
            - range
          properties:
            range:
              $ref: '#/components/schemas/OrderSearchDateRangeValue'
    OrderSearchDateRangeValue:
      allOf:
        - $ref: '#/components/schemas/OrderSearchQueryExpressionValue'
        - type: "object"
          properties:
            field:
              type: "string"
            boost:
              type: "integer"
              format: "int32"
            customType:
              type: "string"
            gte:
              type: "string"
              format: "datetime"
            lte:
              type: "string"
              format: "datetime"
    OrderSearchExactExpression:
      allOf:
        - $ref: '#/components/schemas/OrderSearchQueryExpression'
        - type: "object"
          required:
            - exact
          properties:
            exact:
              $ref: '#/components/schemas/OrderSearchAnyValue'
    OrderSearchExistsExpression:
      allOf:
        - $ref: '#/components/schemas/OrderSearchQueryExpression'
        - type: "object"
          required:
            - exists
          properties:
            exists:
              $ref: '#/components/schemas/OrderSearchQueryExpressionValue'
    OrderSearchFilterExpression:
      allOf:
        - $ref: '#/components/schemas/OrderSearchCompoundExpression'
        - type: "object"
          required:
            - filter
          properties:
            filter:
              type: "array"
              items:
                $ref: '#/components/schemas/OrderSearchQueryExpression'
    OrderSearchFullTextExpression:
      allOf:
        - $ref: '#/components/schemas/OrderSearchQueryExpression'
        - type: "object"
          required:
            - fullText
          properties:
            fullText:
              $ref: '#/components/schemas/OrderSearchFullTextValue'
    OrderSearchFullTextValue:
      allOf:
        - $ref: '#/components/schemas/OrderSearchQueryExpressionValue'
        - type: "object"
          required:
            - value
          properties:
            field:
              type: "string"
            boost:
              type: "integer"
              format: "int32"
            customType:
              type: "string"
            value:
              type: "string"
            language:
              type: "string"
            mustMatch:
              $ref: '#/components/schemas/OrderSearchMatchType'
    OrderSearchLongRangeExpression:
      allOf:
        - $ref: '#/components/schemas/OrderSearchQueryExpression'
        - type: "object"
          required:
            - range
          properties:
            range:
              $ref: '#/components/schemas/OrderSearchLongRangeValue'
    OrderSearchLongRangeValue:
      allOf:
        - $ref: '#/components/schemas/OrderSearchQueryExpressionValue'
        - type: "object"
          properties:
            field:
              type: "string"
            boost:
              type: "integer"
              format: "int32"
            customType:
              type: "string"
            gte:
              type: "integer"
              format: "int64"
            lte:
              type: "integer"
              format: "int64"
    OrderSearchMatchType:
      type: "string"
      enum:
        - any
        - all
      x-annotation-package: "Order"
    OrderSearchNotExpression:
      allOf:
        - $ref: '#/components/schemas/OrderSearchCompoundExpression'
        - type: "object"
          required:
            - not
          properties:
            not:
              type: "array"
              items:
                $ref: '#/components/schemas/OrderSearchQuery'
    OrderSearchNumberRangeExpression:
      allOf:
        - $ref: '#/components/schemas/OrderSearchQueryExpression'
        - type: "object"
          required:
            - range
          properties:
            range:
              $ref: '#/components/schemas/OrderSearchNumberRangeValue'
    OrderSearchNumberRangeValue:
      allOf:
        - $ref: '#/components/schemas/OrderSearchQueryExpressionValue'
        - type: "object"
          properties:
            field:
              type: "string"
            boost:
              type: "integer"
              format: "int32"
            customType:
              type: "string"
            gte:
              type: "number"
              format: "double"
            lte:
              type: "number"
              format: "double"
    OrderSearchOrExpression:
      allOf:
        - $ref: '#/components/schemas/OrderSearchCompoundExpression'
        - type: "object"
          required:
            - or
          properties:
            or:
              type: "array"
              items:
                $ref: '#/components/schemas/OrderSearchQuery'
    OrderSearchPrefixExpression:
      allOf:
        - $ref: '#/components/schemas/OrderSearchQueryExpression'
        - type: "object"
          required:
            - prefix
          properties:
            prefix:
              $ref: '#/components/schemas/OrderSearchStringValue'
    OrderSearchQueryExpression:
      allOf:
        - $ref: '#/components/schemas/OrderSearchQuery'
        - type: "object"
    OrderSearchQueryExpressionValue:
      type: "object"
      required:
        - field
      properties:
        field:
          type: "string"
        boost:
          type: "integer"
          format: "int32"
        customType:
          type: "string"
    OrderSearchSortMode:
      type: "string"
      enum:
        - min
        - max
        - avg
        - sum
      x-annotation-package: "Order"
    OrderSearchSortOrder:
      type: "string"
      enum:
        - asc
        - desc
      x-annotation-package: "Order"
    OrderSearchStringValue:
      allOf:
        - $ref: '#/components/schemas/OrderSearchQueryExpressionValue'
        - type: "object"
          required:
            - value
          properties:
            field:
              type: "string"
            boost:
              type: "integer"
              format: "int32"
            customType:
              type: "string"
            value:
              type: "string"
            language:
              type: "string"
            caseInsensitive:
              type: "boolean"
    OrderSearchWildCardExpression:
      allOf:
        - $ref: '#/components/schemas/OrderSearchQueryExpression'
        - type: "object"
          required:
            - wildcard
          properties:
            wildcard:
              $ref: '#/components/schemas/OrderSearchStringValue'
    CustomLineItemImportDraft:
      type: "object"
      required:
        - money
        - name
        - priceMode
        - quantity
        - slug
      properties:
        name:
          $ref: '#/components/schemas/LocalizedString'
        quantity:
          type: "integer"
          format: "int64"
        money:
          $ref: '#/components/schemas/Money'
        slug:
          type: "string"
        state:
          type: "array"
          items:
            $ref: '#/components/schemas/ItemState'
        taxRate:
          $ref: '#/components/schemas/TaxRate'
        taxCategory:
          $ref: '#/components/schemas/TaxCategoryResourceIdentifier'
        custom:
          $ref: '#/components/schemas/CustomFieldsDraft'
        shippingDetails:
          $ref: '#/components/schemas/ItemShippingDetailsDraft'
        priceMode:
          $ref: '#/components/schemas/CustomLineItemPriceMode'
    CustomLineItemReturnItem:
      allOf:
        - $ref: '#/components/schemas/ReturnItem'
        - type: "object"
          required:
            - customLineItemId
          properties:
            id:
              type: "string"
            quantity:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            comment:
              type: "string"
            shipmentState:
              $ref: '#/components/schemas/ReturnShipmentState'
            paymentState:
              $ref: '#/components/schemas/ReturnPaymentState'
            custom:
              $ref: '#/components/schemas/CustomFields'
            lastModifiedAt:
              type: "string"
              format: "datetime"
            createdAt:
              type: "string"
              format: "datetime"
            customLineItemId:
              type: "string"
    Delivery:
      type: "object"
      required:
        - createdAt
        - id
        - items
        - parcels
      properties:
        id:
          type: "string"
        createdAt:
          type: "string"
          format: "datetime"
        items:
          type: "array"
          items:
            $ref: '#/components/schemas/DeliveryItem'
        parcels:
          type: "array"
          items:
            $ref: '#/components/schemas/Parcel'
        address:
          $ref: '#/components/schemas/Address'
        custom:
          $ref: '#/components/schemas/CustomFields'
    DeliveryDraft:
      type: "object"
      properties:
        items:
          type: "array"
          items:
            $ref: '#/components/schemas/DeliveryItem'
        parcels:
          type: "array"
          items:
            $ref: '#/components/schemas/ParcelDraft'
        address:
          $ref: '#/components/schemas/AddressDraft'
        custom:
          $ref: '#/components/schemas/CustomFieldsDraft'
    DeliveryItem:
      type: "object"
      required:
        - id
        - quantity
      properties:
        id:
          type: "string"
        quantity:
          type: "integer"
          format: "int64"
    DiscountedLineItemPriceDraft:
      type: "object"
      required:
        - includedDiscounts
        - value
      properties:
        value:
          $ref: '#/components/schemas/Money'
        includedDiscounts:
          type: "array"
          items:
            $ref: '#/components/schemas/DiscountedLineItemPortion'
    ItemState:
      type: "object"
      required:
        - quantity
        - state
      properties:
        quantity:
          type: "integer"
          format: "int64"
        state:
          $ref: '#/components/schemas/StateReference'
    LineItemImportDraft:
      type: "object"
      required:
        - name
        - price
        - quantity
        - variant
      properties:
        productId:
          type: "string"
        name:
          $ref: '#/components/schemas/LocalizedString'
        variant:
          $ref: '#/components/schemas/ProductVariantImportDraft'
        price:
          $ref: '#/components/schemas/PriceDraft'
        quantity:
          type: "integer"
          format: "int64"
        state:
          type: "array"
          items:
            $ref: '#/components/schemas/ItemState'
        supplyChannel:
          $ref: '#/components/schemas/ChannelResourceIdentifier'
        distributionChannel:
          $ref: '#/components/schemas/ChannelResourceIdentifier'
        taxRate:
          $ref: '#/components/schemas/TaxRate'
        custom:
          $ref: '#/components/schemas/CustomFieldsDraft'
        inventoryMode:
          $ref: '#/components/schemas/InventoryMode'
        shippingDetails:
          $ref: '#/components/schemas/ItemShippingDetailsDraft'
    LineItemReturnItem:
      allOf:
        - $ref: '#/components/schemas/ReturnItem'
        - type: "object"
          required:
            - lineItemId
          properties:
            id:
              type: "string"
            quantity:
              type: "integer"
              format: "int64"
            type:
              type: "string"
            comment:
              type: "string"
            shipmentState:
              $ref: '#/components/schemas/ReturnShipmentState'
            paymentState:
              $ref: '#/components/schemas/ReturnPaymentState'
            custom:
              $ref: '#/components/schemas/CustomFields'
            lastModifiedAt:
              type: "string"
              format: "datetime"
            createdAt:
              type: "string"
              format: "datetime"
            lineItemId:
              type: "string"
    Order:
      allOf:
        - $ref: '#/components/schemas/BaseResource'
        - type: "object"
          required:
            - createdAt
            - customLineItems
            - id
            - lastModifiedAt
            - lineItems
            - orderState
            - origin
            - refusedGifts
            - shipping
            - shippingMode
            - syncInfo
            - totalPrice
            - version
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            completedAt:
              type: "string"
              format: "datetime"
            orderNumber:
              type: "string"
            customerId:
              type: "string"
            customerEmail:
              type: "string"
            anonymousId:
              type: "string"
            businessUnit:
              $ref: '#/components/schemas/BusinessUnitKeyReference'
            store:
              $ref: '#/components/schemas/StoreKeyReference'
            lineItems:
              type: "array"
              items:
                $ref: '#/components/schemas/LineItem'
            customLineItems:
              type: "array"
              items:
                $ref: '#/components/schemas/CustomLineItem'
            totalPrice:
              $ref: '#/components/schemas/TypedMoney'
            taxedPrice:
              $ref: '#/components/schemas/TaxedPrice'
            taxedShippingPrice:
              $ref: '#/components/schemas/TaxedPrice'
            shippingAddress:
              $ref: '#/components/schemas/Address'
            billingAddress:
              $ref: '#/components/schemas/Address'
            shippingMode:
              $ref: '#/components/schemas/ShippingMode'
            shippingKey:
              type: "string"
            shippingCustomFields:
              $ref: '#/components/schemas/CustomFields'
            shipping:
              type: "array"
              items:
                $ref: '#/components/schemas/Shipping'
            taxMode:
              $ref: '#/components/schemas/TaxMode'
            taxRoundingMode:
              $ref: '#/components/schemas/RoundingMode'
            customerGroup:
              $ref: '#/components/schemas/CustomerGroupReference'
            country:
              type: "string"
            orderState:
              $ref: '#/components/schemas/OrderState'
            state:
              $ref: '#/components/schemas/StateReference'
            shipmentState:
              $ref: '#/components/schemas/ShipmentState'
            paymentState:
              $ref: '#/components/schemas/PaymentState'
            shippingInfo:
              $ref: '#/components/schemas/ShippingInfo'
            syncInfo:
              type: "array"
              items:
                $ref: '#/components/schemas/SyncInfo'
            returnInfo:
              type: "array"
              items:
                $ref: '#/components/schemas/ReturnInfo'
            purchaseOrderNumber:
              type: "string"
            discountCodes:
              type: "array"
              items:
                $ref: '#/components/schemas/DiscountCodeInfo'
            lastMessageSequenceNumber:
              type: "integer"
              format: "int64"
            cart:
              $ref: '#/components/schemas/CartReference'
            quote:
              $ref: '#/components/schemas/QuoteReference'
            custom:
              $ref: '#/components/schemas/CustomFields'
            paymentInfo:
              $ref: '#/components/schemas/PaymentInfo'
            locale:
              type: "string"
            inventoryMode:
              $ref: '#/components/schemas/InventoryMode'
            origin:
              $ref: '#/components/schemas/CartOrigin'
            taxCalculationMode:
              $ref: '#/components/schemas/TaxCalculationMode'
            shippingRateInput:
              $ref: '#/components/schemas/ShippingRateInput'
            itemShippingAddresses:
              type: "array"
              items:
                $ref: '#/components/schemas/Address'
            refusedGifts:
              type: "array"
              items:
                $ref: '#/components/schemas/CartDiscountReference'
    OrderFromCartDraft:
      type: "object"
      required:
        - version
      properties:
        id:
          type: "string"
        cart:
          $ref: '#/components/schemas/CartResourceIdentifier'
        version:
          type: "integer"
          format: "int64"
        orderNumber:
          type: "string"
        purchaseOrderNumber:
          type: "string"
        paymentState:
          $ref: '#/components/schemas/PaymentState'
        shipmentState:
          $ref: '#/components/schemas/ShipmentState'
        orderState:
          $ref: '#/components/schemas/OrderState'
        state:
          $ref: '#/components/schemas/StateResourceIdentifier'
        custom:
          $ref: '#/components/schemas/CustomFieldsDraft'
    OrderFromQuoteDraft:
      type: "object"
      required:
        - quote
        - version
      properties:
        quote:
          $ref: '#/components/schemas/QuoteResourceIdentifier'
        version:
          type: "integer"
          format: "int64"
        quoteStateToAccepted:
          type: "boolean"
        orderNumber:
          type: "string"
        paymentState:
          $ref: '#/components/schemas/PaymentState'
        shipmentState:
          $ref: '#/components/schemas/ShipmentState'
        orderState:
          $ref: '#/components/schemas/OrderState'
        state:
          $ref: '#/components/schemas/StateResourceIdentifier'
    OrderImportDraft:
      type: "object"
      required:
        - totalPrice
      properties:
        orderNumber:
          type: "string"
        customerId:
          type: "string"
        customerEmail:
          type: "string"
        lineItems:
          type: "array"
          items:
            $ref: '#/components/schemas/LineItemImportDraft'
        customLineItems:
          type: "array"
          items:
            $ref: '#/components/schemas/CustomLineItemImportDraft'
        totalPrice:
          $ref: '#/components/schemas/Money'
        taxedPrice:
          $ref: '#/components/schemas/TaxedPriceDraft'
        shippingAddress:
          $ref: '#/components/schemas/BaseAddress'
        billingAddress:
          $ref: '#/components/schemas/BaseAddress'
        customerGroup:
          $ref: '#/components/schemas/CustomerGroupResourceIdentifier'
        country:
          type: "string"
        orderState:
          $ref: '#/components/schemas/OrderState'
        state:
          $ref: '#/components/schemas/StateReference'
        shipmentState:
          $ref: '#/components/schemas/ShipmentState'
        paymentState:
          $ref: '#/components/schemas/PaymentState'
        shippingInfo:
          $ref: '#/components/schemas/ShippingInfoImportDraft'
        paymentInfo:
          $ref: '#/components/schemas/PaymentInfo'
        completedAt:
          type: "string"
          format: "datetime"
        custom:
          $ref: '#/components/schemas/CustomFieldsDraft'
        inventoryMode:
          $ref: '#/components/schemas/InventoryMode'
        taxRoundingMode:
          $ref: '#/components/schemas/RoundingMode'
        itemShippingAddresses:
          type: "array"
          items:
            $ref: '#/components/schemas/BaseAddress'
        businessUnit:
          $ref: '#/components/schemas/BusinessUnitResourceIdentifier'
        store:
          $ref: '#/components/schemas/StoreResourceIdentifier'
        origin:
          $ref: '#/components/schemas/CartOrigin'
    OrderPagedQueryResponse:
      type: "object"
      required:
        - count
        - limit
        - offset
        - results
      properties:
        limit:
          type: "integer"
          format: "int64"
        count:
          type: "integer"
          format: "int64"
        total:
          type: "integer"
          format: "int64"
        offset:
          type: "integer"
          format: "int64"
        results:
          type: "array"
          items:
            $ref: '#/components/schemas/Order'
    OrderReference:
      allOf:
        - $ref: '#/components/schemas/Reference'
        - type: "object"
          properties:
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            id:
              type: "string"
            obj:
              $ref: '#/components/schemas/Order'
    OrderResourceIdentifier:
      allOf:
        - $ref: '#/components/schemas/ResourceIdentifier'
        - type: "object"
          properties:
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            id:
              type: "string"
            key:
              type: "string"
    OrderSearchQuery:
      type: "object"
    OrderSearchRequest:
      type: "object"
      required:
        - query
      properties:
        query:
          $ref: '#/components/schemas/OrderSearchQuery'
        sort:
          type: "array"
          items:
            $ref: '#/components/schemas/OrderSearchSorting'
        limit:
          type: "integer"
          format: "int32"
        offset:
          type: "integer"
          format: "int32"
    OrderSearchSorting:
      type: "object"
      required:
        - field
      properties:
        field:
          type: "string"
        language:
          type: "string"
        order:
          $ref: '#/components/schemas/OrderSearchSortOrder'
        mode:
          $ref: '#/components/schemas/OrderSearchSortMode'
        filter:
          $ref: '#/components/schemas/OrderSearchQueryExpression'
    OrderState:
      type: "string"
      enum:
        - Open
        - Confirmed
        - Complete
        - Cancelled
      x-annotation-package: "Order"
      x-annotation-docs-uri: "https://docs.commercetools.com/http-api-projects-orders.html#orderstate"
    OrderUpdate:
      type: "object"
      required:
        - actions
        - version
      properties:
        version:
          type: "integer"
          format: "int64"
        actions:
          type: "array"
          items:
            $ref: '#/components/schemas/OrderUpdateAction'
    OrderUpdateAction:
      type: "object"
      discriminator:
        propertyName: action
        mapping:
          addDelivery: '#/components/schemas/OrderAddDeliveryAction'
          addItemShippingAddress: '#/components/schemas/OrderAddItemShippingAddressAction'
          addParcelToDelivery: '#/components/schemas/OrderAddParcelToDeliveryAction'
          addPayment: '#/components/schemas/OrderAddPaymentAction'
          addReturnInfo: '#/components/schemas/OrderAddReturnInfoAction'
          changeOrderState: '#/components/schemas/OrderChangeOrderStateAction'
          changePaymentState: '#/components/schemas/OrderChangePaymentStateAction'
          changeShipmentState: '#/components/schemas/OrderChangeShipmentStateAction'
          importCustomLineItemState: '#/components/schemas/OrderImportCustomLineItemStateAction'
          importLineItemState: '#/components/schemas/OrderImportLineItemStateAction'
          removeDelivery: '#/components/schemas/OrderRemoveDeliveryAction'
          removeItemShippingAddress: '#/components/schemas/OrderRemoveItemShippingAddressAction'
          removeParcelFromDelivery: '#/components/schemas/OrderRemoveParcelFromDeliveryAction'
          removePayment: '#/components/schemas/OrderRemovePaymentAction'
          setBillingAddress: '#/components/schemas/OrderSetBillingAddressAction'
          setBillingAddressCustomField: '#/components/schemas/OrderSetBillingAddressCustomFieldAction'
          setBillingAddressCustomType: '#/components/schemas/OrderSetBillingAddressCustomTypeAction'
          setCustomField: '#/components/schemas/OrderSetCustomFieldAction'
          setCustomLineItemCustomField: '#/components/schemas/OrderSetCustomLineItemCustomFieldAction'
          setCustomLineItemCustomType: '#/components/schemas/OrderSetCustomLineItemCustomTypeAction'
          setCustomLineItemShippingDetails: '#/components/schemas/OrderSetCustomLineItemShippingDetailsAction'
          setCustomType: '#/components/schemas/OrderSetCustomTypeAction'
          setCustomerEmail: '#/components/schemas/OrderSetCustomerEmailAction'
          setCustomerId: '#/components/schemas/OrderSetCustomerIdAction'
          setDeliveryAddress: '#/components/schemas/OrderSetDeliveryAddressAction'
          setDeliveryAddressCustomField: '#/components/schemas/OrderSetDeliveryAddressCustomFieldAction'
          setDeliveryAddressCustomType: '#/components/schemas/OrderSetDeliveryAddressCustomTypeAction'
          setDeliveryCustomField: '#/components/schemas/OrderSetDeliveryCustomFieldAction'
          setDeliveryCustomType: '#/components/schemas/OrderSetDeliveryCustomTypeAction'
          setDeliveryItems: '#/components/schemas/OrderSetDeliveryItemsAction'
          setItemShippingAddressCustomField: '#/components/schemas/OrderSetItemShippingAddressCustomFieldAction'
          setItemShippingAddressCustomType: '#/components/schemas/OrderSetItemShippingAddressCustomTypeAction'
          setLineItemCustomField: '#/components/schemas/OrderSetLineItemCustomFieldAction'
          setLineItemCustomType: '#/components/schemas/OrderSetLineItemCustomTypeAction'
          setLineItemShippingDetails: '#/components/schemas/OrderSetLineItemShippingDetailsAction'
          setLocale: '#/components/schemas/OrderSetLocaleAction'
          setOrderNumber: '#/components/schemas/OrderSetOrderNumberAction'
          setParcelCustomField: '#/components/schemas/OrderSetParcelCustomFieldAction'
          setParcelCustomType: '#/components/schemas/OrderSetParcelCustomTypeAction'
          setParcelItems: '#/components/schemas/OrderSetParcelItemsAction'
          setParcelMeasurements: '#/components/schemas/OrderSetParcelMeasurementsAction'
          setParcelTrackingData: '#/components/schemas/OrderSetParcelTrackingDataAction'
          setPurchaseOrderNumber: '#/components/schemas/OrderSetPurchaseOrderNumberAction'
          setReturnInfo: '#/components/schemas/OrderSetReturnInfoAction'
          setReturnItemCustomField: '#/components/schemas/OrderSetReturnItemCustomFieldAction'
          setReturnItemCustomType: '#/components/schemas/OrderSetReturnItemCustomTypeAction'
          setReturnPaymentState: '#/components/schemas/OrderSetReturnPaymentStateAction'
          setReturnShipmentState: '#/components/schemas/OrderSetReturnShipmentStateAction'
          setShippingAddress: '#/components/schemas/OrderSetShippingAddressAction'
          setShippingAddressCustomField: '#/components/schemas/OrderSetShippingAddressCustomFieldAction'
          setShippingAddressCustomType: '#/components/schemas/OrderSetShippingAddressCustomTypeAction'
          setStore: '#/components/schemas/OrderSetStoreAction'
          transitionCustomLineItemState: '#/components/schemas/OrderTransitionCustomLineItemStateAction'
          transitionLineItemState: '#/components/schemas/OrderTransitionLineItemStateAction'
          transitionState: '#/components/schemas/OrderTransitionStateAction'
          updateItemShippingAddress: '#/components/schemas/OrderUpdateItemShippingAddressAction'
          updateSyncInfo: '#/components/schemas/OrderUpdateSyncInfoAction'
      required:
        - action
      properties:
        action:
          type: "string"
    Parcel:
      type: "object"
      required:
        - createdAt
        - id
      properties:
        id:
          type: "string"
        createdAt:
          type: "string"
          format: "datetime"
        measurements:
          $ref: '#/components/schemas/ParcelMeasurements'
        trackingData:
          $ref: '#/components/schemas/TrackingData'
        items:
          type: "array"
          items:
            $ref: '#/components/schemas/DeliveryItem'
        custom:
          $ref: '#/components/schemas/CustomFields'
    ParcelDraft:
      type: "object"
      properties:
        measurements:
          $ref: '#/components/schemas/ParcelMeasurements'
        trackingData:
          $ref: '#/components/schemas/TrackingData'
        items:
          type: "array"
          items:
            $ref: '#/components/schemas/DeliveryItem'
        custom:
          $ref: '#/components/schemas/CustomFieldsDraft'
    ParcelMeasurements:
      type: "object"
      properties:
        heightInMillimeter:
          type: "integer"
          format: "int32"
        lengthInMillimeter:
          type: "integer"
          format: "int32"
        widthInMillimeter:
          type: "integer"
          format: "int32"
        weightInGram:
          type: "integer"
          format: "int32"
    PaymentInfo:
      type: "object"
      required:
        - payments
      properties:
        payments:
          type: "array"
          items:
            $ref: '#/components/schemas/PaymentReference'
    PaymentState:
      type: "string"
      enum:
        - BalanceDue
        - Failed
        - Pending
        - CreditOwed
        - Paid
      x-annotation-package: "Order"
      x-annotation-docs-uri: "https://docs.commercetools.com/http-api-projects-orders.html#paymentstate"
    ProductVariantImportDraft:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        sku:
          type: "string"
        prices:
          type: "array"
          items:
            $ref: '#/components/schemas/PriceDraft'
        attributes:
          type: "array"
          items:
            $ref: '#/components/schemas/Attribute'
        images:
          type: "array"
          items:
            $ref: '#/components/schemas/Image'
    ReturnInfo:
      type: "object"
      required:
        - items
      properties:
        items:
          type: "array"
          items:
            $ref: '#/components/schemas/ReturnItem'
        returnTrackingId:
          type: "string"
        returnDate:
          type: "string"
          format: "datetime"
    ReturnInfoDraft:
      type: "object"
      required:
        - items
      properties:
        items:
          type: "array"
          items:
            $ref: '#/components/schemas/ReturnItemDraft'
        returnTrackingId:
          type: "string"
        returnDate:
          type: "string"
          format: "datetime"
    ReturnItem:
      type: "object"
      discriminator:
        propertyName: type
        mapping:
          CustomLineItemReturnItem: '#/components/schemas/CustomLineItemReturnItem'
          LineItemReturnItem: '#/components/schemas/LineItemReturnItem'
      required:
        - createdAt
        - id
        - lastModifiedAt
        - paymentState
        - quantity
        - shipmentState
        - type
      properties:
        id:
          type: "string"
        quantity:
          type: "integer"
          format: "int64"
        type:
          type: "string"
        comment:
          type: "string"
        shipmentState:
          $ref: '#/components/schemas/ReturnShipmentState'
        paymentState:
          $ref: '#/components/schemas/ReturnPaymentState'
        custom:
          $ref: '#/components/schemas/CustomFields'
        lastModifiedAt:
          type: "string"
          format: "datetime"
        createdAt:
          type: "string"
          format: "datetime"
    ReturnItemDraft:
      type: "object"
      required:
        - quantity
        - shipmentState
      properties:
        quantity:
          type: "integer"
          format: "int64"
        lineItemId:
          type: "string"
        customLineItemId:
          type: "string"
        comment:
          type: "string"
        shipmentState:
          $ref: '#/components/schemas/ReturnShipmentState'
        custom:
          $ref: '#/components/schemas/CustomFieldsDraft'
    ReturnPaymentState:
      type: "string"
      enum:
        - NonRefundable
        - Initial
        - Refunded
        - NotRefunded
      x-annotation-package: "Order"
      x-annotation-docs-uri: "https://docs.commercetools.com/http-api-projects-orders.html#returnpaymentstate"
    ReturnShipmentState:
      type: "string"
      enum:
        - Advised
        - Returned
        - BackInStock
        - Unusable
      x-annotation-package: "Order"
      x-annotation-docs-uri: "https://docs.commercetools.com/http-api-projects-orders.html#returnshipmentstate"
    ShipmentState:
      type: "string"
      enum:
        - Shipped
        - Delivered
        - Ready
        - Pending
        - Delayed
        - Partial
        - Backorder
      x-annotation-package: "Order"
      x-annotation-docs-uri: "https://docs.commercetools.com/http-api-projects-orders.html#shipmentstate"
    ShippingInfoImportDraft:
      type: "object"
      required:
        - price
        - shippingMethodName
        - shippingRate
      properties:
        shippingMethodName:
          type: "string"
        price:
          $ref: '#/components/schemas/Money'
        shippingRate:
          $ref: '#/components/schemas/ShippingRateDraft'
        taxRate:
          $ref: '#/components/schemas/TaxRate'
        taxCategory:
          $ref: '#/components/schemas/TaxCategoryResourceIdentifier'
        shippingMethod:
          $ref: '#/components/schemas/ShippingMethodResourceIdentifier'
        deliveries:
          type: "array"
          items:
            $ref: '#/components/schemas/DeliveryDraft'
        discountedPrice:
          $ref: '#/components/schemas/DiscountedLineItemPriceDraft'
        shippingMethodState:
          $ref: '#/components/schemas/ShippingMethodState'
    SyncInfo:
      type: "object"
      required:
        - channel
        - syncedAt
      properties:
        channel:
          $ref: '#/components/schemas/ChannelReference'
        externalId:
          type: "string"
        syncedAt:
          type: "string"
          format: "datetime"
    TaxedItemPriceDraft:
      type: "object"
      required:
        - totalGross
        - totalNet
      properties:
        totalNet:
          $ref: '#/components/schemas/Money'
        totalGross:
          $ref: '#/components/schemas/Money'
    TrackingData:
      type: "object"
      properties:
        trackingId:
          type: "string"
        carrier:
          type: "string"
        provider:
          type: "string"
        providerTransaction:
          type: "string"
        isReturn:
          type: "boolean"
    OrderAddDeliveryAction:
      allOf:
        - $ref: '#/components/schemas/OrderUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            items:
              type: "array"
              items:
                $ref: '#/components/schemas/DeliveryItem'
            shippingKey:
              type: "string"
            address:
              $ref: '#/components/schemas/BaseAddress'
            parcels:
              type: "array"
              items:
                $ref: '#/components/schemas/ParcelDraft'
            custom:
              $ref: '#/components/schemas/CustomFieldsDraft'
    OrderAddItemShippingAddressAction:
      allOf:
        - $ref: '#/components/schemas/OrderUpdateAction'
        - type: "object"
          required:
            - address
          properties:
            action:
              type: "string"
            address:
              $ref: '#/components/schemas/BaseAddress'
    OrderAddParcelToDeliveryAction:
      allOf:
        - $ref: '#/components/schemas/OrderUpdateAction'
        - type: "object"
          required:
            - deliveryId
          properties:
            action:
              type: "string"
            deliveryId:
              type: "string"
            measurements:
              $ref: '#/components/schemas/ParcelMeasurements'
            trackingData:
              $ref: '#/components/schemas/TrackingData'
            items:
              type: "array"
              items:
                $ref: '#/components/schemas/DeliveryItem'
    OrderAddPaymentAction:
      allOf:
        - $ref: '#/components/schemas/OrderUpdateAction'
        - type: "object"
          required:
            - payment
          properties:
            action:
              type: "string"
            payment:
              $ref: '#/components/schemas/PaymentResourceIdentifier'
    OrderAddReturnInfoAction:
      allOf:
        - $ref: '#/components/schemas/OrderUpdateAction'
        - type: "object"
          required:
            - items
          properties:
            action:
              type: "string"
            returnTrackingId:
              type: "string"
            items:
              type: "array"
              items:
                $ref: '#/components/schemas/ReturnItemDraft'
            returnDate:
              type: "string"
              format: "datetime"
    OrderChangeOrderStateAction:
      allOf:
        - $ref: '#/components/schemas/OrderUpdateAction'
        - type: "object"
          required:
            - orderState
          properties:
            action:
              type: "string"
            orderState:
              $ref: '#/components/schemas/OrderState'
    OrderChangePaymentStateAction:
      allOf:
        - $ref: '#/components/schemas/OrderUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            paymentState:
              $ref: '#/components/schemas/PaymentState'
    OrderChangeShipmentStateAction:
      allOf:
        - $ref: '#/components/schemas/OrderUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            shipmentState:
              $ref: '#/components/schemas/ShipmentState'
    OrderImportCustomLineItemStateAction:
      allOf:
        - $ref: '#/components/schemas/OrderUpdateAction'
        - type: "object"
          required:
            - customLineItemId
            - state
          properties:
            action:
              type: "string"
            customLineItemId:
              type: "string"
            state:
              type: "array"
              items:
                $ref: '#/components/schemas/ItemState'
    OrderImportLineItemStateAction:
      allOf:
        - $ref: '#/components/schemas/OrderUpdateAction'
        - type: "object"
          required:
            - lineItemId
            - state
          properties:
            action:
              type: "string"
            lineItemId:
              type: "string"
            state:
              type: "array"
              items:
                $ref: '#/components/schemas/ItemState'
    OrderRemoveDeliveryAction:
      allOf:
        - $ref: '#/components/schemas/OrderUpdateAction'
        - type: "object"
          required:
            - deliveryId
          properties:
            action:
              type: "string"
            deliveryId:
              type: "string"
    OrderRemoveItemShippingAddressAction:
      allOf:
        - $ref: '#/components/schemas/OrderUpdateAction'
        - type: "object"
          required:
            - addressKey
          properties:
            action:
              type: "string"
            addressKey:
              type: "string"
    OrderRemoveParcelFromDeliveryAction:
      allOf:
        - $ref: '#/components/schemas/OrderUpdateAction'
        - type: "object"
          required:
            - parcelId
          properties:
            action:
              type: "string"
            parcelId:
              type: "string"
    OrderRemovePaymentAction:
      allOf:
        - $ref: '#/components/schemas/OrderUpdateAction'
        - type: "object"
          required:
            - payment
          properties:
            action:
              type: "string"
            payment:
              $ref: '#/components/schemas/PaymentResourceIdentifier'
    OrderSetBillingAddressAction:
      allOf:
        - $ref: '#/components/schemas/OrderUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            address:
              $ref: '#/components/schemas/BaseAddress'
    OrderSetBillingAddressCustomFieldAction:
      allOf:
        - $ref: '#/components/schemas/OrderUpdateAction'
        - type: "object"
          required:
            - name
          properties:
            action:
              type: "string"
            name:
              type: "string"
            value:
              {}
    OrderSetBillingAddressCustomTypeAction:
      allOf:
        - $ref: '#/components/schemas/OrderUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            type:
              $ref: '#/components/schemas/TypeResourceIdentifier'
            fields:
              $ref: '#/components/schemas/FieldContainer'
    OrderSetCustomFieldAction:
      allOf:
        - $ref: '#/components/schemas/OrderUpdateAction'
        - type: "object"
          required:
            - name
          properties:
            action:
              type: "string"
            name:
              type: "string"
            value:
              {}
    OrderSetCustomLineItemCustomFieldAction:
      allOf:
        - $ref: '#/components/schemas/OrderUpdateAction'
        - type: "object"
          required:
            - customLineItemId
            - name
          properties:
            action:
              type: "string"
            customLineItemId:
              type: "string"
            name:
              type: "string"
            value:
              {}
    OrderSetCustomLineItemCustomTypeAction:
      allOf:
        - $ref: '#/components/schemas/OrderUpdateAction'
        - type: "object"
          required:
            - customLineItemId
          properties:
            action:
              type: "string"
            customLineItemId:
              type: "string"
            type:
              $ref: '#/components/schemas/TypeResourceIdentifier'
            fields:
              $ref: '#/components/schemas/FieldContainer'
    OrderSetCustomLineItemShippingDetailsAction:
      allOf:
        - $ref: '#/components/schemas/OrderUpdateAction'
        - type: "object"
          required:
            - customLineItemId
          properties:
            action:
              type: "string"
            customLineItemId:
              type: "string"
            shippingDetails:
              $ref: '#/components/schemas/ItemShippingDetailsDraft'
    OrderSetCustomTypeAction:
      allOf:
        - $ref: '#/components/schemas/OrderUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            type:
              $ref: '#/components/schemas/TypeResourceIdentifier'
            fields:
              $ref: '#/components/schemas/FieldContainer'
    OrderSetCustomerEmailAction:
      allOf:
        - $ref: '#/components/schemas/OrderUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            email:
              type: "string"
    OrderSetCustomerIdAction:
      allOf:
        - $ref: '#/components/schemas/OrderUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            customerId:
              type: "string"
    OrderSetDeliveryAddressAction:
      allOf:
        - $ref: '#/components/schemas/OrderUpdateAction'
        - type: "object"
          required:
            - deliveryId
          properties:
            action:
              type: "string"
            deliveryId:
              type: "string"
            address:
              $ref: '#/components/schemas/BaseAddress'
    OrderSetDeliveryAddressCustomFieldAction:
      allOf:
        - $ref: '#/components/schemas/OrderUpdateAction'
        - type: "object"
          required:
            - deliveryId
            - name
          properties:
            action:
              type: "string"
            deliveryId:
              type: "string"
            name:
              type: "string"
            value:
              {}
    OrderSetDeliveryAddressCustomTypeAction:
      allOf:
        - $ref: '#/components/schemas/OrderUpdateAction'
        - type: "object"
          required:
            - deliveryId
          properties:
            action:
              type: "string"
            deliveryId:
              type: "string"
            type:
              $ref: '#/components/schemas/TypeResourceIdentifier'
            fields:
              $ref: '#/components/schemas/FieldContainer'
    OrderSetDeliveryCustomFieldAction:
      allOf:
        - $ref: '#/components/schemas/OrderUpdateAction'
        - type: "object"
          required:
            - deliveryId
            - name
          properties:
            action:
              type: "string"
            deliveryId:
              type: "string"
            name:
              type: "string"
            value:
              {}
    OrderSetDeliveryCustomTypeAction:
      allOf:
        - $ref: '#/components/schemas/OrderUpdateAction'
        - type: "object"
          required:
            - deliveryId
          properties:
            action:
              type: "string"
            deliveryId:
              type: "string"
            type:
              $ref: '#/components/schemas/TypeResourceIdentifier'
            fields:
              $ref: '#/components/schemas/FieldContainer'
    OrderSetDeliveryItemsAction:
      allOf:
        - $ref: '#/components/schemas/OrderUpdateAction'
        - type: "object"
          required:
            - deliveryId
            - items
          properties:
            action:
              type: "string"
            deliveryId:
              type: "string"
            items:
              type: "array"
              items:
                $ref: '#/components/schemas/DeliveryItem'
    OrderSetItemShippingAddressCustomFieldAction:
      allOf:
        - $ref: '#/components/schemas/OrderUpdateAction'
        - type: "object"
          required:
            - addressKey
            - name
          properties:
            action:
              type: "string"
            addressKey:
              type: "string"
            name:
              type: "string"
            value:
              {}
    OrderSetItemShippingAddressCustomTypeAction:
      allOf:
        - $ref: '#/components/schemas/OrderUpdateAction'
        - type: "object"
          required:
            - addressKey
          properties:
            action:
              type: "string"
            addressKey:
              type: "string"
            type:
              $ref: '#/components/schemas/TypeResourceIdentifier'
            fields:
              $ref: '#/components/schemas/FieldContainer'
    OrderSetLineItemCustomFieldAction:
      allOf:
        - $ref: '#/components/schemas/OrderUpdateAction'
        - type: "object"
          required:
            - lineItemId
            - name
          properties:
            action:
              type: "string"
            lineItemId:
              type: "string"
            name:
              type: "string"
            value:
              {}
    OrderSetLineItemCustomTypeAction:
      allOf:
        - $ref: '#/components/schemas/OrderUpdateAction'
        - type: "object"
          required:
            - lineItemId
          properties:
            action:
              type: "string"
            lineItemId:
              type: "string"
            type:
              $ref: '#/components/schemas/TypeResourceIdentifier'
            fields:
              $ref: '#/components/schemas/FieldContainer'
    OrderSetLineItemShippingDetailsAction:
      allOf:
        - $ref: '#/components/schemas/OrderUpdateAction'
        - type: "object"
          required:
            - lineItemId
          properties:
            action:
              type: "string"
            lineItemId:
              type: "string"
            shippingDetails:
              $ref: '#/components/schemas/ItemShippingDetailsDraft'
    OrderSetLocaleAction:
      allOf:
        - $ref: '#/components/schemas/OrderUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            locale:
              type: "string"
    OrderSetOrderNumberAction:
      allOf:
        - $ref: '#/components/schemas/OrderUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            orderNumber:
              type: "string"
    OrderSetParcelCustomFieldAction:
      allOf:
        - $ref: '#/components/schemas/OrderUpdateAction'
        - type: "object"
          required:
            - name
            - parcelId
          properties:
            action:
              type: "string"
            parcelId:
              type: "string"
            name:
              type: "string"
            value:
              {}
    OrderSetParcelCustomTypeAction:
      allOf:
        - $ref: '#/components/schemas/OrderUpdateAction'
        - type: "object"
          required:
            - parcelId
          properties:
            action:
              type: "string"
            parcelId:
              type: "string"
            type:
              $ref: '#/components/schemas/TypeResourceIdentifier'
            fields:
              $ref: '#/components/schemas/FieldContainer'
    OrderSetParcelItemsAction:
      allOf:
        - $ref: '#/components/schemas/OrderUpdateAction'
        - type: "object"
          required:
            - items
            - parcelId
          properties:
            action:
              type: "string"
            parcelId:
              type: "string"
            items:
              type: "array"
              items:
                $ref: '#/components/schemas/DeliveryItem'
    OrderSetParcelMeasurementsAction:
      allOf:
        - $ref: '#/components/schemas/OrderUpdateAction'
        - type: "object"
          required:
            - parcelId
          properties:
            action:
              type: "string"
            parcelId:
              type: "string"
            measurements:
              $ref: '#/components/schemas/ParcelMeasurements'
    OrderSetParcelTrackingDataAction:
      allOf:
        - $ref: '#/components/schemas/OrderUpdateAction'
        - type: "object"
          required:
            - parcelId
          properties:
            action:
              type: "string"
            parcelId:
              type: "string"
            trackingData:
              $ref: '#/components/schemas/TrackingData'
    OrderSetPurchaseOrderNumberAction:
      allOf:
        - $ref: '#/components/schemas/OrderUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            purchaseOrderNumber:
              type: "string"
    OrderSetReturnInfoAction:
      allOf:
        - $ref: '#/components/schemas/OrderUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            items:
              type: "array"
              items:
                $ref: '#/components/schemas/ReturnInfoDraft'
    OrderSetReturnItemCustomFieldAction:
      allOf:
        - $ref: '#/components/schemas/OrderUpdateAction'
        - type: "object"
          required:
            - name
            - returnItemId
          properties:
            action:
              type: "string"
            returnItemId:
              type: "string"
            name:
              type: "string"
            value:
              {}
    OrderSetReturnItemCustomTypeAction:
      allOf:
        - $ref: '#/components/schemas/OrderUpdateAction'
        - type: "object"
          required:
            - returnItemId
          properties:
            action:
              type: "string"
            returnItemId:
              type: "string"
            type:
              $ref: '#/components/schemas/TypeResourceIdentifier'
            fields:
              $ref: '#/components/schemas/FieldContainer'
    OrderSetReturnPaymentStateAction:
      allOf:
        - $ref: '#/components/schemas/OrderUpdateAction'
        - type: "object"
          required:
            - paymentState
            - returnItemId
          properties:
            action:
              type: "string"
            returnItemId:
              type: "string"
            paymentState:
              $ref: '#/components/schemas/ReturnPaymentState'
    OrderSetReturnShipmentStateAction:
      allOf:
        - $ref: '#/components/schemas/OrderUpdateAction'
        - type: "object"
          required:
            - returnItemId
            - shipmentState
          properties:
            action:
              type: "string"
            returnItemId:
              type: "string"
            shipmentState:
              $ref: '#/components/schemas/ReturnShipmentState'
    OrderSetShippingAddressAction:
      allOf:
        - $ref: '#/components/schemas/OrderUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            address:
              $ref: '#/components/schemas/BaseAddress'
    OrderSetShippingAddressCustomFieldAction:
      allOf:
        - $ref: '#/components/schemas/OrderUpdateAction'
        - type: "object"
          required:
            - name
          properties:
            action:
              type: "string"
            name:
              type: "string"
            value:
              {}
    OrderSetShippingAddressCustomTypeAction:
      allOf:
        - $ref: '#/components/schemas/OrderUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            type:
              $ref: '#/components/schemas/TypeResourceIdentifier'
            fields:
              $ref: '#/components/schemas/FieldContainer'
    OrderSetStoreAction:
      allOf:
        - $ref: '#/components/schemas/OrderUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            store:
              $ref: '#/components/schemas/StoreResourceIdentifier'
    OrderTransitionCustomLineItemStateAction:
      allOf:
        - $ref: '#/components/schemas/OrderUpdateAction'
        - type: "object"
          required:
            - customLineItemId
            - fromState
            - quantity
            - toState
          properties:
            action:
              type: "string"
            customLineItemId:
              type: "string"
            quantity:
              type: "integer"
              format: "int64"
            fromState:
              $ref: '#/components/schemas/StateResourceIdentifier'
            toState:
              $ref: '#/components/schemas/StateResourceIdentifier'
            actualTransitionDate:
              type: "string"
              format: "datetime"
    OrderTransitionLineItemStateAction:
      allOf:
        - $ref: '#/components/schemas/OrderUpdateAction'
        - type: "object"
          required:
            - fromState
            - lineItemId
            - quantity
            - toState
          properties:
            action:
              type: "string"
            lineItemId:
              type: "string"
            quantity:
              type: "integer"
              format: "int64"
            fromState:
              $ref: '#/components/schemas/StateResourceIdentifier'
            toState:
              $ref: '#/components/schemas/StateResourceIdentifier'
            actualTransitionDate:
              type: "string"
              format: "datetime"
    OrderTransitionStateAction:
      allOf:
        - $ref: '#/components/schemas/OrderUpdateAction'
        - type: "object"
          required:
            - state
          properties:
            action:
              type: "string"
            state:
              $ref: '#/components/schemas/StateResourceIdentifier'
            force:
              type: "boolean"
    OrderUpdateItemShippingAddressAction:
      allOf:
        - $ref: '#/components/schemas/OrderUpdateAction'
        - type: "object"
          required:
            - address
          properties:
            action:
              type: "string"
            address:
              $ref: '#/components/schemas/BaseAddress'
    OrderUpdateSyncInfoAction:
      allOf:
        - $ref: '#/components/schemas/OrderUpdateAction'
        - type: "object"
          required:
            - channel
          properties:
            action:
              type: "string"
            channel:
              $ref: '#/components/schemas/ChannelResourceIdentifier'
            externalId:
              type: "string"
            syncedAt:
              type: "string"
              format: "datetime"
    Payment:
      allOf:
        - $ref: '#/components/schemas/BaseResource'
        - type: "object"
          required:
            - amountPlanned
            - createdAt
            - id
            - interfaceInteractions
            - lastModifiedAt
            - paymentMethodInfo
            - paymentStatus
            - transactions
            - version
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            customer:
              $ref: '#/components/schemas/CustomerReference'
            anonymousId:
              type: "string"
            externalId:
              type: "string"
            interfaceId:
              type: "string"
            amountPlanned:
              $ref: '#/components/schemas/CentPrecisionMoney'
            amountAuthorized:
              $ref: '#/components/schemas/TypedMoney'
            authorizedUntil:
              type: "string"
            amountPaid:
              $ref: '#/components/schemas/TypedMoney'
            amountRefunded:
              $ref: '#/components/schemas/TypedMoney'
            paymentMethodInfo:
              $ref: '#/components/schemas/PaymentMethodInfo'
            paymentStatus:
              $ref: '#/components/schemas/PaymentStatus'
            transactions:
              type: "array"
              items:
                $ref: '#/components/schemas/Transaction'
            interfaceInteractions:
              type: "array"
              items:
                $ref: '#/components/schemas/CustomFields'
            custom:
              $ref: '#/components/schemas/CustomFields'
            key:
              type: "string"
    PaymentDraft:
      type: "object"
      required:
        - amountPlanned
      properties:
        customer:
          $ref: '#/components/schemas/CustomerResourceIdentifier'
        anonymousId:
          type: "string"
        externalId:
          type: "string"
        interfaceId:
          type: "string"
        amountPlanned:
          $ref: '#/components/schemas/Money'
        amountAuthorized:
          $ref: '#/components/schemas/Money'
        authorizedUntil:
          type: "string"
        amountPaid:
          $ref: '#/components/schemas/Money'
        amountRefunded:
          $ref: '#/components/schemas/Money'
        paymentMethodInfo:
          $ref: '#/components/schemas/PaymentMethodInfo'
        paymentStatus:
          $ref: '#/components/schemas/PaymentStatusDraft'
        transactions:
          type: "array"
          items:
            $ref: '#/components/schemas/TransactionDraft'
        interfaceInteractions:
          type: "array"
          items:
            $ref: '#/components/schemas/CustomFieldsDraft'
        custom:
          $ref: '#/components/schemas/CustomFieldsDraft'
        key:
          type: "string"
    PaymentMethodInfo:
      type: "object"
      properties:
        paymentInterface:
          type: "string"
        method:
          type: "string"
        name:
          $ref: '#/components/schemas/LocalizedString'
    PaymentPagedQueryResponse:
      type: "object"
      required:
        - count
        - limit
        - offset
        - results
      properties:
        limit:
          type: "integer"
          format: "int64"
        count:
          type: "integer"
          format: "int64"
        total:
          type: "integer"
          format: "int64"
        offset:
          type: "integer"
          format: "int64"
        results:
          type: "array"
          items:
            $ref: '#/components/schemas/Payment'
    PaymentReference:
      allOf:
        - $ref: '#/components/schemas/Reference'
        - type: "object"
          required:
            - id
          properties:
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            id:
              type: "string"
            obj:
              $ref: '#/components/schemas/Payment'
    PaymentResourceIdentifier:
      allOf:
        - $ref: '#/components/schemas/ResourceIdentifier'
        - type: "object"
          properties:
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            id:
              type: "string"
            key:
              type: "string"
    PaymentStatus:
      type: "object"
      properties:
        interfaceCode:
          type: "string"
        interfaceText:
          type: "string"
        state:
          $ref: '#/components/schemas/StateReference'
    PaymentStatusDraft:
      type: "object"
      properties:
        interfaceCode:
          type: "string"
        interfaceText:
          type: "string"
        state:
          $ref: '#/components/schemas/StateResourceIdentifier'
    PaymentUpdate:
      type: "object"
      required:
        - actions
        - version
      properties:
        version:
          type: "integer"
          format: "int64"
        actions:
          type: "array"
          items:
            $ref: '#/components/schemas/PaymentUpdateAction'
    PaymentUpdateAction:
      type: "object"
      discriminator:
        propertyName: action
        mapping:
          addInterfaceInteraction: '#/components/schemas/PaymentAddInterfaceInteractionAction'
          addTransaction: '#/components/schemas/PaymentAddTransactionAction'
          changeAmountPlanned: '#/components/schemas/PaymentChangeAmountPlannedAction'
          changeTransactionInteractionId: '#/components/schemas/PaymentChangeTransactionInteractionIdAction'
          changeTransactionState: '#/components/schemas/PaymentChangeTransactionStateAction'
          changeTransactionTimestamp: '#/components/schemas/PaymentChangeTransactionTimestampAction'
          setAmountPaid: '#/components/schemas/PaymentSetAmountPaidAction'
          setAmountRefunded: '#/components/schemas/PaymentSetAmountRefundedAction'
          setAnonymousId: '#/components/schemas/PaymentSetAnonymousIdAction'
          setAuthorization: '#/components/schemas/PaymentSetAuthorizationAction'
          setCustomField: '#/components/schemas/PaymentSetCustomFieldAction'
          setCustomType: '#/components/schemas/PaymentSetCustomTypeAction'
          setCustomer: '#/components/schemas/PaymentSetCustomerAction'
          setExternalId: '#/components/schemas/PaymentSetExternalIdAction'
          setInterfaceId: '#/components/schemas/PaymentSetInterfaceIdAction'
          setKey: '#/components/schemas/PaymentSetKeyAction'
          setMethodInfoInterface: '#/components/schemas/PaymentSetMethodInfoInterfaceAction'
          setMethodInfoMethod: '#/components/schemas/PaymentSetMethodInfoMethodAction'
          setMethodInfoName: '#/components/schemas/PaymentSetMethodInfoNameAction'
          setStatusInterfaceCode: '#/components/schemas/PaymentSetStatusInterfaceCodeAction'
          setStatusInterfaceText: '#/components/schemas/PaymentSetStatusInterfaceTextAction'
          setTransactionCustomField: '#/components/schemas/PaymentSetTransactionCustomFieldAction'
          setTransactionCustomType: '#/components/schemas/PaymentSetTransactionCustomTypeAction'
          transitionState: '#/components/schemas/PaymentTransitionStateAction'
      required:
        - action
      properties:
        action:
          type: "string"
    Transaction:
      type: "object"
      required:
        - amount
        - id
        - state
        - type
      properties:
        id:
          type: "string"
        timestamp:
          type: "string"
          format: "datetime"
        type:
          $ref: '#/components/schemas/TransactionType'
        amount:
          $ref: '#/components/schemas/CentPrecisionMoney'
        interactionId:
          type: "string"
        state:
          $ref: '#/components/schemas/TransactionState'
        custom:
          $ref: '#/components/schemas/CustomFields'
    TransactionDraft:
      type: "object"
      required:
        - amount
        - type
      properties:
        timestamp:
          type: "string"
          format: "datetime"
        type:
          $ref: '#/components/schemas/TransactionType'
        amount:
          $ref: '#/components/schemas/Money'
        interactionId:
          type: "string"
        state:
          $ref: '#/components/schemas/TransactionState'
        custom:
          $ref: '#/components/schemas/CustomFieldsDraft'
    TransactionState:
      type: "string"
      enum:
        - Initial
        - Pending
        - Success
        - Failure
      x-annotation-package: "Payment"
      x-annotation-docs-uri: "https://docs.commercetools.com/api/projects/payments#transactionstate"
      x-annotation-enumDescriptions:
        Initial: "Initial State. The payment service has not accepted the Transaction yet.n"
        Pending: "The payment service has accepted the Transaction, but it is not completed
         yet.n"
        Success: "The payment service has confirmed the successful completion of the Transation.n"
        Failure: "Transaction has unrecoverably failed.n"
    TransactionType:
      type: "string"
      enum:
        - Authorization
        - CancelAuthorization
        - Charge
        - Refund
        - Chargeback
      x-annotation-package: "Payment"
      x-annotation-docs-uri: "https://docs.commercetools.com/api/projects/payments#transactiontype"
      x-annotation-enumDescriptions:
        Authorization: "Financially reliable reservation of an amount. Typically does not
         indicate an actual transfer of money.n"
        CancelAuthorization: "Explicit cancellation of an authorized amount before its expiry.n"
        Charge: "Collection of money from the customer. Can use an authorized amount or be
         directly executed.n"
        Refund: "Explicit transfer of money back to the customer.n"
        Chargeback: "Customer-initiated transfer of money back to the customer.n"
    PaymentAddInterfaceInteractionAction:
      allOf:
        - $ref: '#/components/schemas/PaymentUpdateAction'
        - type: "object"
          required:
            - type
          properties:
            action:
              type: "string"
            type:
              $ref: '#/components/schemas/TypeResourceIdentifier'
            fields:
              $ref: '#/components/schemas/FieldContainer'
    PaymentAddTransactionAction:
      allOf:
        - $ref: '#/components/schemas/PaymentUpdateAction'
        - type: "object"
          required:
            - transaction
          properties:
            action:
              type: "string"
            transaction:
              $ref: '#/components/schemas/TransactionDraft'
    PaymentChangeAmountPlannedAction:
      allOf:
        - $ref: '#/components/schemas/PaymentUpdateAction'
        - type: "object"
          required:
            - amount
          properties:
            action:
              type: "string"
            amount:
              $ref: '#/components/schemas/Money'
    PaymentChangeTransactionInteractionIdAction:
      allOf:
        - $ref: '#/components/schemas/PaymentUpdateAction'
        - type: "object"
          required:
            - interactionId
            - transactionId
          properties:
            action:
              type: "string"
            transactionId:
              type: "string"
            interactionId:
              type: "string"
    PaymentChangeTransactionStateAction:
      allOf:
        - $ref: '#/components/schemas/PaymentUpdateAction'
        - type: "object"
          required:
            - state
            - transactionId
          properties:
            action:
              type: "string"
            transactionId:
              type: "string"
            state:
              $ref: '#/components/schemas/TransactionState'
    PaymentChangeTransactionTimestampAction:
      allOf:
        - $ref: '#/components/schemas/PaymentUpdateAction'
        - type: "object"
          required:
            - timestamp
            - transactionId
          properties:
            action:
              type: "string"
            transactionId:
              type: "string"
            timestamp:
              type: "string"
              format: "datetime"
    PaymentSetAmountPaidAction:
      allOf:
        - $ref: '#/components/schemas/PaymentUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            amount:
              $ref: '#/components/schemas/Money'
    PaymentSetAmountRefundedAction:
      allOf:
        - $ref: '#/components/schemas/PaymentUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            amount:
              $ref: '#/components/schemas/Money'
    PaymentSetAnonymousIdAction:
      allOf:
        - $ref: '#/components/schemas/PaymentUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            anonymousId:
              type: "string"
    PaymentSetAuthorizationAction:
      allOf:
        - $ref: '#/components/schemas/PaymentUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            amount:
              $ref: '#/components/schemas/Money'
            until:
              type: "string"
              format: "datetime"
    PaymentSetCustomFieldAction:
      allOf:
        - $ref: '#/components/schemas/PaymentUpdateAction'
        - type: "object"
          required:
            - name
          properties:
            action:
              type: "string"
            name:
              type: "string"
            value:
              {}
    PaymentSetCustomTypeAction:
      allOf:
        - $ref: '#/components/schemas/PaymentUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            type:
              $ref: '#/components/schemas/TypeResourceIdentifier'
            fields:
              $ref: '#/components/schemas/FieldContainer'
    PaymentSetCustomerAction:
      allOf:
        - $ref: '#/components/schemas/PaymentUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            customer:
              $ref: '#/components/schemas/CustomerResourceIdentifier'
    PaymentSetExternalIdAction:
      allOf:
        - $ref: '#/components/schemas/PaymentUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            externalId:
              type: "string"
    PaymentSetInterfaceIdAction:
      allOf:
        - $ref: '#/components/schemas/PaymentUpdateAction'
        - type: "object"
          required:
            - interfaceId
          properties:
            action:
              type: "string"
            interfaceId:
              type: "string"
    PaymentSetKeyAction:
      allOf:
        - $ref: '#/components/schemas/PaymentUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            key:
              type: "string"
    PaymentSetMethodInfoInterfaceAction:
      allOf:
        - $ref: '#/components/schemas/PaymentUpdateAction'
        - type: "object"
          required:
            - interface
          properties:
            action:
              type: "string"
            interface:
              type: "string"
    PaymentSetMethodInfoMethodAction:
      allOf:
        - $ref: '#/components/schemas/PaymentUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            method:
              type: "string"
    PaymentSetMethodInfoNameAction:
      allOf:
        - $ref: '#/components/schemas/PaymentUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            name:
              $ref: '#/components/schemas/LocalizedString'
    PaymentSetStatusInterfaceCodeAction:
      allOf:
        - $ref: '#/components/schemas/PaymentUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            interfaceCode:
              type: "string"
    PaymentSetStatusInterfaceTextAction:
      allOf:
        - $ref: '#/components/schemas/PaymentUpdateAction'
        - type: "object"
          required:
            - interfaceText
          properties:
            action:
              type: "string"
            interfaceText:
              type: "string"
    PaymentSetTransactionCustomFieldAction:
      allOf:
        - $ref: '#/components/schemas/PaymentUpdateAction'
        - type: "object"
          required:
            - name
            - transactionId
          properties:
            action:
              type: "string"
            transactionId:
              type: "string"
            name:
              type: "string"
            value:
              {}
    PaymentSetTransactionCustomTypeAction:
      allOf:
        - $ref: '#/components/schemas/PaymentUpdateAction'
        - type: "object"
          required:
            - transactionId
          properties:
            action:
              type: "string"
            transactionId:
              type: "string"
            type:
              $ref: '#/components/schemas/TypeResourceIdentifier'
            fields:
              $ref: '#/components/schemas/FieldContainer'
    PaymentTransitionStateAction:
      allOf:
        - $ref: '#/components/schemas/PaymentUpdateAction'
        - type: "object"
          required:
            - state
          properties:
            action:
              type: "string"
            state:
              $ref: '#/components/schemas/StateResourceIdentifier'
            force:
              type: "boolean"
    ProductDiscount:
      allOf:
        - $ref: '#/components/schemas/BaseResource'
        - type: "object"
          required:
            - createdAt
            - id
            - isActive
            - lastModifiedAt
            - name
            - predicate
            - references
            - sortOrder
            - value
            - version
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            name:
              $ref: '#/components/schemas/LocalizedString'
            key:
              type: "string"
            description:
              $ref: '#/components/schemas/LocalizedString'
            value:
              $ref: '#/components/schemas/ProductDiscountValue'
            predicate:
              type: "string"
            sortOrder:
              type: "string"
            isActive:
              type: "boolean"
            references:
              type: "array"
              items:
                $ref: '#/components/schemas/Reference'
            validFrom:
              type: "string"
              format: "datetime"
            validUntil:
              type: "string"
              format: "datetime"
    ProductDiscountDraft:
      type: "object"
      required:
        - isActive
        - name
        - predicate
        - sortOrder
        - value
      properties:
        name:
          $ref: '#/components/schemas/LocalizedString'
        key:
          type: "string"
        description:
          $ref: '#/components/schemas/LocalizedString'
        value:
          $ref: '#/components/schemas/ProductDiscountValueDraft'
        predicate:
          type: "string"
        sortOrder:
          type: "string"
        isActive:
          type: "boolean"
        validFrom:
          type: "string"
          format: "datetime"
        validUntil:
          type: "string"
          format: "datetime"
    ProductDiscountMatchQuery:
      type: "object"
      required:
        - price
        - productId
        - staged
        - variantId
      properties:
        productId:
          type: "string"
        variantId:
          type: "integer"
          format: "int32"
        staged:
          type: "boolean"
        price:
          $ref: '#/components/schemas/QueryPrice'
    ProductDiscountPagedQueryResponse:
      type: "object"
      required:
        - count
        - limit
        - offset
        - results
      properties:
        limit:
          type: "integer"
          format: "int64"
        offset:
          type: "integer"
          format: "int64"
        count:
          type: "integer"
          format: "int64"
        total:
          type: "integer"
          format: "int64"
        results:
          type: "array"
          items:
            $ref: '#/components/schemas/ProductDiscount'
    ProductDiscountReference:
      allOf:
        - $ref: '#/components/schemas/Reference'
        - type: "object"
          required:
            - id
          properties:
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            id:
              type: "string"
            obj:
              $ref: '#/components/schemas/ProductDiscount'
    ProductDiscountResourceIdentifier:
      allOf:
        - $ref: '#/components/schemas/ResourceIdentifier'
        - type: "object"
          properties:
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            id:
              type: "string"
            key:
              type: "string"
    ProductDiscountUpdate:
      type: "object"
      required:
        - actions
        - version
      properties:
        version:
          type: "integer"
          format: "int64"
        actions:
          type: "array"
          items:
            $ref: '#/components/schemas/ProductDiscountUpdateAction'
    ProductDiscountUpdateAction:
      type: "object"
      discriminator:
        propertyName: action
        mapping:
          changeIsActive: '#/components/schemas/ProductDiscountChangeIsActiveAction'
          changeName: '#/components/schemas/ProductDiscountChangeNameAction'
          changePredicate: '#/components/schemas/ProductDiscountChangePredicateAction'
          changeSortOrder: '#/components/schemas/ProductDiscountChangeSortOrderAction'
          changeValue: '#/components/schemas/ProductDiscountChangeValueAction'
          setDescription: '#/components/schemas/ProductDiscountSetDescriptionAction'
          setKey: '#/components/schemas/ProductDiscountSetKeyAction'
          setValidFrom: '#/components/schemas/ProductDiscountSetValidFromAction'
          setValidFromAndUntil: '#/components/schemas/ProductDiscountSetValidFromAndUntilAction'
          setValidUntil: '#/components/schemas/ProductDiscountSetValidUntilAction'
      required:
        - action
      properties:
        action:
          type: "string"
    ProductDiscountValue:
      type: "object"
      discriminator:
        propertyName: type
        mapping:
          absolute: '#/components/schemas/ProductDiscountValueAbsolute'
          external: '#/components/schemas/ProductDiscountValueExternal'
          relative: '#/components/schemas/ProductDiscountValueRelative'
      required:
        - type
      properties:
        type:
          type: "string"
    ProductDiscountValueAbsolute:
      allOf:
        - $ref: '#/components/schemas/ProductDiscountValue'
        - type: "object"
          required:
            - money
          properties:
            type:
              type: "string"
            money:
              type: "array"
              items:
                $ref: '#/components/schemas/CentPrecisionMoney'
    ProductDiscountValueAbsoluteDraft:
      allOf:
        - $ref: '#/components/schemas/ProductDiscountValueDraft'
        - type: "object"
          required:
            - money
          properties:
            type:
              type: "string"
            money:
              type: "array"
              items:
                $ref: '#/components/schemas/Money'
    ProductDiscountValueDraft:
      type: "object"
      discriminator:
        propertyName: type
        mapping:
          absolute: '#/components/schemas/ProductDiscountValueAbsoluteDraft'
          external: '#/components/schemas/ProductDiscountValueExternalDraft'
          relative: '#/components/schemas/ProductDiscountValueRelativeDraft'
      required:
        - type
      properties:
        type:
          type: "string"
    ProductDiscountValueExternal:
      allOf:
        - $ref: '#/components/schemas/ProductDiscountValue'
        - type: "object"
          properties:
            type:
              type: "string"
    ProductDiscountValueExternalDraft:
      allOf:
        - $ref: '#/components/schemas/ProductDiscountValueDraft'
        - type: "object"
          properties:
            type:
              type: "string"
    ProductDiscountValueRelative:
      allOf:
        - $ref: '#/components/schemas/ProductDiscountValue'
        - type: "object"
          required:
            - permyriad
          properties:
            type:
              type: "string"
            permyriad:
              type: "integer"
              format: "int64"
    ProductDiscountValueRelativeDraft:
      allOf:
        - $ref: '#/components/schemas/ProductDiscountValueDraft'
        - type: "object"
          required:
            - permyriad
          properties:
            type:
              type: "string"
            permyriad:
              type: "integer"
              format: "int64"
    ProductDiscountChangeIsActiveAction:
      allOf:
        - $ref: '#/components/schemas/ProductDiscountUpdateAction'
        - type: "object"
          required:
            - isActive
          properties:
            action:
              type: "string"
            isActive:
              type: "boolean"
    ProductDiscountChangeNameAction:
      allOf:
        - $ref: '#/components/schemas/ProductDiscountUpdateAction'
        - type: "object"
          required:
            - name
          properties:
            action:
              type: "string"
            name:
              $ref: '#/components/schemas/LocalizedString'
    ProductDiscountChangePredicateAction:
      allOf:
        - $ref: '#/components/schemas/ProductDiscountUpdateAction'
        - type: "object"
          required:
            - predicate
          properties:
            action:
              type: "string"
            predicate:
              type: "string"
    ProductDiscountChangeSortOrderAction:
      allOf:
        - $ref: '#/components/schemas/ProductDiscountUpdateAction'
        - type: "object"
          required:
            - sortOrder
          properties:
            action:
              type: "string"
            sortOrder:
              type: "string"
    ProductDiscountChangeValueAction:
      allOf:
        - $ref: '#/components/schemas/ProductDiscountUpdateAction'
        - type: "object"
          required:
            - value
          properties:
            action:
              type: "string"
            value:
              $ref: '#/components/schemas/ProductDiscountValueDraft'
    ProductDiscountSetDescriptionAction:
      allOf:
        - $ref: '#/components/schemas/ProductDiscountUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            description:
              $ref: '#/components/schemas/LocalizedString'
    ProductDiscountSetKeyAction:
      allOf:
        - $ref: '#/components/schemas/ProductDiscountUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            key:
              type: "string"
    ProductDiscountSetValidFromAction:
      allOf:
        - $ref: '#/components/schemas/ProductDiscountUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            validFrom:
              type: "string"
              format: "datetime"
    ProductDiscountSetValidFromAndUntilAction:
      allOf:
        - $ref: '#/components/schemas/ProductDiscountUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            validFrom:
              type: "string"
              format: "datetime"
            validUntil:
              type: "string"
              format: "datetime"
    ProductDiscountSetValidUntilAction:
      allOf:
        - $ref: '#/components/schemas/ProductDiscountUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            validUntil:
              type: "string"
              format: "datetime"
    AssignedProductReference:
      type: "object"
      required:
        - product
      properties:
        product:
          $ref: '#/components/schemas/ProductReference'
        variantSelection:
          $ref: '#/components/schemas/ProductVariantSelection'
        variantExclusion:
          $ref: '#/components/schemas/ProductVariantExclusion'
    AssignedProductSelection:
      type: "object"
      required:
        - createdAt
        - productSelection
      properties:
        productSelection:
          $ref: '#/components/schemas/ProductSelectionReference'
        variantSelection:
          $ref: '#/components/schemas/ProductVariantSelection'
        variantExclusion:
          $ref: '#/components/schemas/ProductVariantExclusion'
        createdAt:
          type: "string"
          format: "datetime"
    AssignedProductSelectionPagedQueryResponse:
      type: "object"
      required:
        - count
        - limit
        - offset
        - results
      properties:
        limit:
          type: "integer"
          format: "int64"
        offset:
          type: "integer"
          format: "int64"
        count:
          type: "integer"
          format: "int64"
        total:
          type: "integer"
          format: "int64"
        results:
          type: "array"
          items:
            $ref: '#/components/schemas/AssignedProductSelection'
    IndividualExclusionProductSelectionType:
      allOf:
        - $ref: '#/components/schemas/ProductSelectionType'
        - type: "object"
          required:
            - name
          properties:
            type:
              $ref: '#/components/schemas/ProductSelectionTypeEnum'
            name:
              $ref: '#/components/schemas/LocalizedString'
    IndividualProductSelectionType:
      allOf:
        - $ref: '#/components/schemas/ProductSelectionType'
        - type: "object"
          required:
            - name
          properties:
            type:
              $ref: '#/components/schemas/ProductSelectionTypeEnum'
            name:
              $ref: '#/components/schemas/LocalizedString'
    ProductSelection:
      allOf:
        - $ref: '#/components/schemas/BaseResource'
        - type: "object"
          required:
            - createdAt
            - id
            - lastModifiedAt
            - mode
            - name
            - productCount
            - version
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            key:
              type: "string"
            name:
              $ref: '#/components/schemas/LocalizedString'
            productCount:
              type: "integer"
              format: "int32"
            type:
              $ref: '#/components/schemas/ProductSelectionTypeEnum'
            mode:
              $ref: '#/components/schemas/ProductSelectionMode'
            custom:
              $ref: '#/components/schemas/CustomFields'
    ProductSelectionAssignment:
      type: "object"
      required:
        - product
        - productSelection
      properties:
        product:
          $ref: '#/components/schemas/ProductReference'
        productSelection:
          $ref: '#/components/schemas/ProductSelectionReference'
        variantSelection:
          $ref: '#/components/schemas/ProductVariantSelection'
        variantExclusion:
          $ref: '#/components/schemas/ProductVariantExclusion'
    ProductSelectionDraft:
      type: "object"
      required:
        - name
      properties:
        key:
          type: "string"
        name:
          $ref: '#/components/schemas/LocalizedString'
        custom:
          $ref: '#/components/schemas/CustomFieldsDraft'
        type:
          $ref: '#/components/schemas/ProductSelectionTypeEnum'
        mode:
          $ref: '#/components/schemas/ProductSelectionMode'
    ProductSelectionMode:
      type: "string"
      enum:
        - Individual
        - IndividualExclusion
      x-annotation-package: "ProductSelection"
      x-annotation-docs-uri: --- ""
      x-annotation-enumDescriptions:
        Individual: "For this mode of Product Selection, the Products are to be assigned individually
         by using the [Add Product](/projects/product-selections#add-product) update action.n"
        IndividualExclusion: "Defines the Product Selection to contain Products that are excluded
         from the catalog.nFor this mode of Product Selection, the Products are to be
         excluded individually by using the [Exclude Product](/projects/product-selections#exclude-product)
         update action.n"
    ProductSelectionPagedQueryResponse:
      type: "object"
      required:
        - count
        - limit
        - offset
        - results
      properties:
        limit:
          type: "integer"
          format: "int64"
        offset:
          type: "integer"
          format: "int64"
        count:
          type: "integer"
          format: "int64"
        total:
          type: "integer"
          format: "int64"
        results:
          type: "array"
          items:
            $ref: '#/components/schemas/ProductSelection'
    ProductSelectionProductPagedQueryResponse:
      type: "object"
      required:
        - count
        - limit
        - offset
        - results
      properties:
        limit:
          type: "integer"
          format: "int64"
        offset:
          type: "integer"
          format: "int64"
        count:
          type: "integer"
          format: "int64"
        total:
          type: "integer"
          format: "int64"
        results:
          type: "array"
          items:
            $ref: '#/components/schemas/AssignedProductReference'
    ProductSelectionReference:
      allOf:
        - $ref: '#/components/schemas/Reference'
        - type: "object"
          required:
            - id
          properties:
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            id:
              type: "string"
            obj:
              $ref: '#/components/schemas/ProductSelection'
    ProductSelectionResourceIdentifier:
      allOf:
        - $ref: '#/components/schemas/ResourceIdentifier'
        - type: "object"
          properties:
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            id:
              type: "string"
            key:
              type: "string"
    ProductSelectionType:
      type: "object"
      discriminator:
        propertyName: type
        mapping:
          individualExclusion: '#/components/schemas/IndividualExclusionProductSelectionType'
          individual: '#/components/schemas/IndividualProductSelectionType'
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/ProductSelectionTypeEnum'
    ProductSelectionTypeEnum:
      type: "string"
      enum:
        - individual
        - individualExclusion
      x-annotation-package: "ProductSelection"
      x-beta: true
      x-markDeprecated: true
      x-annotation-docs-uri: --- ""
      x-annotation-enumDescriptions:
        individual: "For this type of Product Selection, the Products are to be assigned individually
         by using the [Add Product](/projects/product-selections#add-product) update action.n"
        individualExclusion: "Defines the Product Selection to contain Products that are excluded
         from the catalog ([BETA](/../offering/api-contract#public-beta)).nFor this type
         of Product Selection, the Products are to be excluded individually by using the
         [Exclude Product](/projects/product-selections#exclude-product) update action.n"
    ProductSelectionUpdate:
      type: "object"
      required:
        - actions
        - version
      properties:
        version:
          type: "integer"
          format: "int64"
        actions:
          type: "array"
          items:
            $ref: '#/components/schemas/ProductSelectionUpdateAction'
    ProductSelectionUpdateAction:
      type: "object"
      discriminator:
        propertyName: action
        mapping:
          addProduct: '#/components/schemas/ProductSelectionAddProductAction'
          changeName: '#/components/schemas/ProductSelectionChangeNameAction'
          excludeProduct: '#/components/schemas/ProductSelectionExcludeProductAction'
          removeProduct: '#/components/schemas/ProductSelectionRemoveProductAction'
          setCustomField: '#/components/schemas/ProductSelectionSetCustomFieldAction'
          setCustomType: '#/components/schemas/ProductSelectionSetCustomTypeAction'
          setKey: '#/components/schemas/ProductSelectionSetKeyAction'
          setVariantExclusion: '#/components/schemas/ProductSelectionSetVariantExclusionAction'
          setVariantSelection: '#/components/schemas/ProductSelectionSetVariantSelectionAction'
      required:
        - action
      properties:
        action:
          type: "string"
    ProductVariantExclusion:
      type: "object"
      required:
        - skus
      properties:
        skus:
          type: "array"
          items:
            type: "string"
    ProductVariantSelection:
      type: "object"
      discriminator:
        propertyName: type
        mapping:
          exclusion: '#/components/schemas/ProductVariantSelectionExclusion'
          includeAllExcept: '#/components/schemas/ProductVariantSelectionIncludeAllExcept'
          includeOnly: '#/components/schemas/ProductVariantSelectionIncludeOnly'
          inclusion: '#/components/schemas/ProductVariantSelectionInclusion'
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/ProductVariantSelectionTypeEnum'
    ProductVariantSelectionExclusion:
      allOf:
        - $ref: '#/components/schemas/ProductVariantSelection'
        - type: "object"
          required:
            - skus
            - type
          properties:
            type:
              $ref: '#/components/schemas/ProductVariantSelectionTypeEnum'
            skus:
              type: "array"
              items:
                type: "string"
    ProductVariantSelectionIncludeAllExcept:
      allOf:
        - $ref: '#/components/schemas/ProductVariantSelection'
        - type: "object"
          required:
            - skus
            - type
          properties:
            type:
              $ref: '#/components/schemas/ProductVariantSelectionTypeEnum'
            skus:
              type: "array"
              items:
                type: "string"
    ProductVariantSelectionIncludeOnly:
      allOf:
        - $ref: '#/components/schemas/ProductVariantSelection'
        - type: "object"
          required:
            - skus
            - type
          properties:
            type:
              $ref: '#/components/schemas/ProductVariantSelectionTypeEnum'
            skus:
              type: "array"
              items:
                type: "string"
    ProductVariantSelectionInclusion:
      allOf:
        - $ref: '#/components/schemas/ProductVariantSelection'
        - type: "object"
          required:
            - skus
            - type
          properties:
            type:
              $ref: '#/components/schemas/ProductVariantSelectionTypeEnum'
            skus:
              type: "array"
              items:
                type: "string"
    ProductVariantSelectionTypeEnum:
      type: "string"
      enum:
        - inclusion
        - exclusion
        - includeOnly
        - includeAllExcept
      x-annotation-package: "ProductSelection"
      x-annotation-docs-uri: --- ""
    ProductsInStorePagedQueryResponse:
      type: "object"
      required:
        - count
        - limit
        - offset
        - results
      properties:
        limit:
          type: "integer"
          format: "int64"
        offset:
          type: "integer"
          format: "int64"
        count:
          type: "integer"
          format: "int64"
        total:
          type: "integer"
          format: "int64"
        results:
          type: "array"
          items:
            $ref: '#/components/schemas/ProductSelectionAssignment'
    ProductSelectionAddProductAction:
      allOf:
        - $ref: '#/components/schemas/ProductSelectionUpdateAction'
        - type: "object"
          required:
            - product
          properties:
            action:
              type: "string"
            product:
              $ref: '#/components/schemas/ProductResourceIdentifier'
            variantSelection:
              $ref: '#/components/schemas/ProductVariantSelection'
    ProductSelectionChangeNameAction:
      allOf:
        - $ref: '#/components/schemas/ProductSelectionUpdateAction'
        - type: "object"
          required:
            - name
          properties:
            action:
              type: "string"
            name:
              $ref: '#/components/schemas/LocalizedString'
    ProductSelectionExcludeProductAction:
      allOf:
        - $ref: '#/components/schemas/ProductSelectionUpdateAction'
        - type: "object"
          required:
            - product
          properties:
            action:
              type: "string"
            product:
              $ref: '#/components/schemas/ProductResourceIdentifier'
            variantExclusion:
              $ref: '#/components/schemas/ProductVariantExclusion'
    ProductSelectionRemoveProductAction:
      allOf:
        - $ref: '#/components/schemas/ProductSelectionUpdateAction'
        - type: "object"
          required:
            - product
          properties:
            action:
              type: "string"
            product:
              $ref: '#/components/schemas/ProductResourceIdentifier'
    ProductSelectionSetCustomFieldAction:
      allOf:
        - $ref: '#/components/schemas/ProductSelectionUpdateAction'
        - type: "object"
          required:
            - name
          properties:
            action:
              type: "string"
            name:
              type: "string"
            value:
              {}
    ProductSelectionSetCustomTypeAction:
      allOf:
        - $ref: '#/components/schemas/ProductSelectionUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            type:
              $ref: '#/components/schemas/TypeResourceIdentifier'
            fields:
              $ref: '#/components/schemas/FieldContainer'
    ProductSelectionSetKeyAction:
      allOf:
        - $ref: '#/components/schemas/ProductSelectionUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            key:
              type: "string"
    ProductSelectionSetVariantExclusionAction:
      allOf:
        - $ref: '#/components/schemas/ProductSelectionUpdateAction'
        - type: "object"
          required:
            - product
          properties:
            action:
              type: "string"
            product:
              $ref: '#/components/schemas/ProductResourceIdentifier'
            variantExclusion:
              $ref: '#/components/schemas/ProductVariantExclusion'
    ProductSelectionSetVariantSelectionAction:
      allOf:
        - $ref: '#/components/schemas/ProductSelectionUpdateAction'
        - type: "object"
          required:
            - product
          properties:
            action:
              type: "string"
            product:
              $ref: '#/components/schemas/ProductResourceIdentifier'
            variantSelection:
              $ref: '#/components/schemas/ProductVariantSelection'
    AttributeBooleanType:
      allOf:
        - $ref: '#/components/schemas/AttributeType'
        - type: "object"
          properties:
            name:
              type: "string"
    AttributeConstraintEnum:
      type: "string"
      enum:
        - None
        - Unique
        - CombinationUnique
        - SameForAll
      x-annotation-package: "ProductType"
      x-annotation-enumDescriptions:
        None: "No constraints are applied to the Attribute.n"
        Unique: "Attribute values must be different for each variant.n"
        CombinationUnique: "Set of Attributes that have this constraint, should have different
         combinations in each variant.n"
        SameForAll: "Attribute value should be the same in all variants.n"
    AttributeConstraintEnumDraft:
      type: "string"
      enum:
        - None
      x-annotation-package: "ProductType"
    AttributeDateTimeType:
      allOf:
        - $ref: '#/components/schemas/AttributeType'
        - type: "object"
          properties:
            name:
              type: "string"
    AttributeDateType:
      allOf:
        - $ref: '#/components/schemas/AttributeType'
        - type: "object"
          properties:
            name:
              type: "string"
    AttributeDefinition:
      type: "object"
      required:
        - attributeConstraint
        - inputHint
        - isRequired
        - isSearchable
        - label
        - name
        - type
      properties:
        type:
          $ref: '#/components/schemas/AttributeType'
        name:
          type: "string"
        label:
          $ref: '#/components/schemas/LocalizedString'
        isRequired:
          type: "boolean"
        attributeConstraint:
          $ref: '#/components/schemas/AttributeConstraintEnum'
        inputTip:
          $ref: '#/components/schemas/LocalizedString'
        inputHint:
          $ref: '#/components/schemas/TextInputHint'
        isSearchable:
          type: "boolean"
    AttributeDefinitionDraft:
      type: "object"
      required:
        - isRequired
        - label
        - name
        - type
      properties:
        type:
          $ref: '#/components/schemas/AttributeType'
        name:
          type: "string"
        label:
          $ref: '#/components/schemas/LocalizedString'
        isRequired:
          type: "boolean"
        attributeConstraint:
          $ref: '#/components/schemas/AttributeConstraintEnum'
        inputTip:
          $ref: '#/components/schemas/LocalizedString'
        inputHint:
          $ref: '#/components/schemas/TextInputHint'
        isSearchable:
          type: "boolean"
    AttributeEnumType:
      allOf:
        - $ref: '#/components/schemas/AttributeType'
        - type: "object"
          required:
            - values
          properties:
            name:
              type: "string"
            values:
              type: "array"
              items:
                $ref: '#/components/schemas/AttributePlainEnumValue'
    AttributeLocalizableTextType:
      allOf:
        - $ref: '#/components/schemas/AttributeType'
        - type: "object"
          properties:
            name:
              type: "string"
    AttributeLocalizedEnumType:
      allOf:
        - $ref: '#/components/schemas/AttributeType'
        - type: "object"
          required:
            - values
          properties:
            name:
              type: "string"
            values:
              type: "array"
              items:
                $ref: '#/components/schemas/AttributeLocalizedEnumValue'
    AttributeLocalizedEnumValue:
      type: "object"
      required:
        - key
        - label
      properties:
        key:
          type: "string"
        label:
          $ref: '#/components/schemas/LocalizedString'
    AttributeMoneyType:
      allOf:
        - $ref: '#/components/schemas/AttributeType'
        - type: "object"
          properties:
            name:
              type: "string"
    AttributeNestedType:
      allOf:
        - $ref: '#/components/schemas/AttributeType'
        - type: "object"
          required:
            - typeReference
          properties:
            name:
              type: "string"
            typeReference:
              $ref: '#/components/schemas/ProductTypeReference'
    AttributeNumberType:
      allOf:
        - $ref: '#/components/schemas/AttributeType'
        - type: "object"
          properties:
            name:
              type: "string"
    AttributePlainEnumValue:
      type: "object"
      required:
        - key
        - label
      properties:
        key:
          type: "string"
        label:
          type: "string"
    AttributeReferenceType:
      allOf:
        - $ref: '#/components/schemas/AttributeType'
        - type: "object"
          required:
            - referenceTypeId
          properties:
            name:
              type: "string"
            referenceTypeId:
              $ref: '#/components/schemas/AttributeReferenceTypeId'
    AttributeReferenceTypeId:
      type: "string"
      enum:
        - cart
        - category
        - channel
        - customer
        - key-value-document
        - order
        - product
        - product-type
        - review
        - shipping-method
        - state
        - zone
      x-annotation-package: "ProductType"
      x-annotation-docs-uri: "https://docs.commercetools.com/api/projects/productTypes#attributereferencetypeid"
      x-annotation-enumDescriptions:
        cart: "References a [Cart](ctp:api:type:Cart).n"
        category: "References a [Category](ctp:api:type:Category).n"
        channel: "References a [Channel](ctp:api:type:Channel).n"
        customer: "References a [Customer](ctp:api:type:Customer).n"
        key-value-document: "References a [CustomObject](ctp:api:type:CustomObject).n"
        order: "References an [Order](ctp:api:type:Order).n"
        product: "References a [Product](ctp:api:type:Product).n"
        product-type: "References a [ProductType](ctp:api:type:ProductType).n"
        review: "References a [Review](ctp:api:type:Review).n"
        shipping-method: "References a [ShippingMethod](ctp:api:type:ShippingMethod).n"
        state: "References a [State](ctp:api:type:State).n"
        zone: "References a [Zone](ctp:api:type:Zone).n"
    AttributeSetType:
      allOf:
        - $ref: '#/components/schemas/AttributeType'
        - type: "object"
          required:
            - elementType
          properties:
            name:
              type: "string"
            elementType:
              $ref: '#/components/schemas/AttributeType'
    AttributeTextType:
      allOf:
        - $ref: '#/components/schemas/AttributeType'
        - type: "object"
          properties:
            name:
              type: "string"
    AttributeTimeType:
      allOf:
        - $ref: '#/components/schemas/AttributeType'
        - type: "object"
          properties:
            name:
              type: "string"
    AttributeType:
      type: "object"
      discriminator:
        propertyName: name
        mapping:
          boolean: '#/components/schemas/AttributeBooleanType'
          datetime: '#/components/schemas/AttributeDateTimeType'
          date: '#/components/schemas/AttributeDateType'
          enum: '#/components/schemas/AttributeEnumType'
          ltext: '#/components/schemas/AttributeLocalizableTextType'
          lenum: '#/components/schemas/AttributeLocalizedEnumType'
          money: '#/components/schemas/AttributeMoneyType'
          nested: '#/components/schemas/AttributeNestedType'
          number: '#/components/schemas/AttributeNumberType'
          reference: '#/components/schemas/AttributeReferenceType'
          set: '#/components/schemas/AttributeSetType'
          text: '#/components/schemas/AttributeTextType'
          time: '#/components/schemas/AttributeTimeType'
      required:
        - name
      properties:
        name:
          type: "string"
    ProductType:
      allOf:
        - $ref: '#/components/schemas/BaseResource'
        - type: "object"
          required:
            - createdAt
            - description
            - id
            - lastModifiedAt
            - name
            - version
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            key:
              type: "string"
            name:
              type: "string"
            description:
              type: "string"
            attributes:
              type: "array"
              items:
                $ref: '#/components/schemas/AttributeDefinition'
    ProductTypeDraft:
      type: "object"
      required:
        - description
        - name
      properties:
        key:
          type: "string"
        name:
          type: "string"
        description:
          type: "string"
        attributes:
          type: "array"
          items:
            $ref: '#/components/schemas/AttributeDefinitionDraft'
    ProductTypePagedQueryResponse:
      type: "object"
      required:
        - count
        - limit
        - offset
        - results
      properties:
        limit:
          type: "integer"
          format: "int64"
        offset:
          type: "integer"
          format: "int64"
        count:
          type: "integer"
          format: "int64"
        total:
          type: "integer"
          format: "int64"
        results:
          type: "array"
          items:
            $ref: '#/components/schemas/ProductType'
    ProductTypeReference:
      allOf:
        - $ref: '#/components/schemas/Reference'
        - type: "object"
          required:
            - id
          properties:
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            id:
              type: "string"
            obj:
              $ref: '#/components/schemas/ProductType'
    ProductTypeResourceIdentifier:
      allOf:
        - $ref: '#/components/schemas/ResourceIdentifier'
        - type: "object"
          properties:
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            id:
              type: "string"
            key:
              type: "string"
    ProductTypeUpdate:
      type: "object"
      required:
        - actions
        - version
      properties:
        version:
          type: "integer"
          format: "int64"
        actions:
          type: "array"
          items:
            $ref: '#/components/schemas/ProductTypeUpdateAction'
    ProductTypeUpdateAction:
      type: "object"
      discriminator:
        propertyName: action
        mapping:
          addAttributeDefinition: '#/components/schemas/ProductTypeAddAttributeDefinitionAction'
          addLocalizedEnumValue: '#/components/schemas/ProductTypeAddLocalizedEnumValueAction'
          addPlainEnumValue: '#/components/schemas/ProductTypeAddPlainEnumValueAction'
          changeAttributeConstraint: '#/components/schemas/ProductTypeChangeAttributeConstraintAction'
          changeAttributeName: '#/components/schemas/ProductTypeChangeAttributeNameAction'
          changeAttributeOrder: '#/components/schemas/ProductTypeChangeAttributeOrderAction'
          changeAttributeOrderByName: '#/components/schemas/ProductTypeChangeAttributeOrderByNameAction'
          changeDescription: '#/components/schemas/ProductTypeChangeDescriptionAction'
          changeEnumKey: '#/components/schemas/ProductTypeChangeEnumKeyAction'
          changeInputHint: '#/components/schemas/ProductTypeChangeInputHintAction'
          changeIsSearchable: '#/components/schemas/ProductTypeChangeIsSearchableAction'
          changeLabel: '#/components/schemas/ProductTypeChangeLabelAction'
          changeLocalizedEnumValueLabel: '#/components/schemas/ProductTypeChangeLocalizedEnumValueLabelAction'
          changeLocalizedEnumValueOrder: '#/components/schemas/ProductTypeChangeLocalizedEnumValueOrderAction'
          changeName: '#/components/schemas/ProductTypeChangeNameAction'
          changePlainEnumValueLabel: '#/components/schemas/ProductTypeChangePlainEnumValueLabelAction'
          changePlainEnumValueOrder: '#/components/schemas/ProductTypeChangePlainEnumValueOrderAction'
          removeAttributeDefinition: '#/components/schemas/ProductTypeRemoveAttributeDefinitionAction'
          removeEnumValues: '#/components/schemas/ProductTypeRemoveEnumValuesAction'
          setInputTip: '#/components/schemas/ProductTypeSetInputTipAction'
          setKey: '#/components/schemas/ProductTypeSetKeyAction'
      required:
        - action
      properties:
        action:
          type: "string"
    TextInputHint:
      type: "string"
      enum:
        - SingleLine
        - MultiLine
      x-annotation-package: "ProductType"
      x-annotation-enumDescriptions:
        SingleLine: "Hint for GUIs to display the field's content in a single line of text.n"
        MultiLine: "Hint for GUIs to display the field's content over multiple lines of text.n"
    ProductTypeAddAttributeDefinitionAction:
      allOf:
        - $ref: '#/components/schemas/ProductTypeUpdateAction'
        - type: "object"
          required:
            - attribute
          properties:
            action:
              type: "string"
            attribute:
              $ref: '#/components/schemas/AttributeDefinitionDraft'
    ProductTypeAddLocalizedEnumValueAction:
      allOf:
        - $ref: '#/components/schemas/ProductTypeUpdateAction'
        - type: "object"
          required:
            - attributeName
            - value
          properties:
            action:
              type: "string"
            attributeName:
              type: "string"
            value:
              $ref: '#/components/schemas/AttributeLocalizedEnumValue'
    ProductTypeAddPlainEnumValueAction:
      allOf:
        - $ref: '#/components/schemas/ProductTypeUpdateAction'
        - type: "object"
          required:
            - attributeName
            - value
          properties:
            action:
              type: "string"
            attributeName:
              type: "string"
            value:
              $ref: '#/components/schemas/AttributePlainEnumValue'
    ProductTypeChangeAttributeConstraintAction:
      allOf:
        - $ref: '#/components/schemas/ProductTypeUpdateAction'
        - type: "object"
          required:
            - attributeName
            - newValue
          properties:
            action:
              type: "string"
            attributeName:
              type: "string"
            newValue:
              $ref: '#/components/schemas/AttributeConstraintEnumDraft'
    ProductTypeChangeAttributeNameAction:
      allOf:
        - $ref: '#/components/schemas/ProductTypeUpdateAction'
        - type: "object"
          required:
            - attributeName
            - newAttributeName
          properties:
            action:
              type: "string"
            attributeName:
              type: "string"
            newAttributeName:
              type: "string"
    ProductTypeChangeAttributeOrderAction:
      allOf:
        - $ref: '#/components/schemas/ProductTypeUpdateAction'
        - type: "object"
          required:
            - attributes
          properties:
            action:
              type: "string"
            attributes:
              type: "array"
              items:
                $ref: '#/components/schemas/AttributeDefinition'
    ProductTypeChangeAttributeOrderByNameAction:
      allOf:
        - $ref: '#/components/schemas/ProductTypeUpdateAction'
        - type: "object"
          required:
            - attributeNames
          properties:
            action:
              type: "string"
            attributeNames:
              type: "array"
              items:
                type: "string"
    ProductTypeChangeDescriptionAction:
      allOf:
        - $ref: '#/components/schemas/ProductTypeUpdateAction'
        - type: "object"
          required:
            - description
          properties:
            action:
              type: "string"
            description:
              type: "string"
    ProductTypeChangeEnumKeyAction:
      allOf:
        - $ref: '#/components/schemas/ProductTypeUpdateAction'
        - type: "object"
          required:
            - attributeName
            - key
            - newKey
          properties:
            action:
              type: "string"
            attributeName:
              type: "string"
            key:
              type: "string"
            newKey:
              type: "string"
    ProductTypeChangeInputHintAction:
      allOf:
        - $ref: '#/components/schemas/ProductTypeUpdateAction'
        - type: "object"
          required:
            - attributeName
            - newValue
          properties:
            action:
              type: "string"
            attributeName:
              type: "string"
            newValue:
              $ref: '#/components/schemas/TextInputHint'
    ProductTypeChangeIsSearchableAction:
      allOf:
        - $ref: '#/components/schemas/ProductTypeUpdateAction'
        - type: "object"
          required:
            - attributeName
            - isSearchable
          properties:
            action:
              type: "string"
            attributeName:
              type: "string"
            isSearchable:
              type: "boolean"
    ProductTypeChangeLabelAction:
      allOf:
        - $ref: '#/components/schemas/ProductTypeUpdateAction'
        - type: "object"
          required:
            - attributeName
            - label
          properties:
            action:
              type: "string"
            attributeName:
              type: "string"
            label:
              $ref: '#/components/schemas/LocalizedString'
    ProductTypeChangeLocalizedEnumValueLabelAction:
      allOf:
        - $ref: '#/components/schemas/ProductTypeUpdateAction'
        - type: "object"
          required:
            - attributeName
            - newValue
          properties:
            action:
              type: "string"
            attributeName:
              type: "string"
            newValue:
              $ref: '#/components/schemas/AttributeLocalizedEnumValue'
    ProductTypeChangeLocalizedEnumValueOrderAction:
      allOf:
        - $ref: '#/components/schemas/ProductTypeUpdateAction'
        - type: "object"
          required:
            - attributeName
            - values
          properties:
            action:
              type: "string"
            attributeName:
              type: "string"
            values:
              type: "array"
              items:
                $ref: '#/components/schemas/AttributeLocalizedEnumValue'
    ProductTypeChangeNameAction:
      allOf:
        - $ref: '#/components/schemas/ProductTypeUpdateAction'
        - type: "object"
          required:
            - name
          properties:
            action:
              type: "string"
            name:
              type: "string"
    ProductTypeChangePlainEnumValueLabelAction:
      allOf:
        - $ref: '#/components/schemas/ProductTypeUpdateAction'
        - type: "object"
          required:
            - attributeName
            - newValue
          properties:
            action:
              type: "string"
            attributeName:
              type: "string"
            newValue:
              $ref: '#/components/schemas/AttributePlainEnumValue'
    ProductTypeChangePlainEnumValueOrderAction:
      allOf:
        - $ref: '#/components/schemas/ProductTypeUpdateAction'
        - type: "object"
          required:
            - attributeName
            - values
          properties:
            action:
              type: "string"
            attributeName:
              type: "string"
            values:
              type: "array"
              items:
                $ref: '#/components/schemas/AttributePlainEnumValue'
    ProductTypeRemoveAttributeDefinitionAction:
      allOf:
        - $ref: '#/components/schemas/ProductTypeUpdateAction'
        - type: "object"
          required:
            - name
          properties:
            action:
              type: "string"
            name:
              type: "string"
    ProductTypeRemoveEnumValuesAction:
      allOf:
        - $ref: '#/components/schemas/ProductTypeUpdateAction'
        - type: "object"
          required:
            - attributeName
            - keys
          properties:
            action:
              type: "string"
            attributeName:
              type: "string"
            keys:
              type: "array"
              items:
                type: "string"
    ProductTypeSetInputTipAction:
      allOf:
        - $ref: '#/components/schemas/ProductTypeUpdateAction'
        - type: "object"
          required:
            - attributeName
          properties:
            action:
              type: "string"
            attributeName:
              type: "string"
            inputTip:
              $ref: '#/components/schemas/LocalizedString'
    ProductTypeSetKeyAction:
      allOf:
        - $ref: '#/components/schemas/ProductTypeUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            key:
              type: "string"
    Attribute:
      type: "object"
      required:
        - name
        - value
      properties:
        name:
          type: "string"
        value:
          {}
    AttributeValue:
      {}
    CategoryOrderHints:
      type: "object"
      required:
        - /[0-9].[0-9]*[1-9]/
      additionalProperties:
        type: "string"
    CustomTokenizer:
      allOf:
        - $ref: '#/components/schemas/SuggestTokenizer'
        - type: "object"
          required:
            - inputs
          properties:
            type:
              type: "string"
            inputs:
              type: "array"
              items:
                type: "string"
    FacetRange:
      type: "object"
      required:
        - count
        - from
        - fromStr
        - max
        - mean
        - min
        - to
        - toStr
        - total
      properties:
        from:
          type: "number"
          format: "double"
        fromStr:
          type: "string"
        to:
          type: "number"
          format: "double"
        toStr:
          type: "string"
        count:
          type: "integer"
          format: "int64"
        productCount:
          type: "integer"
          format: "int64"
        total:
          type: "number"
          format: "double"
        min:
          type: "number"
          format: "double"
        max:
          type: "number"
          format: "double"
        mean:
          type: "number"
          format: "double"
    FacetResult:
      type: "object"
      discriminator:
        propertyName: type
        mapping:
          filter: '#/components/schemas/FilteredFacetResult'
          range: '#/components/schemas/RangeFacetResult'
          terms: '#/components/schemas/TermFacetResult'
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/FacetTypes'
    FacetResults:
      type: "object"
      required:
        - /^[a-z].*$/
      additionalProperties:
        type: "string"
    FacetTerm:
      type: "object"
      required:
        - count
        - term
      properties:
        term:
          {}
        count:
          type: "integer"
          format: "int64"
        productCount:
          type: "integer"
          format: "int64"
    FacetTypes:
      type: "string"
      enum:
        - terms
        - range
        - filter
      x-annotation-package: "Product"
    FilteredFacetResult:
      allOf:
        - $ref: '#/components/schemas/FacetResult'
        - type: "object"
          required:
            - count
          properties:
            type:
              $ref: '#/components/schemas/FacetTypes'
            count:
              type: "integer"
              format: "int64"
            productCount:
              type: "integer"
              format: "int64"
    Product:
      allOf:
        - $ref: '#/components/schemas/BaseResource'
        - type: "object"
          required:
            - createdAt
            - id
            - lastModifiedAt
            - masterData
            - productType
            - version
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            key:
              type: "string"
            productType:
              $ref: '#/components/schemas/ProductTypeReference'
            masterData:
              $ref: '#/components/schemas/ProductCatalogData'
            taxCategory:
              $ref: '#/components/schemas/TaxCategoryReference'
            state:
              $ref: '#/components/schemas/StateReference'
            reviewRatingStatistics:
              $ref: '#/components/schemas/ReviewRatingStatistics'
            priceMode:
              $ref: '#/components/schemas/ProductPriceModeEnum'
    ProductCatalogData:
      type: "object"
      required:
        - current
        - hasStagedChanges
        - published
        - staged
      properties:
        published:
          type: "boolean"
        current:
          $ref: '#/components/schemas/ProductData'
        staged:
          $ref: '#/components/schemas/ProductData'
        hasStagedChanges:
          type: "boolean"
    ProductData:
      type: "object"
      required:
        - categories
        - masterVariant
        - name
        - searchKeywords
        - slug
        - variants
      properties:
        name:
          $ref: '#/components/schemas/LocalizedString'
        categories:
          type: "array"
          items:
            $ref: '#/components/schemas/CategoryReference'
        categoryOrderHints:
          $ref: '#/components/schemas/CategoryOrderHints'
        description:
          $ref: '#/components/schemas/LocalizedString'
        slug:
          $ref: '#/components/schemas/LocalizedString'
        metaTitle:
          $ref: '#/components/schemas/LocalizedString'
        metaDescription:
          $ref: '#/components/schemas/LocalizedString'
        metaKeywords:
          $ref: '#/components/schemas/LocalizedString'
        masterVariant:
          $ref: '#/components/schemas/ProductVariant'
        variants:
          type: "array"
          items:
            $ref: '#/components/schemas/ProductVariant'
        searchKeywords:
          $ref: '#/components/schemas/SearchKeywords'
    ProductDraft:
      type: "object"
      required:
        - name
        - productType
        - slug
      properties:
        productType:
          $ref: '#/components/schemas/ProductTypeResourceIdentifier'
        name:
          $ref: '#/components/schemas/LocalizedString'
        slug:
          $ref: '#/components/schemas/LocalizedString'
        key:
          type: "string"
        description:
          $ref: '#/components/schemas/LocalizedString'
        categories:
          type: "array"
          items:
            $ref: '#/components/schemas/CategoryResourceIdentifier'
        categoryOrderHints:
          $ref: '#/components/schemas/CategoryOrderHints'
        metaTitle:
          $ref: '#/components/schemas/LocalizedString'
        metaDescription:
          $ref: '#/components/schemas/LocalizedString'
        metaKeywords:
          $ref: '#/components/schemas/LocalizedString'
        masterVariant:
          $ref: '#/components/schemas/ProductVariantDraft'
        variants:
          type: "array"
          items:
            $ref: '#/components/schemas/ProductVariantDraft'
        taxCategory:
          $ref: '#/components/schemas/TaxCategoryResourceIdentifier'
        searchKeywords:
          $ref: '#/components/schemas/SearchKeywords'
        state:
          $ref: '#/components/schemas/StateResourceIdentifier'
        publish:
          type: "boolean"
        priceMode:
          $ref: '#/components/schemas/ProductPriceModeEnum'
    ProductPagedQueryResponse:
      type: "object"
      required:
        - count
        - limit
        - offset
        - results
      properties:
        limit:
          type: "integer"
          format: "int64"
        offset:
          type: "integer"
          format: "int64"
        count:
          type: "integer"
          format: "int64"
        total:
          type: "integer"
          format: "int64"
        results:
          type: "array"
          items:
            $ref: '#/components/schemas/Product'
    ProductPriceModeEnum:
      type: "string"
      enum:
        - Embedded
        - Standalone
      x-annotation-package: "Product"
      x-beta: true
      x-annotation-docs-uri: "https://docs.commercetools.com/api/projects/products#productpricemode"
      x-annotation-enumDescriptions:
        Embedded: "Composable Commerce uses the [Embedded Prices](ctp:api:type:Price) located
         inside the `prices` field in [ProductVariant](ctp:api:type:ProductVariant)."
        Standalone: "Composable Commerce uses [StandalonePrices](ctp:api:type:StandalonePrice),
         which are associated with the [ProductVariant](ctp:api:type:ProductVariant) through
         the `sku` field."
    ProductProjection:
      allOf:
        - $ref: '#/components/schemas/BaseResource'
        - type: "object"
          required:
            - categories
            - createdAt
            - id
            - lastModifiedAt
            - masterVariant
            - name
            - productType
            - slug
            - variants
            - version
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            key:
              type: "string"
            productType:
              $ref: '#/components/schemas/ProductTypeReference'
            name:
              $ref: '#/components/schemas/LocalizedString'
            description:
              $ref: '#/components/schemas/LocalizedString'
            slug:
              $ref: '#/components/schemas/LocalizedString'
            categories:
              type: "array"
              items:
                $ref: '#/components/schemas/CategoryReference'
            categoryOrderHints:
              $ref: '#/components/schemas/CategoryOrderHints'
            metaTitle:
              $ref: '#/components/schemas/LocalizedString'
            metaDescription:
              $ref: '#/components/schemas/LocalizedString'
            metaKeywords:
              $ref: '#/components/schemas/LocalizedString'
            searchKeywords:
              $ref: '#/components/schemas/SearchKeywords'
            hasStagedChanges:
              type: "boolean"
            published:
              type: "boolean"
            masterVariant:
              $ref: '#/components/schemas/ProductVariant'
            variants:
              type: "array"
              items:
                $ref: '#/components/schemas/ProductVariant'
            taxCategory:
              $ref: '#/components/schemas/TaxCategoryReference'
            state:
              $ref: '#/components/schemas/StateReference'
            reviewRatingStatistics:
              $ref: '#/components/schemas/ReviewRatingStatistics'
            priceMode:
              $ref: '#/components/schemas/ProductPriceModeEnum'
    ProductProjectionPagedQueryResponse:
      type: "object"
      required:
        - count
        - limit
        - offset
        - results
      properties:
        limit:
          type: "integer"
          format: "int64"
        count:
          type: "integer"
          format: "int64"
        total:
          type: "integer"
          format: "int64"
        offset:
          type: "integer"
          format: "int64"
        results:
          type: "array"
          items:
            $ref: '#/components/schemas/ProductProjection'
    ProductProjectionPagedSearchResponse:
      type: "object"
      required:
        - count
        - facets
        - limit
        - offset
        - results
      properties:
        limit:
          type: "integer"
          format: "int64"
        count:
          type: "integer"
          format: "int64"
        total:
          type: "integer"
          format: "int64"
        offset:
          type: "integer"
          format: "int64"
        results:
          type: "array"
          items:
            $ref: '#/components/schemas/ProductProjection'
        facets:
          $ref: '#/components/schemas/FacetResults'
    ProductPublishScope:
      type: "string"
      enum:
        - All
        - Prices
      x-annotation-package: "Cart"
      x-annotation-docs-uri: "https://docs.commercetools.com/http-api-projects-carts.html#cartorigin"
      x-annotation-enumDescriptions:
        All: "Publishes a Product that causes the _staged_ projection of the Product to override
         the _current_ projection. If the Product is published for the first time, the
         _current_ projection is created. This is the default scope."
        Prices: "Publishes the Prices of the Product (only if the Product is already published).
         All Product Variants' Prices in the _staged_ projection are published into the
         _current_ projection with the same `id`. Prices in a _staged_ Product Variant
         that has no _current_ projection are not published. Prices in a _current_ Product
         Variant that has no _staged_ projection are unchanged. The `hasStagedChanges`
         [flag](ctp:api:type:ProductCatalogData) is updated according to whether the _staged_
         and _current_ projections still differ after the prices are published."
    ProductReference:
      allOf:
        - $ref: '#/components/schemas/Reference'
        - type: "object"
          required:
            - id
          properties:
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            id:
              type: "string"
            obj:
              $ref: '#/components/schemas/Product'
    ProductResourceIdentifier:
      allOf:
        - $ref: '#/components/schemas/ResourceIdentifier'
        - type: "object"
          properties:
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            id:
              type: "string"
            key:
              type: "string"
    ProductUpdate:
      type: "object"
      required:
        - actions
        - version
      properties:
        version:
          type: "integer"
          format: "int64"
        actions:
          type: "array"
          items:
            $ref: '#/components/schemas/ProductUpdateAction'
    ProductUpdateAction:
      type: "object"
      discriminator:
        propertyName: action
        mapping:
          addAsset: '#/components/schemas/ProductAddAssetAction'
          addExternalImage: '#/components/schemas/ProductAddExternalImageAction'
          addPrice: '#/components/schemas/ProductAddPriceAction'
          addToCategory: '#/components/schemas/ProductAddToCategoryAction'
          addVariant: '#/components/schemas/ProductAddVariantAction'
          changeAssetName: '#/components/schemas/ProductChangeAssetNameAction'
          changeAssetOrder: '#/components/schemas/ProductChangeAssetOrderAction'
          changeMasterVariant: '#/components/schemas/ProductChangeMasterVariantAction'
          changeName: '#/components/schemas/ProductChangeNameAction'
          changePrice: '#/components/schemas/ProductChangePriceAction'
          changeSlug: '#/components/schemas/ProductChangeSlugAction'
          legacySetSku: '#/components/schemas/ProductLegacySetSkuAction'
          moveImageToPosition: '#/components/schemas/ProductMoveImageToPositionAction'
          publish: '#/components/schemas/ProductPublishAction'
          removeAsset: '#/components/schemas/ProductRemoveAssetAction'
          removeFromCategory: '#/components/schemas/ProductRemoveFromCategoryAction'
          removeImage: '#/components/schemas/ProductRemoveImageAction'
          removePrice: '#/components/schemas/ProductRemovePriceAction'
          removeVariant: '#/components/schemas/ProductRemoveVariantAction'
          revertStagedChanges: '#/components/schemas/ProductRevertStagedChangesAction'
          revertStagedVariantChanges: '#/components/schemas/ProductRevertStagedVariantChangesAction'
          setAssetCustomField: '#/components/schemas/ProductSetAssetCustomFieldAction'
          setAssetCustomType: '#/components/schemas/ProductSetAssetCustomTypeAction'
          setAssetDescription: '#/components/schemas/ProductSetAssetDescriptionAction'
          setAssetKey: '#/components/schemas/ProductSetAssetKeyAction'
          setAssetSources: '#/components/schemas/ProductSetAssetSourcesAction'
          setAssetTags: '#/components/schemas/ProductSetAssetTagsAction'
          setAttribute: '#/components/schemas/ProductSetAttributeAction'
          setAttributeInAllVariants: '#/components/schemas/ProductSetAttributeInAllVariantsAction'
          setCategoryOrderHint: '#/components/schemas/ProductSetCategoryOrderHintAction'
          setDescription: '#/components/schemas/ProductSetDescriptionAction'
          setDiscountedPrice: '#/components/schemas/ProductSetDiscountedPriceAction'
          setImageLabel: '#/components/schemas/ProductSetImageLabelAction'
          setKey: '#/components/schemas/ProductSetKeyAction'
          setMetaDescription: '#/components/schemas/ProductSetMetaDescriptionAction'
          setMetaKeywords: '#/components/schemas/ProductSetMetaKeywordsAction'
          setMetaTitle: '#/components/schemas/ProductSetMetaTitleAction'
          setPriceKey: '#/components/schemas/ProductSetPriceKeyAction'
          setPriceMode: '#/components/schemas/ProductSetPriceModeAction'
          setPrices: '#/components/schemas/ProductSetPricesAction'
          setProductPriceCustomField: '#/components/schemas/ProductSetProductPriceCustomFieldAction'
          setProductPriceCustomType: '#/components/schemas/ProductSetProductPriceCustomTypeAction'
          setProductVariantKey: '#/components/schemas/ProductSetProductVariantKeyAction'
          setSearchKeywords: '#/components/schemas/ProductSetSearchKeywordsAction'
          setSku: '#/components/schemas/ProductSetSkuAction'
          setTaxCategory: '#/components/schemas/ProductSetTaxCategoryAction'
          transitionState: '#/components/schemas/ProductTransitionStateAction'
          unpublish: '#/components/schemas/ProductUnpublishAction'
      required:
        - action
      properties:
        action:
          type: "string"
    ProductVariant:
      type: "object"
      required:
        - id
      properties:
        id:
          type: "integer"
          format: "int64"
        sku:
          type: "string"
        key:
          type: "string"
        prices:
          type: "array"
          items:
            $ref: '#/components/schemas/Price'
        attributes:
          type: "array"
          items:
            $ref: '#/components/schemas/Attribute'
        price:
          $ref: '#/components/schemas/Price'
        images:
          type: "array"
          items:
            $ref: '#/components/schemas/Image'
        assets:
          type: "array"
          items:
            $ref: '#/components/schemas/Asset'
        availability:
          $ref: '#/components/schemas/ProductVariantAvailability'
        isMatchingVariant:
          type: "boolean"
        scopedPrice:
          $ref: '#/components/schemas/ScopedPrice'
        scopedPriceDiscounted:
          type: "boolean"
    ProductVariantAvailability:
      type: "object"
      properties:
        channels:
          $ref: '#/components/schemas/ProductVariantChannelAvailabilityMap'
        isOnStock:
          type: "boolean"
        restockableInDays:
          type: "integer"
          format: "int64"
        availableQuantity:
          type: "integer"
          format: "int64"
    ProductVariantChannelAvailability:
      type: "object"
      required:
        - id
        - version
      properties:
        isOnStock:
          type: "boolean"
        restockableInDays:
          type: "integer"
          format: "int64"
        availableQuantity:
          type: "integer"
          format: "int64"
        id:
          type: "string"
        version:
          type: "integer"
          format: "int64"
    ProductVariantChannelAvailabilityMap:
      type: "object"
      required:
        - //
      additionalProperties:
        type: "string"
    ProductVariantDraft:
      type: "object"
      properties:
        sku:
          type: "string"
        key:
          type: "string"
        prices:
          type: "array"
          items:
            $ref: '#/components/schemas/PriceDraft'
        attributes:
          type: "array"
          items:
            $ref: '#/components/schemas/Attribute'
        images:
          type: "array"
          items:
            $ref: '#/components/schemas/Image'
        assets:
          type: "array"
          items:
            $ref: '#/components/schemas/AssetDraft'
    RangeFacetResult:
      allOf:
        - $ref: '#/components/schemas/FacetResult'
        - type: "object"
          required:
            - ranges
          properties:
            type:
              $ref: '#/components/schemas/FacetTypes'
            ranges:
              type: "array"
              items:
                $ref: '#/components/schemas/FacetRange'
    SearchKeyword:
      type: "object"
      required:
        - text
      properties:
        text:
          type: "string"
        suggestTokenizer:
          $ref: '#/components/schemas/SuggestTokenizer'
    SearchKeywords:
      type: "object"
      required:
        - /^[a-z]{2}(-[A-Z]{2})?$/
      additionalProperties:
        type: "string"
    SuggestTokenizer:
      type: "object"
      discriminator:
        propertyName: type
        mapping:
          custom: '#/components/schemas/CustomTokenizer'
          whitespace: '#/components/schemas/WhitespaceTokenizer'
      required:
        - type
      properties:
        type:
          type: "string"
    Suggestion:
      type: "object"
      required:
        - text
      properties:
        text:
          type: "string"
    SuggestionResult:
      type: "object"
      required:
        - /searchKeywords.[a-z]{2}(-[A-Z]{2})?/
      additionalProperties:
        type: "string"
    TermFacetResult:
      allOf:
        - $ref: '#/components/schemas/FacetResult'
        - type: "object"
          required:
            - dataType
            - missing
            - other
            - terms
            - total
          properties:
            type:
              $ref: '#/components/schemas/FacetTypes'
            dataType:
              $ref: '#/components/schemas/TermFacetResultType'
            missing:
              type: "integer"
              format: "int64"
            total:
              type: "integer"
              format: "int64"
            other:
              type: "integer"
              format: "int64"
            terms:
              type: "array"
              items:
                $ref: '#/components/schemas/FacetTerm'
    TermFacetResultType:
      type: "string"
      enum:
        - text
        - date
        - time
        - datetime
        - boolean
        - number
      x-annotation-package: "Product"
    WhitespaceTokenizer:
      allOf:
        - $ref: '#/components/schemas/SuggestTokenizer'
        - type: "object"
          properties:
            type:
              type: "string"
    ProductAddAssetAction:
      allOf:
        - $ref: '#/components/schemas/ProductUpdateAction'
        - type: "object"
          required:
            - asset
          properties:
            action:
              type: "string"
            variantId:
              type: "integer"
              format: "int64"
            sku:
              type: "string"
            staged:
              type: "boolean"
            asset:
              $ref: '#/components/schemas/AssetDraft'
            position:
              type: "integer"
              format: "int32"
    ProductAddExternalImageAction:
      allOf:
        - $ref: '#/components/schemas/ProductUpdateAction'
        - type: "object"
          required:
            - image
          properties:
            action:
              type: "string"
            variantId:
              type: "integer"
              format: "int64"
            sku:
              type: "string"
            image:
              $ref: '#/components/schemas/Image'
            staged:
              type: "boolean"
    ProductAddPriceAction:
      allOf:
        - $ref: '#/components/schemas/ProductUpdateAction'
        - type: "object"
          required:
            - price
          properties:
            action:
              type: "string"
            variantId:
              type: "integer"
              format: "int64"
            sku:
              type: "string"
            price:
              $ref: '#/components/schemas/PriceDraft'
            staged:
              type: "boolean"
    ProductAddToCategoryAction:
      allOf:
        - $ref: '#/components/schemas/ProductUpdateAction'
        - type: "object"
          required:
            - category
          properties:
            action:
              type: "string"
            category:
              $ref: '#/components/schemas/CategoryResourceIdentifier'
            orderHint:
              type: "string"
            staged:
              type: "boolean"
    ProductAddVariantAction:
      allOf:
        - $ref: '#/components/schemas/ProductUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            sku:
              type: "string"
            key:
              type: "string"
            prices:
              type: "array"
              items:
                $ref: '#/components/schemas/PriceDraft'
            images:
              type: "array"
              items:
                $ref: '#/components/schemas/Image'
            attributes:
              type: "array"
              items:
                $ref: '#/components/schemas/Attribute'
            staged:
              type: "boolean"
            assets:
              type: "array"
              items:
                $ref: '#/components/schemas/AssetDraft'
    ProductChangeAssetNameAction:
      allOf:
        - $ref: '#/components/schemas/ProductUpdateAction'
        - type: "object"
          required:
            - name
          properties:
            action:
              type: "string"
            variantId:
              type: "integer"
              format: "int64"
            sku:
              type: "string"
            staged:
              type: "boolean"
            assetId:
              type: "string"
            assetKey:
              type: "string"
            name:
              $ref: '#/components/schemas/LocalizedString'
    ProductChangeAssetOrderAction:
      allOf:
        - $ref: '#/components/schemas/ProductUpdateAction'
        - type: "object"
          required:
            - assetOrder
          properties:
            action:
              type: "string"
            variantId:
              type: "integer"
              format: "int64"
            sku:
              type: "string"
            staged:
              type: "boolean"
            assetOrder:
              type: "array"
              items:
                type: "string"
    ProductChangeMasterVariantAction:
      allOf:
        - $ref: '#/components/schemas/ProductUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            variantId:
              type: "integer"
              format: "int64"
            sku:
              type: "string"
            staged:
              type: "boolean"
    ProductChangeNameAction:
      allOf:
        - $ref: '#/components/schemas/ProductUpdateAction'
        - type: "object"
          required:
            - name
          properties:
            action:
              type: "string"
            name:
              $ref: '#/components/schemas/LocalizedString'
            staged:
              type: "boolean"
    ProductChangePriceAction:
      allOf:
        - $ref: '#/components/schemas/ProductUpdateAction'
        - type: "object"
          required:
            - price
            - priceId
          properties:
            action:
              type: "string"
            priceId:
              type: "string"
            price:
              $ref: '#/components/schemas/PriceDraft'
            staged:
              type: "boolean"
    ProductChangeSlugAction:
      allOf:
        - $ref: '#/components/schemas/ProductUpdateAction'
        - type: "object"
          required:
            - slug
          properties:
            action:
              type: "string"
            slug:
              $ref: '#/components/schemas/LocalizedString'
            staged:
              type: "boolean"
    ProductLegacySetSkuAction:
      allOf:
        - $ref: '#/components/schemas/ProductUpdateAction'
        - type: "object"
          required:
            - variantId
          properties:
            action:
              type: "string"
            sku:
              type: "string"
            variantId:
              type: "integer"
              format: "int32"
    ProductMoveImageToPositionAction:
      allOf:
        - $ref: '#/components/schemas/ProductUpdateAction'
        - type: "object"
          required:
            - imageUrl
            - position
          properties:
            action:
              type: "string"
            variantId:
              type: "integer"
              format: "int64"
            sku:
              type: "string"
            imageUrl:
              type: "string"
            position:
              type: "integer"
              format: "int64"
            staged:
              type: "boolean"
    ProductPublishAction:
      allOf:
        - $ref: '#/components/schemas/ProductUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            scope:
              $ref: '#/components/schemas/ProductPublishScope'
    ProductRemoveAssetAction:
      allOf:
        - $ref: '#/components/schemas/ProductUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            variantId:
              type: "integer"
              format: "int64"
            sku:
              type: "string"
            staged:
              type: "boolean"
            assetId:
              type: "string"
            assetKey:
              type: "string"
    ProductRemoveFromCategoryAction:
      allOf:
        - $ref: '#/components/schemas/ProductUpdateAction'
        - type: "object"
          required:
            - category
          properties:
            action:
              type: "string"
            category:
              $ref: '#/components/schemas/CategoryResourceIdentifier'
            staged:
              type: "boolean"
    ProductRemoveImageAction:
      allOf:
        - $ref: '#/components/schemas/ProductUpdateAction'
        - type: "object"
          required:
            - imageUrl
          properties:
            action:
              type: "string"
            variantId:
              type: "integer"
              format: "int64"
            sku:
              type: "string"
            imageUrl:
              type: "string"
            staged:
              type: "boolean"
    ProductRemovePriceAction:
      allOf:
        - $ref: '#/components/schemas/ProductUpdateAction'
        - type: "object"
          required:
            - priceId
          properties:
            action:
              type: "string"
            priceId:
              type: "string"
            staged:
              type: "boolean"
    ProductRemoveVariantAction:
      allOf:
        - $ref: '#/components/schemas/ProductUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            id:
              type: "integer"
              format: "int64"
            sku:
              type: "string"
            staged:
              type: "boolean"
    ProductRevertStagedChangesAction:
      allOf:
        - $ref: '#/components/schemas/ProductUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
    ProductRevertStagedVariantChangesAction:
      allOf:
        - $ref: '#/components/schemas/ProductUpdateAction'
        - type: "object"
          required:
            - variantId
          properties:
            action:
              type: "string"
            variantId:
              type: "integer"
              format: "int64"
    ProductSetAssetCustomFieldAction:
      allOf:
        - $ref: '#/components/schemas/ProductUpdateAction'
        - type: "object"
          required:
            - name
          properties:
            action:
              type: "string"
            variantId:
              type: "integer"
              format: "int64"
            sku:
              type: "string"
            staged:
              type: "boolean"
            assetId:
              type: "string"
            assetKey:
              type: "string"
            name:
              type: "string"
            value:
              {}
    ProductSetAssetCustomTypeAction:
      allOf:
        - $ref: '#/components/schemas/ProductUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            variantId:
              type: "integer"
              format: "int64"
            sku:
              type: "string"
            staged:
              type: "boolean"
            assetId:
              type: "string"
            assetKey:
              type: "string"
            type:
              $ref: '#/components/schemas/TypeResourceIdentifier'
            fields:
              $ref: '#/components/schemas/FieldContainer'
    ProductSetAssetDescriptionAction:
      allOf:
        - $ref: '#/components/schemas/ProductUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            variantId:
              type: "integer"
              format: "int64"
            sku:
              type: "string"
            staged:
              type: "boolean"
            assetId:
              type: "string"
            assetKey:
              type: "string"
            description:
              $ref: '#/components/schemas/LocalizedString'
    ProductSetAssetKeyAction:
      allOf:
        - $ref: '#/components/schemas/ProductUpdateAction'
        - type: "object"
          required:
            - assetId
          properties:
            action:
              type: "string"
            variantId:
              type: "integer"
              format: "int64"
            sku:
              type: "string"
            staged:
              type: "boolean"
            assetId:
              type: "string"
            assetKey:
              type: "string"
    ProductSetAssetSourcesAction:
      allOf:
        - $ref: '#/components/schemas/ProductUpdateAction'
        - type: "object"
          required:
            - sources
          properties:
            action:
              type: "string"
            variantId:
              type: "integer"
              format: "int64"
            sku:
              type: "string"
            staged:
              type: "boolean"
            assetId:
              type: "string"
            assetKey:
              type: "string"
            sources:
              type: "array"
              items:
                $ref: '#/components/schemas/AssetSource'
    ProductSetAssetTagsAction:
      allOf:
        - $ref: '#/components/schemas/ProductUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            variantId:
              type: "integer"
              format: "int64"
            sku:
              type: "string"
            staged:
              type: "boolean"
            assetId:
              type: "string"
            assetKey:
              type: "string"
            tags:
              type: "array"
              items:
                type: "string"
    ProductSetAttributeAction:
      allOf:
        - $ref: '#/components/schemas/ProductUpdateAction'
        - type: "object"
          required:
            - name
          properties:
            action:
              type: "string"
            variantId:
              type: "integer"
              format: "int64"
            sku:
              type: "string"
            name:
              type: "string"
            value:
              {}
            staged:
              type: "boolean"
    ProductSetAttributeInAllVariantsAction:
      allOf:
        - $ref: '#/components/schemas/ProductUpdateAction'
        - type: "object"
          required:
            - name
          properties:
            action:
              type: "string"
            name:
              type: "string"
            value:
              {}
            staged:
              type: "boolean"
    ProductSetCategoryOrderHintAction:
      allOf:
        - $ref: '#/components/schemas/ProductUpdateAction'
        - type: "object"
          required:
            - categoryId
          properties:
            action:
              type: "string"
            categoryId:
              type: "string"
            orderHint:
              type: "string"
            staged:
              type: "boolean"
    ProductSetDescriptionAction:
      allOf:
        - $ref: '#/components/schemas/ProductUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            description:
              $ref: '#/components/schemas/LocalizedString'
            staged:
              type: "boolean"
    ProductSetDiscountedPriceAction:
      allOf:
        - $ref: '#/components/schemas/ProductUpdateAction'
        - type: "object"
          required:
            - priceId
          properties:
            action:
              type: "string"
            priceId:
              type: "string"
            staged:
              type: "boolean"
            discounted:
              $ref: '#/components/schemas/DiscountedPriceDraft'
    ProductSetImageLabelAction:
      allOf:
        - $ref: '#/components/schemas/ProductUpdateAction'
        - type: "object"
          required:
            - imageUrl
          properties:
            action:
              type: "string"
            sku:
              type: "string"
            variantId:
              type: "integer"
              format: "int64"
            imageUrl:
              type: "string"
            label:
              type: "string"
            staged:
              type: "boolean"
    ProductSetKeyAction:
      allOf:
        - $ref: '#/components/schemas/ProductUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            key:
              type: "string"
    ProductSetMetaDescriptionAction:
      allOf:
        - $ref: '#/components/schemas/ProductUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            metaDescription:
              $ref: '#/components/schemas/LocalizedString'
            staged:
              type: "boolean"
    ProductSetMetaKeywordsAction:
      allOf:
        - $ref: '#/components/schemas/ProductUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            metaKeywords:
              $ref: '#/components/schemas/LocalizedString'
            staged:
              type: "boolean"
    ProductSetMetaTitleAction:
      allOf:
        - $ref: '#/components/schemas/ProductUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            metaTitle:
              $ref: '#/components/schemas/LocalizedString'
            staged:
              type: "boolean"
    ProductSetPriceKeyAction:
      allOf:
        - $ref: '#/components/schemas/ProductUpdateAction'
        - type: "object"
          required:
            - priceId
          properties:
            action:
              type: "string"
            priceId:
              type: "string"
            staged:
              type: "boolean"
            key:
              type: "string"
    ProductSetPriceModeAction:
      allOf:
        - $ref: '#/components/schemas/ProductUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            priceMode:
              $ref: '#/components/schemas/ProductPriceModeEnum'
    ProductSetPricesAction:
      allOf:
        - $ref: '#/components/schemas/ProductUpdateAction'
        - type: "object"
          required:
            - prices
          properties:
            action:
              type: "string"
            variantId:
              type: "integer"
              format: "int64"
            sku:
              type: "string"
            prices:
              type: "array"
              items:
                $ref: '#/components/schemas/PriceDraft'
            staged:
              type: "boolean"
    ProductSetProductPriceCustomFieldAction:
      allOf:
        - $ref: '#/components/schemas/ProductUpdateAction'
        - type: "object"
          required:
            - name
            - priceId
          properties:
            action:
              type: "string"
            priceId:
              type: "string"
            staged:
              type: "boolean"
            name:
              type: "string"
            value:
              {}
    ProductSetProductPriceCustomTypeAction:
      allOf:
        - $ref: '#/components/schemas/ProductUpdateAction'
        - type: "object"
          required:
            - priceId
          properties:
            action:
              type: "string"
            priceId:
              type: "string"
            staged:
              type: "boolean"
            type:
              $ref: '#/components/schemas/TypeResourceIdentifier'
            fields:
              $ref: '#/components/schemas/FieldContainer'
    ProductSetProductVariantKeyAction:
      allOf:
        - $ref: '#/components/schemas/ProductUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            variantId:
              type: "integer"
              format: "int64"
            sku:
              type: "string"
            key:
              type: "string"
            staged:
              type: "boolean"
    ProductSetSearchKeywordsAction:
      allOf:
        - $ref: '#/components/schemas/ProductUpdateAction'
        - type: "object"
          required:
            - searchKeywords
          properties:
            action:
              type: "string"
            searchKeywords:
              $ref: '#/components/schemas/SearchKeywords'
            staged:
              type: "boolean"
    ProductSetSkuAction:
      allOf:
        - $ref: '#/components/schemas/ProductUpdateAction'
        - type: "object"
          required:
            - variantId
          properties:
            action:
              type: "string"
            variantId:
              type: "integer"
              format: "int64"
            sku:
              type: "string"
            staged:
              type: "boolean"
    ProductSetTaxCategoryAction:
      allOf:
        - $ref: '#/components/schemas/ProductUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            taxCategory:
              $ref: '#/components/schemas/TaxCategoryResourceIdentifier'
    ProductTransitionStateAction:
      allOf:
        - $ref: '#/components/schemas/ProductUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            state:
              $ref: '#/components/schemas/StateResourceIdentifier'
            force:
              type: "boolean"
    ProductUnpublishAction:
      allOf:
        - $ref: '#/components/schemas/ProductUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
    BusinessUnitConfiguration:
      type: "object"
      required:
        - myBusinessUnitStatusOnCreation
      properties:
        myBusinessUnitStatusOnCreation:
          $ref: '#/components/schemas/BusinessUnitConfigurationStatus'
        myBusinessUnitAssociateRoleOnCreation:
          $ref: '#/components/schemas/AssociateRoleKeyReference'
    BusinessUnitConfigurationStatus:
      type: "string"
      enum:
        - Active
        - Inactive
      x-annotation-package: "Project"
      x-annotation-enumDescriptions:
        Active: "The [Business Unit](ctp:api:type:BusinessUnit) can be used in [Orders](ctp:api:type:Order),
         [Carts](ctp:api:type:Cart), and [Quotes](/../api/quotes-overview) and can be updated
         using the [My Business Unit endpoint](ctp:api:endpoint:/{projectKey}/me/business-units:POST)."
        Inactive: "The [Business Unit](ctp:api:type:BusinessUnit) cannot be used in [Orders](ctp:api:type:Order),
         [Carts](ctp:api:type:Cart), and [Quotes](/../api/quotes-overview) and cannot be
         updated using the [My Business Unit endpoint](ctp:api:endpoint:/{projectKey}/me/business-units:POST)."
    CartClassificationType:
      allOf:
        - $ref: '#/components/schemas/ShippingRateInputType'
        - type: "object"
          required:
            - values
          properties:
            type:
              $ref: '#/components/schemas/ShippingRateTierType'
            values:
              type: "array"
              items:
                $ref: '#/components/schemas/CustomFieldLocalizedEnumValue'
    CartScoreType:
      allOf:
        - $ref: '#/components/schemas/ShippingRateInputType'
        - type: "object"
          properties:
            type:
              $ref: '#/components/schemas/ShippingRateTierType'
    CartValueType:
      allOf:
        - $ref: '#/components/schemas/ShippingRateInputType'
        - type: "object"
          properties:
            type:
              $ref: '#/components/schemas/ShippingRateTierType'
    CartsConfiguration:
      type: "object"
      properties:
        deleteDaysAfterLastModification:
          type: "integer"
          format: "int64"
        countryTaxRateFallbackEnabled:
          type: "boolean"
    ExternalOAuth:
      type: "object"
      required:
        - authorizationHeader
        - url
      properties:
        url:
          type: "string"
        authorizationHeader:
          type: "string"
    OrderSearchStatus:
      type: "string"
      enum:
        - Activated
        - Deactivated
      x-annotation-package: "Project"
      x-beta: true
      x-annotation-enumDescriptions:
        Activated: "indicates that the [Search Orders](/../api/projects/order-search#search-orders)
         endpoint is fully operational."
        Deactivated: "indicates that the Order Search feature is currently not active, but
         can be activated by [update action](#change-order-search-status)."
    Project:
      type: "object"
      required:
        - carts
        - countries
        - createdAt
        - currencies
        - key
        - languages
        - messages
        - name
        - version
      properties:
        version:
          type: "integer"
          format: "int64"
        key:
          type: "string"
        name:
          type: "string"
        countries:
          type: "array"
          items:
            $ref: '#/components/schemas/CountryCode'
        currencies:
          type: "array"
          items:
            $ref: '#/components/schemas/CurrencyCode'
        languages:
          type: "array"
          items:
            $ref: '#/components/schemas/Locale'
        createdAt:
          type: "string"
          format: "datetime"
        trialUntil:
          type: "string"
        messages:
          $ref: '#/components/schemas/MessagesConfiguration'
        carts:
          $ref: '#/components/schemas/CartsConfiguration'
        shoppingLists:
          $ref: '#/components/schemas/ShoppingListsConfiguration'
        shippingRateInputType:
          $ref: '#/components/schemas/ShippingRateInputType'
        externalOAuth:
          $ref: '#/components/schemas/ExternalOAuth'
        searchIndexing:
          $ref: '#/components/schemas/SearchIndexingConfiguration'
        businessUnits:
          $ref: '#/components/schemas/BusinessUnitConfiguration'
    ProjectUpdate:
      type: "object"
      required:
        - actions
        - version
      properties:
        version:
          type: "integer"
          format: "int64"
        actions:
          type: "array"
          items:
            $ref: '#/components/schemas/ProjectUpdateAction'
    ProjectUpdateAction:
      type: "object"
      discriminator:
        propertyName: action
        mapping:
          changeMyBusinessUnitStatusOnCreation: '#/components/schemas/ProjectChangeBusinessUnitStatusOnCreationAction'
          changeCartsConfiguration: '#/components/schemas/ProjectChangeCartsConfigurationAction'
          changeCountries: '#/components/schemas/ProjectChangeCountriesAction'
          changeCountryTaxRateFallbackEnabled: '#/components/schemas/ProjectChangeCountryTaxRateFallbackEnabledAction'
          changeCurrencies: '#/components/schemas/ProjectChangeCurrenciesAction'
          changeLanguages: '#/components/schemas/ProjectChangeLanguagesAction'
          changeMessagesConfiguration: '#/components/schemas/ProjectChangeMessagesConfigurationAction'
          changeMessagesEnabled: '#/components/schemas/ProjectChangeMessagesEnabledAction'
          changeName: '#/components/schemas/ProjectChangeNameAction'
          changeOrderSearchStatus: '#/components/schemas/ProjectChangeOrderSearchStatusAction'
          changeProductSearchIndexingEnabled: '#/components/schemas/ProjectChangeProductSearchIndexingEnabledAction'
          changeShoppingListsConfiguration: '#/components/schemas/ProjectChangeShoppingListsConfigurationAction'
          setMyBusinessUnitAssociateRoleOnCreation: '#/components/schemas/ProjectSetBusinessUnitAssociateRoleOnCreationAction'
          setExternalOAuth: '#/components/schemas/ProjectSetExternalOAuthAction'
          setShippingRateInputType: '#/components/schemas/ProjectSetShippingRateInputTypeAction'
      required:
        - action
      properties:
        action:
          type: "string"
    SearchIndexingConfiguration:
      type: "object"
      properties:
        products:
          $ref: '#/components/schemas/SearchIndexingConfigurationValues'
        orders:
          $ref: '#/components/schemas/SearchIndexingConfigurationValues'
    SearchIndexingConfigurationStatus:
      type: "string"
      enum:
        - Activated
        - Deactivated
        - Indexing
      x-annotation-package: "Project"
      x-annotation-enumDescriptions:
        Activated: "Indicates that search and suggest endpoints for the specified resource
         type are active."
        Deactivated: "Indicates that search and suggest endpoints for the specified resource
         type cannot be used."
        Indexing: "Indicates that search and suggest endpoints can _temporarily_ not be used
         because the search index is being re-built."
    SearchIndexingConfigurationValues:
      type: "object"
      properties:
        status:
          $ref: '#/components/schemas/SearchIndexingConfigurationStatus'
        lastModifiedAt:
          type: "string"
          format: "datetime"
        lastModifiedBy:
          $ref: '#/components/schemas/LastModifiedBy'
    ShippingRateInputType:
      type: "object"
      discriminator:
        propertyName: type
        mapping:
          CartClassification: '#/components/schemas/CartClassificationType'
          CartScore: '#/components/schemas/CartScoreType'
          CartValue: '#/components/schemas/CartValueType'
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/ShippingRateTierType'
    ShoppingListsConfiguration:
      type: "object"
      properties:
        deleteDaysAfterLastModification:
          type: "integer"
          format: "int64"
    ProjectChangeBusinessUnitStatusOnCreationAction:
      allOf:
        - $ref: '#/components/schemas/ProjectUpdateAction'
        - type: "object"
          required:
            - status
          properties:
            action:
              type: "string"
            status:
              $ref: '#/components/schemas/BusinessUnitConfigurationStatus'
    ProjectChangeCartsConfigurationAction:
      allOf:
        - $ref: '#/components/schemas/ProjectUpdateAction'
        - type: "object"
          required:
            - cartsConfiguration
          properties:
            action:
              type: "string"
            cartsConfiguration:
              $ref: '#/components/schemas/CartsConfiguration'
    ProjectChangeCountriesAction:
      allOf:
        - $ref: '#/components/schemas/ProjectUpdateAction'
        - type: "object"
          required:
            - countries
          properties:
            action:
              type: "string"
            countries:
              type: "array"
              items:
                $ref: '#/components/schemas/CountryCode'
    ProjectChangeCountryTaxRateFallbackEnabledAction:
      allOf:
        - $ref: '#/components/schemas/ProjectUpdateAction'
        - type: "object"
          required:
            - countryTaxRateFallbackEnabled
          properties:
            action:
              type: "string"
            countryTaxRateFallbackEnabled:
              type: "boolean"
    ProjectChangeCurrenciesAction:
      allOf:
        - $ref: '#/components/schemas/ProjectUpdateAction'
        - type: "object"
          required:
            - currencies
          properties:
            action:
              type: "string"
            currencies:
              type: "array"
              items:
                $ref: '#/components/schemas/CurrencyCode'
    ProjectChangeLanguagesAction:
      allOf:
        - $ref: '#/components/schemas/ProjectUpdateAction'
        - type: "object"
          required:
            - languages
          properties:
            action:
              type: "string"
            languages:
              type: "array"
              items:
                $ref: '#/components/schemas/Locale'
    ProjectChangeMessagesConfigurationAction:
      allOf:
        - $ref: '#/components/schemas/ProjectUpdateAction'
        - type: "object"
          required:
            - messagesConfiguration
          properties:
            action:
              type: "string"
            messagesConfiguration:
              $ref: '#/components/schemas/MessagesConfigurationDraft'
    ProjectChangeMessagesEnabledAction:
      allOf:
        - $ref: '#/components/schemas/ProjectUpdateAction'
        - type: "object"
          required:
            - messagesEnabled
          properties:
            action:
              type: "string"
            messagesEnabled:
              type: "boolean"
    ProjectChangeNameAction:
      allOf:
        - $ref: '#/components/schemas/ProjectUpdateAction'
        - type: "object"
          required:
            - name
          properties:
            action:
              type: "string"
            name:
              type: "string"
    ProjectChangeOrderSearchStatusAction:
      allOf:
        - $ref: '#/components/schemas/ProjectUpdateAction'
        - type: "object"
          required:
            - status
          properties:
            action:
              type: "string"
            status:
              $ref: '#/components/schemas/OrderSearchStatus'
    ProjectChangeProductSearchIndexingEnabledAction:
      allOf:
        - $ref: '#/components/schemas/ProjectUpdateAction'
        - type: "object"
          required:
            - enabled
          properties:
            action:
              type: "string"
            enabled:
              type: "boolean"
    ProjectChangeShoppingListsConfigurationAction:
      allOf:
        - $ref: '#/components/schemas/ProjectUpdateAction'
        - type: "object"
          required:
            - shoppingListsConfiguration
          properties:
            action:
              type: "string"
            shoppingListsConfiguration:
              $ref: '#/components/schemas/ShoppingListsConfiguration'
    ProjectSetBusinessUnitAssociateRoleOnCreationAction:
      allOf:
        - $ref: '#/components/schemas/ProjectUpdateAction'
        - type: "object"
          required:
            - associateRole
          properties:
            action:
              type: "string"
            associateRole:
              $ref: '#/components/schemas/AssociateRoleResourceIdentifier'
    ProjectSetExternalOAuthAction:
      allOf:
        - $ref: '#/components/schemas/ProjectUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            externalOAuth:
              $ref: '#/components/schemas/ExternalOAuth'
    ProjectSetShippingRateInputTypeAction:
      allOf:
        - $ref: '#/components/schemas/ProjectUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            shippingRateInputType:
              $ref: '#/components/schemas/ShippingRateInputType'
    QuoteRequest:
      allOf:
        - $ref: '#/components/schemas/BaseResource'
        - type: "object"
          required:
            - createdAt
            - customLineItems
            - customer
            - id
            - lastModifiedAt
            - lineItems
            - quoteRequestState
            - taxCalculationMode
            - taxMode
            - taxRoundingMode
            - totalPrice
            - version
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            key:
              type: "string"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            quoteRequestState:
              $ref: '#/components/schemas/QuoteRequestState'
            comment:
              type: "string"
            customer:
              $ref: '#/components/schemas/CustomerReference'
            customerGroup:
              $ref: '#/components/schemas/CustomerGroupReference'
            store:
              $ref: '#/components/schemas/StoreKeyReference'
            lineItems:
              type: "array"
              items:
                $ref: '#/components/schemas/LineItem'
            customLineItems:
              type: "array"
              items:
                $ref: '#/components/schemas/CustomLineItem'
            totalPrice:
              $ref: '#/components/schemas/TypedMoney'
            taxedPrice:
              $ref: '#/components/schemas/TaxedPrice'
            shippingAddress:
              $ref: '#/components/schemas/Address'
            billingAddress:
              $ref: '#/components/schemas/Address'
            inventoryMode:
              $ref: '#/components/schemas/InventoryMode'
            taxMode:
              $ref: '#/components/schemas/TaxMode'
            taxRoundingMode:
              $ref: '#/components/schemas/RoundingMode'
            taxCalculationMode:
              $ref: '#/components/schemas/TaxCalculationMode'
            country:
              $ref: '#/components/schemas/CountryCode'
            shippingInfo:
              $ref: '#/components/schemas/ShippingInfo'
            paymentInfo:
              $ref: '#/components/schemas/PaymentInfo'
            shippingRateInput:
              $ref: '#/components/schemas/ShippingRateInput'
            itemShippingAddresses:
              type: "array"
              items:
                $ref: '#/components/schemas/Address'
            directDiscounts:
              type: "array"
              items:
                $ref: '#/components/schemas/DirectDiscount'
            custom:
              $ref: '#/components/schemas/CustomFields'
            state:
              $ref: '#/components/schemas/StateReference'
            purchaseOrderNumber:
              type: "string"
            businessUnit:
              $ref: '#/components/schemas/BusinessUnitKeyReference'
    QuoteRequestDraft:
      type: "object"
      required:
        - cart
        - cartVersion
        - comment
      properties:
        cart:
          $ref: '#/components/schemas/CartResourceIdentifier'
        cartVersion:
          type: "integer"
          format: "int64"
        key:
          type: "string"
        comment:
          type: "string"
        custom:
          $ref: '#/components/schemas/CustomFieldsDraft'
        state:
          $ref: '#/components/schemas/StateReference'
        purchaseOrderNumber:
          type: "string"
    QuoteRequestPagedQueryResponse:
      type: "object"
      required:
        - count
        - limit
        - offset
        - results
      properties:
        limit:
          type: "integer"
          format: "int64"
        offset:
          type: "integer"
          format: "int64"
        count:
          type: "integer"
          format: "int64"
        total:
          type: "integer"
          format: "int64"
        results:
          type: "array"
          items:
            $ref: '#/components/schemas/QuoteRequest'
    QuoteRequestReference:
      allOf:
        - $ref: '#/components/schemas/Reference'
        - type: "object"
          properties:
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            id:
              type: "string"
            obj:
              $ref: '#/components/schemas/QuoteRequest'
    QuoteRequestResourceIdentifier:
      allOf:
        - $ref: '#/components/schemas/ResourceIdentifier'
        - type: "object"
          properties:
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            id:
              type: "string"
            key:
              type: "string"
    QuoteRequestState:
      type: "string"
      enum:
        - Submitted
        - Accepted
        - Closed
        - Rejected
        - Cancelled
      x-annotation-package: "QuoteRequest"
      x-annotation-docs-uri: "https://docs.commercetools.com/api/projects/quote-requests#quoterequeststate"
      x-annotation-enumDescriptions:
        Submitted: "Initial state of the negotiation process. Indicates that the Quote Request
         has been submitted by the Buyer, but the Seller has not yet decided whether to
         accept or to reject the request.n"
        Accepted: "Indicates that the Quote Request has been accepted by the Seller and the
         negotiation process continues with preparing a Staged Quote for the Buyer.n"
        Closed: "Final state of the negotiation process. Indicates that the Quote Request
         had been accepted by the Seller and there is no further action that can be performed
         by any party.n"
        Rejected: "Indicates that the Quote Request has been rejected by the Seller and the
         negotiation process terminated.n"
        Cancelled: "Indicates that the Buyer has withdrawn the Quote Request.n"
    QuoteRequestUpdate:
      type: "object"
      required:
        - actions
        - version
      properties:
        version:
          type: "integer"
          format: "int64"
        actions:
          type: "array"
          items:
            $ref: '#/components/schemas/QuoteRequestUpdateAction'
    QuoteRequestUpdateAction:
      type: "object"
      discriminator:
        propertyName: action
        mapping:
          changeQuoteRequestState: '#/components/schemas/QuoteRequestChangeQuoteRequestStateAction'
          setCustomField: '#/components/schemas/QuoteRequestSetCustomFieldAction'
          setCustomType: '#/components/schemas/QuoteRequestSetCustomTypeAction'
          transitionState: '#/components/schemas/QuoteRequestTransitionStateAction'
      required:
        - action
      properties:
        action:
          type: "string"
    QuoteRequestChangeQuoteRequestStateAction:
      allOf:
        - $ref: '#/components/schemas/QuoteRequestUpdateAction'
        - type: "object"
          required:
            - quoteRequestState
          properties:
            action:
              type: "string"
            quoteRequestState:
              $ref: '#/components/schemas/QuoteRequestState'
    QuoteRequestSetCustomFieldAction:
      allOf:
        - $ref: '#/components/schemas/QuoteRequestUpdateAction'
        - type: "object"
          required:
            - name
          properties:
            action:
              type: "string"
            name:
              type: "string"
            value:
              {}
    QuoteRequestSetCustomTypeAction:
      allOf:
        - $ref: '#/components/schemas/QuoteRequestUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            type:
              $ref: '#/components/schemas/TypeResourceIdentifier'
            fields:
              $ref: '#/components/schemas/FieldContainer'
    QuoteRequestTransitionStateAction:
      allOf:
        - $ref: '#/components/schemas/QuoteRequestUpdateAction'
        - type: "object"
          required:
            - state
          properties:
            action:
              type: "string"
            state:
              $ref: '#/components/schemas/StateResourceIdentifier'
            force:
              type: "boolean"
    Quote:
      allOf:
        - $ref: '#/components/schemas/BaseResource'
        - type: "object"
          required:
            - createdAt
            - customLineItems
            - id
            - lastModifiedAt
            - lineItems
            - quoteRequest
            - quoteState
            - stagedQuote
            - taxCalculationMode
            - taxMode
            - taxRoundingMode
            - totalPrice
            - version
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            key:
              type: "string"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            quoteRequest:
              $ref: '#/components/schemas/QuoteRequestReference'
            stagedQuote:
              $ref: '#/components/schemas/StagedQuoteReference'
            customer:
              $ref: '#/components/schemas/CustomerReference'
            customerGroup:
              $ref: '#/components/schemas/CustomerGroupReference'
            validTo:
              type: "string"
              format: "datetime"
            sellerComment:
              type: "string"
            buyerComment:
              type: "string"
            store:
              $ref: '#/components/schemas/StoreKeyReference'
            lineItems:
              type: "array"
              items:
                $ref: '#/components/schemas/LineItem'
            customLineItems:
              type: "array"
              items:
                $ref: '#/components/schemas/CustomLineItem'
            totalPrice:
              $ref: '#/components/schemas/TypedMoney'
            taxedPrice:
              $ref: '#/components/schemas/TaxedPrice'
            shippingAddress:
              $ref: '#/components/schemas/Address'
            billingAddress:
              $ref: '#/components/schemas/Address'
            inventoryMode:
              $ref: '#/components/schemas/InventoryMode'
            taxMode:
              $ref: '#/components/schemas/TaxMode'
            taxRoundingMode:
              $ref: '#/components/schemas/RoundingMode'
            taxCalculationMode:
              $ref: '#/components/schemas/TaxCalculationMode'
            country:
              $ref: '#/components/schemas/CountryCode'
            shippingInfo:
              $ref: '#/components/schemas/ShippingInfo'
            paymentInfo:
              $ref: '#/components/schemas/PaymentInfo'
            shippingRateInput:
              $ref: '#/components/schemas/ShippingRateInput'
            itemShippingAddresses:
              type: "array"
              items:
                $ref: '#/components/schemas/Address'
            directDiscounts:
              type: "array"
              items:
                $ref: '#/components/schemas/DirectDiscount'
            custom:
              $ref: '#/components/schemas/CustomFields'
            quoteState:
              $ref: '#/components/schemas/QuoteState'
            state:
              $ref: '#/components/schemas/StateReference'
            purchaseOrderNumber:
              type: "string"
            businessUnit:
              $ref: '#/components/schemas/BusinessUnitKeyReference'
    QuoteDraft:
      type: "object"
      required:
        - stagedQuote
        - stagedQuoteVersion
      properties:
        key:
          type: "string"
        stagedQuote:
          $ref: '#/components/schemas/StagedQuoteResourceIdentifier'
        stagedQuoteVersion:
          type: "integer"
          format: "int64"
        stagedQuoteStateToSent:
          type: "boolean"
        state:
          $ref: '#/components/schemas/StateReference'
        custom:
          $ref: '#/components/schemas/CustomFieldsDraft'
    QuotePagedQueryResponse:
      type: "object"
      required:
        - count
        - limit
        - offset
        - results
      properties:
        limit:
          type: "integer"
          format: "int64"
        offset:
          type: "integer"
          format: "int64"
        count:
          type: "integer"
          format: "int64"
        total:
          type: "integer"
          format: "int64"
        results:
          type: "array"
          items:
            $ref: '#/components/schemas/Quote'
    QuoteReference:
      allOf:
        - $ref: '#/components/schemas/Reference'
        - type: "object"
          properties:
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            id:
              type: "string"
            obj:
              $ref: '#/components/schemas/Quote'
    QuoteResourceIdentifier:
      allOf:
        - $ref: '#/components/schemas/ResourceIdentifier'
        - type: "object"
          properties:
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            id:
              type: "string"
            key:
              type: "string"
    QuoteState:
      type: "string"
      enum:
        - Pending
        - Declined
        - DeclinedForRenegotiation
        - Accepted
        - Failed
        - Withdrawn
      x-annotation-package: "Quote"
      x-annotation-docs-uri: "https://docs.commercetools.com/http-api-projects-quotes.html#quotestate"
      x-annotation-enumDescriptions:
        Pending: "A state indicating that the [Seller](/../api/quotes-overview#seller) submitted
         the Quote to the [Buyer](/../api/quotes-overview#buyer), but the [Buyer](/../api/quotes-overview#buyer)
         has not replied yet.nnThis is the default state.n"
        Declined: "A state indicating that the [Buyer](/../api/quotes-overview#buyer) has
         declined the Quote.n"
        DeclinedForRenegotiation: "A state indicating that the [Buyer](/../api/quotes-overview#buyer)
         has declined and requested to [renegotiate](ctp:api:type:QuoteRequestQuoteRenegotiationAction)
         the Quote.n"
        Accepted: "A state indicating that the [Buyer](/../api/quotes-overview#buyer) has
         accepted the Quote.n"
        Failed: "A state indicating a circumstance - other than the [Buyer](/../api/quotes-overview#buyer)
         declining - that led to the Quote failing.n"
        Withdrawn: "A state indicating that the [Seller](/../api/quotes-overview#seller) has
         withdrawn the Quote before the [Buyer](/../api/quotes-overview#buyer) has accepted
         it.n"
    QuoteUpdate:
      type: "object"
      required:
        - actions
        - version
      properties:
        version:
          type: "integer"
          format: "int64"
        actions:
          type: "array"
          items:
            $ref: '#/components/schemas/QuoteUpdateAction'
    QuoteUpdateAction:
      type: "object"
      discriminator:
        propertyName: action
        mapping:
          changeQuoteState: '#/components/schemas/QuoteChangeQuoteStateAction'
          requestQuoteRenegotiation: '#/components/schemas/QuoteRequestQuoteRenegotiationAction'
          setCustomField: '#/components/schemas/QuoteSetCustomFieldAction'
          setCustomType: '#/components/schemas/QuoteSetCustomTypeAction'
          transitionState: '#/components/schemas/QuoteTransitionStateAction'
      required:
        - action
      properties:
        action:
          type: "string"
    QuoteChangeQuoteStateAction:
      allOf:
        - $ref: '#/components/schemas/QuoteUpdateAction'
        - type: "object"
          required:
            - quoteState
          properties:
            action:
              type: "string"
            quoteState:
              $ref: '#/components/schemas/QuoteState'
    QuoteRequestQuoteRenegotiationAction:
      allOf:
        - $ref: '#/components/schemas/QuoteUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            buyerComment:
              type: "string"
    QuoteSetCustomFieldAction:
      allOf:
        - $ref: '#/components/schemas/QuoteUpdateAction'
        - type: "object"
          required:
            - name
          properties:
            action:
              type: "string"
            name:
              type: "string"
            value:
              {}
    QuoteSetCustomTypeAction:
      allOf:
        - $ref: '#/components/schemas/QuoteUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            type:
              $ref: '#/components/schemas/TypeResourceIdentifier'
            fields:
              $ref: '#/components/schemas/FieldContainer'
    QuoteTransitionStateAction:
      allOf:
        - $ref: '#/components/schemas/QuoteUpdateAction'
        - type: "object"
          required:
            - state
          properties:
            action:
              type: "string"
            state:
              $ref: '#/components/schemas/StateResourceIdentifier'
            force:
              type: "boolean"
    Review:
      allOf:
        - $ref: '#/components/schemas/BaseResource'
        - type: "object"
          required:
            - createdAt
            - id
            - includedInStatistics
            - lastModifiedAt
            - version
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            key:
              type: "string"
            uniquenessValue:
              type: "string"
            locale:
              $ref: '#/components/schemas/Locale'
            authorName:
              type: "string"
            title:
              type: "string"
            text:
              type: "string"
            target:
              oneOf:
                - $ref: '#/components/schemas/ChannelReference'
                - $ref: '#/components/schemas/ProductReference'
            includedInStatistics:
              type: "boolean"
            rating:
              type: "integer"
              format: "int32"
            state:
              $ref: '#/components/schemas/StateReference'
            customer:
              $ref: '#/components/schemas/CustomerReference'
            custom:
              $ref: '#/components/schemas/CustomFields'
    ReviewDraft:
      type: "object"
      properties:
        key:
          type: "string"
        uniquenessValue:
          type: "string"
        locale:
          $ref: '#/components/schemas/Locale'
        authorName:
          type: "string"
        title:
          type: "string"
        text:
          type: "string"
        target:
          oneOf:
            - $ref: '#/components/schemas/ChannelResourceIdentifier'
            - $ref: '#/components/schemas/ProductResourceIdentifier'
        state:
          $ref: '#/components/schemas/StateResourceIdentifier'
        rating:
          type: "integer"
          format: "int32"
        customer:
          $ref: '#/components/schemas/CustomerResourceIdentifier'
        custom:
          $ref: '#/components/schemas/CustomFieldsDraft'
    ReviewPagedQueryResponse:
      type: "object"
      required:
        - count
        - limit
        - offset
        - results
      properties:
        limit:
          type: "integer"
          format: "int64"
        count:
          type: "integer"
          format: "int64"
        total:
          type: "integer"
          format: "int64"
        offset:
          type: "integer"
          format: "int64"
        results:
          type: "array"
          items:
            $ref: '#/components/schemas/Review'
    ReviewRatingStatistics:
      type: "object"
      required:
        - averageRating
        - count
        - highestRating
        - lowestRating
        - ratingsDistribution
      properties:
        averageRating:
          type: "number"
          format: "double"
        highestRating:
          type: "number"
          format: "double"
        lowestRating:
          type: "number"
          format: "double"
        count:
          type: "integer"
          format: "int32"
        ratingsDistribution:
          type: "object"
    ReviewReference:
      allOf:
        - $ref: '#/components/schemas/Reference'
        - type: "object"
          required:
            - id
          properties:
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            id:
              type: "string"
            obj:
              $ref: '#/components/schemas/Review'
    ReviewResourceIdentifier:
      allOf:
        - $ref: '#/components/schemas/ResourceIdentifier'
        - type: "object"
          properties:
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            id:
              type: "string"
            key:
              type: "string"
    ReviewUpdate:
      type: "object"
      required:
        - actions
        - version
      properties:
        version:
          type: "integer"
          format: "int64"
        actions:
          type: "array"
          items:
            $ref: '#/components/schemas/ReviewUpdateAction'
    ReviewUpdateAction:
      type: "object"
      discriminator:
        propertyName: action
        mapping:
          setAuthorName: '#/components/schemas/ReviewSetAuthorNameAction'
          setCustomField: '#/components/schemas/ReviewSetCustomFieldAction'
          setCustomType: '#/components/schemas/ReviewSetCustomTypeAction'
          setCustomer: '#/components/schemas/ReviewSetCustomerAction'
          setKey: '#/components/schemas/ReviewSetKeyAction'
          setLocale: '#/components/schemas/ReviewSetLocaleAction'
          setRating: '#/components/schemas/ReviewSetRatingAction'
          setTarget: '#/components/schemas/ReviewSetTargetAction'
          setText: '#/components/schemas/ReviewSetTextAction'
          setTitle: '#/components/schemas/ReviewSetTitleAction'
          transitionState: '#/components/schemas/ReviewTransitionStateAction'
      required:
        - action
      properties:
        action:
          type: "string"
    ReviewSetAuthorNameAction:
      allOf:
        - $ref: '#/components/schemas/ReviewUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            authorName:
              type: "string"
    ReviewSetCustomFieldAction:
      allOf:
        - $ref: '#/components/schemas/ReviewUpdateAction'
        - type: "object"
          required:
            - name
          properties:
            action:
              type: "string"
            name:
              type: "string"
            value:
              {}
    ReviewSetCustomTypeAction:
      allOf:
        - $ref: '#/components/schemas/ReviewUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            type:
              $ref: '#/components/schemas/TypeResourceIdentifier'
            fields:
              $ref: '#/components/schemas/FieldContainer'
    ReviewSetCustomerAction:
      allOf:
        - $ref: '#/components/schemas/ReviewUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            customer:
              $ref: '#/components/schemas/CustomerResourceIdentifier'
    ReviewSetKeyAction:
      allOf:
        - $ref: '#/components/schemas/ReviewUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            key:
              type: "string"
    ReviewSetLocaleAction:
      allOf:
        - $ref: '#/components/schemas/ReviewUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            locale:
              $ref: '#/components/schemas/Locale'
    ReviewSetRatingAction:
      allOf:
        - $ref: '#/components/schemas/ReviewUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            rating:
              type: "integer"
              format: "int32"
    ReviewSetTargetAction:
      allOf:
        - $ref: '#/components/schemas/ReviewUpdateAction'
        - type: "object"
          required:
            - target
          properties:
            action:
              type: "string"
            target:
              oneOf:
                - $ref: '#/components/schemas/ChannelResourceIdentifier'
                - $ref: '#/components/schemas/ProductResourceIdentifier'
    ReviewSetTextAction:
      allOf:
        - $ref: '#/components/schemas/ReviewUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            text:
              type: "string"
    ReviewSetTitleAction:
      allOf:
        - $ref: '#/components/schemas/ReviewUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            title:
              type: "string"
    ReviewTransitionStateAction:
      allOf:
        - $ref: '#/components/schemas/ReviewUpdateAction'
        - type: "object"
          required:
            - state
          properties:
            action:
              type: "string"
            state:
              $ref: '#/components/schemas/StateResourceIdentifier'
            force:
              type: "boolean"
    CartClassificationTier:
      allOf:
        - $ref: '#/components/schemas/ShippingRatePriceTier'
        - type: "object"
          required:
            - price
            - value
          properties:
            type:
              $ref: '#/components/schemas/ShippingRateTierType'
            value:
              type: "string"
            price:
              $ref: '#/components/schemas/Money'
            isMatching:
              type: "boolean"
    CartScoreTier:
      allOf:
        - $ref: '#/components/schemas/ShippingRatePriceTier'
        - type: "object"
          required:
            - score
          properties:
            type:
              $ref: '#/components/schemas/ShippingRateTierType'
            score:
              type: "integer"
              format: "int32"
            price:
              $ref: '#/components/schemas/Money'
            priceFunction:
              $ref: '#/components/schemas/PriceFunction'
            isMatching:
              type: "boolean"
    CartValueTier:
      allOf:
        - $ref: '#/components/schemas/ShippingRatePriceTier'
        - type: "object"
          required:
            - minimumCentAmount
            - price
          properties:
            type:
              $ref: '#/components/schemas/ShippingRateTierType'
            minimumCentAmount:
              type: "integer"
              format: "int64"
            price:
              $ref: '#/components/schemas/Money'
            isMatching:
              type: "boolean"
    PriceFunction:
      type: "object"
      required:
        - currencyCode
        - function
      properties:
        currencyCode:
          $ref: '#/components/schemas/CurrencyCode'
        function:
          type: "string"
    ShippingMethod:
      allOf:
        - $ref: '#/components/schemas/BaseResource'
        - type: "object"
          required:
            - createdAt
            - id
            - isDefault
            - lastModifiedAt
            - name
            - taxCategory
            - version
            - zoneRates
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            key:
              type: "string"
            name:
              type: "string"
            localizedName:
              $ref: '#/components/schemas/LocalizedString'
            description:
              type: "string"
            localizedDescription:
              $ref: '#/components/schemas/LocalizedString'
            taxCategory:
              $ref: '#/components/schemas/TaxCategoryReference'
            zoneRates:
              type: "array"
              items:
                $ref: '#/components/schemas/ZoneRate'
            isDefault:
              type: "boolean"
            predicate:
              type: "string"
            custom:
              $ref: '#/components/schemas/CustomFields'
    ShippingMethodDraft:
      type: "object"
      required:
        - isDefault
        - name
        - taxCategory
        - zoneRates
      properties:
        key:
          type: "string"
        name:
          type: "string"
        localizedName:
          $ref: '#/components/schemas/LocalizedString'
        description:
          type: "string"
        localizedDescription:
          $ref: '#/components/schemas/LocalizedString'
        taxCategory:
          $ref: '#/components/schemas/TaxCategoryResourceIdentifier'
        zoneRates:
          type: "array"
          items:
            $ref: '#/components/schemas/ZoneRateDraft'
        isDefault:
          type: "boolean"
        predicate:
          type: "string"
        custom:
          $ref: '#/components/schemas/CustomFieldsDraft'
    ShippingMethodPagedQueryResponse:
      type: "object"
      required:
        - count
        - results
      properties:
        limit:
          type: "integer"
          format: "int64"
        count:
          type: "integer"
          format: "int64"
        total:
          type: "integer"
          format: "int64"
        offset:
          type: "integer"
          format: "int64"
        results:
          type: "array"
          items:
            $ref: '#/components/schemas/ShippingMethod'
    ShippingMethodReference:
      allOf:
        - $ref: '#/components/schemas/Reference'
        - type: "object"
          required:
            - id
          properties:
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            id:
              type: "string"
            obj:
              $ref: '#/components/schemas/ShippingMethod'
    ShippingMethodResourceIdentifier:
      allOf:
        - $ref: '#/components/schemas/ResourceIdentifier'
        - type: "object"
          properties:
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            id:
              type: "string"
            key:
              type: "string"
    ShippingMethodUpdate:
      type: "object"
      required:
        - actions
        - version
      properties:
        version:
          type: "integer"
          format: "int64"
        actions:
          type: "array"
          items:
            $ref: '#/components/schemas/ShippingMethodUpdateAction'
    ShippingMethodUpdateAction:
      type: "object"
      discriminator:
        propertyName: action
        mapping:
          addShippingRate: '#/components/schemas/ShippingMethodAddShippingRateAction'
          addZone: '#/components/schemas/ShippingMethodAddZoneAction'
          changeIsDefault: '#/components/schemas/ShippingMethodChangeIsDefaultAction'
          changeName: '#/components/schemas/ShippingMethodChangeNameAction'
          changeTaxCategory: '#/components/schemas/ShippingMethodChangeTaxCategoryAction'
          removeShippingRate: '#/components/schemas/ShippingMethodRemoveShippingRateAction'
          removeZone: '#/components/schemas/ShippingMethodRemoveZoneAction'
          setCustomField: '#/components/schemas/ShippingMethodSetCustomFieldAction'
          setCustomType: '#/components/schemas/ShippingMethodSetCustomTypeAction'
          setDescription: '#/components/schemas/ShippingMethodSetDescriptionAction'
          setKey: '#/components/schemas/ShippingMethodSetKeyAction'
          setLocalizedDescription: '#/components/schemas/ShippingMethodSetLocalizedDescriptionAction'
          setLocalizedName: '#/components/schemas/ShippingMethodSetLocalizedNameAction'
          setPredicate: '#/components/schemas/ShippingMethodSetPredicateAction'
      required:
        - action
      properties:
        action:
          type: "string"
    ShippingRate:
      type: "object"
      required:
        - price
        - tiers
      properties:
        price:
          $ref: '#/components/schemas/TypedMoney'
        freeAbove:
          $ref: '#/components/schemas/TypedMoney'
        isMatching:
          type: "boolean"
        tiers:
          type: "array"
          items:
            $ref: '#/components/schemas/ShippingRatePriceTier'
    ShippingRateDraft:
      type: "object"
      required:
        - price
      properties:
        price:
          $ref: '#/components/schemas/Money'
        freeAbove:
          $ref: '#/components/schemas/Money'
        tiers:
          type: "array"
          items:
            $ref: '#/components/schemas/ShippingRatePriceTier'
    ShippingRatePriceTier:
      type: "object"
      discriminator:
        propertyName: type
        mapping:
          CartClassification: '#/components/schemas/CartClassificationTier'
          CartScore: '#/components/schemas/CartScoreTier'
          CartValue: '#/components/schemas/CartValueTier'
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/ShippingRateTierType'
    ShippingRateTierType:
      type: "string"
      enum:
        - CartValue
        - CartClassification
        - CartScore
      x-annotation-package: "ShippingMethod"
      x-annotation-docs-uri: "https://docs.commercetools.com/api/projects/shippingMethods#shippingratepricetier"
    ZoneRate:
      type: "object"
      required:
        - shippingRates
        - zone
      properties:
        zone:
          $ref: '#/components/schemas/ZoneReference'
        shippingRates:
          type: "array"
          items:
            $ref: '#/components/schemas/ShippingRate'
    ZoneRateDraft:
      type: "object"
      required:
        - shippingRates
        - zone
      properties:
        zone:
          $ref: '#/components/schemas/ZoneResourceIdentifier'
        shippingRates:
          type: "array"
          items:
            $ref: '#/components/schemas/ShippingRateDraft'
    ShippingMethodAddShippingRateAction:
      allOf:
        - $ref: '#/components/schemas/ShippingMethodUpdateAction'
        - type: "object"
          required:
            - shippingRate
            - zone
          properties:
            action:
              type: "string"
            zone:
              $ref: '#/components/schemas/ZoneResourceIdentifier'
            shippingRate:
              $ref: '#/components/schemas/ShippingRateDraft'
    ShippingMethodAddZoneAction:
      allOf:
        - $ref: '#/components/schemas/ShippingMethodUpdateAction'
        - type: "object"
          required:
            - zone
          properties:
            action:
              type: "string"
            zone:
              $ref: '#/components/schemas/ZoneResourceIdentifier'
    ShippingMethodChangeIsDefaultAction:
      allOf:
        - $ref: '#/components/schemas/ShippingMethodUpdateAction'
        - type: "object"
          required:
            - isDefault
          properties:
            action:
              type: "string"
            isDefault:
              type: "boolean"
    ShippingMethodChangeNameAction:
      allOf:
        - $ref: '#/components/schemas/ShippingMethodUpdateAction'
        - type: "object"
          required:
            - name
          properties:
            action:
              type: "string"
            name:
              type: "string"
    ShippingMethodChangeTaxCategoryAction:
      allOf:
        - $ref: '#/components/schemas/ShippingMethodUpdateAction'
        - type: "object"
          required:
            - taxCategory
          properties:
            action:
              type: "string"
            taxCategory:
              $ref: '#/components/schemas/TaxCategoryResourceIdentifier'
    ShippingMethodRemoveShippingRateAction:
      allOf:
        - $ref: '#/components/schemas/ShippingMethodUpdateAction'
        - type: "object"
          required:
            - shippingRate
            - zone
          properties:
            action:
              type: "string"
            zone:
              $ref: '#/components/schemas/ZoneResourceIdentifier'
            shippingRate:
              $ref: '#/components/schemas/ShippingRateDraft'
    ShippingMethodRemoveZoneAction:
      allOf:
        - $ref: '#/components/schemas/ShippingMethodUpdateAction'
        - type: "object"
          required:
            - zone
          properties:
            action:
              type: "string"
            zone:
              $ref: '#/components/schemas/ZoneResourceIdentifier'
    ShippingMethodSetCustomFieldAction:
      allOf:
        - $ref: '#/components/schemas/ShippingMethodUpdateAction'
        - type: "object"
          required:
            - name
          properties:
            action:
              type: "string"
            name:
              type: "string"
            value:
              {}
    ShippingMethodSetCustomTypeAction:
      allOf:
        - $ref: '#/components/schemas/ShippingMethodUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            type:
              $ref: '#/components/schemas/TypeResourceIdentifier'
            fields:
              $ref: '#/components/schemas/FieldContainer'
    ShippingMethodSetDescriptionAction:
      allOf:
        - $ref: '#/components/schemas/ShippingMethodUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            description:
              type: "string"
    ShippingMethodSetKeyAction:
      allOf:
        - $ref: '#/components/schemas/ShippingMethodUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            key:
              type: "string"
    ShippingMethodSetLocalizedDescriptionAction:
      allOf:
        - $ref: '#/components/schemas/ShippingMethodUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            localizedDescription:
              $ref: '#/components/schemas/LocalizedString'
    ShippingMethodSetLocalizedNameAction:
      allOf:
        - $ref: '#/components/schemas/ShippingMethodUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            localizedName:
              $ref: '#/components/schemas/LocalizedString'
    ShippingMethodSetPredicateAction:
      allOf:
        - $ref: '#/components/schemas/ShippingMethodUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            predicate:
              type: "string"
    ShoppingList:
      allOf:
        - $ref: '#/components/schemas/BaseResource'
        - type: "object"
          required:
            - createdAt
            - id
            - lastModifiedAt
            - lineItems
            - name
            - textLineItems
            - version
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            name:
              $ref: '#/components/schemas/LocalizedString'
            key:
              type: "string"
            customer:
              $ref: '#/components/schemas/CustomerReference'
            slug:
              $ref: '#/components/schemas/LocalizedString'
            description:
              $ref: '#/components/schemas/LocalizedString'
            lineItems:
              type: "array"
              items:
                $ref: '#/components/schemas/ShoppingListLineItem'
            textLineItems:
              type: "array"
              items:
                $ref: '#/components/schemas/TextLineItem'
            deleteDaysAfterLastModification:
              type: "integer"
              format: "int64"
            anonymousId:
              type: "string"
            store:
              $ref: '#/components/schemas/StoreKeyReference'
            custom:
              $ref: '#/components/schemas/CustomFields'
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
    ShoppingListDraft:
      type: "object"
      required:
        - name
      properties:
        name:
          $ref: '#/components/schemas/LocalizedString'
        slug:
          $ref: '#/components/schemas/LocalizedString'
        customer:
          $ref: '#/components/schemas/CustomerResourceIdentifier'
        key:
          type: "string"
        description:
          $ref: '#/components/schemas/LocalizedString'
        anonymousId:
          type: "string"
        deleteDaysAfterLastModification:
          type: "integer"
          format: "int64"
        lineItems:
          type: "array"
          items:
            $ref: '#/components/schemas/ShoppingListLineItemDraft'
        textLineItems:
          type: "array"
          items:
            $ref: '#/components/schemas/TextLineItemDraft'
        store:
          $ref: '#/components/schemas/StoreResourceIdentifier'
        custom:
          $ref: '#/components/schemas/CustomFieldsDraft'
    ShoppingListLineItem:
      type: "object"
      required:
        - addedAt
        - id
        - name
        - productId
        - productType
        - quantity
      properties:
        addedAt:
          type: "string"
          format: "datetime"
        custom:
          $ref: '#/components/schemas/CustomFields'
        deactivatedAt:
          type: "string"
          format: "datetime"
        id:
          type: "string"
        name:
          $ref: '#/components/schemas/LocalizedString'
        productId:
          type: "string"
        productType:
          $ref: '#/components/schemas/ProductTypeReference'
        quantity:
          type: "integer"
          format: "int64"
        variantId:
          type: "integer"
          format: "int64"
        variant:
          $ref: '#/components/schemas/ProductVariant'
        productSlug:
          $ref: '#/components/schemas/LocalizedString'
    ShoppingListLineItemDraft:
      type: "object"
      properties:
        productId:
          type: "string"
        variantId:
          type: "integer"
          format: "int64"
        sku:
          type: "string"
        addedAt:
          type: "string"
          format: "datetime"
        custom:
          $ref: '#/components/schemas/CustomFieldsDraft'
        quantity:
          type: "integer"
          format: "int64"
    ShoppingListPagedQueryResponse:
      type: "object"
      required:
        - count
        - limit
        - offset
        - results
      properties:
        limit:
          type: "integer"
          format: "int64"
        count:
          type: "integer"
          format: "int64"
        total:
          type: "integer"
          format: "int64"
        offset:
          type: "integer"
          format: "int64"
        results:
          type: "array"
          items:
            $ref: '#/components/schemas/ShoppingList'
    ShoppingListReference:
      allOf:
        - $ref: '#/components/schemas/Reference'
        - type: "object"
          required:
            - id
          properties:
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            id:
              type: "string"
            obj:
              $ref: '#/components/schemas/ShoppingList'
    ShoppingListResourceIdentifier:
      allOf:
        - $ref: '#/components/schemas/ResourceIdentifier'
        - type: "object"
          properties:
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            id:
              type: "string"
            key:
              type: "string"
    ShoppingListUpdate:
      type: "object"
      required:
        - actions
        - version
      properties:
        version:
          type: "integer"
          format: "int64"
        actions:
          type: "array"
          items:
            $ref: '#/components/schemas/ShoppingListUpdateAction'
    ShoppingListUpdateAction:
      type: "object"
      discriminator:
        propertyName: action
        mapping:
          addLineItem: '#/components/schemas/ShoppingListAddLineItemAction'
          addTextLineItem: '#/components/schemas/ShoppingListAddTextLineItemAction'
          changeLineItemQuantity: '#/components/schemas/ShoppingListChangeLineItemQuantityAction'
          changeLineItemsOrder: '#/components/schemas/ShoppingListChangeLineItemsOrderAction'
          changeName: '#/components/schemas/ShoppingListChangeNameAction'
          changeTextLineItemName: '#/components/schemas/ShoppingListChangeTextLineItemNameAction'
          changeTextLineItemQuantity: '#/components/schemas/ShoppingListChangeTextLineItemQuantityAction'
          changeTextLineItemsOrder: '#/components/schemas/ShoppingListChangeTextLineItemsOrderAction'
          removeLineItem: '#/components/schemas/ShoppingListRemoveLineItemAction'
          removeTextLineItem: '#/components/schemas/ShoppingListRemoveTextLineItemAction'
          setAnonymousId: '#/components/schemas/ShoppingListSetAnonymousIdAction'
          setCustomField: '#/components/schemas/ShoppingListSetCustomFieldAction'
          setCustomType: '#/components/schemas/ShoppingListSetCustomTypeAction'
          setCustomer: '#/components/schemas/ShoppingListSetCustomerAction'
          setDeleteDaysAfterLastModification: '#/components/schemas/ShoppingListSetDeleteDaysAfterLastModificationAction'
          setDescription: '#/components/schemas/ShoppingListSetDescriptionAction'
          setKey: '#/components/schemas/ShoppingListSetKeyAction'
          setLineItemCustomField: '#/components/schemas/ShoppingListSetLineItemCustomFieldAction'
          setLineItemCustomType: '#/components/schemas/ShoppingListSetLineItemCustomTypeAction'
          setSlug: '#/components/schemas/ShoppingListSetSlugAction'
          setStore: '#/components/schemas/ShoppingListSetStoreAction'
          setTextLineItemCustomField: '#/components/schemas/ShoppingListSetTextLineItemCustomFieldAction'
          setTextLineItemCustomType: '#/components/schemas/ShoppingListSetTextLineItemCustomTypeAction'
          setTextLineItemDescription: '#/components/schemas/ShoppingListSetTextLineItemDescriptionAction'
      required:
        - action
      properties:
        action:
          type: "string"
    TextLineItem:
      type: "object"
      required:
        - addedAt
        - id
        - name
        - quantity
      properties:
        addedAt:
          type: "string"
          format: "datetime"
        custom:
          $ref: '#/components/schemas/CustomFields'
        description:
          $ref: '#/components/schemas/LocalizedString'
        id:
          type: "string"
        name:
          $ref: '#/components/schemas/LocalizedString'
        quantity:
          type: "integer"
          format: "int64"
    TextLineItemDraft:
      type: "object"
      required:
        - name
      properties:
        addedAt:
          type: "string"
          format: "datetime"
        custom:
          $ref: '#/components/schemas/CustomFieldsDraft'
        description:
          $ref: '#/components/schemas/LocalizedString'
        name:
          $ref: '#/components/schemas/LocalizedString'
        quantity:
          type: "integer"
          format: "int64"
    ShoppingListAddLineItemAction:
      allOf:
        - $ref: '#/components/schemas/ShoppingListUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            sku:
              type: "string"
            productId:
              type: "string"
            variantId:
              type: "integer"
              format: "int64"
            quantity:
              type: "integer"
              format: "int64"
            addedAt:
              type: "string"
              format: "datetime"
            custom:
              $ref: '#/components/schemas/CustomFieldsDraft'
    ShoppingListAddTextLineItemAction:
      allOf:
        - $ref: '#/components/schemas/ShoppingListUpdateAction'
        - type: "object"
          required:
            - name
          properties:
            action:
              type: "string"
            name:
              $ref: '#/components/schemas/LocalizedString'
            description:
              $ref: '#/components/schemas/LocalizedString'
            quantity:
              type: "integer"
              format: "int64"
            addedAt:
              type: "string"
              format: "datetime"
            custom:
              $ref: '#/components/schemas/CustomFieldsDraft'
    ShoppingListChangeLineItemQuantityAction:
      allOf:
        - $ref: '#/components/schemas/ShoppingListUpdateAction'
        - type: "object"
          required:
            - lineItemId
            - quantity
          properties:
            action:
              type: "string"
            lineItemId:
              type: "string"
            quantity:
              type: "integer"
              format: "int64"
    ShoppingListChangeLineItemsOrderAction:
      allOf:
        - $ref: '#/components/schemas/ShoppingListUpdateAction'
        - type: "object"
          required:
            - lineItemOrder
          properties:
            action:
              type: "string"
            lineItemOrder:
              type: "array"
              items:
                type: "string"
    ShoppingListChangeNameAction:
      allOf:
        - $ref: '#/components/schemas/ShoppingListUpdateAction'
        - type: "object"
          required:
            - name
          properties:
            action:
              type: "string"
            name:
              $ref: '#/components/schemas/LocalizedString'
    ShoppingListChangeTextLineItemNameAction:
      allOf:
        - $ref: '#/components/schemas/ShoppingListUpdateAction'
        - type: "object"
          required:
            - name
            - textLineItemId
          properties:
            action:
              type: "string"
            textLineItemId:
              type: "string"
            name:
              $ref: '#/components/schemas/LocalizedString'
    ShoppingListChangeTextLineItemQuantityAction:
      allOf:
        - $ref: '#/components/schemas/ShoppingListUpdateAction'
        - type: "object"
          required:
            - quantity
            - textLineItemId
          properties:
            action:
              type: "string"
            textLineItemId:
              type: "string"
            quantity:
              type: "integer"
              format: "int64"
    ShoppingListChangeTextLineItemsOrderAction:
      allOf:
        - $ref: '#/components/schemas/ShoppingListUpdateAction'
        - type: "object"
          required:
            - textLineItemOrder
          properties:
            action:
              type: "string"
            textLineItemOrder:
              type: "array"
              items:
                type: "string"
    ShoppingListRemoveLineItemAction:
      allOf:
        - $ref: '#/components/schemas/ShoppingListUpdateAction'
        - type: "object"
          required:
            - lineItemId
          properties:
            action:
              type: "string"
            lineItemId:
              type: "string"
            quantity:
              type: "integer"
              format: "int64"
    ShoppingListRemoveTextLineItemAction:
      allOf:
        - $ref: '#/components/schemas/ShoppingListUpdateAction'
        - type: "object"
          required:
            - textLineItemId
          properties:
            action:
              type: "string"
            textLineItemId:
              type: "string"
            quantity:
              type: "integer"
              format: "int64"
    ShoppingListSetAnonymousIdAction:
      allOf:
        - $ref: '#/components/schemas/ShoppingListUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            anonymousId:
              type: "string"
    ShoppingListSetCustomFieldAction:
      allOf:
        - $ref: '#/components/schemas/ShoppingListUpdateAction'
        - type: "object"
          required:
            - name
          properties:
            action:
              type: "string"
            name:
              type: "string"
            value:
              {}
    ShoppingListSetCustomTypeAction:
      allOf:
        - $ref: '#/components/schemas/ShoppingListUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            type:
              $ref: '#/components/schemas/TypeResourceIdentifier'
            fields:
              $ref: '#/components/schemas/FieldContainer'
    ShoppingListSetCustomerAction:
      allOf:
        - $ref: '#/components/schemas/ShoppingListUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            customer:
              $ref: '#/components/schemas/CustomerResourceIdentifier'
    ShoppingListSetDeleteDaysAfterLastModificationAction:
      allOf:
        - $ref: '#/components/schemas/ShoppingListUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            deleteDaysAfterLastModification:
              type: "integer"
              format: "int64"
    ShoppingListSetDescriptionAction:
      allOf:
        - $ref: '#/components/schemas/ShoppingListUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            description:
              $ref: '#/components/schemas/LocalizedString'
    ShoppingListSetKeyAction:
      allOf:
        - $ref: '#/components/schemas/ShoppingListUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            key:
              type: "string"
    ShoppingListSetLineItemCustomFieldAction:
      allOf:
        - $ref: '#/components/schemas/ShoppingListUpdateAction'
        - type: "object"
          required:
            - lineItemId
            - name
          properties:
            action:
              type: "string"
            lineItemId:
              type: "string"
            name:
              type: "string"
            value:
              {}
    ShoppingListSetLineItemCustomTypeAction:
      allOf:
        - $ref: '#/components/schemas/ShoppingListUpdateAction'
        - type: "object"
          required:
            - lineItemId
          properties:
            action:
              type: "string"
            lineItemId:
              type: "string"
            type:
              $ref: '#/components/schemas/TypeResourceIdentifier'
            fields:
              $ref: '#/components/schemas/FieldContainer'
    ShoppingListSetSlugAction:
      allOf:
        - $ref: '#/components/schemas/ShoppingListUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            slug:
              $ref: '#/components/schemas/LocalizedString'
    ShoppingListSetStoreAction:
      allOf:
        - $ref: '#/components/schemas/ShoppingListUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            store:
              $ref: '#/components/schemas/StoreResourceIdentifier'
    ShoppingListSetTextLineItemCustomFieldAction:
      allOf:
        - $ref: '#/components/schemas/ShoppingListUpdateAction'
        - type: "object"
          required:
            - name
            - textLineItemId
          properties:
            action:
              type: "string"
            textLineItemId:
              type: "string"
            name:
              type: "string"
            value:
              {}
    ShoppingListSetTextLineItemCustomTypeAction:
      allOf:
        - $ref: '#/components/schemas/ShoppingListUpdateAction'
        - type: "object"
          required:
            - textLineItemId
          properties:
            action:
              type: "string"
            textLineItemId:
              type: "string"
            type:
              $ref: '#/components/schemas/TypeResourceIdentifier'
            fields:
              $ref: '#/components/schemas/FieldContainer'
    ShoppingListSetTextLineItemDescriptionAction:
      allOf:
        - $ref: '#/components/schemas/ShoppingListUpdateAction'
        - type: "object"
          required:
            - textLineItemId
          properties:
            action:
              type: "string"
            textLineItemId:
              type: "string"
            description:
              $ref: '#/components/schemas/LocalizedString'
    StagedQuote:
      allOf:
        - $ref: '#/components/schemas/BaseResource'
        - type: "object"
          required:
            - createdAt
            - id
            - lastModifiedAt
            - quotationCart
            - quoteRequest
            - stagedQuoteState
            - version
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            key:
              type: "string"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            stagedQuoteState:
              $ref: '#/components/schemas/StagedQuoteState'
            customer:
              $ref: '#/components/schemas/CustomerReference'
            quoteRequest:
              $ref: '#/components/schemas/QuoteRequestReference'
            quotationCart:
              $ref: '#/components/schemas/CartReference'
            validTo:
              type: "string"
              format: "datetime"
            sellerComment:
              type: "string"
            custom:
              $ref: '#/components/schemas/CustomFields'
            state:
              $ref: '#/components/schemas/StateReference'
            purchaseOrderNumber:
              type: "string"
            businessUnit:
              $ref: '#/components/schemas/BusinessUnitKeyReference'
    StagedQuoteDraft:
      type: "object"
      required:
        - quoteRequest
        - quoteRequestVersion
      properties:
        quoteRequest:
          $ref: '#/components/schemas/QuoteRequestResourceIdentifier'
        quoteRequestVersion:
          type: "integer"
          format: "int64"
        quoteRequestStateToAccepted:
          type: "boolean"
        key:
          type: "string"
        custom:
          $ref: '#/components/schemas/CustomFieldsDraft'
        state:
          $ref: '#/components/schemas/StateReference'
    StagedQuotePagedQueryResponse:
      type: "object"
      required:
        - count
        - limit
        - offset
        - results
      properties:
        limit:
          type: "integer"
          format: "int64"
        offset:
          type: "integer"
          format: "int64"
        count:
          type: "integer"
          format: "int64"
        total:
          type: "integer"
          format: "int64"
        results:
          type: "array"
          items:
            $ref: '#/components/schemas/StagedQuote'
    StagedQuoteReference:
      allOf:
        - $ref: '#/components/schemas/Reference'
        - type: "object"
          properties:
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            id:
              type: "string"
            obj:
              $ref: '#/components/schemas/StagedQuote'
    StagedQuoteResourceIdentifier:
      allOf:
        - $ref: '#/components/schemas/ResourceIdentifier'
        - type: "object"
          properties:
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            id:
              type: "string"
            key:
              type: "string"
    StagedQuoteState:
      type: "string"
      enum:
        - InProgress
        - Sent
        - Closed
      x-annotation-package: "StagedQuote"
      x-annotation-docs-uri: "https://docs.commercetools.com/http-api-projects-staged-quotes.html#stagedquotestate"
      x-annotation-enumDescriptions:
        InProgress: "Initial state after creating the StagedQuote indicating that the [Seller](/../api/quotes-overview#seller)
         is preparing the Quote.n"
        Sent: "A state indicating that the StagedQuote has been sent to the [Buyer](/../api/quotes-overview#buyer).n"
        Closed: "A state indicating that the StagedQuote flow was finished.n"
    StagedQuoteUpdate:
      type: "object"
      required:
        - actions
        - version
      properties:
        version:
          type: "integer"
          format: "int64"
        actions:
          type: "array"
          items:
            $ref: '#/components/schemas/StagedQuoteUpdateAction'
    StagedQuoteUpdateAction:
      type: "object"
      discriminator:
        propertyName: action
        mapping:
          changeStagedQuoteState: '#/components/schemas/StagedQuoteChangeStagedQuoteStateAction'
          setCustomField: '#/components/schemas/StagedQuoteSetCustomFieldAction'
          setCustomType: '#/components/schemas/StagedQuoteSetCustomTypeAction'
          setSellerComment: '#/components/schemas/StagedQuoteSetSellerCommentAction'
          setValidTo: '#/components/schemas/StagedQuoteSetValidToAction'
          transitionState: '#/components/schemas/StagedQuoteTransitionStateAction'
      required:
        - action
      properties:
        action:
          type: "string"
    StagedQuoteChangeStagedQuoteStateAction:
      allOf:
        - $ref: '#/components/schemas/StagedQuoteUpdateAction'
        - type: "object"
          required:
            - stagedQuoteState
          properties:
            action:
              type: "string"
            stagedQuoteState:
              $ref: '#/components/schemas/StagedQuoteState'
    StagedQuoteSetCustomFieldAction:
      allOf:
        - $ref: '#/components/schemas/StagedQuoteUpdateAction'
        - type: "object"
          required:
            - name
          properties:
            action:
              type: "string"
            name:
              type: "string"
            value:
              {}
    StagedQuoteSetCustomTypeAction:
      allOf:
        - $ref: '#/components/schemas/StagedQuoteUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            type:
              $ref: '#/components/schemas/TypeResourceIdentifier'
            fields:
              $ref: '#/components/schemas/FieldContainer'
    StagedQuoteSetSellerCommentAction:
      allOf:
        - $ref: '#/components/schemas/StagedQuoteUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            sellerComment:
              type: "string"
    StagedQuoteSetValidToAction:
      allOf:
        - $ref: '#/components/schemas/StagedQuoteUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            validTo:
              type: "string"
              format: "datetime"
    StagedQuoteTransitionStateAction:
      allOf:
        - $ref: '#/components/schemas/StagedQuoteUpdateAction'
        - type: "object"
          required:
            - state
          properties:
            action:
              type: "string"
            state:
              $ref: '#/components/schemas/StateResourceIdentifier'
            force:
              type: "boolean"
    StagedStandalonePrice:
      type: "object"
      required:
        - value
      properties:
        value:
          $ref: '#/components/schemas/TypedMoney'
        discounted:
          $ref: '#/components/schemas/DiscountedPrice'
    StandalonePrice:
      allOf:
        - $ref: '#/components/schemas/BaseResource'
        - type: "object"
          required:
            - active
            - createdAt
            - id
            - lastModifiedAt
            - sku
            - value
            - version
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            key:
              type: "string"
            sku:
              type: "string"
            value:
              $ref: '#/components/schemas/TypedMoney'
            country:
              $ref: '#/components/schemas/CountryCode'
            customerGroup:
              $ref: '#/components/schemas/CustomerGroupReference'
            channel:
              $ref: '#/components/schemas/ChannelReference'
            validFrom:
              type: "string"
              format: "datetime"
            validUntil:
              type: "string"
              format: "datetime"
            tiers:
              type: "array"
              items:
                $ref: '#/components/schemas/PriceTier'
            discounted:
              $ref: '#/components/schemas/DiscountedPrice'
            custom:
              $ref: '#/components/schemas/CustomFields'
            staged:
              $ref: '#/components/schemas/StagedStandalonePrice'
            active:
              type: "boolean"
    StandalonePriceDraft:
      type: "object"
      required:
        - sku
        - value
      properties:
        key:
          type: "string"
        sku:
          type: "string"
        value:
          $ref: '#/components/schemas/Money'
        country:
          $ref: '#/components/schemas/CountryCode'
        customerGroup:
          $ref: '#/components/schemas/CustomerGroupResourceIdentifier'
        channel:
          $ref: '#/components/schemas/ChannelResourceIdentifier'
        validFrom:
          type: "string"
          format: "datetime"
        validUntil:
          type: "string"
          format: "datetime"
        tiers:
          type: "array"
          items:
            $ref: '#/components/schemas/PriceTierDraft'
        discounted:
          $ref: '#/components/schemas/DiscountedPriceDraft'
        custom:
          $ref: '#/components/schemas/CustomFieldsDraft'
        active:
          type: "boolean"
    StandalonePricePagedQueryResponse:
      type: "object"
      required:
        - count
        - limit
        - offset
        - results
      properties:
        limit:
          type: "integer"
          format: "int64"
        offset:
          type: "integer"
          format: "int64"
        count:
          type: "integer"
          format: "int64"
        total:
          type: "integer"
          format: "int64"
        results:
          type: "array"
          items:
            $ref: '#/components/schemas/StandalonePrice'
    StandalonePriceReference:
      allOf:
        - $ref: '#/components/schemas/Reference'
        - type: "object"
          properties:
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            id:
              type: "string"
            obj:
              $ref: '#/components/schemas/StandalonePrice'
    StandalonePriceResourceIdentifier:
      allOf:
        - $ref: '#/components/schemas/ResourceIdentifier'
        - type: "object"
          properties:
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            id:
              type: "string"
            key:
              type: "string"
    StandalonePriceUpdate:
      type: "object"
      required:
        - actions
        - version
      properties:
        version:
          type: "integer"
          format: "int64"
        actions:
          type: "array"
          items:
            $ref: '#/components/schemas/StandalonePriceUpdateAction'
    StandalonePriceUpdateAction:
      type: "object"
      discriminator:
        propertyName: action
        mapping:
          applyStagedChanges: '#/components/schemas/StandalonePriceApplyStagedChangesAction'
          changeActive: '#/components/schemas/StandalonePriceChangeActiveAction'
          changeValue: '#/components/schemas/StandalonePriceChangeValueAction'
          setCustomField: '#/components/schemas/StandalonePriceSetCustomFieldAction'
          setCustomType: '#/components/schemas/StandalonePriceSetCustomTypeAction'
          setDiscountedPrice: '#/components/schemas/StandalonePriceSetDiscountedPriceAction'
          setKey: '#/components/schemas/StandalonePriceSetKeyAction'
      required:
        - action
      properties:
        action:
          type: "string"
    StandalonePriceApplyStagedChangesAction:
      allOf:
        - $ref: '#/components/schemas/StandalonePriceUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
    StandalonePriceChangeActiveAction:
      allOf:
        - $ref: '#/components/schemas/StandalonePriceUpdateAction'
        - type: "object"
          required:
            - active
          properties:
            action:
              type: "string"
            active:
              type: "boolean"
    StandalonePriceChangeValueAction:
      allOf:
        - $ref: '#/components/schemas/StandalonePriceUpdateAction'
        - type: "object"
          required:
            - value
          properties:
            action:
              type: "string"
            value:
              $ref: '#/components/schemas/Money'
            staged:
              type: "boolean"
    StandalonePriceSetCustomFieldAction:
      allOf:
        - $ref: '#/components/schemas/StandalonePriceUpdateAction'
        - type: "object"
          required:
            - name
          properties:
            action:
              type: "string"
            name:
              type: "string"
            value:
              {}
    StandalonePriceSetCustomTypeAction:
      allOf:
        - $ref: '#/components/schemas/StandalonePriceUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            type:
              $ref: '#/components/schemas/TypeResourceIdentifier'
            fields:
              $ref: '#/components/schemas/FieldContainer'
    StandalonePriceSetDiscountedPriceAction:
      allOf:
        - $ref: '#/components/schemas/StandalonePriceUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            discounted:
              $ref: '#/components/schemas/DiscountedPriceDraft'
    StandalonePriceSetKeyAction:
      allOf:
        - $ref: '#/components/schemas/StandalonePriceUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            key:
              type: "string"
    State:
      allOf:
        - $ref: '#/components/schemas/BaseResource'
        - type: "object"
          required:
            - builtIn
            - createdAt
            - id
            - initial
            - key
            - lastModifiedAt
            - type
            - version
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            key:
              type: "string"
            type:
              $ref: '#/components/schemas/StateTypeEnum'
            name:
              $ref: '#/components/schemas/LocalizedString'
            description:
              $ref: '#/components/schemas/LocalizedString'
            initial:
              type: "boolean"
            builtIn:
              type: "boolean"
            roles:
              type: "array"
              items:
                $ref: '#/components/schemas/StateRoleEnum'
            transitions:
              type: "array"
              items:
                $ref: '#/components/schemas/StateReference'
    StateDraft:
      type: "object"
      required:
        - key
        - type
      properties:
        key:
          type: "string"
        type:
          $ref: '#/components/schemas/StateTypeEnum'
        name:
          $ref: '#/components/schemas/LocalizedString'
        description:
          $ref: '#/components/schemas/LocalizedString'
        initial:
          type: "boolean"
        roles:
          type: "array"
          items:
            $ref: '#/components/schemas/StateRoleEnum'
        transitions:
          type: "array"
          items:
            $ref: '#/components/schemas/StateResourceIdentifier'
    StatePagedQueryResponse:
      type: "object"
      required:
        - count
        - limit
        - offset
        - results
      properties:
        limit:
          type: "integer"
          format: "int64"
        offset:
          type: "integer"
          format: "int64"
        count:
          type: "integer"
          format: "int64"
        total:
          type: "integer"
          format: "int64"
        results:
          type: "array"
          items:
            $ref: '#/components/schemas/State'
    StateReference:
      allOf:
        - $ref: '#/components/schemas/Reference'
        - type: "object"
          required:
            - id
          properties:
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            id:
              type: "string"
            obj:
              $ref: '#/components/schemas/State'
    StateResourceIdentifier:
      allOf:
        - $ref: '#/components/schemas/ResourceIdentifier'
        - type: "object"
          properties:
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            id:
              type: "string"
            key:
              type: "string"
    StateRoleEnum:
      type: "string"
      enum:
        - ReviewIncludedInStatistics
        - Return
      x-annotation-package: "State"
      x-annotation-docs-uri: "https://docs.commercetools.com/api/projects/states#stateroleenum"
      x-annotation-enumDescriptions:
        ReviewIncludedInStatistics: "If a [Review's](ctp:api:type:Review) `state` has this
         role its `rating` is taken into account for [ReviewRatingStatistics](ctp:api:type:ReviewRatingStatistics).
         This role only applies for the `ReviewState` [StateTypeEnum](ctp:api:type:StateTypeEnum)."
        Return: "Used by [Orders](ctp:api:type:Order) in the update action [transitionLineItemState](ctp:api:type:OrderTransitionLineItemStateAction).
         This role only applies for the `LineItemState` [StateTypeEnum](ctp:api:type:StateTypeEnum)."
    StateTypeEnum:
      type: "string"
      enum:
        - OrderState
        - LineItemState
        - ProductState
        - ReviewState
        - PaymentState
        - QuoteRequestState
        - StagedQuoteState
        - QuoteState
      x-annotation-package: "State"
      x-annotation-enumDescriptions:
        OrderState: "Used by [Orders](ctp:api:type:Order)."
        LineItemState: "Used by [LineItems](ctp:api:type:LineItem) and [CustomLineItems](ctp:api:type:CustomLineItem)
         in [Carts](ctp:api:type:Cart) and [Orders](ctp:api:type:Order)."
        ProductState: "Used by [Products](ctp:api:type:Product)."
        ReviewState: "Used by [Reviews](ctp:api:type:Review)."
        PaymentState: "Used by [PaymentStatus](ctp:api:type:PaymentStatus) in [Payments](ctp:api:type:Payment)."
        QuoteRequestState: "Used by [QuoteRequest](ctp:api:type:QuoteRequest)."
        StagedQuoteState: "Used by [StagedQuote](ctp:api:type:StagedQuote)."
        QuoteState: "Used by [Quote](ctp:api:type:Quote)."
    StateUpdate:
      type: "object"
      required:
        - actions
        - version
      properties:
        version:
          type: "integer"
          format: "int64"
        actions:
          type: "array"
          items:
            $ref: '#/components/schemas/StateUpdateAction'
    StateUpdateAction:
      type: "object"
      discriminator:
        propertyName: action
        mapping:
          addRoles: '#/components/schemas/StateAddRolesAction'
          changeInitial: '#/components/schemas/StateChangeInitialAction'
          changeKey: '#/components/schemas/StateChangeKeyAction'
          changeType: '#/components/schemas/StateChangeTypeAction'
          removeRoles: '#/components/schemas/StateRemoveRolesAction'
          setDescription: '#/components/schemas/StateSetDescriptionAction'
          setName: '#/components/schemas/StateSetNameAction'
          setRoles: '#/components/schemas/StateSetRolesAction'
          setTransitions: '#/components/schemas/StateSetTransitionsAction'
      required:
        - action
      properties:
        action:
          type: "string"
    StateAddRolesAction:
      allOf:
        - $ref: '#/components/schemas/StateUpdateAction'
        - type: "object"
          required:
            - roles
          properties:
            action:
              type: "string"
            roles:
              type: "array"
              items:
                $ref: '#/components/schemas/StateRoleEnum'
    StateChangeInitialAction:
      allOf:
        - $ref: '#/components/schemas/StateUpdateAction'
        - type: "object"
          required:
            - initial
          properties:
            action:
              type: "string"
            initial:
              type: "boolean"
    StateChangeKeyAction:
      allOf:
        - $ref: '#/components/schemas/StateUpdateAction'
        - type: "object"
          required:
            - key
          properties:
            action:
              type: "string"
            key:
              type: "string"
    StateChangeTypeAction:
      allOf:
        - $ref: '#/components/schemas/StateUpdateAction'
        - type: "object"
          required:
            - type
          properties:
            action:
              type: "string"
            type:
              $ref: '#/components/schemas/StateTypeEnum'
    StateRemoveRolesAction:
      allOf:
        - $ref: '#/components/schemas/StateUpdateAction'
        - type: "object"
          required:
            - roles
          properties:
            action:
              type: "string"
            roles:
              type: "array"
              items:
                $ref: '#/components/schemas/StateRoleEnum'
    StateSetDescriptionAction:
      allOf:
        - $ref: '#/components/schemas/StateUpdateAction'
        - type: "object"
          required:
            - description
          properties:
            action:
              type: "string"
            description:
              $ref: '#/components/schemas/LocalizedString'
    StateSetNameAction:
      allOf:
        - $ref: '#/components/schemas/StateUpdateAction'
        - type: "object"
          required:
            - name
          properties:
            action:
              type: "string"
            name:
              $ref: '#/components/schemas/LocalizedString'
    StateSetRolesAction:
      allOf:
        - $ref: '#/components/schemas/StateUpdateAction'
        - type: "object"
          required:
            - roles
          properties:
            action:
              type: "string"
            roles:
              type: "array"
              items:
                $ref: '#/components/schemas/StateRoleEnum'
    StateSetTransitionsAction:
      allOf:
        - $ref: '#/components/schemas/StateUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            transitions:
              type: "array"
              items:
                $ref: '#/components/schemas/StateResourceIdentifier'
    ProductSelectionSetting:
      type: "object"
      required:
        - active
        - productSelection
      properties:
        productSelection:
          $ref: '#/components/schemas/ProductSelectionReference'
        active:
          type: "boolean"
    ProductSelectionSettingDraft:
      type: "object"
      required:
        - productSelection
      properties:
        productSelection:
          $ref: '#/components/schemas/ProductSelectionResourceIdentifier'
        active:
          type: "boolean"
    Store:
      allOf:
        - $ref: '#/components/schemas/BaseResource'
        - type: "object"
          required:
            - countries
            - createdAt
            - distributionChannels
            - id
            - key
            - languages
            - lastModifiedAt
            - productSelections
            - supplyChannels
            - version
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            key:
              type: "string"
            name:
              $ref: '#/components/schemas/LocalizedString'
            languages:
              type: "array"
              items:
                $ref: '#/components/schemas/Locale'
            countries:
              type: "array"
              items:
                $ref: '#/components/schemas/StoreCountry'
            distributionChannels:
              type: "array"
              items:
                $ref: '#/components/schemas/ChannelReference'
            supplyChannels:
              type: "array"
              items:
                $ref: '#/components/schemas/ChannelReference'
            productSelections:
              type: "array"
              items:
                $ref: '#/components/schemas/ProductSelectionSetting'
            custom:
              $ref: '#/components/schemas/CustomFields'
    StoreCountry:
      type: "object"
      required:
        - code
      properties:
        code:
          $ref: '#/components/schemas/CountryCode'
    StoreDraft:
      type: "object"
      required:
        - key
      properties:
        key:
          type: "string"
        name:
          $ref: '#/components/schemas/LocalizedString'
        languages:
          type: "array"
          items:
            $ref: '#/components/schemas/Locale'
        countries:
          type: "array"
          items:
            $ref: '#/components/schemas/StoreCountry'
        distributionChannels:
          type: "array"
          items:
            $ref: '#/components/schemas/ChannelResourceIdentifier'
        supplyChannels:
          type: "array"
          items:
            $ref: '#/components/schemas/ChannelResourceIdentifier'
        productSelections:
          type: "array"
          items:
            $ref: '#/components/schemas/ProductSelectionSettingDraft'
        custom:
          $ref: '#/components/schemas/CustomFieldsDraft'
    StoreKeyReference:
      allOf:
        - $ref: '#/components/schemas/KeyReference'
        - type: "object"
          required:
            - key
          properties:
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            key:
              type: "string"
    StorePagedQueryResponse:
      type: "object"
      required:
        - count
        - limit
        - offset
        - results
      properties:
        limit:
          type: "integer"
          format: "int64"
        offset:
          type: "integer"
          format: "int64"
        count:
          type: "integer"
          format: "int64"
        total:
          type: "integer"
          format: "int64"
        results:
          type: "array"
          items:
            $ref: '#/components/schemas/Store'
    StoreReference:
      allOf:
        - $ref: '#/components/schemas/Reference'
        - type: "object"
          required:
            - id
          properties:
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            id:
              type: "string"
            obj:
              $ref: '#/components/schemas/Store'
    StoreResourceIdentifier:
      allOf:
        - $ref: '#/components/schemas/ResourceIdentifier'
        - type: "object"
          properties:
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            id:
              type: "string"
            key:
              type: "string"
    StoreUpdate:
      type: "object"
      required:
        - actions
        - version
      properties:
        version:
          type: "integer"
          format: "int64"
        actions:
          type: "array"
          items:
            $ref: '#/components/schemas/StoreUpdateAction'
    StoreUpdateAction:
      type: "object"
      discriminator:
        propertyName: action
        mapping:
          addCountry: '#/components/schemas/StoreAddCountryAction'
          addDistributionChannel: '#/components/schemas/StoreAddDistributionChannelAction'
          addProductSelection: '#/components/schemas/StoreAddProductSelectionAction'
          addSupplyChannel: '#/components/schemas/StoreAddSupplyChannelAction'
          changeProductSelectionActive: '#/components/schemas/StoreChangeProductSelectionAction'
          removeCountry: '#/components/schemas/StoreRemoveCountryAction'
          removeDistributionChannel: '#/components/schemas/StoreRemoveDistributionChannelAction'
          removeProductSelection: '#/components/schemas/StoreRemoveProductSelectionAction'
          removeSupplyChannel: '#/components/schemas/StoreRemoveSupplyChannelAction'
          setCountries: '#/components/schemas/StoreSetCountriesAction'
          setCustomField: '#/components/schemas/StoreSetCustomFieldAction'
          setCustomType: '#/components/schemas/StoreSetCustomTypeAction'
          setDistributionChannels: '#/components/schemas/StoreSetDistributionChannelsAction'
          setLanguages: '#/components/schemas/StoreSetLanguagesAction'
          setName: '#/components/schemas/StoreSetNameAction'
          setProductSelections: '#/components/schemas/StoreSetProductSelectionsAction'
          setSupplyChannels: '#/components/schemas/StoreSetSupplyChannelsAction'
      required:
        - action
      properties:
        action:
          type: "string"
    StoreAddCountryAction:
      allOf:
        - $ref: '#/components/schemas/StoreUpdateAction'
        - type: "object"
          required:
            - country
          properties:
            action:
              type: "string"
            country:
              $ref: '#/components/schemas/StoreCountry'
    StoreAddDistributionChannelAction:
      allOf:
        - $ref: '#/components/schemas/StoreUpdateAction'
        - type: "object"
          required:
            - distributionChannel
          properties:
            action:
              type: "string"
            distributionChannel:
              $ref: '#/components/schemas/ChannelResourceIdentifier'
    StoreAddProductSelectionAction:
      allOf:
        - $ref: '#/components/schemas/StoreUpdateAction'
        - type: "object"
          required:
            - productSelection
          properties:
            action:
              type: "string"
            productSelection:
              $ref: '#/components/schemas/ProductSelectionResourceIdentifier'
            active:
              type: "boolean"
    StoreAddSupplyChannelAction:
      allOf:
        - $ref: '#/components/schemas/StoreUpdateAction'
        - type: "object"
          required:
            - supplyChannel
          properties:
            action:
              type: "string"
            supplyChannel:
              $ref: '#/components/schemas/ChannelResourceIdentifier'
    StoreChangeProductSelectionAction:
      allOf:
        - $ref: '#/components/schemas/StoreUpdateAction'
        - type: "object"
          required:
            - productSelection
          properties:
            action:
              type: "string"
            productSelection:
              $ref: '#/components/schemas/ProductSelectionResourceIdentifier'
            active:
              type: "boolean"
    StoreRemoveCountryAction:
      allOf:
        - $ref: '#/components/schemas/StoreUpdateAction'
        - type: "object"
          required:
            - country
          properties:
            action:
              type: "string"
            country:
              $ref: '#/components/schemas/StoreCountry'
    StoreRemoveDistributionChannelAction:
      allOf:
        - $ref: '#/components/schemas/StoreUpdateAction'
        - type: "object"
          required:
            - distributionChannel
          properties:
            action:
              type: "string"
            distributionChannel:
              $ref: '#/components/schemas/ChannelResourceIdentifier'
    StoreRemoveProductSelectionAction:
      allOf:
        - $ref: '#/components/schemas/StoreUpdateAction'
        - type: "object"
          required:
            - productSelection
          properties:
            action:
              type: "string"
            productSelection:
              $ref: '#/components/schemas/ProductSelectionResourceIdentifier'
    StoreRemoveSupplyChannelAction:
      allOf:
        - $ref: '#/components/schemas/StoreUpdateAction'
        - type: "object"
          required:
            - supplyChannel
          properties:
            action:
              type: "string"
            supplyChannel:
              $ref: '#/components/schemas/ChannelResourceIdentifier'
    StoreSetCountriesAction:
      allOf:
        - $ref: '#/components/schemas/StoreUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            countries:
              type: "array"
              items:
                $ref: '#/components/schemas/StoreCountry'
    StoreSetCustomFieldAction:
      allOf:
        - $ref: '#/components/schemas/StoreUpdateAction'
        - type: "object"
          required:
            - name
          properties:
            action:
              type: "string"
            name:
              type: "string"
            value:
              {}
    StoreSetCustomTypeAction:
      allOf:
        - $ref: '#/components/schemas/StoreUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            type:
              $ref: '#/components/schemas/TypeResourceIdentifier'
            fields:
              $ref: '#/components/schemas/FieldContainer'
    StoreSetDistributionChannelsAction:
      allOf:
        - $ref: '#/components/schemas/StoreUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            distributionChannels:
              type: "array"
              items:
                $ref: '#/components/schemas/ChannelResourceIdentifier'
    StoreSetLanguagesAction:
      allOf:
        - $ref: '#/components/schemas/StoreUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            languages:
              type: "array"
              items:
                $ref: '#/components/schemas/Locale'
    StoreSetNameAction:
      allOf:
        - $ref: '#/components/schemas/StoreUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            name:
              $ref: '#/components/schemas/LocalizedString'
    StoreSetProductSelectionsAction:
      allOf:
        - $ref: '#/components/schemas/StoreUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            productSelections:
              type: "array"
              items:
                $ref: '#/components/schemas/ProductSelectionSettingDraft'
    StoreSetSupplyChannelsAction:
      allOf:
        - $ref: '#/components/schemas/StoreUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            supplyChannels:
              type: "array"
              items:
                $ref: '#/components/schemas/ChannelResourceIdentifier'
    AwsAuthenticationMode:
      type: "string"
      enum:
        - Credentials
        - IAM
      x-annotation-package: "Subscription"
      x-annotation-enumDescriptions:
        Credentials: "Subscriptions with `Credentials` authentication mode are authenticated
         using an `accessKey` and `accessSecret` pair. This is the default authentication
         mode for backwards compatibility.n"
        IAM: "Subscriptions with `IAM` authentication mode are authenticated using Identity
         and Access Management (IAM). In this case, the user `arn:aws:iam::362576667341:user/subscriptions`
         requires permissions to send messages to the queue or publish to the topic. This
         is the recommended authentication mode, as it doesn't require additional key management.n"
    AzureEventGridDestination:
      allOf:
        - $ref: '#/components/schemas/Destination'
        - type: "object"
          required:
            - accessKey
            - uri
          properties:
            type:
              type: "string"
            uri:
              type: "string"
            accessKey:
              type: "string"
    AzureServiceBusDestination:
      allOf:
        - $ref: '#/components/schemas/Destination'
        - type: "object"
          required:
            - connectionString
          properties:
            type:
              type: "string"
            connectionString:
              type: "string"
    ChangeSubscription:
      type: "object"
      required:
        - resourceTypeId
      properties:
        resourceTypeId:
          $ref: '#/components/schemas/ChangeSubscriptionResourceTypeId'
    ChangeSubscriptionResourceTypeId:
      type: "string"
      enum:
        - business-unit
        - cart
        - cart-discount
        - category
        - channel
        - customer
        - customer-email-token
        - customer-group
        - customer-password-token
        - discount-code
        - extension
        - inventory-entry
        - key-value-document
        - order
        - order-edit
        - payment
        - product
        - product-discount
        - product-price
        - product-selection
        - product-type
        - quote
        - quote-request
        - review
        - shipping-method
        - shopping-list
        - staged-quote
        - standalone-price
        - state
        - store
        - subscription
        - tax-category
        - type
        - zone
      x-annotation-package: "Subscription"
      x-annotation-enumDescriptions:
        business-unit: "Changes to [Business Units](ctp:api:type:BusinessUnit).n"
        cart: "Changes to [Carts](ctp:api:type:Cart).n"
        cart-discount: "Changes to [CartDiscounts](ctp:api:type:CartDiscount).n"
        category: "Changes to [Categories](ctp:api:type:Category).n"
        channel: "Changes to [Channels](ctp:api:type:Channel).n"
        customer: "Changes to [Customers](ctp:api:type:Customer).n"
        customer-email-token: "Changes to [CustomerTokens](ctp:api:type:CustomerToken).n"
        customer-group: "Changes to [CustomerGroups](ctp:api:type:CustomerGroup).n"
        customer-password-token: "Changes to [CustomerTokens](ctp:api:type:CustomerToken).n"
        discount-code: "Changes to [DiscountCodes](ctp:api:type:DiscountCode).n"
        extension: "Changes to [Extensions](ctp:api:type:Extension).n"
        inventory-entry: "Changes to [InventoryEntries](ctp:api:type:InventoryEntry).n"
        key-value-document: "Changes to [CustomObjects](ctp:api:type:CustomObject).n"
        order: "Changes to [Orders](ctp:api:type:Order). Changes to Orders via [Order Edits](/../api/projects/order-edits)
         do not trigger a Message. To achieve this, a [MessageSubscription](ctp:api:type:MessageSubscription)
         to [Order Edit Applied Message](ctp:api:type:OrderEditAppliedMessage) is necessary.n"
        order-edit: "Changes to [OrderEdits](ctp:api:type:OrderEdit).n"
        payment: "Changes to [Payments](ctp:api:type:Payment).n"
        product: "Changes to [Products](ctp:api:type:Product).n"
        product-discount: "Changes to [ProductDiscount](ctp:api:type:ProductDiscount).n"
        product-price: "Changes to [EmbeddedPrices](ctp:api:type:Price).n"
        product-selection: "Changes to [ProductSelections](ctp:api:type:ProductSelection).n"
        product-type: "Changes to [ProductTypes](ctp:api:type:ProductType).n"
        quote: "Changes to [Quotes](ctp:api:type:Quote).n"
        quote-request: "Changes to [Quote Requests](ctp:api:type:QuoteRequest).n"
        review: "Changes to [Reviews](ctp:api:type:Review).n"
        shipping-method: "Changes to [ShippingMethods](ctp:api:type:ShippingMethod).n"
        shopping-list: "Changes to [ShoppingLists](ctp:api:type:ShoppingList).n"
        staged-quote: "Changes to [Staged Quotes](ctp:api:type:StagedQuote).n"
        standalone-price: "Changes to [StandalonePrices](ctp:api:type:StandalonePrice).n"
        state: "Changes to [States](ctp:api:type:State).n"
        store: "Changes to [Stores](ctp:api:type:Store).n"
        subscription: "Changes to [Subscriptions](ctp:api:type:Subscription).n"
        tax-category: "Changes to [TaxCategories](ctp:api:type:TaxCategory).n"
        type: "Changes to [Types](ctp:api:type:Type).n"
        zone: "Changes to [Zones](ctp:api:type:Zone).n"
    CloudEventsFormat:
      allOf:
        - $ref: '#/components/schemas/DeliveryFormat'
        - type: "object"
          required:
            - cloudEventsVersion
          properties:
            type:
              type: "string"
            cloudEventsVersion:
              type: "string"
    CloudEventsPayload:
      type: "object"
      required:
        - data
        - id
        - source
        - specversion
        - subject
        - time
        - type
      properties:
        specversion:
          type: "string"
        id:
          type: "string"
        type:
          type: "string"
        source:
          type: "string"
        subject:
          type: "string"
        time:
          type: "string"
          format: "datetime"
        sequence:
          type: "string"
        sequencetype:
          type: "string"
        dataref:
          type: "string"
        data:
          $ref: '#/components/schemas/DeliveryPayload'
    DeliveryFormat:
      type: "object"
      discriminator:
        propertyName: type
        mapping:
          CloudEvents: '#/components/schemas/CloudEventsFormat'
          Platform: '#/components/schemas/PlatformFormat'
      required:
        - type
      properties:
        type:
          type: "string"
    DeliveryPayload:
      type: "object"
      discriminator:
        propertyName: notificationType
        mapping:
          Message: '#/components/schemas/MessageDeliveryPayload'
          ResourceCreated: '#/components/schemas/ResourceCreatedDeliveryPayload'
          ResourceDeleted: '#/components/schemas/ResourceDeletedDeliveryPayload'
          ResourceUpdated: '#/components/schemas/ResourceUpdatedDeliveryPayload'
      required:
        - notificationType
        - projectKey
        - resource
      properties:
        projectKey:
          type: "string"
        notificationType:
          type: "string"
        resource:
          $ref: '#/components/schemas/Reference'
        resourceUserProvidedIdentifiers:
          $ref: '#/components/schemas/UserProvidedIdentifiers'
    Destination:
      type: "object"
      discriminator:
        propertyName: type
        mapping:
          EventGrid: '#/components/schemas/AzureEventGridDestination'
          AzureServiceBus: '#/components/schemas/AzureServiceBusDestination'
          EventBridge: '#/components/schemas/EventBridgeDestination'
          GoogleCloudPubSub: '#/components/schemas/GoogleCloudPubSubDestination'
          IronMQ: '#/components/schemas/IronMqDestination'
          SNS: '#/components/schemas/SnsDestination'
          SQS: '#/components/schemas/SqsDestination'
      required:
        - type
      properties:
        type:
          type: "string"
    EventBridgeDestination:
      allOf:
        - $ref: '#/components/schemas/Destination'
        - type: "object"
          required:
            - accountId
            - region
          properties:
            type:
              type: "string"
            region:
              type: "string"
            accountId:
              type: "string"
    GoogleCloudPubSubDestination:
      allOf:
        - $ref: '#/components/schemas/Destination'
        - type: "object"
          required:
            - projectId
            - topic
          properties:
            type:
              type: "string"
            projectId:
              type: "string"
            topic:
              type: "string"
    IronMqDestination:
      allOf:
        - $ref: '#/components/schemas/Destination'
        - type: "object"
          required:
            - uri
          properties:
            type:
              type: "string"
            uri:
              type: "string"
    MessageDeliveryPayload:
      allOf:
        - $ref: '#/components/schemas/DeliveryPayload'
        - type: "object"
          required:
            - createdAt
            - id
            - lastModifiedAt
            - resourceVersion
            - sequenceNumber
            - version
          properties:
            projectKey:
              type: "string"
            notificationType:
              type: "string"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            sequenceNumber:
              type: "integer"
              format: "int64"
            resourceVersion:
              type: "integer"
              format: "int64"
            payloadNotIncluded:
              $ref: '#/components/schemas/PayloadNotIncluded'
    MessageSubscription:
      type: "object"
      required:
        - resourceTypeId
      properties:
        resourceTypeId:
          $ref: '#/components/schemas/MessageSubscriptionResourceTypeId'
        types:
          type: "array"
          items:
            type: "string"
    MessageSubscriptionResourceTypeId:
      type: "string"
      enum:
        - associate-role
        - business-unit
        - category
        - customer
        - inventory-entry
        - order
        - payment
        - product
        - product-selection
        - quote
        - quote-request
        - review
        - staged-quote
        - standalone-price
        - store
      x-annotation-package: "Subscription"
      x-annotation-enumDescriptions:
        associate-role: "Messages related to [Associate Roles](ctp:api:type:AssociateRole).n"
        business-unit: "Messages related to [Business Units](ctp:api:type:BusinessUnit).n"
        category: "Messages related to [Categories](ctp:api:type:Category).n"
        customer: "Messages related to [Customers](ctp:api:type:Customer).n"
        inventory-entry: "Messages related to [InventoryEntries](ctp:api:type:InventoryEntry).n"
        order: "Messages related to [Orders](ctp:api:type:Order).n"
        payment: "Messages related to [Payments](ctp:api:type:Payment).n"
        product: "Messages related to [Products](ctp:api:type:Product).n"
        product-selection: "Messages related to [ProductSelections](ctp:api:type:ProductSelection).n"
        quote: "Messages related to [Quotes](ctp:api:type:Quote).n"
        quote-request: "Messages related to [Quote Requests](ctp:api:type:QuoteRequest).n"
        review: "Messages related to [Reviews](ctp:api:type:Review).n"
        staged-quote: "Messages related to [Staged Quotes](ctp:api:type:StagedQuote).n"
        standalone-price: "Messages related to [StandalonePrices](ctp:api:type:StandalonePrice).n"
        store: "Messages related to [Stores](ctp:api:type:Store).n"
    PayloadNotIncluded:
      type: "object"
      required:
        - payloadType
        - reason
      properties:
        reason:
          type: "string"
        payloadType:
          type: "string"
    PlatformFormat:
      allOf:
        - $ref: '#/components/schemas/DeliveryFormat'
        - type: "object"
          properties:
            type:
              type: "string"
    ResourceCreatedDeliveryPayload:
      allOf:
        - $ref: '#/components/schemas/DeliveryPayload'
        - type: "object"
          required:
            - modifiedAt
            - version
          properties:
            projectKey:
              type: "string"
            notificationType:
              type: "string"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            version:
              type: "integer"
              format: "int64"
            modifiedAt:
              type: "string"
              format: "datetime"
    ResourceDeletedDeliveryPayload:
      allOf:
        - $ref: '#/components/schemas/DeliveryPayload'
        - type: "object"
          required:
            - modifiedAt
            - version
          properties:
            projectKey:
              type: "string"
            notificationType:
              type: "string"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            version:
              type: "integer"
              format: "int64"
            modifiedAt:
              type: "string"
              format: "datetime"
            dataErasure:
              type: "boolean"
    ResourceUpdatedDeliveryPayload:
      allOf:
        - $ref: '#/components/schemas/DeliveryPayload'
        - type: "object"
          required:
            - modifiedAt
            - oldVersion
            - version
          properties:
            projectKey:
              type: "string"
            notificationType:
              type: "string"
            resource:
              $ref: '#/components/schemas/Reference'
            resourceUserProvidedIdentifiers:
              $ref: '#/components/schemas/UserProvidedIdentifiers'
            version:
              type: "integer"
              format: "int64"
            oldVersion:
              type: "integer"
              format: "int64"
            modifiedAt:
              type: "string"
              format: "datetime"
    SnsDestination:
      allOf:
        - $ref: '#/components/schemas/Destination'
        - type: "object"
          required:
            - topicArn
          properties:
            type:
              type: "string"
            accessKey:
              type: "string"
            accessSecret:
              type: "string"
            topicArn:
              type: "string"
            authenticationMode:
              $ref: '#/components/schemas/AwsAuthenticationMode'
    SqsDestination:
      allOf:
        - $ref: '#/components/schemas/Destination'
        - type: "object"
          required:
            - queueUrl
            - region
          properties:
            type:
              type: "string"
            accessKey:
              type: "string"
            accessSecret:
              type: "string"
            queueUrl:
              type: "string"
            region:
              type: "string"
            authenticationMode:
              $ref: '#/components/schemas/AwsAuthenticationMode'
    Subscription:
      allOf:
        - $ref: '#/components/schemas/BaseResource'
        - type: "object"
          required:
            - changes
            - createdAt
            - destination
            - format
            - id
            - lastModifiedAt
            - messages
            - status
            - version
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            changes:
              type: "array"
              items:
                $ref: '#/components/schemas/ChangeSubscription'
            destination:
              $ref: '#/components/schemas/Destination'
            key:
              type: "string"
            messages:
              type: "array"
              items:
                $ref: '#/components/schemas/MessageSubscription'
            format:
              $ref: '#/components/schemas/DeliveryFormat'
            status:
              $ref: '#/components/schemas/SubscriptionHealthStatus'
    SubscriptionDraft:
      type: "object"
      required:
        - destination
      properties:
        changes:
          type: "array"
          items:
            $ref: '#/components/schemas/ChangeSubscription'
        destination:
          $ref: '#/components/schemas/Destination'
        key:
          type: "string"
        messages:
          type: "array"
          items:
            $ref: '#/components/schemas/MessageSubscription'
        format:
          $ref: '#/components/schemas/DeliveryFormat'
    SubscriptionHealthStatus:
      type: "string"
      enum:
        - Healthy
        - ConfigurationError
        - ConfigurationErrorDeliveryStopped
        - TemporaryError
      x-annotation-package: "Subscription"
      x-annotation-docs-uri: "https://docs.commercetools.com/api/projects/subscriptions#subscriptionhealthstatus"
      x-annotation-enumDescriptions:
        Healthy: "Delivers messages as expected."
        ConfigurationError: "Messages cannot be delivered with the current configuration.
         Common causes are deleting the Destination queue, deleting access credentials,
         or removing the necessary permissions. The configuration can be fixed by re-creating
         the configuration on the Destination side, or by setting a new configuration with
         the [Change Destination](/../api/projects/subscriptions#change-destination) update
         action. If the configuration is fixed, undelivered messages will be delivered
         and the `status` will change to [Healthy](ctp:api:type:SubscriptionHealthStatus).
         `ConfigurationError` is automatically turned into `ConfigurationErrorDeliveryStopped`
         after some time. For more information, see [Delivery Guarantees](#delivery-guarantees)."
        ConfigurationErrorDeliveryStopped: "Does not deliver messages with the current configuration
         and the delivery of the messages is no longer attempted. If the configuration
         is fixed, undelivered messages are not retained and will not be delivered. The
         `status` will change to [Healthy](ctp:api:type:SubscriptionHealthStatus) as soon
         as new messages can be delivered."
        TemporaryError: "Does not deliver messages temporarily due to reasons other than a
         configuration error. For example, the Destination has a temporary outage."
    SubscriptionPagedQueryResponse:
      type: "object"
      required:
        - count
        - limit
        - offset
        - results
      properties:
        limit:
          type: "integer"
          format: "int64"
        offset:
          type: "integer"
          format: "int64"
        count:
          type: "integer"
          format: "int64"
        total:
          type: "integer"
          format: "int64"
        results:
          type: "array"
          items:
            $ref: '#/components/schemas/Subscription'
    SubscriptionUpdate:
      type: "object"
      required:
        - actions
        - version
      properties:
        version:
          type: "integer"
          format: "int64"
        actions:
          type: "array"
          items:
            $ref: '#/components/schemas/SubscriptionUpdateAction'
    SubscriptionUpdateAction:
      type: "object"
      discriminator:
        propertyName: action
        mapping:
          changeDestination: '#/components/schemas/SubscriptionChangeDestinationAction'
          setChanges: '#/components/schemas/SubscriptionSetChangesAction'
          setKey: '#/components/schemas/SubscriptionSetKeyAction'
          setMessages: '#/components/schemas/SubscriptionSetMessagesAction'
      required:
        - action
      properties:
        action:
          type: "string"
    SubscriptionChangeDestinationAction:
      allOf:
        - $ref: '#/components/schemas/SubscriptionUpdateAction'
        - type: "object"
          required:
            - destination
          properties:
            action:
              type: "string"
            destination:
              $ref: '#/components/schemas/Destination'
    SubscriptionSetChangesAction:
      allOf:
        - $ref: '#/components/schemas/SubscriptionUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            changes:
              type: "array"
              items:
                $ref: '#/components/schemas/ChangeSubscription'
    SubscriptionSetKeyAction:
      allOf:
        - $ref: '#/components/schemas/SubscriptionUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            key:
              type: "string"
    SubscriptionSetMessagesAction:
      allOf:
        - $ref: '#/components/schemas/SubscriptionUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            messages:
              type: "array"
              items:
                $ref: '#/components/schemas/MessageSubscription'
    SubRate:
      type: "object"
      required:
        - amount
        - name
      properties:
        name:
          type: "string"
        amount:
          type: "number"
          format: "double"
    TaxCategory:
      allOf:
        - $ref: '#/components/schemas/BaseResource'
        - type: "object"
          required:
            - createdAt
            - id
            - lastModifiedAt
            - name
            - rates
            - version
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            name:
              type: "string"
            description:
              type: "string"
            rates:
              type: "array"
              items:
                $ref: '#/components/schemas/TaxRate'
            key:
              type: "string"
    TaxCategoryDraft:
      type: "object"
      required:
        - name
      properties:
        name:
          type: "string"
        description:
          type: "string"
        rates:
          type: "array"
          items:
            $ref: '#/components/schemas/TaxRateDraft'
        key:
          type: "string"
    TaxCategoryPagedQueryResponse:
      type: "object"
      required:
        - count
        - limit
        - offset
        - results
      properties:
        limit:
          type: "integer"
          format: "int64"
        offset:
          type: "integer"
          format: "int64"
        count:
          type: "integer"
          format: "int64"
        total:
          type: "integer"
          format: "int64"
        results:
          type: "array"
          items:
            $ref: '#/components/schemas/TaxCategory'
    TaxCategoryReference:
      allOf:
        - $ref: '#/components/schemas/Reference'
        - type: "object"
          required:
            - id
          properties:
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            id:
              type: "string"
            obj:
              $ref: '#/components/schemas/TaxCategory'
    TaxCategoryResourceIdentifier:
      allOf:
        - $ref: '#/components/schemas/ResourceIdentifier'
        - type: "object"
          properties:
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            id:
              type: "string"
            key:
              type: "string"
    TaxCategoryUpdate:
      type: "object"
      required:
        - actions
        - version
      properties:
        version:
          type: "integer"
          format: "int64"
        actions:
          type: "array"
          items:
            $ref: '#/components/schemas/TaxCategoryUpdateAction'
    TaxCategoryUpdateAction:
      type: "object"
      discriminator:
        propertyName: action
        mapping:
          addTaxRate: '#/components/schemas/TaxCategoryAddTaxRateAction'
          changeName: '#/components/schemas/TaxCategoryChangeNameAction'
          removeTaxRate: '#/components/schemas/TaxCategoryRemoveTaxRateAction'
          replaceTaxRate: '#/components/schemas/TaxCategoryReplaceTaxRateAction'
          setDescription: '#/components/schemas/TaxCategorySetDescriptionAction'
          setKey: '#/components/schemas/TaxCategorySetKeyAction'
      required:
        - action
      properties:
        action:
          type: "string"
    TaxRate:
      type: "object"
      required:
        - amount
        - country
        - includedInPrice
        - name
      properties:
        id:
          type: "string"
        key:
          type: "string"
        name:
          type: "string"
        amount:
          type: "number"
          format: "double"
        includedInPrice:
          type: "boolean"
        country:
          $ref: '#/components/schemas/CountryCode'
        state:
          type: "string"
        subRates:
          type: "array"
          items:
            $ref: '#/components/schemas/SubRate'
    TaxRateDraft:
      type: "object"
      required:
        - country
        - includedInPrice
        - name
      properties:
        name:
          type: "string"
        amount:
          type: "number"
          format: "double"
        includedInPrice:
          type: "boolean"
        country:
          $ref: '#/components/schemas/CountryCode'
        state:
          type: "string"
        subRates:
          type: "array"
          items:
            $ref: '#/components/schemas/SubRate'
        key:
          type: "string"
    TaxCategoryAddTaxRateAction:
      allOf:
        - $ref: '#/components/schemas/TaxCategoryUpdateAction'
        - type: "object"
          required:
            - taxRate
          properties:
            action:
              type: "string"
            taxRate:
              $ref: '#/components/schemas/TaxRateDraft'
    TaxCategoryChangeNameAction:
      allOf:
        - $ref: '#/components/schemas/TaxCategoryUpdateAction'
        - type: "object"
          required:
            - name
          properties:
            action:
              type: "string"
            name:
              type: "string"
    TaxCategoryRemoveTaxRateAction:
      allOf:
        - $ref: '#/components/schemas/TaxCategoryUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            taxRateId:
              type: "string"
            taxRateKey:
              type: "string"
    TaxCategoryReplaceTaxRateAction:
      allOf:
        - $ref: '#/components/schemas/TaxCategoryUpdateAction'
        - type: "object"
          required:
            - taxRate
          properties:
            action:
              type: "string"
            taxRateId:
              type: "string"
            taxRateKey:
              type: "string"
            taxRate:
              $ref: '#/components/schemas/TaxRateDraft'
    TaxCategorySetDescriptionAction:
      allOf:
        - $ref: '#/components/schemas/TaxCategoryUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            description:
              type: "string"
    TaxCategorySetKeyAction:
      allOf:
        - $ref: '#/components/schemas/TaxCategoryUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            key:
              type: "string"
    CustomFieldBooleanType:
      allOf:
        - $ref: '#/components/schemas/FieldType'
        - type: "object"
          properties:
            name:
              type: "string"
    CustomFieldDateTimeType:
      allOf:
        - $ref: '#/components/schemas/FieldType'
        - type: "object"
          properties:
            name:
              type: "string"
    CustomFieldDateType:
      allOf:
        - $ref: '#/components/schemas/FieldType'
        - type: "object"
          properties:
            name:
              type: "string"
    CustomFieldEnumType:
      allOf:
        - $ref: '#/components/schemas/FieldType'
        - type: "object"
          required:
            - values
          properties:
            name:
              type: "string"
            values:
              type: "array"
              items:
                $ref: '#/components/schemas/CustomFieldEnumValue'
    CustomFieldEnumValue:
      type: "object"
      required:
        - key
        - label
      properties:
        key:
          type: "string"
        label:
          type: "string"
    CustomFieldLocalizedEnumType:
      allOf:
        - $ref: '#/components/schemas/FieldType'
        - type: "object"
          required:
            - values
          properties:
            name:
              type: "string"
            values:
              type: "array"
              items:
                $ref: '#/components/schemas/CustomFieldLocalizedEnumValue'
    CustomFieldLocalizedEnumValue:
      type: "object"
      required:
        - key
        - label
      properties:
        key:
          type: "string"
        label:
          $ref: '#/components/schemas/LocalizedString'
    CustomFieldLocalizedStringType:
      allOf:
        - $ref: '#/components/schemas/FieldType'
        - type: "object"
          properties:
            name:
              type: "string"
    CustomFieldMoneyType:
      allOf:
        - $ref: '#/components/schemas/FieldType'
        - type: "object"
          properties:
            name:
              type: "string"
    CustomFieldNumberType:
      allOf:
        - $ref: '#/components/schemas/FieldType'
        - type: "object"
          properties:
            name:
              type: "string"
    CustomFieldReferenceType:
      allOf:
        - $ref: '#/components/schemas/FieldType'
        - type: "object"
          required:
            - referenceTypeId
          properties:
            name:
              type: "string"
            referenceTypeId:
              $ref: '#/components/schemas/CustomFieldReferenceValue'
    CustomFieldReferenceValue:
      type: "string"
      enum:
        - cart
        - category
        - channel
        - customer
        - key-value-document
        - order
        - product
        - product-type
        - review
        - state
        - shipping-method
        - zone
      x-annotation-package: "Type"
      x-annotation-enumDescriptions:
        cart: "[Cart](ctp:api:type:Cart)n"
        category: "[Category](ctp:api:type:Category)n"
        channel: "[Channel](ctp:api:type:Channel)n"
        customer: "[Customer](ctp:api:type:Customer)n"
        key-value-document: "[CustomObject](ctp:api:type:CustomObject)n"
        order: "[Order](ctp:api:type:Order)n"
        product: "[Product](ctp:api:type:Product)n"
        product-type: "[ProductType](ctp:api:type:ProductType)n"
        review: "[Review](ctp:api:type:Review)n"
        state: "[State](ctp:api:type:State)n"
        shipping-method: "[ShippingMethod](ctp:api:type:ShippingMethod)n"
        zone: "[Zone](ctp:api:type:Zone)n"
    CustomFieldSetType:
      allOf:
        - $ref: '#/components/schemas/FieldType'
        - type: "object"
          required:
            - elementType
          properties:
            name:
              type: "string"
            elementType:
              $ref: '#/components/schemas/FieldType'
    CustomFieldStringType:
      allOf:
        - $ref: '#/components/schemas/FieldType'
        - type: "object"
          properties:
            name:
              type: "string"
    CustomFieldTimeType:
      allOf:
        - $ref: '#/components/schemas/FieldType'
        - type: "object"
          properties:
            name:
              type: "string"
    CustomFieldValue:
      {}
    CustomFields:
      type: "object"
      required:
        - fields
        - type
      properties:
        type:
          $ref: '#/components/schemas/TypeReference'
        fields:
          $ref: '#/components/schemas/FieldContainer'
    CustomFieldsDraft:
      type: "object"
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/TypeResourceIdentifier'
        fields:
          $ref: '#/components/schemas/FieldContainer'
    FieldContainer:
      type: "object"
      required:
        - /^[a-zA-Z0-9_-]{2,36}$/
      additionalProperties:
        type: "string"
    FieldDefinition:
      type: "object"
      required:
        - label
        - name
        - required
        - type
      properties:
        type:
          $ref: '#/components/schemas/FieldType'
        name:
          type: "string"
        label:
          $ref: '#/components/schemas/LocalizedString'
        required:
          type: "boolean"
        inputHint:
          $ref: '#/components/schemas/TypeTextInputHint'
    FieldType:
      type: "object"
      discriminator:
        propertyName: name
        mapping:
          Boolean: '#/components/schemas/CustomFieldBooleanType'
          DateTime: '#/components/schemas/CustomFieldDateTimeType'
          Date: '#/components/schemas/CustomFieldDateType'
          Enum: '#/components/schemas/CustomFieldEnumType'
          LocalizedEnum: '#/components/schemas/CustomFieldLocalizedEnumType'
          LocalizedString: '#/components/schemas/CustomFieldLocalizedStringType'
          Money: '#/components/schemas/CustomFieldMoneyType'
          Number: '#/components/schemas/CustomFieldNumberType'
          Reference: '#/components/schemas/CustomFieldReferenceType'
          Set: '#/components/schemas/CustomFieldSetType'
          String: '#/components/schemas/CustomFieldStringType'
          Time: '#/components/schemas/CustomFieldTimeType'
      required:
        - name
      properties:
        name:
          type: "string"
    ResourceTypeId:
      type: "string"
      enum:
        - address
        - asset
        - associate-role
        - business-unit
        - cart-discount
        - category
        - channel
        - customer
        - customer-group
        - custom-line-item
        - discount-code
        - inventory-entry
        - line-item
        - order
        - order-edit
        - order-delivery
        - order-parcel
        - order-return-item
        - payment
        - payment-interface-interaction
        - product-price
        - product-selection
        - quote
        - review
        - shipping
        - shipping-method
        - shopping-list
        - shopping-list-text-line-item
        - standalone-price
        - store
        - transaction
      x-annotation-package: "Type"
      x-annotation-enumDescriptions:
        address: "[Address](ctp:api:type:Address) on [BusinessUnit](ctp:api:type:BusinessUnit),
         [Cart](ctp:api:type:Cart), [Order](ctp:api:type:Order), [OrderEdit](ctp:api:type:OrderEdit),
         [Customer](ctp:api:type:Customer), and [Channel](ctp:api:type:Channel)n"
        asset: "[Asset](ctp:api:type:Asset) on [Category](ctp:api:type:Category) and [ProductVariant](ctp:api:type:ProductVariant)n"
        associate-role: "[AssociateRole](ctp:api:type:AssociateRole)n"
        business-unit: "[BusinessUnit](ctp:api:type:BusinessUnit)n"
        cart-discount: "[CartDiscount](ctp:api:type:CartDiscount)n"
        category: "[Category](ctp:api:type:Category)n"
        channel: "[Channel](ctp:api:type:Channel)n"
        custom-line-item: "[CustomLineItem](ctp:api:type:CustomLineItem) on [Cart](ctp:api:type:Cart)
         and [Order](ctp:api:type:Order)n"
        customer: "[Customer](ctp:api:type:Customer)n"
        customer-group: "[CustomerGroup](ctp:api:type:CustomerGroup)n"
        discount-code: "[DiscountCode](ctp:api:type:DiscountCode)n"
        inventory-entry: "[InventoryEntry](ctp:api:type:InventoryEntry)n"
        line-item: "[LineItem](ctp:api:type:LineItem) on [Cart](ctp:api:type:Cart) and [Order](ctp:api:type:Order),
         and [LineItem](ctp:api:type:LineItem) on [ShoppingList](ctp:api:type:ShoppingList)n"
        order: "[Cart](ctp:api:type:Cart) and [Order](ctp:api:type:Order).nWhen a [Cart](ctp:api:type:Cart)
         is ordered, the [CustomFields](ctp:api:type:CustomFields) need to be copied to
         the [Order](ctp:api:type:Order).nFor this reason, the Types for Carts are also
         valid for Orders, and hence both have the same identifier: `order`.n"
        order-edit: "[OrderEdit](ctp:api:type:OrderEdit)n"
        order-delivery: "[Delivery](/projects/orders#delivery)n"
        order-parcel: "[Parcel](ctp:api:type:Parcel)n"
        order-return-item: "[ReturnItem](ctp:api:type:ReturnItem)n"
        payment: "[Payment](ctp:api:type:Payment)n"
        payment-interface-interaction: "[InterfaceInteraction](ctp:api:type:PaymentAddInterfaceInteractionAction)
         on [Payment](ctp:api:type:Payment)n"
        product-price: "[Embedded Price](/projects/products#embedded-price) on [ProductVariant](ctp:api:type:ProductVariant)n"
        product-selection: "[ProductSelection](ctp:api:type:ProductSelection)n"
        quote: "[Quote](ctp:api:type:Quote), [QuoteRequest](ctp:api:type:QuoteRequest) and
         [StagedQuote](ctp:api:type:StagedQuote).nWhen a [StagedQuote](ctp:api:type:StagedQuote)
         is created, the [CustomFields](ctp:api:type:CustomFields) will be copied from
         the [QuoteRequest](ctp:api:type:QuoteRequest) and when a [Quote](ctp:api:type:Quote)
         is created, the [CustomFields](ctp:api:type:CustomFields) will be copied from
         the [StagedQuote](ctp:api:type:StagedQuote).nFor this reason, the Types for Quotes
         are also valid for QuoteRequests and StagedQuotes, and hence all have the same
         identifier: `quote`.n"
        review: "[Review](ctp:api:type:Review)n"
        shipping: "[Shipping](ctp:api:type:Shipping)n"
        shipping-method: "[ShippingMethod](ctp:api:type:ShippingMethod)n"
        shopping-list: "[ShoppingList](ctp:api:type:ShoppingList)n"
        shopping-list-text-line-item: "[TextLineItem](ctp:api:type:TextLineItem) on [ShoppingList](ctp:api:type:ShoppingList)n"
        standalone-price: "[StandalonePrice](ctp:api:type:StandalonePrice)n"
        store: "[Store](ctp:api:type:Store)n"
        transaction: "[Transaction](ctp:api:type:Transaction) on [Payment](ctp:api:type:Payment)n"
    Type:
      allOf:
        - $ref: '#/components/schemas/BaseResource'
        - type: "object"
          required:
            - createdAt
            - fieldDefinitions
            - id
            - key
            - lastModifiedAt
            - name
            - resourceTypeIds
            - version
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            key:
              type: "string"
            name:
              $ref: '#/components/schemas/LocalizedString'
            description:
              $ref: '#/components/schemas/LocalizedString'
            resourceTypeIds:
              type: "array"
              items:
                $ref: '#/components/schemas/ResourceTypeId'
            fieldDefinitions:
              type: "array"
              items:
                $ref: '#/components/schemas/FieldDefinition'
    TypeDraft:
      type: "object"
      required:
        - key
        - name
        - resourceTypeIds
      properties:
        key:
          type: "string"
        name:
          $ref: '#/components/schemas/LocalizedString'
        description:
          $ref: '#/components/schemas/LocalizedString'
        resourceTypeIds:
          type: "array"
          items:
            $ref: '#/components/schemas/ResourceTypeId'
        fieldDefinitions:
          type: "array"
          items:
            $ref: '#/components/schemas/FieldDefinition'
    TypePagedQueryResponse:
      type: "object"
      required:
        - count
        - limit
        - offset
        - results
      properties:
        limit:
          type: "integer"
          format: "int64"
        offset:
          type: "integer"
          format: "int64"
        count:
          type: "integer"
          format: "int64"
        total:
          type: "integer"
          format: "int64"
        results:
          type: "array"
          items:
            $ref: '#/components/schemas/Type'
    TypeReference:
      allOf:
        - $ref: '#/components/schemas/Reference'
        - type: "object"
          required:
            - id
          properties:
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            id:
              type: "string"
            obj:
              $ref: '#/components/schemas/Type'
    TypeResourceIdentifier:
      allOf:
        - $ref: '#/components/schemas/ResourceIdentifier'
        - type: "object"
          properties:
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            id:
              type: "string"
            key:
              type: "string"
    TypeTextInputHint:
      type: "string"
      enum:
        - SingleLine
        - MultiLine
      x-annotation-package: "Type"
      x-annotation-enumDescriptions:
        SingleLine: "Hint for GUIs to display the field's content in a single line of text."
        MultiLine: "Hint for GUIs to display the field's content over multiple lines of text."
    TypeUpdate:
      type: "object"
      required:
        - actions
        - version
      properties:
        version:
          type: "integer"
          format: "int64"
        actions:
          type: "array"
          items:
            $ref: '#/components/schemas/TypeUpdateAction'
    TypeUpdateAction:
      type: "object"
      discriminator:
        propertyName: action
        mapping:
          addEnumValue: '#/components/schemas/TypeAddEnumValueAction'
          addFieldDefinition: '#/components/schemas/TypeAddFieldDefinitionAction'
          addLocalizedEnumValue: '#/components/schemas/TypeAddLocalizedEnumValueAction'
          changeEnumValueLabel: '#/components/schemas/TypeChangeEnumValueLabelAction'
          changeEnumValueOrder: '#/components/schemas/TypeChangeEnumValueOrderAction'
          changeFieldDefinitionLabel: '#/components/schemas/TypeChangeFieldDefinitionLabelAction'
          changeFieldDefinitionOrder: '#/components/schemas/TypeChangeFieldDefinitionOrderAction'
          changeInputHint: '#/components/schemas/TypeChangeInputHintAction'
          changeKey: '#/components/schemas/TypeChangeKeyAction'
          changeLabel: '#/components/schemas/TypeChangeLabelAction'
          changeLocalizedEnumValueLabel: '#/components/schemas/TypeChangeLocalizedEnumValueLabelAction'
          changeLocalizedEnumValueOrder: '#/components/schemas/TypeChangeLocalizedEnumValueOrderAction'
          changeName: '#/components/schemas/TypeChangeNameAction'
          removeFieldDefinition: '#/components/schemas/TypeRemoveFieldDefinitionAction'
          setDescription: '#/components/schemas/TypeSetDescriptionAction'
      required:
        - action
      properties:
        action:
          type: "string"
    TypeAddEnumValueAction:
      allOf:
        - $ref: '#/components/schemas/TypeUpdateAction'
        - type: "object"
          required:
            - fieldName
            - value
          properties:
            action:
              type: "string"
            fieldName:
              type: "string"
            value:
              $ref: '#/components/schemas/CustomFieldEnumValue'
    TypeAddFieldDefinitionAction:
      allOf:
        - $ref: '#/components/schemas/TypeUpdateAction'
        - type: "object"
          required:
            - fieldDefinition
          properties:
            action:
              type: "string"
            fieldDefinition:
              $ref: '#/components/schemas/FieldDefinition'
    TypeAddLocalizedEnumValueAction:
      allOf:
        - $ref: '#/components/schemas/TypeUpdateAction'
        - type: "object"
          required:
            - fieldName
            - value
          properties:
            action:
              type: "string"
            fieldName:
              type: "string"
            value:
              $ref: '#/components/schemas/CustomFieldLocalizedEnumValue'
    TypeChangeEnumValueLabelAction:
      allOf:
        - $ref: '#/components/schemas/TypeUpdateAction'
        - type: "object"
          required:
            - fieldName
            - value
          properties:
            action:
              type: "string"
            fieldName:
              type: "string"
            value:
              $ref: '#/components/schemas/CustomFieldEnumValue'
    TypeChangeEnumValueOrderAction:
      allOf:
        - $ref: '#/components/schemas/TypeUpdateAction'
        - type: "object"
          required:
            - fieldName
            - keys
          properties:
            action:
              type: "string"
            fieldName:
              type: "string"
            keys:
              type: "array"
              items:
                type: "string"
    TypeChangeFieldDefinitionLabelAction:
      allOf:
        - $ref: '#/components/schemas/TypeUpdateAction'
        - type: "object"
          required:
            - fieldName
            - label
          properties:
            action:
              type: "string"
            fieldName:
              type: "string"
            label:
              $ref: '#/components/schemas/LocalizedString'
    TypeChangeFieldDefinitionOrderAction:
      allOf:
        - $ref: '#/components/schemas/TypeUpdateAction'
        - type: "object"
          required:
            - fieldNames
          properties:
            action:
              type: "string"
            fieldNames:
              type: "array"
              items:
                type: "string"
    TypeChangeInputHintAction:
      allOf:
        - $ref: '#/components/schemas/TypeUpdateAction'
        - type: "object"
          required:
            - fieldName
            - inputHint
          properties:
            action:
              type: "string"
            fieldName:
              type: "string"
            inputHint:
              $ref: '#/components/schemas/TypeTextInputHint'
    TypeChangeKeyAction:
      allOf:
        - $ref: '#/components/schemas/TypeUpdateAction'
        - type: "object"
          required:
            - key
          properties:
            action:
              type: "string"
            key:
              type: "string"
    TypeChangeLabelAction:
      allOf:
        - $ref: '#/components/schemas/TypeUpdateAction'
        - type: "object"
          required:
            - fieldName
            - label
          properties:
            action:
              type: "string"
            fieldName:
              type: "string"
            label:
              $ref: '#/components/schemas/LocalizedString'
    TypeChangeLocalizedEnumValueLabelAction:
      allOf:
        - $ref: '#/components/schemas/TypeUpdateAction'
        - type: "object"
          required:
            - fieldName
            - value
          properties:
            action:
              type: "string"
            fieldName:
              type: "string"
            value:
              $ref: '#/components/schemas/CustomFieldLocalizedEnumValue'
    TypeChangeLocalizedEnumValueOrderAction:
      allOf:
        - $ref: '#/components/schemas/TypeUpdateAction'
        - type: "object"
          required:
            - fieldName
            - keys
          properties:
            action:
              type: "string"
            fieldName:
              type: "string"
            keys:
              type: "array"
              items:
                type: "string"
    TypeChangeNameAction:
      allOf:
        - $ref: '#/components/schemas/TypeUpdateAction'
        - type: "object"
          required:
            - name
          properties:
            action:
              type: "string"
            name:
              $ref: '#/components/schemas/LocalizedString'
    TypeRemoveFieldDefinitionAction:
      allOf:
        - $ref: '#/components/schemas/TypeUpdateAction'
        - type: "object"
          required:
            - fieldName
          properties:
            action:
              type: "string"
            fieldName:
              type: "string"
    TypeSetDescriptionAction:
      allOf:
        - $ref: '#/components/schemas/TypeUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            description:
              $ref: '#/components/schemas/LocalizedString'
    Location:
      type: "object"
      required:
        - country
      properties:
        country:
          $ref: '#/components/schemas/CountryCode'
        state:
          type: "string"
    Zone:
      allOf:
        - $ref: '#/components/schemas/BaseResource'
        - type: "object"
          required:
            - createdAt
            - id
            - lastModifiedAt
            - locations
            - name
            - version
          properties:
            id:
              type: "string"
            version:
              type: "integer"
              format: "int64"
            createdAt:
              type: "string"
              format: "datetime"
            lastModifiedAt:
              type: "string"
              format: "datetime"
            lastModifiedBy:
              $ref: '#/components/schemas/LastModifiedBy'
            createdBy:
              $ref: '#/components/schemas/CreatedBy'
            key:
              type: "string"
            name:
              type: "string"
            description:
              type: "string"
            locations:
              type: "array"
              items:
                $ref: '#/components/schemas/Location'
    ZoneDraft:
      type: "object"
      required:
        - name
      properties:
        key:
          type: "string"
        name:
          type: "string"
        description:
          type: "string"
        locations:
          type: "array"
          items:
            $ref: '#/components/schemas/Location'
    ZonePagedQueryResponse:
      type: "object"
      required:
        - count
        - limit
        - offset
        - results
      properties:
        limit:
          type: "integer"
          format: "int64"
        offset:
          type: "integer"
          format: "int64"
        count:
          type: "integer"
          format: "int64"
        total:
          type: "integer"
          format: "int64"
        results:
          type: "array"
          items:
            $ref: '#/components/schemas/Zone'
    ZoneReference:
      allOf:
        - $ref: '#/components/schemas/Reference'
        - type: "object"
          required:
            - id
          properties:
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            id:
              type: "string"
            obj:
              $ref: '#/components/schemas/Zone'
    ZoneResourceIdentifier:
      allOf:
        - $ref: '#/components/schemas/ResourceIdentifier'
        - type: "object"
          properties:
            typeId:
              $ref: '#/components/schemas/ReferenceTypeId'
            id:
              type: "string"
            key:
              type: "string"
    ZoneUpdate:
      type: "object"
      required:
        - actions
        - version
      properties:
        version:
          type: "integer"
          format: "int64"
        actions:
          type: "array"
          items:
            $ref: '#/components/schemas/ZoneUpdateAction'
    ZoneUpdateAction:
      type: "object"
      discriminator:
        propertyName: action
        mapping:
          addLocation: '#/components/schemas/ZoneAddLocationAction'
          changeName: '#/components/schemas/ZoneChangeNameAction'
          removeLocation: '#/components/schemas/ZoneRemoveLocationAction'
          setDescription: '#/components/schemas/ZoneSetDescriptionAction'
          setKey: '#/components/schemas/ZoneSetKeyAction'
      required:
        - action
      properties:
        action:
          type: "string"
    ZoneAddLocationAction:
      allOf:
        - $ref: '#/components/schemas/ZoneUpdateAction'
        - type: "object"
          required:
            - location
          properties:
            action:
              type: "string"
            location:
              $ref: '#/components/schemas/Location'
    ZoneChangeNameAction:
      allOf:
        - $ref: '#/components/schemas/ZoneUpdateAction'
        - type: "object"
          required:
            - name
          properties:
            action:
              type: "string"
            name:
              type: "string"
    ZoneRemoveLocationAction:
      allOf:
        - $ref: '#/components/schemas/ZoneUpdateAction'
        - type: "object"
          required:
            - location
          properties:
            action:
              type: "string"
            location:
              $ref: '#/components/schemas/Location'
    ZoneSetDescriptionAction:
      allOf:
        - $ref: '#/components/schemas/ZoneUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            description:
              type: "string"
    ZoneSetKeyAction:
      allOf:
        - $ref: '#/components/schemas/ZoneUpdateAction'
        - type: "object"
          properties:
            action:
              type: "string"
            key:
              type: "string"

  responses:
    errorable_400:
      description: |-
        ## Bad Request

        A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.
        Bad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or
        a parameter that references another resource that does not exist. Clients need to resolve the problems mentioned
        in the response before re-sending the request.

        The following general error codes can appear in responses with the HTTP status code `400`:

        * `InvalidInput`
          Invalid input has been sent to the service.
          The client application should validate the input according to the constraints described in the error message
          before sending the request.

        * `InvalidOperation`
          The resource(s) involved in the request are not in a valid state for the operation. The client application
          should validate the constraints described in the error message before sending the request.

        * `InvalidField`
          A field has an invalid value.
          Extra fields:
          * `field` - String
            The name of the field.
          * `invalidValue` - *
            The invalid value.
          * `allowedValues` - Array of * - Optional
            A fixed set of allowed values for the field, if any.

        * `RequiredField`
          A required field is missing a value.
          Extra fields:
          * `field` - String
            The name of the field.

        * `DuplicateField`
          A value for a field conflicts with an existing duplicate value.
          Extra fields:
          * `field` - String
            The name of the field.
          * `duplicateValue` - *
            The offending duplicate value.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    errorable_401:
      description: |-
        ## Unauthorized

        A 401 indicates that the request is not properly authenticated.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    errorable_403:
      description: |-
        ## Forbidden

        A 403 indicates that the authenticated client is not allowed to perform the request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    errorable_404:
      description: |-
        ## Not Found

        A 404 indicates that the addressed resource was not found / does not exist.

        The following general error codes can appear in responses with the HTTP status code `404`:

        * `ResourceNotFound`
          The resource addressed by the request URL does not exist.
      content: {}
    errorable_500:
      description: |-
        ## Internal Server Error

        A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
        requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
        to be reported and resolved.

        The following general error codes can appear in responses with the HTTP status code `500`:

        * `General`
          A server-side problem occurred that is not further specified.
          These errors [should be reported](https://support.commercetools.com/).
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    errorable_502:
      description: |-
        A 502 indicates that a request failed due to a server-side problem caused by scaling infrastructure resources.
        The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    errorable_503:
      description: |-
        ## Service Unavailable

        The following general error codes can appear in responses with the HTTP status code `503`:

        * `OverCapacity`
          The service is having trouble handling the load. The client application should retry the request with
          exponential backoff up to a point where further delay is unacceptable.

        * `PendingOperation`
          A previous conflicting operation is still pending and needs to finish before the request can succeed.
          The client application should retry the request with exponential backoff up to a point where further delay
          is unacceptable. If these errors persist, [should be reported](https://support.commercetools.com/).
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    deprecatable200_200:
      description: |-
        200
      content: {}
    deprecatable201_201:
      description: |-
        201
      content: {}
    conflicting_409:
      description: |-
        ## Conflict

        A 409 indicates that the current version of the resource targeted by the request (with the intention to modify or delete it) is different from that provided in the request.
        In response to this, the client will usually want to request the newest version of the resource to see what has been changed and decide what changes to apply to the newest version.

        A 409 Conflict indicates a concurrent modification and usually occurs on a versioned resource, which requires the client to provide the version of the resource to perform a change.

        The following general error codes can appear in responses with the HTTP status code `409`:

        * `ConcurrentModification`
          The request conflicts with the current state of the involved resource(s).
          Typically, the request attempts to modify a resource that is out of date,
          i.e. that has been modified by another client since the last time it was retrieved.
          The client application should resolve the conflict (with or without involving the end-user)
          before retrying the request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
