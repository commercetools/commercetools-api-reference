{
  "swagger": "2.0",
  "info": {
    "version": "v1",
    "title": "Commercetools"
  },
  "host": "api.sphere.io",
  "basePath": "/",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "oauth_2_0": {
      "type": "oauth2",
      "flow": "application",
      "scopes": {
        "manage_project:{projectKey}": "",
        "manage_products:{projectKey}": "",
        "view_products:{projectKey}": "",
        "manage_orders:{projectKey}": "",
        "view_orders:{projectKey}": "",
        "manage_customers:{projectKey}": "",
        "view_customers:{projectKey}": "",
        "manage_payments:{projectKey}": "",
        "view_payments:{projectKey}": "",
        "manage_subscriptions:{projectKey}": "",
        "view_subscriptions:{projectKey}": "",
        "manage_types:{projectKey}": "",
        "view_types:{projectKey}": "",
        "manage_my_orders:{projectKey}": "",
        "manage_my_profile:{projectKey}": ""
      },
      "description": "HTTP API authorization uses [OAuth2](http://tools.ietf.org/html/rfc6750){:target=\"_blank\"}.\n\nClients must obtain an access token from the auth service using one of\nthe authorization flows described below, before they are able to make authorized requests\nto other SPHERE.IO services. On successful completion of an authorization flow,\na client will be given an `access_token`, which they need to include in requests\nto authorized service endpoints via the HTTP `Authorization` header like this:\n",
      "tokenUrl": "https://auth.sphere.io/oauth/token"
    }
  },
  "paths": {
    "/{projectKey}": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "description": "The Endpoint is responding a limited set of information about settings and configuration of the project.",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Project"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/carts": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "description": "Create a cart",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CartDraft"
            }
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Cart"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_orders:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Query carts",
        "parameters": [
          {
            "name": "customerId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "where",
            "in": "query",
            "description": "If queries support ad-hoc filtering of resources through flexible predicates, they do so via the where query\nparameter that accepts a single (possibly compound) predicate to determine whether a specific resource\nrepresentation should be included in the result.\n\nThe structure of predicates and the names of the fields follow the structure and naming of the fields in the\ndocumented response representation of the query results.\n\nExamples of predicates:\n\n    // Compare a field's value to a given value\n    name = \"Peter\"\n    age < 42\n    age > 42\n    age <= 42\n    age >= 42\n    age <> 42\n\n    // Combine any two conditional expressions in a logical conjunction / disjunction\n    name = \"Peter\" and age < 42\n    name = \"Peter\" or age < 42\n\n    // Negate any other conditional expression\n    not (name = \"Peter\" and age < 42)\n\n    // Check whether a field's value is or is not contained in\n    // a specified set of values.\n    age in (42, 43, 44)\n    age not in (42, 43, 44)\n\n    // Check whether an array contains all or any of a set of values\n    tags contains all (\"a\", \"b\", \"c\")\n    tags contains any (\"a\", \"b\", \"c\")\n\n    // Check whether an array is empty\n    tags is empty\n\n    // Check whether a field exists & has a non-null value\n    name is defined\n    name is not defined\n\n    // Descend into nested objects\n    dog(age < 7 and name = \"Beethoven\")\n\n    // Descend into nested arrays of objects\n    cities(zip > 10000 and zip < 20000)\n\nA query endpoint usually restricts predicates to only be allowed on a specified subset of a resource\nrepresentation's fields. The documentation of the endpoint will therefore list fields that can be used\nfor constructing predicates.\n\nIf multiple predicates are specified via multiple where query parameters, the individual predicates are\ncombined in a logical conjunction, just as if they had been specified in a single where query parameter\nand combined with and.\n\nNote: The encoding of the predicates is UTF-8 and the predicate must be URL-encoded in the HTTP request.\n",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A query endpoint that supports sorting does so through the sort query parameter. The provided value must be\na valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on\nthe specific query endpoints.\n\nHere are some examples of sort expressions:\n\n    name desc\n    dog.age asc\n\nIf multiple sort expressions are specified via multiple sort parameters, they are combined into a composed\nsort where the results are first sorted by the first expression, followed by equal values being sorted\naccording to the second expression, and so on.\n\nNote: The sorting is case sensitive.\n",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          },
          {
            "$ref": "#/parameters/trait:paging:limit"
          },
          {
            "$ref": "#/parameters/trait:paging:offset"
          },
          {
            "$ref": "#/parameters/trait:paging:withTotal"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_orders:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/carts/{ID}": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "ID",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "delete": {
        "description": "Delete a cart",
        "parameters": [
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Cart"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_orders:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Get cart by ID",
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Cart"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_orders:{projectKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "Update a cart",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CartUpdate"
            }
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Cart"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_orders:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/cart-discounts": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "description": "Create a cart-discount",
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CartDiscount"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_orders:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Query cart-discounts",
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "description": "If queries support ad-hoc filtering of resources through flexible predicates, they do so via the where query\nparameter that accepts a single (possibly compound) predicate to determine whether a specific resource\nrepresentation should be included in the result.\n\nThe structure of predicates and the names of the fields follow the structure and naming of the fields in the\ndocumented response representation of the query results.\n\nExamples of predicates:\n\n    // Compare a field's value to a given value\n    name = \"Peter\"\n    age < 42\n    age > 42\n    age <= 42\n    age >= 42\n    age <> 42\n\n    // Combine any two conditional expressions in a logical conjunction / disjunction\n    name = \"Peter\" and age < 42\n    name = \"Peter\" or age < 42\n\n    // Negate any other conditional expression\n    not (name = \"Peter\" and age < 42)\n\n    // Check whether a field's value is or is not contained in\n    // a specified set of values.\n    age in (42, 43, 44)\n    age not in (42, 43, 44)\n\n    // Check whether an array contains all or any of a set of values\n    tags contains all (\"a\", \"b\", \"c\")\n    tags contains any (\"a\", \"b\", \"c\")\n\n    // Check whether an array is empty\n    tags is empty\n\n    // Check whether a field exists & has a non-null value\n    name is defined\n    name is not defined\n\n    // Descend into nested objects\n    dog(age < 7 and name = \"Beethoven\")\n\n    // Descend into nested arrays of objects\n    cities(zip > 10000 and zip < 20000)\n\nA query endpoint usually restricts predicates to only be allowed on a specified subset of a resource\nrepresentation's fields. The documentation of the endpoint will therefore list fields that can be used\nfor constructing predicates.\n\nIf multiple predicates are specified via multiple where query parameters, the individual predicates are\ncombined in a logical conjunction, just as if they had been specified in a single where query parameter\nand combined with and.\n\nNote: The encoding of the predicates is UTF-8 and the predicate must be URL-encoded in the HTTP request.\n",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A query endpoint that supports sorting does so through the sort query parameter. The provided value must be\na valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on\nthe specific query endpoints.\n\nHere are some examples of sort expressions:\n\n    name desc\n    dog.age asc\n\nIf multiple sort expressions are specified via multiple sort parameters, they are combined into a composed\nsort where the results are first sorted by the first expression, followed by equal values being sorted\naccording to the second expression, and so on.\n\nNote: The sorting is case sensitive.\n",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/trait:paging:limit"
          },
          {
            "$ref": "#/parameters/trait:paging:offset"
          },
          {
            "$ref": "#/parameters/trait:paging:withTotal"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CartDiscountPagedQueryResponse"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_orders:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/cart-discounts/{ID}": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "ID",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "delete": {
        "description": "Delete a cart-discount",
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          },
          {
            "$ref": "#/parameters/trait:versioned:version"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CartDiscount"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_orders:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Get cart-discount by ID",
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CartDiscount"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_orders:{projectKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "Update a cart-discount",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CartDiscountUpdate"
            }
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CartDiscount"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_orders:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/categories": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "description": "Create a Category",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CategoryDraft"
            }
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Category"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Query Categories",
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "description": "If queries support ad-hoc filtering of resources through flexible predicates, they do so via the where query\nparameter that accepts a single (possibly compound) predicate to determine whether a specific resource\nrepresentation should be included in the result.\n\nThe structure of predicates and the names of the fields follow the structure and naming of the fields in the\ndocumented response representation of the query results.\n\nExamples of predicates:\n\n    // Compare a field's value to a given value\n    name = \"Peter\"\n    age < 42\n    age > 42\n    age <= 42\n    age >= 42\n    age <> 42\n\n    // Combine any two conditional expressions in a logical conjunction / disjunction\n    name = \"Peter\" and age < 42\n    name = \"Peter\" or age < 42\n\n    // Negate any other conditional expression\n    not (name = \"Peter\" and age < 42)\n\n    // Check whether a field's value is or is not contained in\n    // a specified set of values.\n    age in (42, 43, 44)\n    age not in (42, 43, 44)\n\n    // Check whether an array contains all or any of a set of values\n    tags contains all (\"a\", \"b\", \"c\")\n    tags contains any (\"a\", \"b\", \"c\")\n\n    // Check whether an array is empty\n    tags is empty\n\n    // Check whether a field exists & has a non-null value\n    name is defined\n    name is not defined\n\n    // Descend into nested objects\n    dog(age < 7 and name = \"Beethoven\")\n\n    // Descend into nested arrays of objects\n    cities(zip > 10000 and zip < 20000)\n\nA query endpoint usually restricts predicates to only be allowed on a specified subset of a resource\nrepresentation's fields. The documentation of the endpoint will therefore list fields that can be used\nfor constructing predicates.\n\nIf multiple predicates are specified via multiple where query parameters, the individual predicates are\ncombined in a logical conjunction, just as if they had been specified in a single where query parameter\nand combined with and.\n\nNote: The encoding of the predicates is UTF-8 and the predicate must be URL-encoded in the HTTP request.\n",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A query endpoint that supports sorting does so through the sort query parameter. The provided value must be\na valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on\nthe specific query endpoints.\n\nHere are some examples of sort expressions:\n\n    name desc\n    dog.age asc\n\nIf multiple sort expressions are specified via multiple sort parameters, they are combined into a composed\nsort where the results are first sorted by the first expression, followed by equal values being sorted\naccording to the second expression, and so on.\n\nNote: The sorting is case sensitive.\n",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          },
          {
            "$ref": "#/parameters/trait:paging:limit"
          },
          {
            "$ref": "#/parameters/trait:paging:offset"
          },
          {
            "$ref": "#/parameters/trait:paging:withTotal"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CategoryPagedQueryResponse"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_products:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/categories/{ID}": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "ID",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "delete": {
        "description": "Delete a Category",
        "parameters": [
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Category"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Get Category by ID",
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Category"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_products:{projectKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "Update a Category",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CategoryUpdate"
            }
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Category"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/categories/key={key}": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "description": "projectKey",
          "required": true,
          "type": "string"
        },
        {
          "name": "key",
          "in": "path",
          "description": "key",
          "required": true,
          "type": "string"
        }
      ],
      "delete": {
        "description": "Delete a Category",
        "parameters": [
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Category"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "Update a Category",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Update"
            }
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Category"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Get Category by key",
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Category"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_products:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/channel/{ID}": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "ID",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ChannelUpdate"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "schema": {}
          }
        }
      }
    },
    "/{projectKey}/customer-groups": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "description": "Create a customer-group",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CustomerGroupDraft"
            }
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CustomerGroup"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_customers:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Query customer-groups",
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "description": "If queries support ad-hoc filtering of resources through flexible predicates, they do so via the where query\nparameter that accepts a single (possibly compound) predicate to determine whether a specific resource\nrepresentation should be included in the result.\n\nThe structure of predicates and the names of the fields follow the structure and naming of the fields in the\ndocumented response representation of the query results.\n\nExamples of predicates:\n\n    // Compare a field's value to a given value\n    name = \"Peter\"\n    age < 42\n    age > 42\n    age <= 42\n    age >= 42\n    age <> 42\n\n    // Combine any two conditional expressions in a logical conjunction / disjunction\n    name = \"Peter\" and age < 42\n    name = \"Peter\" or age < 42\n\n    // Negate any other conditional expression\n    not (name = \"Peter\" and age < 42)\n\n    // Check whether a field's value is or is not contained in\n    // a specified set of values.\n    age in (42, 43, 44)\n    age not in (42, 43, 44)\n\n    // Check whether an array contains all or any of a set of values\n    tags contains all (\"a\", \"b\", \"c\")\n    tags contains any (\"a\", \"b\", \"c\")\n\n    // Check whether an array is empty\n    tags is empty\n\n    // Check whether a field exists & has a non-null value\n    name is defined\n    name is not defined\n\n    // Descend into nested objects\n    dog(age < 7 and name = \"Beethoven\")\n\n    // Descend into nested arrays of objects\n    cities(zip > 10000 and zip < 20000)\n\nA query endpoint usually restricts predicates to only be allowed on a specified subset of a resource\nrepresentation's fields. The documentation of the endpoint will therefore list fields that can be used\nfor constructing predicates.\n\nIf multiple predicates are specified via multiple where query parameters, the individual predicates are\ncombined in a logical conjunction, just as if they had been specified in a single where query parameter\nand combined with and.\n\nNote: The encoding of the predicates is UTF-8 and the predicate must be URL-encoded in the HTTP request.\n",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A query endpoint that supports sorting does so through the sort query parameter. The provided value must be\na valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on\nthe specific query endpoints.\n\nHere are some examples of sort expressions:\n\n    name desc\n    dog.age asc\n\nIf multiple sort expressions are specified via multiple sort parameters, they are combined into a composed\nsort where the results are first sorted by the first expression, followed by equal values being sorted\naccording to the second expression, and so on.\n\nNote: The sorting is case sensitive.\n",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/trait:paging:limit"
          },
          {
            "$ref": "#/parameters/trait:paging:offset"
          },
          {
            "$ref": "#/parameters/trait:paging:withTotal"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CustomerGroupPagedQueryResponse"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_customers:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/customer-groups/{ID}": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "ID",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "delete": {
        "description": "Delete a customer-group",
        "parameters": [
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CustomerGroup"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_customers:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Get customer-group by ID",
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CustomerGroup"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_customers:{projectKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "Update a customer-group",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CustomerGroupUpdate"
            }
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CustomerGroup"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_customers:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/discount-codes": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "description": "Create a discount-code",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/DiscountCodeDraft"
            }
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DiscountCode"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_orders:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Query discount-codes",
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "description": "If queries support ad-hoc filtering of resources through flexible predicates, they do so via the where query\nparameter that accepts a single (possibly compound) predicate to determine whether a specific resource\nrepresentation should be included in the result.\n\nThe structure of predicates and the names of the fields follow the structure and naming of the fields in the\ndocumented response representation of the query results.\n\nExamples of predicates:\n\n    // Compare a field's value to a given value\n    name = \"Peter\"\n    age < 42\n    age > 42\n    age <= 42\n    age >= 42\n    age <> 42\n\n    // Combine any two conditional expressions in a logical conjunction / disjunction\n    name = \"Peter\" and age < 42\n    name = \"Peter\" or age < 42\n\n    // Negate any other conditional expression\n    not (name = \"Peter\" and age < 42)\n\n    // Check whether a field's value is or is not contained in\n    // a specified set of values.\n    age in (42, 43, 44)\n    age not in (42, 43, 44)\n\n    // Check whether an array contains all or any of a set of values\n    tags contains all (\"a\", \"b\", \"c\")\n    tags contains any (\"a\", \"b\", \"c\")\n\n    // Check whether an array is empty\n    tags is empty\n\n    // Check whether a field exists & has a non-null value\n    name is defined\n    name is not defined\n\n    // Descend into nested objects\n    dog(age < 7 and name = \"Beethoven\")\n\n    // Descend into nested arrays of objects\n    cities(zip > 10000 and zip < 20000)\n\nA query endpoint usually restricts predicates to only be allowed on a specified subset of a resource\nrepresentation's fields. The documentation of the endpoint will therefore list fields that can be used\nfor constructing predicates.\n\nIf multiple predicates are specified via multiple where query parameters, the individual predicates are\ncombined in a logical conjunction, just as if they had been specified in a single where query parameter\nand combined with and.\n\nNote: The encoding of the predicates is UTF-8 and the predicate must be URL-encoded in the HTTP request.\n",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A query endpoint that supports sorting does so through the sort query parameter. The provided value must be\na valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on\nthe specific query endpoints.\n\nHere are some examples of sort expressions:\n\n    name desc\n    dog.age asc\n\nIf multiple sort expressions are specified via multiple sort parameters, they are combined into a composed\nsort where the results are first sorted by the first expression, followed by equal values being sorted\naccording to the second expression, and so on.\n\nNote: The sorting is case sensitive.\n",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/trait:paging:limit"
          },
          {
            "$ref": "#/parameters/trait:paging:offset"
          },
          {
            "$ref": "#/parameters/trait:paging:withTotal"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DiscountCodePagedQueryResponse"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_orders:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/discount-codes/{ID}": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "ID",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "delete": {
        "description": "Delete a discount-code",
        "parameters": [
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DiscountCode"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_orders:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Get discount-code by ID",
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DiscountCode"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_orders:{projectKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "Update a discount-code",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/DiscountCodeUpdate"
            }
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DiscountCode"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_orders:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/inventory": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "description": "Create a inventory",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/InventoryDraft"
            }
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Inventory"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Query inventories",
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "description": "If queries support ad-hoc filtering of resources through flexible predicates, they do so via the where query\nparameter that accepts a single (possibly compound) predicate to determine whether a specific resource\nrepresentation should be included in the result.\n\nThe structure of predicates and the names of the fields follow the structure and naming of the fields in the\ndocumented response representation of the query results.\n\nExamples of predicates:\n\n    // Compare a field's value to a given value\n    name = \"Peter\"\n    age < 42\n    age > 42\n    age <= 42\n    age >= 42\n    age <> 42\n\n    // Combine any two conditional expressions in a logical conjunction / disjunction\n    name = \"Peter\" and age < 42\n    name = \"Peter\" or age < 42\n\n    // Negate any other conditional expression\n    not (name = \"Peter\" and age < 42)\n\n    // Check whether a field's value is or is not contained in\n    // a specified set of values.\n    age in (42, 43, 44)\n    age not in (42, 43, 44)\n\n    // Check whether an array contains all or any of a set of values\n    tags contains all (\"a\", \"b\", \"c\")\n    tags contains any (\"a\", \"b\", \"c\")\n\n    // Check whether an array is empty\n    tags is empty\n\n    // Check whether a field exists & has a non-null value\n    name is defined\n    name is not defined\n\n    // Descend into nested objects\n    dog(age < 7 and name = \"Beethoven\")\n\n    // Descend into nested arrays of objects\n    cities(zip > 10000 and zip < 20000)\n\nA query endpoint usually restricts predicates to only be allowed on a specified subset of a resource\nrepresentation's fields. The documentation of the endpoint will therefore list fields that can be used\nfor constructing predicates.\n\nIf multiple predicates are specified via multiple where query parameters, the individual predicates are\ncombined in a logical conjunction, just as if they had been specified in a single where query parameter\nand combined with and.\n\nNote: The encoding of the predicates is UTF-8 and the predicate must be URL-encoded in the HTTP request.\n",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A query endpoint that supports sorting does so through the sort query parameter. The provided value must be\na valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on\nthe specific query endpoints.\n\nHere are some examples of sort expressions:\n\n    name desc\n    dog.age asc\n\nIf multiple sort expressions are specified via multiple sort parameters, they are combined into a composed\nsort where the results are first sorted by the first expression, followed by equal values being sorted\naccording to the second expression, and so on.\n\nNote: The sorting is case sensitive.\n",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/trait:paging:limit"
          },
          {
            "$ref": "#/parameters/trait:paging:offset"
          },
          {
            "$ref": "#/parameters/trait:paging:withTotal"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/InventoryPagedQueryResponse"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_products:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/inventory/{ID}": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "ID",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "delete": {
        "description": "Delete a inventory",
        "parameters": [
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Inventory"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Get inventory by ID",
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Inventory"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_products:{projectKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "Update a inventory",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/InventoryUpdate"
            }
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Inventory"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/orders": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "description": "Create a order",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/OrderFromCartDraft"
            }
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Order"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_orders:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Query orders",
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "description": "If queries support ad-hoc filtering of resources through flexible predicates, they do so via the where query\nparameter that accepts a single (possibly compound) predicate to determine whether a specific resource\nrepresentation should be included in the result.\n\nThe structure of predicates and the names of the fields follow the structure and naming of the fields in the\ndocumented response representation of the query results.\n\nExamples of predicates:\n\n    // Compare a field's value to a given value\n    name = \"Peter\"\n    age < 42\n    age > 42\n    age <= 42\n    age >= 42\n    age <> 42\n\n    // Combine any two conditional expressions in a logical conjunction / disjunction\n    name = \"Peter\" and age < 42\n    name = \"Peter\" or age < 42\n\n    // Negate any other conditional expression\n    not (name = \"Peter\" and age < 42)\n\n    // Check whether a field's value is or is not contained in\n    // a specified set of values.\n    age in (42, 43, 44)\n    age not in (42, 43, 44)\n\n    // Check whether an array contains all or any of a set of values\n    tags contains all (\"a\", \"b\", \"c\")\n    tags contains any (\"a\", \"b\", \"c\")\n\n    // Check whether an array is empty\n    tags is empty\n\n    // Check whether a field exists & has a non-null value\n    name is defined\n    name is not defined\n\n    // Descend into nested objects\n    dog(age < 7 and name = \"Beethoven\")\n\n    // Descend into nested arrays of objects\n    cities(zip > 10000 and zip < 20000)\n\nA query endpoint usually restricts predicates to only be allowed on a specified subset of a resource\nrepresentation's fields. The documentation of the endpoint will therefore list fields that can be used\nfor constructing predicates.\n\nIf multiple predicates are specified via multiple where query parameters, the individual predicates are\ncombined in a logical conjunction, just as if they had been specified in a single where query parameter\nand combined with and.\n\nNote: The encoding of the predicates is UTF-8 and the predicate must be URL-encoded in the HTTP request.\n",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A query endpoint that supports sorting does so through the sort query parameter. The provided value must be\na valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on\nthe specific query endpoints.\n\nHere are some examples of sort expressions:\n\n    name desc\n    dog.age asc\n\nIf multiple sort expressions are specified via multiple sort parameters, they are combined into a composed\nsort where the results are first sorted by the first expression, followed by equal values being sorted\naccording to the second expression, and so on.\n\nNote: The sorting is case sensitive.\n",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/trait:paging:limit"
          },
          {
            "$ref": "#/parameters/trait:paging:offset"
          },
          {
            "$ref": "#/parameters/trait:paging:withTotal"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/OrderPagedQueryResponse"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_orders:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/orders/{ID}": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "ID",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "delete": {
        "description": "Delete a order",
        "parameters": [
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Order"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_orders:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Get order by ID",
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Order"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_orders:{projectKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "Update a order",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/OrderUpdate"
            }
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Order"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_orders:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/orders/import": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "description": "projectKey",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "description": "Create an Order by Import",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/OrderImportDraft"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Order"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_orders:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/products": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "description": "Create a Product",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ProductDraft"
            }
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCurrency"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCountry"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCustomerGroup"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceChannel"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Product"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Query Product",
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "description": "If queries support ad-hoc filtering of resources through flexible predicates, they do so via the where query\nparameter that accepts a single (possibly compound) predicate to determine whether a specific resource\nrepresentation should be included in the result.\n\nThe structure of predicates and the names of the fields follow the structure and naming of the fields in the\ndocumented response representation of the query results.\n\nExamples of predicates:\n\n    // Compare a field's value to a given value\n    name = \"Peter\"\n    age < 42\n    age > 42\n    age <= 42\n    age >= 42\n    age <> 42\n\n    // Combine any two conditional expressions in a logical conjunction / disjunction\n    name = \"Peter\" and age < 42\n    name = \"Peter\" or age < 42\n\n    // Negate any other conditional expression\n    not (name = \"Peter\" and age < 42)\n\n    // Check whether a field's value is or is not contained in\n    // a specified set of values.\n    age in (42, 43, 44)\n    age not in (42, 43, 44)\n\n    // Check whether an array contains all or any of a set of values\n    tags contains all (\"a\", \"b\", \"c\")\n    tags contains any (\"a\", \"b\", \"c\")\n\n    // Check whether an array is empty\n    tags is empty\n\n    // Check whether a field exists & has a non-null value\n    name is defined\n    name is not defined\n\n    // Descend into nested objects\n    dog(age < 7 and name = \"Beethoven\")\n\n    // Descend into nested arrays of objects\n    cities(zip > 10000 and zip < 20000)\n\nA query endpoint usually restricts predicates to only be allowed on a specified subset of a resource\nrepresentation's fields. The documentation of the endpoint will therefore list fields that can be used\nfor constructing predicates.\n\nIf multiple predicates are specified via multiple where query parameters, the individual predicates are\ncombined in a logical conjunction, just as if they had been specified in a single where query parameter\nand combined with and.\n\nNote: The encoding of the predicates is UTF-8 and the predicate must be URL-encoded in the HTTP request.\n",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A query endpoint that supports sorting does so through the sort query parameter. The provided value must be\na valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on\nthe specific query endpoints.\n\nHere are some examples of sort expressions:\n\n    name desc\n    dog.age asc\n\nIf multiple sort expressions are specified via multiple sort parameters, they are combined into a composed\nsort where the results are first sorted by the first expression, followed by equal values being sorted\naccording to the second expression, and so on.\n\nNote: The sorting is case sensitive.\n",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/trait:paging:limit"
          },
          {
            "$ref": "#/parameters/trait:paging:offset"
          },
          {
            "$ref": "#/parameters/trait:paging:withTotal"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCurrency"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCountry"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCustomerGroup"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceChannel"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ProductPagedQueryResponse"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_products:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/products/{ID}": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "ID",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "delete": {
        "description": "Delete a Product",
        "parameters": [
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCurrency"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCountry"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCustomerGroup"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceChannel"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Product"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Get Product by ID",
        "parameters": [
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCurrency"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCountry"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCustomerGroup"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceChannel"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Product"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_products:{projectKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "Update a Product",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ProductUpdate"
            }
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCurrency"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCountry"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCustomerGroup"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceChannel"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Product"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/products/{ID}/images": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "description": "projectKey",
          "required": true,
          "type": "string"
        },
        {
          "name": "ID",
          "in": "path",
          "description": "ID",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "description": "Uploads a binary image file to a given product variant. The supported image formats are JPEG, PNG and GIF.",
        "parameters": [
          {
            "name": "filename",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "variant",
            "in": "query",
            "required": false,
            "type": "number"
          },
          {
            "name": "sku",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "staged",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "enum": [
              "image/jpeg",
              "image/png",
              "image/gif"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Product"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/products/key={key}": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "description": "projectKey",
          "required": true,
          "type": "string"
        },
        {
          "name": "key",
          "in": "path",
          "description": "key",
          "required": true,
          "type": "string"
        }
      ],
      "delete": {
        "description": "Delete a Product by key",
        "parameters": [
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCurrency"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCountry"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCustomerGroup"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceChannel"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Product"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "Update a Product by key",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Update"
            }
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCurrency"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCountry"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCustomerGroup"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceChannel"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Product"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Get Product by key",
        "parameters": [
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCurrency"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCountry"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCustomerGroup"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceChannel"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Product"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_products:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/payments": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "description": "Create a payment",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/PaymentDraft"
            }
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Payment"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_payments:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Query payments",
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "description": "If queries support ad-hoc filtering of resources through flexible predicates, they do so via the where query\nparameter that accepts a single (possibly compound) predicate to determine whether a specific resource\nrepresentation should be included in the result.\n\nThe structure of predicates and the names of the fields follow the structure and naming of the fields in the\ndocumented response representation of the query results.\n\nExamples of predicates:\n\n    // Compare a field's value to a given value\n    name = \"Peter\"\n    age < 42\n    age > 42\n    age <= 42\n    age >= 42\n    age <> 42\n\n    // Combine any two conditional expressions in a logical conjunction / disjunction\n    name = \"Peter\" and age < 42\n    name = \"Peter\" or age < 42\n\n    // Negate any other conditional expression\n    not (name = \"Peter\" and age < 42)\n\n    // Check whether a field's value is or is not contained in\n    // a specified set of values.\n    age in (42, 43, 44)\n    age not in (42, 43, 44)\n\n    // Check whether an array contains all or any of a set of values\n    tags contains all (\"a\", \"b\", \"c\")\n    tags contains any (\"a\", \"b\", \"c\")\n\n    // Check whether an array is empty\n    tags is empty\n\n    // Check whether a field exists & has a non-null value\n    name is defined\n    name is not defined\n\n    // Descend into nested objects\n    dog(age < 7 and name = \"Beethoven\")\n\n    // Descend into nested arrays of objects\n    cities(zip > 10000 and zip < 20000)\n\nA query endpoint usually restricts predicates to only be allowed on a specified subset of a resource\nrepresentation's fields. The documentation of the endpoint will therefore list fields that can be used\nfor constructing predicates.\n\nIf multiple predicates are specified via multiple where query parameters, the individual predicates are\ncombined in a logical conjunction, just as if they had been specified in a single where query parameter\nand combined with and.\n\nNote: The encoding of the predicates is UTF-8 and the predicate must be URL-encoded in the HTTP request.\n",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A query endpoint that supports sorting does so through the sort query parameter. The provided value must be\na valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on\nthe specific query endpoints.\n\nHere are some examples of sort expressions:\n\n    name desc\n    dog.age asc\n\nIf multiple sort expressions are specified via multiple sort parameters, they are combined into a composed\nsort where the results are first sorted by the first expression, followed by equal values being sorted\naccording to the second expression, and so on.\n\nNote: The sorting is case sensitive.\n",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/trait:paging:limit"
          },
          {
            "$ref": "#/parameters/trait:paging:offset"
          },
          {
            "$ref": "#/parameters/trait:paging:withTotal"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PaymentPagedQueryResponse"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_payments:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/payments/{ID}": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "ID",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "delete": {
        "description": "Delete a payment",
        "parameters": [
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Payment"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_payments:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Get payment by ID",
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Payment"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_payments:{projectKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "Update a payment",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/PaymentUpdate"
            }
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Payment"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_payments:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/product-discounts": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "description": "Create a product discount",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ProductDiscountDraft"
            }
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ProductDiscount"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Query product discounts",
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "description": "If queries support ad-hoc filtering of resources through flexible predicates, they do so via the where query\nparameter that accepts a single (possibly compound) predicate to determine whether a specific resource\nrepresentation should be included in the result.\n\nThe structure of predicates and the names of the fields follow the structure and naming of the fields in the\ndocumented response representation of the query results.\n\nExamples of predicates:\n\n    // Compare a field's value to a given value\n    name = \"Peter\"\n    age < 42\n    age > 42\n    age <= 42\n    age >= 42\n    age <> 42\n\n    // Combine any two conditional expressions in a logical conjunction / disjunction\n    name = \"Peter\" and age < 42\n    name = \"Peter\" or age < 42\n\n    // Negate any other conditional expression\n    not (name = \"Peter\" and age < 42)\n\n    // Check whether a field's value is or is not contained in\n    // a specified set of values.\n    age in (42, 43, 44)\n    age not in (42, 43, 44)\n\n    // Check whether an array contains all or any of a set of values\n    tags contains all (\"a\", \"b\", \"c\")\n    tags contains any (\"a\", \"b\", \"c\")\n\n    // Check whether an array is empty\n    tags is empty\n\n    // Check whether a field exists & has a non-null value\n    name is defined\n    name is not defined\n\n    // Descend into nested objects\n    dog(age < 7 and name = \"Beethoven\")\n\n    // Descend into nested arrays of objects\n    cities(zip > 10000 and zip < 20000)\n\nA query endpoint usually restricts predicates to only be allowed on a specified subset of a resource\nrepresentation's fields. The documentation of the endpoint will therefore list fields that can be used\nfor constructing predicates.\n\nIf multiple predicates are specified via multiple where query parameters, the individual predicates are\ncombined in a logical conjunction, just as if they had been specified in a single where query parameter\nand combined with and.\n\nNote: The encoding of the predicates is UTF-8 and the predicate must be URL-encoded in the HTTP request.\n",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A query endpoint that supports sorting does so through the sort query parameter. The provided value must be\na valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on\nthe specific query endpoints.\n\nHere are some examples of sort expressions:\n\n    name desc\n    dog.age asc\n\nIf multiple sort expressions are specified via multiple sort parameters, they are combined into a composed\nsort where the results are first sorted by the first expression, followed by equal values being sorted\naccording to the second expression, and so on.\n\nNote: The sorting is case sensitive.\n",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/trait:paging:limit"
          },
          {
            "$ref": "#/parameters/trait:paging:offset"
          },
          {
            "$ref": "#/parameters/trait:paging:withTotal"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ProductDiscountPagedQueryResponse"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_products:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/product-discounts/{ID}": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "ID",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "delete": {
        "description": "Delete a product discount",
        "parameters": [
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ProductDiscount"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Get product discount by ID",
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ProductDiscount"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_products:{projectKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "Update a product discount",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ProductDiscountUpdate"
            }
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ProductDiscount"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/product-types": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "description": "Create a Product Type",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ProductTypeDraft"
            }
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ProductType"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Query Product Types",
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "description": "If queries support ad-hoc filtering of resources through flexible predicates, they do so via the where query\nparameter that accepts a single (possibly compound) predicate to determine whether a specific resource\nrepresentation should be included in the result.\n\nThe structure of predicates and the names of the fields follow the structure and naming of the fields in the\ndocumented response representation of the query results.\n\nExamples of predicates:\n\n    // Compare a field's value to a given value\n    name = \"Peter\"\n    age < 42\n    age > 42\n    age <= 42\n    age >= 42\n    age <> 42\n\n    // Combine any two conditional expressions in a logical conjunction / disjunction\n    name = \"Peter\" and age < 42\n    name = \"Peter\" or age < 42\n\n    // Negate any other conditional expression\n    not (name = \"Peter\" and age < 42)\n\n    // Check whether a field's value is or is not contained in\n    // a specified set of values.\n    age in (42, 43, 44)\n    age not in (42, 43, 44)\n\n    // Check whether an array contains all or any of a set of values\n    tags contains all (\"a\", \"b\", \"c\")\n    tags contains any (\"a\", \"b\", \"c\")\n\n    // Check whether an array is empty\n    tags is empty\n\n    // Check whether a field exists & has a non-null value\n    name is defined\n    name is not defined\n\n    // Descend into nested objects\n    dog(age < 7 and name = \"Beethoven\")\n\n    // Descend into nested arrays of objects\n    cities(zip > 10000 and zip < 20000)\n\nA query endpoint usually restricts predicates to only be allowed on a specified subset of a resource\nrepresentation's fields. The documentation of the endpoint will therefore list fields that can be used\nfor constructing predicates.\n\nIf multiple predicates are specified via multiple where query parameters, the individual predicates are\ncombined in a logical conjunction, just as if they had been specified in a single where query parameter\nand combined with and.\n\nNote: The encoding of the predicates is UTF-8 and the predicate must be URL-encoded in the HTTP request.\n",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A query endpoint that supports sorting does so through the sort query parameter. The provided value must be\na valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on\nthe specific query endpoints.\n\nHere are some examples of sort expressions:\n\n    name desc\n    dog.age asc\n\nIf multiple sort expressions are specified via multiple sort parameters, they are combined into a composed\nsort where the results are first sorted by the first expression, followed by equal values being sorted\naccording to the second expression, and so on.\n\nNote: The sorting is case sensitive.\n",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/trait:paging:limit"
          },
          {
            "$ref": "#/parameters/trait:paging:offset"
          },
          {
            "$ref": "#/parameters/trait:paging:withTotal"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ProductTypePagedQueryResponse"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_products:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/product-types/key={key}": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "key",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "delete": {
        "description": "Delete a Product Type by key",
        "parameters": [
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ProductType"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Get Product Type by key",
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ProductType"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_products:{projectKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "Update a Product Type by key",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ProductTypeUpdate"
            }
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ProductType"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/product-types/{ID}": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "ID",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "delete": {
        "description": "Delete a Product Type",
        "parameters": [
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ProductType"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Get Product Type by ID",
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ProductType"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_products:{projectKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "Update a Product Type",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ProductTypeUpdate"
            }
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ProductType"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/shipping-methods": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "description": "Create a shipping-method",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ShippingMethodDraft"
            }
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ShippingMethod"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_orders:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Query shipping-methods",
        "parameters": [
          {
            "name": "cartId",
            "in": "query",
            "description": "Get ShippingMethods for a Cart",
            "required": false,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Get ShippingMethods for a Location",
            "required": false,
            "type": "string"
          },
          {
            "name": "state",
            "in": "query",
            "description": "Get ShippingMethods for a Location",
            "required": false,
            "type": "string"
          },
          {
            "name": "currency",
            "in": "query",
            "description": "Get ShippingMethods for a Location",
            "required": false,
            "type": "string"
          },
          {
            "name": "where",
            "in": "query",
            "description": "If queries support ad-hoc filtering of resources through flexible predicates, they do so via the where query\nparameter that accepts a single (possibly compound) predicate to determine whether a specific resource\nrepresentation should be included in the result.\n\nThe structure of predicates and the names of the fields follow the structure and naming of the fields in the\ndocumented response representation of the query results.\n\nExamples of predicates:\n\n    // Compare a field's value to a given value\n    name = \"Peter\"\n    age < 42\n    age > 42\n    age <= 42\n    age >= 42\n    age <> 42\n\n    // Combine any two conditional expressions in a logical conjunction / disjunction\n    name = \"Peter\" and age < 42\n    name = \"Peter\" or age < 42\n\n    // Negate any other conditional expression\n    not (name = \"Peter\" and age < 42)\n\n    // Check whether a field's value is or is not contained in\n    // a specified set of values.\n    age in (42, 43, 44)\n    age not in (42, 43, 44)\n\n    // Check whether an array contains all or any of a set of values\n    tags contains all (\"a\", \"b\", \"c\")\n    tags contains any (\"a\", \"b\", \"c\")\n\n    // Check whether an array is empty\n    tags is empty\n\n    // Check whether a field exists & has a non-null value\n    name is defined\n    name is not defined\n\n    // Descend into nested objects\n    dog(age < 7 and name = \"Beethoven\")\n\n    // Descend into nested arrays of objects\n    cities(zip > 10000 and zip < 20000)\n\nA query endpoint usually restricts predicates to only be allowed on a specified subset of a resource\nrepresentation's fields. The documentation of the endpoint will therefore list fields that can be used\nfor constructing predicates.\n\nIf multiple predicates are specified via multiple where query parameters, the individual predicates are\ncombined in a logical conjunction, just as if they had been specified in a single where query parameter\nand combined with and.\n\nNote: The encoding of the predicates is UTF-8 and the predicate must be URL-encoded in the HTTP request.\n",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A query endpoint that supports sorting does so through the sort query parameter. The provided value must be\na valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on\nthe specific query endpoints.\n\nHere are some examples of sort expressions:\n\n    name desc\n    dog.age asc\n\nIf multiple sort expressions are specified via multiple sort parameters, they are combined into a composed\nsort where the results are first sorted by the first expression, followed by equal values being sorted\naccording to the second expression, and so on.\n\nNote: The sorting is case sensitive.\n",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/trait:paging:limit"
          },
          {
            "$ref": "#/parameters/trait:paging:offset"
          },
          {
            "$ref": "#/parameters/trait:paging:withTotal"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ShippingMethodPagedQueryResponse"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_orders:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/shipping-methods/{ID}": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "ID",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "delete": {
        "description": "Delete a shipping-method",
        "parameters": [
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ShippingMethod"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_orders:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Get shipping-method by ID",
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ShippingMethod"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_orders:{projectKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "Update a shipping-method",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ShippingMethodUpdate"
            }
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ShippingMethod"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_orders:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/reviews": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "description": "Create a review",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ReviewDraft"
            }
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Review"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Query reviews",
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "description": "If queries support ad-hoc filtering of resources through flexible predicates, they do so via the where query\nparameter that accepts a single (possibly compound) predicate to determine whether a specific resource\nrepresentation should be included in the result.\n\nThe structure of predicates and the names of the fields follow the structure and naming of the fields in the\ndocumented response representation of the query results.\n\nExamples of predicates:\n\n    // Compare a field's value to a given value\n    name = \"Peter\"\n    age < 42\n    age > 42\n    age <= 42\n    age >= 42\n    age <> 42\n\n    // Combine any two conditional expressions in a logical conjunction / disjunction\n    name = \"Peter\" and age < 42\n    name = \"Peter\" or age < 42\n\n    // Negate any other conditional expression\n    not (name = \"Peter\" and age < 42)\n\n    // Check whether a field's value is or is not contained in\n    // a specified set of values.\n    age in (42, 43, 44)\n    age not in (42, 43, 44)\n\n    // Check whether an array contains all or any of a set of values\n    tags contains all (\"a\", \"b\", \"c\")\n    tags contains any (\"a\", \"b\", \"c\")\n\n    // Check whether an array is empty\n    tags is empty\n\n    // Check whether a field exists & has a non-null value\n    name is defined\n    name is not defined\n\n    // Descend into nested objects\n    dog(age < 7 and name = \"Beethoven\")\n\n    // Descend into nested arrays of objects\n    cities(zip > 10000 and zip < 20000)\n\nA query endpoint usually restricts predicates to only be allowed on a specified subset of a resource\nrepresentation's fields. The documentation of the endpoint will therefore list fields that can be used\nfor constructing predicates.\n\nIf multiple predicates are specified via multiple where query parameters, the individual predicates are\ncombined in a logical conjunction, just as if they had been specified in a single where query parameter\nand combined with and.\n\nNote: The encoding of the predicates is UTF-8 and the predicate must be URL-encoded in the HTTP request.\n",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A query endpoint that supports sorting does so through the sort query parameter. The provided value must be\na valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on\nthe specific query endpoints.\n\nHere are some examples of sort expressions:\n\n    name desc\n    dog.age asc\n\nIf multiple sort expressions are specified via multiple sort parameters, they are combined into a composed\nsort where the results are first sorted by the first expression, followed by equal values being sorted\naccording to the second expression, and so on.\n\nNote: The sorting is case sensitive.\n",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/trait:paging:limit"
          },
          {
            "$ref": "#/parameters/trait:paging:offset"
          },
          {
            "$ref": "#/parameters/trait:paging:withTotal"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ReviewPagedQueryResponse"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_products:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/reviews/{ID}": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "ID",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "delete": {
        "description": "Delete a review",
        "parameters": [
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Review"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Get review by ID",
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Review"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_products:{projectKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "Update a review",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ReviewUpdate"
            }
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Review"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/reviews/key={key}": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "description": "projectKey",
          "required": true,
          "type": "string"
        },
        {
          "name": "key",
          "in": "path",
          "description": "key",
          "required": true,
          "type": "string"
        }
      ],
      "delete": {
        "description": "Delete a review by key",
        "parameters": [
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Review"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "Update a review by key",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Update"
            }
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Review"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Get review by key",
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Review"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_products:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/shopping-lists": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "description": "Create a shopping-list",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ShoppingListDraft"
            }
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ShoppingList"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_shopping-lists:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Query shopping-lists",
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "description": "If queries support ad-hoc filtering of resources through flexible predicates, they do so via the where query\nparameter that accepts a single (possibly compound) predicate to determine whether a specific resource\nrepresentation should be included in the result.\n\nThe structure of predicates and the names of the fields follow the structure and naming of the fields in the\ndocumented response representation of the query results.\n\nExamples of predicates:\n\n    // Compare a field's value to a given value\n    name = \"Peter\"\n    age < 42\n    age > 42\n    age <= 42\n    age >= 42\n    age <> 42\n\n    // Combine any two conditional expressions in a logical conjunction / disjunction\n    name = \"Peter\" and age < 42\n    name = \"Peter\" or age < 42\n\n    // Negate any other conditional expression\n    not (name = \"Peter\" and age < 42)\n\n    // Check whether a field's value is or is not contained in\n    // a specified set of values.\n    age in (42, 43, 44)\n    age not in (42, 43, 44)\n\n    // Check whether an array contains all or any of a set of values\n    tags contains all (\"a\", \"b\", \"c\")\n    tags contains any (\"a\", \"b\", \"c\")\n\n    // Check whether an array is empty\n    tags is empty\n\n    // Check whether a field exists & has a non-null value\n    name is defined\n    name is not defined\n\n    // Descend into nested objects\n    dog(age < 7 and name = \"Beethoven\")\n\n    // Descend into nested arrays of objects\n    cities(zip > 10000 and zip < 20000)\n\nA query endpoint usually restricts predicates to only be allowed on a specified subset of a resource\nrepresentation's fields. The documentation of the endpoint will therefore list fields that can be used\nfor constructing predicates.\n\nIf multiple predicates are specified via multiple where query parameters, the individual predicates are\ncombined in a logical conjunction, just as if they had been specified in a single where query parameter\nand combined with and.\n\nNote: The encoding of the predicates is UTF-8 and the predicate must be URL-encoded in the HTTP request.\n",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A query endpoint that supports sorting does so through the sort query parameter. The provided value must be\na valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on\nthe specific query endpoints.\n\nHere are some examples of sort expressions:\n\n    name desc\n    dog.age asc\n\nIf multiple sort expressions are specified via multiple sort parameters, they are combined into a composed\nsort where the results are first sorted by the first expression, followed by equal values being sorted\naccording to the second expression, and so on.\n\nNote: The sorting is case sensitive.\n",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/trait:paging:limit"
          },
          {
            "$ref": "#/parameters/trait:paging:offset"
          },
          {
            "$ref": "#/parameters/trait:paging:withTotal"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ShoppingListPagedQueryResponse"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_shopping-lists:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/shopping-lists/{ID}": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "ID",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "delete": {
        "description": "Delete a shopping-list",
        "parameters": [
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ShoppingList"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_shopping_lists:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Get shopping-list by ID",
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ShoppingList"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_shopping_lists:{projectKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "Update a shopping-list",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ShoppingListUpdate"
            }
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ShoppingList"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_shopping_lists:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/shopping-lists/key={key}": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "description": "projectKey",
          "required": true,
          "type": "string"
        },
        {
          "name": "key",
          "in": "path",
          "description": "key",
          "required": true,
          "type": "string"
        }
      ],
      "delete": {
        "description": "Delete a shopping-list by key",
        "parameters": [
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ShoppingList"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_shopping_lists:{projectKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "Update a shopping-list by key",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Update"
            }
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ShoppingList"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_shopping_lists:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Get shopping-list by key",
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ShoppingList"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_shopping_lists:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/states": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "description": "Create a state",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/StateDraft"
            }
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/State"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_orders:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Query states",
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "description": "If queries support ad-hoc filtering of resources through flexible predicates, they do so via the where query\nparameter that accepts a single (possibly compound) predicate to determine whether a specific resource\nrepresentation should be included in the result.\n\nThe structure of predicates and the names of the fields follow the structure and naming of the fields in the\ndocumented response representation of the query results.\n\nExamples of predicates:\n\n    // Compare a field's value to a given value\n    name = \"Peter\"\n    age < 42\n    age > 42\n    age <= 42\n    age >= 42\n    age <> 42\n\n    // Combine any two conditional expressions in a logical conjunction / disjunction\n    name = \"Peter\" and age < 42\n    name = \"Peter\" or age < 42\n\n    // Negate any other conditional expression\n    not (name = \"Peter\" and age < 42)\n\n    // Check whether a field's value is or is not contained in\n    // a specified set of values.\n    age in (42, 43, 44)\n    age not in (42, 43, 44)\n\n    // Check whether an array contains all or any of a set of values\n    tags contains all (\"a\", \"b\", \"c\")\n    tags contains any (\"a\", \"b\", \"c\")\n\n    // Check whether an array is empty\n    tags is empty\n\n    // Check whether a field exists & has a non-null value\n    name is defined\n    name is not defined\n\n    // Descend into nested objects\n    dog(age < 7 and name = \"Beethoven\")\n\n    // Descend into nested arrays of objects\n    cities(zip > 10000 and zip < 20000)\n\nA query endpoint usually restricts predicates to only be allowed on a specified subset of a resource\nrepresentation's fields. The documentation of the endpoint will therefore list fields that can be used\nfor constructing predicates.\n\nIf multiple predicates are specified via multiple where query parameters, the individual predicates are\ncombined in a logical conjunction, just as if they had been specified in a single where query parameter\nand combined with and.\n\nNote: The encoding of the predicates is UTF-8 and the predicate must be URL-encoded in the HTTP request.\n",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A query endpoint that supports sorting does so through the sort query parameter. The provided value must be\na valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on\nthe specific query endpoints.\n\nHere are some examples of sort expressions:\n\n    name desc\n    dog.age asc\n\nIf multiple sort expressions are specified via multiple sort parameters, they are combined into a composed\nsort where the results are first sorted by the first expression, followed by equal values being sorted\naccording to the second expression, and so on.\n\nNote: The sorting is case sensitive.\n",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/trait:paging:limit"
          },
          {
            "$ref": "#/parameters/trait:paging:offset"
          },
          {
            "$ref": "#/parameters/trait:paging:withTotal"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/StatePagedQueryResponse"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_orders:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/states/{ID}": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "ID",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "delete": {
        "description": "Delete a state",
        "parameters": [
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/State"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_orders:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Get state by ID",
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/State"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_orders:{projectKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "Update a state",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/StateUpdate"
            }
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/State"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_orders:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/subscriptions": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "description": "Create a subscription",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SubscriptionDraft"
            }
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Subscription"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_subscriptions:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Query subscriptions",
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "description": "If queries support ad-hoc filtering of resources through flexible predicates, they do so via the where query\nparameter that accepts a single (possibly compound) predicate to determine whether a specific resource\nrepresentation should be included in the result.\n\nThe structure of predicates and the names of the fields follow the structure and naming of the fields in the\ndocumented response representation of the query results.\n\nExamples of predicates:\n\n    // Compare a field's value to a given value\n    name = \"Peter\"\n    age < 42\n    age > 42\n    age <= 42\n    age >= 42\n    age <> 42\n\n    // Combine any two conditional expressions in a logical conjunction / disjunction\n    name = \"Peter\" and age < 42\n    name = \"Peter\" or age < 42\n\n    // Negate any other conditional expression\n    not (name = \"Peter\" and age < 42)\n\n    // Check whether a field's value is or is not contained in\n    // a specified set of values.\n    age in (42, 43, 44)\n    age not in (42, 43, 44)\n\n    // Check whether an array contains all or any of a set of values\n    tags contains all (\"a\", \"b\", \"c\")\n    tags contains any (\"a\", \"b\", \"c\")\n\n    // Check whether an array is empty\n    tags is empty\n\n    // Check whether a field exists & has a non-null value\n    name is defined\n    name is not defined\n\n    // Descend into nested objects\n    dog(age < 7 and name = \"Beethoven\")\n\n    // Descend into nested arrays of objects\n    cities(zip > 10000 and zip < 20000)\n\nA query endpoint usually restricts predicates to only be allowed on a specified subset of a resource\nrepresentation's fields. The documentation of the endpoint will therefore list fields that can be used\nfor constructing predicates.\n\nIf multiple predicates are specified via multiple where query parameters, the individual predicates are\ncombined in a logical conjunction, just as if they had been specified in a single where query parameter\nand combined with and.\n\nNote: The encoding of the predicates is UTF-8 and the predicate must be URL-encoded in the HTTP request.\n",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A query endpoint that supports sorting does so through the sort query parameter. The provided value must be\na valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on\nthe specific query endpoints.\n\nHere are some examples of sort expressions:\n\n    name desc\n    dog.age asc\n\nIf multiple sort expressions are specified via multiple sort parameters, they are combined into a composed\nsort where the results are first sorted by the first expression, followed by equal values being sorted\naccording to the second expression, and so on.\n\nNote: The sorting is case sensitive.\n",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/trait:paging:limit"
          },
          {
            "$ref": "#/parameters/trait:paging:offset"
          },
          {
            "$ref": "#/parameters/trait:paging:withTotal"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SubscriptionPagedQueryResponse"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_subscriptions:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/subscriptions/{ID}": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "ID",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "delete": {
        "description": "Delete a subscription",
        "parameters": [
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Subscription"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_subscriptions:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Get subscription by ID",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Subscription"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_subscriptions:{projectKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "Update a subscription",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SubscriptionUpdate"
            }
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Subscription"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_subscriptions:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/subscriptions/key={key}": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "description": "projectKey",
          "required": true,
          "type": "string"
        },
        {
          "name": "key",
          "in": "path",
          "description": "key",
          "required": true,
          "type": "string"
        }
      ],
      "delete": {
        "description": "Delete a subscription by key",
        "parameters": [
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Subscription"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_subscriptions:{projectKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "Update a subscription by key",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Update"
            }
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Subscription"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_subscriptions:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Get subscription by key",
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Subscription"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_subscriptions:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/tax-categories": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "description": "Create a tax category",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/TaxCategoryDraft"
            }
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/TaxCategory"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Query tax categories",
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "description": "If queries support ad-hoc filtering of resources through flexible predicates, they do so via the where query\nparameter that accepts a single (possibly compound) predicate to determine whether a specific resource\nrepresentation should be included in the result.\n\nThe structure of predicates and the names of the fields follow the structure and naming of the fields in the\ndocumented response representation of the query results.\n\nExamples of predicates:\n\n    // Compare a field's value to a given value\n    name = \"Peter\"\n    age < 42\n    age > 42\n    age <= 42\n    age >= 42\n    age <> 42\n\n    // Combine any two conditional expressions in a logical conjunction / disjunction\n    name = \"Peter\" and age < 42\n    name = \"Peter\" or age < 42\n\n    // Negate any other conditional expression\n    not (name = \"Peter\" and age < 42)\n\n    // Check whether a field's value is or is not contained in\n    // a specified set of values.\n    age in (42, 43, 44)\n    age not in (42, 43, 44)\n\n    // Check whether an array contains all or any of a set of values\n    tags contains all (\"a\", \"b\", \"c\")\n    tags contains any (\"a\", \"b\", \"c\")\n\n    // Check whether an array is empty\n    tags is empty\n\n    // Check whether a field exists & has a non-null value\n    name is defined\n    name is not defined\n\n    // Descend into nested objects\n    dog(age < 7 and name = \"Beethoven\")\n\n    // Descend into nested arrays of objects\n    cities(zip > 10000 and zip < 20000)\n\nA query endpoint usually restricts predicates to only be allowed on a specified subset of a resource\nrepresentation's fields. The documentation of the endpoint will therefore list fields that can be used\nfor constructing predicates.\n\nIf multiple predicates are specified via multiple where query parameters, the individual predicates are\ncombined in a logical conjunction, just as if they had been specified in a single where query parameter\nand combined with and.\n\nNote: The encoding of the predicates is UTF-8 and the predicate must be URL-encoded in the HTTP request.\n",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A query endpoint that supports sorting does so through the sort query parameter. The provided value must be\na valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on\nthe specific query endpoints.\n\nHere are some examples of sort expressions:\n\n    name desc\n    dog.age asc\n\nIf multiple sort expressions are specified via multiple sort parameters, they are combined into a composed\nsort where the results are first sorted by the first expression, followed by equal values being sorted\naccording to the second expression, and so on.\n\nNote: The sorting is case sensitive.\n",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/trait:paging:limit"
          },
          {
            "$ref": "#/parameters/trait:paging:offset"
          },
          {
            "$ref": "#/parameters/trait:paging:withTotal"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/TaxCategoryPagedQueryResponse"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_products:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/tax-categories/{ID}": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "ID",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "delete": {
        "description": "Delete a Tax Category",
        "parameters": [
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/TaxCategory"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Get Tax Category by ID",
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/TaxCategory"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_products:{projectKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "Update a Tax Category",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/TaxCategoryUpdate"
            }
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/TaxCategory"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/types": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "description": "Create a type",
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_types:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Query types",
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "description": "If queries support ad-hoc filtering of resources through flexible predicates, they do so via the where query\nparameter that accepts a single (possibly compound) predicate to determine whether a specific resource\nrepresentation should be included in the result.\n\nThe structure of predicates and the names of the fields follow the structure and naming of the fields in the\ndocumented response representation of the query results.\n\nExamples of predicates:\n\n    // Compare a field's value to a given value\n    name = \"Peter\"\n    age < 42\n    age > 42\n    age <= 42\n    age >= 42\n    age <> 42\n\n    // Combine any two conditional expressions in a logical conjunction / disjunction\n    name = \"Peter\" and age < 42\n    name = \"Peter\" or age < 42\n\n    // Negate any other conditional expression\n    not (name = \"Peter\" and age < 42)\n\n    // Check whether a field's value is or is not contained in\n    // a specified set of values.\n    age in (42, 43, 44)\n    age not in (42, 43, 44)\n\n    // Check whether an array contains all or any of a set of values\n    tags contains all (\"a\", \"b\", \"c\")\n    tags contains any (\"a\", \"b\", \"c\")\n\n    // Check whether an array is empty\n    tags is empty\n\n    // Check whether a field exists & has a non-null value\n    name is defined\n    name is not defined\n\n    // Descend into nested objects\n    dog(age < 7 and name = \"Beethoven\")\n\n    // Descend into nested arrays of objects\n    cities(zip > 10000 and zip < 20000)\n\nA query endpoint usually restricts predicates to only be allowed on a specified subset of a resource\nrepresentation's fields. The documentation of the endpoint will therefore list fields that can be used\nfor constructing predicates.\n\nIf multiple predicates are specified via multiple where query parameters, the individual predicates are\ncombined in a logical conjunction, just as if they had been specified in a single where query parameter\nand combined with and.\n\nNote: The encoding of the predicates is UTF-8 and the predicate must be URL-encoded in the HTTP request.\n",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A query endpoint that supports sorting does so through the sort query parameter. The provided value must be\na valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on\nthe specific query endpoints.\n\nHere are some examples of sort expressions:\n\n    name desc\n    dog.age asc\n\nIf multiple sort expressions are specified via multiple sort parameters, they are combined into a composed\nsort where the results are first sorted by the first expression, followed by equal values being sorted\naccording to the second expression, and so on.\n\nNote: The sorting is case sensitive.\n",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/trait:paging:limit"
          },
          {
            "$ref": "#/parameters/trait:paging:offset"
          },
          {
            "$ref": "#/parameters/trait:paging:withTotal"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_types:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/types/{ID}": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "ID",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "delete": {
        "description": "Delete a type",
        "parameters": [
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_types:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Get type by ID",
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_types:{projectKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "Update a type",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/TypeUpdate"
            }
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_types:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/types/key={key}": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "description": "projectKey",
          "required": true,
          "type": "string"
        },
        {
          "name": "key",
          "in": "path",
          "description": "key",
          "required": true,
          "type": "string"
        }
      ],
      "delete": {
        "description": "Delete a type by key",
        "parameters": [
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_types:{projectKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "Update Type by Key",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Update"
            }
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_types:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Get type by key",
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_types:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/zones": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "description": "Create a zone",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ZoneDraft"
            }
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Zone"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_orders:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Query zones",
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "description": "If queries support ad-hoc filtering of resources through flexible predicates, they do so via the where query\nparameter that accepts a single (possibly compound) predicate to determine whether a specific resource\nrepresentation should be included in the result.\n\nThe structure of predicates and the names of the fields follow the structure and naming of the fields in the\ndocumented response representation of the query results.\n\nExamples of predicates:\n\n    // Compare a field's value to a given value\n    name = \"Peter\"\n    age < 42\n    age > 42\n    age <= 42\n    age >= 42\n    age <> 42\n\n    // Combine any two conditional expressions in a logical conjunction / disjunction\n    name = \"Peter\" and age < 42\n    name = \"Peter\" or age < 42\n\n    // Negate any other conditional expression\n    not (name = \"Peter\" and age < 42)\n\n    // Check whether a field's value is or is not contained in\n    // a specified set of values.\n    age in (42, 43, 44)\n    age not in (42, 43, 44)\n\n    // Check whether an array contains all or any of a set of values\n    tags contains all (\"a\", \"b\", \"c\")\n    tags contains any (\"a\", \"b\", \"c\")\n\n    // Check whether an array is empty\n    tags is empty\n\n    // Check whether a field exists & has a non-null value\n    name is defined\n    name is not defined\n\n    // Descend into nested objects\n    dog(age < 7 and name = \"Beethoven\")\n\n    // Descend into nested arrays of objects\n    cities(zip > 10000 and zip < 20000)\n\nA query endpoint usually restricts predicates to only be allowed on a specified subset of a resource\nrepresentation's fields. The documentation of the endpoint will therefore list fields that can be used\nfor constructing predicates.\n\nIf multiple predicates are specified via multiple where query parameters, the individual predicates are\ncombined in a logical conjunction, just as if they had been specified in a single where query parameter\nand combined with and.\n\nNote: The encoding of the predicates is UTF-8 and the predicate must be URL-encoded in the HTTP request.\n",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A query endpoint that supports sorting does so through the sort query parameter. The provided value must be\na valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on\nthe specific query endpoints.\n\nHere are some examples of sort expressions:\n\n    name desc\n    dog.age asc\n\nIf multiple sort expressions are specified via multiple sort parameters, they are combined into a composed\nsort where the results are first sorted by the first expression, followed by equal values being sorted\naccording to the second expression, and so on.\n\nNote: The sorting is case sensitive.\n",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/trait:paging:limit"
          },
          {
            "$ref": "#/parameters/trait:paging:offset"
          },
          {
            "$ref": "#/parameters/trait:paging:withTotal"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ZonePagedQueryResponse"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_orders:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/zones/{ID}": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "ID",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "delete": {
        "description": "Delete a zone",
        "parameters": [
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Zone"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_orders:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Get zone by ID",
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Zone"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_orders:{projectKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "Update a zone",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ZoneUpdate"
            }
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Zone"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_orders:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/channels": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "description": "projectKey",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "description": "Create a channel",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ChannelDraft"
            }
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Channel"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Query channels",
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "description": "If queries support ad-hoc filtering of resources through flexible predicates, they do so via the where query\nparameter that accepts a single (possibly compound) predicate to determine whether a specific resource\nrepresentation should be included in the result.\n\nThe structure of predicates and the names of the fields follow the structure and naming of the fields in the\ndocumented response representation of the query results.\n\nExamples of predicates:\n\n    // Compare a field's value to a given value\n    name = \"Peter\"\n    age < 42\n    age > 42\n    age <= 42\n    age >= 42\n    age <> 42\n\n    // Combine any two conditional expressions in a logical conjunction / disjunction\n    name = \"Peter\" and age < 42\n    name = \"Peter\" or age < 42\n\n    // Negate any other conditional expression\n    not (name = \"Peter\" and age < 42)\n\n    // Check whether a field's value is or is not contained in\n    // a specified set of values.\n    age in (42, 43, 44)\n    age not in (42, 43, 44)\n\n    // Check whether an array contains all or any of a set of values\n    tags contains all (\"a\", \"b\", \"c\")\n    tags contains any (\"a\", \"b\", \"c\")\n\n    // Check whether an array is empty\n    tags is empty\n\n    // Check whether a field exists & has a non-null value\n    name is defined\n    name is not defined\n\n    // Descend into nested objects\n    dog(age < 7 and name = \"Beethoven\")\n\n    // Descend into nested arrays of objects\n    cities(zip > 10000 and zip < 20000)\n\nA query endpoint usually restricts predicates to only be allowed on a specified subset of a resource\nrepresentation's fields. The documentation of the endpoint will therefore list fields that can be used\nfor constructing predicates.\n\nIf multiple predicates are specified via multiple where query parameters, the individual predicates are\ncombined in a logical conjunction, just as if they had been specified in a single where query parameter\nand combined with and.\n\nNote: The encoding of the predicates is UTF-8 and the predicate must be URL-encoded in the HTTP request.\n",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A query endpoint that supports sorting does so through the sort query parameter. The provided value must be\na valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on\nthe specific query endpoints.\n\nHere are some examples of sort expressions:\n\n    name desc\n    dog.age asc\n\nIf multiple sort expressions are specified via multiple sort parameters, they are combined into a composed\nsort where the results are first sorted by the first expression, followed by equal values being sorted\naccording to the second expression, and so on.\n\nNote: The sorting is case sensitive.\n",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/trait:paging:limit"
          },
          {
            "$ref": "#/parameters/trait:paging:offset"
          },
          {
            "$ref": "#/parameters/trait:paging:withTotal"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_products:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/channels/{ID}": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "description": "projectKey",
          "required": true,
          "type": "string"
        },
        {
          "name": "ID",
          "in": "path",
          "description": "ID",
          "required": true,
          "type": "string"
        }
      ],
      "delete": {
        "description": "Delete a channel",
        "parameters": [
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Channel"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "Update a channel",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Update"
            }
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Channel"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Get channel by ID",
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Channel"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_products:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/customers": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "description": "projectKey",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "description": "Create a Customer",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CustomerDraft"
            }
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CustomerSignInResult"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_customers:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Query Customers",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "where",
            "in": "query",
            "description": "If queries support ad-hoc filtering of resources through flexible predicates, they do so via the where query\nparameter that accepts a single (possibly compound) predicate to determine whether a specific resource\nrepresentation should be included in the result.\n\nThe structure of predicates and the names of the fields follow the structure and naming of the fields in the\ndocumented response representation of the query results.\n\nExamples of predicates:\n\n    // Compare a field's value to a given value\n    name = \"Peter\"\n    age < 42\n    age > 42\n    age <= 42\n    age >= 42\n    age <> 42\n\n    // Combine any two conditional expressions in a logical conjunction / disjunction\n    name = \"Peter\" and age < 42\n    name = \"Peter\" or age < 42\n\n    // Negate any other conditional expression\n    not (name = \"Peter\" and age < 42)\n\n    // Check whether a field's value is or is not contained in\n    // a specified set of values.\n    age in (42, 43, 44)\n    age not in (42, 43, 44)\n\n    // Check whether an array contains all or any of a set of values\n    tags contains all (\"a\", \"b\", \"c\")\n    tags contains any (\"a\", \"b\", \"c\")\n\n    // Check whether an array is empty\n    tags is empty\n\n    // Check whether a field exists & has a non-null value\n    name is defined\n    name is not defined\n\n    // Descend into nested objects\n    dog(age < 7 and name = \"Beethoven\")\n\n    // Descend into nested arrays of objects\n    cities(zip > 10000 and zip < 20000)\n\nA query endpoint usually restricts predicates to only be allowed on a specified subset of a resource\nrepresentation's fields. The documentation of the endpoint will therefore list fields that can be used\nfor constructing predicates.\n\nIf multiple predicates are specified via multiple where query parameters, the individual predicates are\ncombined in a logical conjunction, just as if they had been specified in a single where query parameter\nand combined with and.\n\nNote: The encoding of the predicates is UTF-8 and the predicate must be URL-encoded in the HTTP request.\n",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A query endpoint that supports sorting does so through the sort query parameter. The provided value must be\na valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on\nthe specific query endpoints.\n\nHere are some examples of sort expressions:\n\n    name desc\n    dog.age asc\n\nIf multiple sort expressions are specified via multiple sort parameters, they are combined into a composed\nsort where the results are first sorted by the first expression, followed by equal values being sorted\naccording to the second expression, and so on.\n\nNote: The sorting is case sensitive.\n",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/trait:paging:limit"
          },
          {
            "$ref": "#/parameters/trait:paging:offset"
          },
          {
            "$ref": "#/parameters/trait:paging:withTotal"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_customers:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/customers/email-token": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "description": "projectKey",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "description": "Create a Token for verifying the Customer's Email",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CustomerCreateEmailToken"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CustomerToken"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_customers:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/customers/email": {},
    "/{projectKey}/customers/email/confirm": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "description": "projectKey",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "description": "Verifies customer's email using a token.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CustomerEmailVerify"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The email was verified.",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_customers:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/customers/password": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "description": "projectKey",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "description": "Change a customers password",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CustomerChangePassword"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Customer"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_customers:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/customers/password/reset": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "description": "projectKey",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "description": "Set a new password using a token.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CustomerResetPassword"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Customer"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_customers:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/customers/password-token": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "description": "projectKey",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "description": "The token value is used to reset the password of the customer with the given email. The token is valid only for 10 minutes.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CustomerCreatePasswordResetToken"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CustomerToken"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_customers:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/customers/{ID}": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "description": "projectKey",
          "required": true,
          "type": "string"
        },
        {
          "name": "ID",
          "in": "path",
          "description": "ID",
          "required": true,
          "type": "string"
        }
      ],
      "delete": {
        "description": "Delete a Customer",
        "parameters": [
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Customer"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_customers:{projectKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "Update a Customer",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Update"
            }
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Customer"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_customers:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Get Customer by ID",
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Customer"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_customers:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/customers/password-token={token}": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "description": "projectKey",
          "required": true,
          "type": "string"
        },
        {
          "name": "token",
          "in": "path",
          "description": "token",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "description": "Query Customer by token",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Customer"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_customers:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/customers/email-token={token}": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "description": "projectKey",
          "required": true,
          "type": "string"
        },
        {
          "name": "token",
          "in": "path",
          "description": "token",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "description": "Query Customer by token",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Customer"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_customers:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/custom-objects": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "description": "projectKey",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "description": "Create or update a custom-object",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CustomObjectDraft"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CustomObject"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}",
              "manage_orders:{projectKey}",
              "manage_orders:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Query custom-objects",
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "description": "If queries support ad-hoc filtering of resources through flexible predicates, they do so via the where query\nparameter that accepts a single (possibly compound) predicate to determine whether a specific resource\nrepresentation should be included in the result.\n\nThe structure of predicates and the names of the fields follow the structure and naming of the fields in the\ndocumented response representation of the query results.\n\nExamples of predicates:\n\n    // Compare a field's value to a given value\n    name = \"Peter\"\n    age < 42\n    age > 42\n    age <= 42\n    age >= 42\n    age <> 42\n\n    // Combine any two conditional expressions in a logical conjunction / disjunction\n    name = \"Peter\" and age < 42\n    name = \"Peter\" or age < 42\n\n    // Negate any other conditional expression\n    not (name = \"Peter\" and age < 42)\n\n    // Check whether a field's value is or is not contained in\n    // a specified set of values.\n    age in (42, 43, 44)\n    age not in (42, 43, 44)\n\n    // Check whether an array contains all or any of a set of values\n    tags contains all (\"a\", \"b\", \"c\")\n    tags contains any (\"a\", \"b\", \"c\")\n\n    // Check whether an array is empty\n    tags is empty\n\n    // Check whether a field exists & has a non-null value\n    name is defined\n    name is not defined\n\n    // Descend into nested objects\n    dog(age < 7 and name = \"Beethoven\")\n\n    // Descend into nested arrays of objects\n    cities(zip > 10000 and zip < 20000)\n\nA query endpoint usually restricts predicates to only be allowed on a specified subset of a resource\nrepresentation's fields. The documentation of the endpoint will therefore list fields that can be used\nfor constructing predicates.\n\nIf multiple predicates are specified via multiple where query parameters, the individual predicates are\ncombined in a logical conjunction, just as if they had been specified in a single where query parameter\nand combined with and.\n\nNote: The encoding of the predicates is UTF-8 and the predicate must be URL-encoded in the HTTP request.\n",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A query endpoint that supports sorting does so through the sort query parameter. The provided value must be\na valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on\nthe specific query endpoints.\n\nHere are some examples of sort expressions:\n\n    name desc\n    dog.age asc\n\nIf multiple sort expressions are specified via multiple sort parameters, they are combined into a composed\nsort where the results are first sorted by the first expression, followed by equal values being sorted\naccording to the second expression, and so on.\n\nNote: The sorting is case sensitive.\n",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/trait:paging:limit"
          },
          {
            "$ref": "#/parameters/trait:paging:offset"
          },
          {
            "$ref": "#/parameters/trait:paging:withTotal"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CustomObjectPagedQueryResponse"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_orders:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/custom-objects/{container}": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "description": "projectKey",
          "required": true,
          "type": "string"
        },
        {
          "name": "container",
          "in": "path",
          "description": "container",
          "required": true,
          "type": "string"
        }
      ],
      "delete": {
        "description": "Delete a custom-object",
        "parameters": [
          {
            "$ref": "#/parameters/trait:versioned:version"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CustomObject"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}",
              "manage_orders:{projectKey}",
              "manage_orders:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Get custom-object by ID",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CustomObject"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_products:{projectKey}",
              "view_orders:{projectKey}",
              "view_customers:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/custom-objects/{container}/{key}": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "description": "projectKey",
          "required": true,
          "type": "string"
        },
        {
          "name": "container",
          "in": "path",
          "description": "container",
          "required": true,
          "type": "string"
        },
        {
          "name": "key",
          "in": "path",
          "description": "key",
          "required": true,
          "type": "string"
        }
      ],
      "delete": {
        "description": "Delete a custom-object",
        "parameters": [
          {
            "$ref": "#/parameters/trait:versioned:version"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CustomObject"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}",
              "manage_orders:{projectKey}",
              "manage_orders:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Get custom-object by ID",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CustomObject"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_products:{projectKey}",
              "view_orders:{projectKey}",
              "view_customers:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/graphql": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "description": "projectKey",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "description": "Execute a GraphQL query",
        "consumes": [
          "application/graphql"
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_products:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/login": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "description": "projectKey",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "description": "Authenticate Customer (Sign In)",
        "responses": {
          "200": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_customers:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/messages": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "description": "projectKey",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "description": "Query messages",
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "description": "If queries support ad-hoc filtering of resources through flexible predicates, they do so via the where query\nparameter that accepts a single (possibly compound) predicate to determine whether a specific resource\nrepresentation should be included in the result.\n\nThe structure of predicates and the names of the fields follow the structure and naming of the fields in the\ndocumented response representation of the query results.\n\nExamples of predicates:\n\n    // Compare a field's value to a given value\n    name = \"Peter\"\n    age < 42\n    age > 42\n    age <= 42\n    age >= 42\n    age <> 42\n\n    // Combine any two conditional expressions in a logical conjunction / disjunction\n    name = \"Peter\" and age < 42\n    name = \"Peter\" or age < 42\n\n    // Negate any other conditional expression\n    not (name = \"Peter\" and age < 42)\n\n    // Check whether a field's value is or is not contained in\n    // a specified set of values.\n    age in (42, 43, 44)\n    age not in (42, 43, 44)\n\n    // Check whether an array contains all or any of a set of values\n    tags contains all (\"a\", \"b\", \"c\")\n    tags contains any (\"a\", \"b\", \"c\")\n\n    // Check whether an array is empty\n    tags is empty\n\n    // Check whether a field exists & has a non-null value\n    name is defined\n    name is not defined\n\n    // Descend into nested objects\n    dog(age < 7 and name = \"Beethoven\")\n\n    // Descend into nested arrays of objects\n    cities(zip > 10000 and zip < 20000)\n\nA query endpoint usually restricts predicates to only be allowed on a specified subset of a resource\nrepresentation's fields. The documentation of the endpoint will therefore list fields that can be used\nfor constructing predicates.\n\nIf multiple predicates are specified via multiple where query parameters, the individual predicates are\ncombined in a logical conjunction, just as if they had been specified in a single where query parameter\nand combined with and.\n\nNote: The encoding of the predicates is UTF-8 and the predicate must be URL-encoded in the HTTP request.\n",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A query endpoint that supports sorting does so through the sort query parameter. The provided value must be\na valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on\nthe specific query endpoints.\n\nHere are some examples of sort expressions:\n\n    name desc\n    dog.age asc\n\nIf multiple sort expressions are specified via multiple sort parameters, they are combined into a composed\nsort where the results are first sorted by the first expression, followed by equal values being sorted\naccording to the second expression, and so on.\n\nNote: The sorting is case sensitive.\n",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/trait:paging:limit"
          },
          {
            "$ref": "#/parameters/trait:paging:offset"
          },
          {
            "$ref": "#/parameters/trait:paging:withTotal"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_orders:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/messages/{ID}": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "description": "projectKey",
          "required": true,
          "type": "string"
        },
        {
          "name": "ID",
          "in": "path",
          "description": "ID",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "description": "Get message by ID",
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_orders:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/product-projections": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "description": "projectKey",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "description": "Query Product Projection",
        "parameters": [
          {
            "name": "staged",
            "in": "query",
            "description": "Whether to query for the current or staged projections.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "where",
            "in": "query",
            "description": "If queries support ad-hoc filtering of resources through flexible predicates, they do so via the where query\nparameter that accepts a single (possibly compound) predicate to determine whether a specific resource\nrepresentation should be included in the result.\n\nThe structure of predicates and the names of the fields follow the structure and naming of the fields in the\ndocumented response representation of the query results.\n\nExamples of predicates:\n\n    // Compare a field's value to a given value\n    name = \"Peter\"\n    age < 42\n    age > 42\n    age <= 42\n    age >= 42\n    age <> 42\n\n    // Combine any two conditional expressions in a logical conjunction / disjunction\n    name = \"Peter\" and age < 42\n    name = \"Peter\" or age < 42\n\n    // Negate any other conditional expression\n    not (name = \"Peter\" and age < 42)\n\n    // Check whether a field's value is or is not contained in\n    // a specified set of values.\n    age in (42, 43, 44)\n    age not in (42, 43, 44)\n\n    // Check whether an array contains all or any of a set of values\n    tags contains all (\"a\", \"b\", \"c\")\n    tags contains any (\"a\", \"b\", \"c\")\n\n    // Check whether an array is empty\n    tags is empty\n\n    // Check whether a field exists & has a non-null value\n    name is defined\n    name is not defined\n\n    // Descend into nested objects\n    dog(age < 7 and name = \"Beethoven\")\n\n    // Descend into nested arrays of objects\n    cities(zip > 10000 and zip < 20000)\n\nA query endpoint usually restricts predicates to only be allowed on a specified subset of a resource\nrepresentation's fields. The documentation of the endpoint will therefore list fields that can be used\nfor constructing predicates.\n\nIf multiple predicates are specified via multiple where query parameters, the individual predicates are\ncombined in a logical conjunction, just as if they had been specified in a single where query parameter\nand combined with and.\n\nNote: The encoding of the predicates is UTF-8 and the predicate must be URL-encoded in the HTTP request.\n",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A query endpoint that supports sorting does so through the sort query parameter. The provided value must be\na valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on\nthe specific query endpoints.\n\nHere are some examples of sort expressions:\n\n    name desc\n    dog.age asc\n\nIf multiple sort expressions are specified via multiple sort parameters, they are combined into a composed\nsort where the results are first sorted by the first expression, followed by equal values being sorted\naccording to the second expression, and so on.\n\nNote: The sorting is case sensitive.\n",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/trait:paging:limit"
          },
          {
            "$ref": "#/parameters/trait:paging:offset"
          },
          {
            "$ref": "#/parameters/trait:paging:withTotal"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCurrency"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCountry"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCustomerGroup"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceChannel"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ProductProjectionPagedQueryResponse"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_products:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/product-projections/key={key}": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "description": "projectKey",
          "required": true,
          "type": "string"
        },
        {
          "name": "key",
          "in": "path",
          "description": "key",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "description": "Get Product Projection by key",
        "parameters": [
          {
            "name": "staged",
            "in": "query",
            "description": "Whether to query for the current or staged projections.",
            "required": false,
            "type": "boolean"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCurrency"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCountry"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCustomerGroup"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceChannel"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ProductProjection"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_products:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/product-projections/search": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "description": "projectKey",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "description": "Search Product Projection",
        "parameters": [
          {
            "name": "fuzzy",
            "in": "query",
            "description": "Whether to apply fuzzy search on the text to analyze.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "fuzzyLevel",
            "in": "query",
            "description": "Provide explicitly the fuzzy level desired if fuzzy is enabled. This value can not be higher than the one\nchosen by the platform by default.\n",
            "required": false,
            "type": "number"
          },
          {
            "name": "staged",
            "in": "query",
            "description": "Whether to query for the current or staged projections.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.facets",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.query",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "facet",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "text.<<locale>>",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A query endpoint that supports sorting does so through the sort query parameter. The provided value must be\na valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on\nthe specific query endpoints.\n\nHere are some examples of sort expressions:\n\n    name desc\n    dog.age asc\n\nIf multiple sort expressions are specified via multiple sort parameters, they are combined into a composed\nsort where the results are first sorted by the first expression, followed by equal values being sorted\naccording to the second expression, and so on.\n\nNote: The sorting is case sensitive.\n",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/trait:paging:limit"
          },
          {
            "$ref": "#/parameters/trait:paging:offset"
          },
          {
            "$ref": "#/parameters/trait:paging:withTotal"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCurrency"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCountry"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCustomerGroup"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceChannel"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ProductProjectionPagedSearchResponse"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_products:{projectKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "Search Product Projection",
        "responses": {
          "200": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": []
          }
        ]
      }
    },
    "/{projectKey}/product-projections/suggest": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "description": "projectKey",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "parameters": [
          {
            "name": "fuzzy",
            "in": "query",
            "description": "Whether to apply fuzzy search on the text to analyze.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "staged",
            "in": "query",
            "description": "Whether to query for the current or staged projections.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "searchKeywords.<<locale>>",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A query endpoint that supports sorting does so through the sort query parameter. The provided value must be\na valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on\nthe specific query endpoints.\n\nHere are some examples of sort expressions:\n\n    name desc\n    dog.age asc\n\nIf multiple sort expressions are specified via multiple sort parameters, they are combined into a composed\nsort where the results are first sorted by the first expression, followed by equal values being sorted\naccording to the second expression, and so on.\n\nNote: The sorting is case sensitive.\n",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/trait:paging:limit"
          },
          {
            "$ref": "#/parameters/trait:paging:offset"
          },
          {
            "$ref": "#/parameters/trait:paging:withTotal"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_products:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/product-projections/{ID}": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "description": "projectKey",
          "required": true,
          "type": "string"
        },
        {
          "name": "ID",
          "in": "path",
          "description": "ID",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "description": "Get Product Projection by ID",
        "parameters": [
          {
            "name": "staged",
            "in": "query",
            "description": "Whether to query for the current or staged projections.",
            "required": false,
            "type": "boolean"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCurrency"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCountry"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCustomerGroup"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceChannel"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ProductProjection"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_products:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/me": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "description": "projectKey",
          "required": true,
          "type": "string"
        }
      ],
      "delete": {
        "description": "Delete a Customer",
        "parameters": [
          {
            "$ref": "#/parameters/trait:versioned:version"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Customer"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_my_profile:{projectKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "Create a customer",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Update"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Customer"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_my_profile:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "description": "If queries support ad-hoc filtering of resources through flexible predicates, they do so via the where query\nparameter that accepts a single (possibly compound) predicate to determine whether a specific resource\nrepresentation should be included in the result.\n\nThe structure of predicates and the names of the fields follow the structure and naming of the fields in the\ndocumented response representation of the query results.\n\nExamples of predicates:\n\n    // Compare a field's value to a given value\n    name = \"Peter\"\n    age < 42\n    age > 42\n    age <= 42\n    age >= 42\n    age <> 42\n\n    // Combine any two conditional expressions in a logical conjunction / disjunction\n    name = \"Peter\" and age < 42\n    name = \"Peter\" or age < 42\n\n    // Negate any other conditional expression\n    not (name = \"Peter\" and age < 42)\n\n    // Check whether a field's value is or is not contained in\n    // a specified set of values.\n    age in (42, 43, 44)\n    age not in (42, 43, 44)\n\n    // Check whether an array contains all or any of a set of values\n    tags contains all (\"a\", \"b\", \"c\")\n    tags contains any (\"a\", \"b\", \"c\")\n\n    // Check whether an array is empty\n    tags is empty\n\n    // Check whether a field exists & has a non-null value\n    name is defined\n    name is not defined\n\n    // Descend into nested objects\n    dog(age < 7 and name = \"Beethoven\")\n\n    // Descend into nested arrays of objects\n    cities(zip > 10000 and zip < 20000)\n\nA query endpoint usually restricts predicates to only be allowed on a specified subset of a resource\nrepresentation's fields. The documentation of the endpoint will therefore list fields that can be used\nfor constructing predicates.\n\nIf multiple predicates are specified via multiple where query parameters, the individual predicates are\ncombined in a logical conjunction, just as if they had been specified in a single where query parameter\nand combined with and.\n\nNote: The encoding of the predicates is UTF-8 and the predicate must be URL-encoded in the HTTP request.\n",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A query endpoint that supports sorting does so through the sort query parameter. The provided value must be\na valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on\nthe specific query endpoints.\n\nHere are some examples of sort expressions:\n\n    name desc\n    dog.age asc\n\nIf multiple sort expressions are specified via multiple sort parameters, they are combined into a composed\nsort where the results are first sorted by the first expression, followed by equal values being sorted\naccording to the second expression, and so on.\n\nNote: The sorting is case sensitive.\n",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/trait:paging:limit"
          },
          {
            "$ref": "#/parameters/trait:paging:offset"
          },
          {
            "$ref": "#/parameters/trait:paging:withTotal"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Customer"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_my_profile:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/me/email": {},
    "/{projectKey}/me/email/confirm": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "description": "projectKey",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "responses": {
          "200": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_my_profile:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/me/password": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "description": "projectKey",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Customer"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_my_profile:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/me/password/reset": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "description": "projectKey",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Customer"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_my_profile:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/me/signup": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "description": "projectKey",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/MyCustomerDraft"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CustomerSignInResult"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_my_profile:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/me/login": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "description": "projectKey",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CustomerSignInResult"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_my_profile:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/me/active-cart": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "description": "projectKey",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Cart"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_my_orders:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/me/carts": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "description": "projectKey",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/MyCartDraft"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Cart"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_my_orders:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "description": "If queries support ad-hoc filtering of resources through flexible predicates, they do so via the where query\nparameter that accepts a single (possibly compound) predicate to determine whether a specific resource\nrepresentation should be included in the result.\n\nThe structure of predicates and the names of the fields follow the structure and naming of the fields in the\ndocumented response representation of the query results.\n\nExamples of predicates:\n\n    // Compare a field's value to a given value\n    name = \"Peter\"\n    age < 42\n    age > 42\n    age <= 42\n    age >= 42\n    age <> 42\n\n    // Combine any two conditional expressions in a logical conjunction / disjunction\n    name = \"Peter\" and age < 42\n    name = \"Peter\" or age < 42\n\n    // Negate any other conditional expression\n    not (name = \"Peter\" and age < 42)\n\n    // Check whether a field's value is or is not contained in\n    // a specified set of values.\n    age in (42, 43, 44)\n    age not in (42, 43, 44)\n\n    // Check whether an array contains all or any of a set of values\n    tags contains all (\"a\", \"b\", \"c\")\n    tags contains any (\"a\", \"b\", \"c\")\n\n    // Check whether an array is empty\n    tags is empty\n\n    // Check whether a field exists & has a non-null value\n    name is defined\n    name is not defined\n\n    // Descend into nested objects\n    dog(age < 7 and name = \"Beethoven\")\n\n    // Descend into nested arrays of objects\n    cities(zip > 10000 and zip < 20000)\n\nA query endpoint usually restricts predicates to only be allowed on a specified subset of a resource\nrepresentation's fields. The documentation of the endpoint will therefore list fields that can be used\nfor constructing predicates.\n\nIf multiple predicates are specified via multiple where query parameters, the individual predicates are\ncombined in a logical conjunction, just as if they had been specified in a single where query parameter\nand combined with and.\n\nNote: The encoding of the predicates is UTF-8 and the predicate must be URL-encoded in the HTTP request.\n",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A query endpoint that supports sorting does so through the sort query parameter. The provided value must be\na valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on\nthe specific query endpoints.\n\nHere are some examples of sort expressions:\n\n    name desc\n    dog.age asc\n\nIf multiple sort expressions are specified via multiple sort parameters, they are combined into a composed\nsort where the results are first sorted by the first expression, followed by equal values being sorted\naccording to the second expression, and so on.\n\nNote: The sorting is case sensitive.\n",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/trait:paging:limit"
          },
          {
            "$ref": "#/parameters/trait:paging:offset"
          },
          {
            "$ref": "#/parameters/trait:paging:withTotal"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CartPagedQueryResponse"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_my_orders:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/me/carts/{ID}": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "description": "projectKey",
          "required": true,
          "type": "string"
        },
        {
          "name": "ID",
          "in": "path",
          "description": "ID",
          "required": true,
          "type": "string"
        }
      ],
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/trait:versioned:version"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Cart"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_my_orders:{projectKey}"
            ]
          }
        ]
      },
      "post": {
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Update"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Cart"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_my_orders:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Cart"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_my_orders:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/me/orders": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "description": "projectKey",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/MyOrderFromCartDraft"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Order"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_my_orders:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "description": "If queries support ad-hoc filtering of resources through flexible predicates, they do so via the where query\nparameter that accepts a single (possibly compound) predicate to determine whether a specific resource\nrepresentation should be included in the result.\n\nThe structure of predicates and the names of the fields follow the structure and naming of the fields in the\ndocumented response representation of the query results.\n\nExamples of predicates:\n\n    // Compare a field's value to a given value\n    name = \"Peter\"\n    age < 42\n    age > 42\n    age <= 42\n    age >= 42\n    age <> 42\n\n    // Combine any two conditional expressions in a logical conjunction / disjunction\n    name = \"Peter\" and age < 42\n    name = \"Peter\" or age < 42\n\n    // Negate any other conditional expression\n    not (name = \"Peter\" and age < 42)\n\n    // Check whether a field's value is or is not contained in\n    // a specified set of values.\n    age in (42, 43, 44)\n    age not in (42, 43, 44)\n\n    // Check whether an array contains all or any of a set of values\n    tags contains all (\"a\", \"b\", \"c\")\n    tags contains any (\"a\", \"b\", \"c\")\n\n    // Check whether an array is empty\n    tags is empty\n\n    // Check whether a field exists & has a non-null value\n    name is defined\n    name is not defined\n\n    // Descend into nested objects\n    dog(age < 7 and name = \"Beethoven\")\n\n    // Descend into nested arrays of objects\n    cities(zip > 10000 and zip < 20000)\n\nA query endpoint usually restricts predicates to only be allowed on a specified subset of a resource\nrepresentation's fields. The documentation of the endpoint will therefore list fields that can be used\nfor constructing predicates.\n\nIf multiple predicates are specified via multiple where query parameters, the individual predicates are\ncombined in a logical conjunction, just as if they had been specified in a single where query parameter\nand combined with and.\n\nNote: The encoding of the predicates is UTF-8 and the predicate must be URL-encoded in the HTTP request.\n",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A query endpoint that supports sorting does so through the sort query parameter. The provided value must be\na valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on\nthe specific query endpoints.\n\nHere are some examples of sort expressions:\n\n    name desc\n    dog.age asc\n\nIf multiple sort expressions are specified via multiple sort parameters, they are combined into a composed\nsort where the results are first sorted by the first expression, followed by equal values being sorted\naccording to the second expression, and so on.\n\nNote: The sorting is case sensitive.\n",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/trait:paging:limit"
          },
          {
            "$ref": "#/parameters/trait:paging:offset"
          },
          {
            "$ref": "#/parameters/trait:paging:withTotal"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/OrderPagedQueryResponse"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_my_orders:{projectKey}"
            ]
          }
        ]
      }
    },
    "/{projectKey}/me/orders/{ID}": {
      "parameters": [
        {
          "name": "projectKey",
          "in": "path",
          "description": "projectKey",
          "required": true,
          "type": "string"
        },
        {
          "name": "ID",
          "in": "path",
          "description": "ID",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Update"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Order"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "201": {
            "description": "",
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_my_orders:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Order"
            },
            "headers": {
              "X-DEPRECATION-NOTICE": {
                "displayName": "X-DEPRECATION-NOTICE",
                "type": "string",
                "description": "As the SPHERE.IO platform evolves, some features are superseded by better implementations and should not be used\nanymore. The goal of our deprecation process is to communicate at runtime with users if they happen to use such\ndeprecated feature. To achieve this in a non breaking fashion SPHERE.IO uses an additionnal custom HTTP header\ncalled \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n"
              }
            }
          },
          "400": {
            "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application should\n  validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load.\n  The client application should retry the request with exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay is unaceptable.\n  If these errors persist, [should be reported](http://support.sphere.io/){:target=\"_blank\"}.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_my_orders:{projectKey}"
            ]
          }
        ]
      }
    }
  },
  "parameters": {
    "trait:expandable:expand": {
      "name": "expand",
      "in": "query",
      "required": false,
      "type": "string"
    },
    "trait:paging:limit": {
      "name": "limit",
      "in": "query",
      "description": "Number of results returned",
      "required": false,
      "type": "number"
    },
    "trait:paging:offset": {
      "name": "offset",
      "in": "query",
      "description": "Number of results skipped",
      "required": false,
      "type": "number"
    },
    "trait:paging:withTotal": {
      "name": "withTotal",
      "in": "query",
      "description": "Calculate total number of results",
      "required": false,
      "type": "boolean"
    },
    "trait:versioned:version": {
      "name": "version",
      "in": "query",
      "description": "Last seen version of the resource",
      "required": true,
      "type": "number"
    },
    "trait:priceSelecting:priceCurrency": {
      "name": "priceCurrency",
      "in": "query",
      "required": false,
      "type": "string"
    },
    "trait:priceSelecting:priceCountry": {
      "name": "priceCountry",
      "in": "query",
      "required": false,
      "type": "string"
    },
    "trait:priceSelecting:priceCustomerGroup": {
      "name": "priceCustomerGroup",
      "in": "query",
      "required": false,
      "type": "string"
    },
    "trait:priceSelecting:priceChannel": {
      "name": "priceChannel",
      "in": "query",
      "required": false,
      "type": "string"
    }
  },
  "responses": {
    "trait:conflicting:409": {
      "description": "## Conflict\n\nA 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),\nwas modified since the last time the client has requested it. As a reaction, the client will usually want to request\nthe newest version of the resource to see what has changed and may then decide to apply the same or other changes\nto the new version, or discard his changes entirely.\n\nConflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has\nto include the version of the resource whenever he intends to apply modifications to it.\n\nThe following general error codes can appear in responses with the HTTP status code `409`:\n\n* `ConcurrentModification`\n    The request conflicts with the current state of the involved resource(s).\n    Typically, the request attempts to modify a resource that is out of date,\n    i.e. that has been modified by another client since the last time it was retrieved.\n    The client application should resolve the conflict (with or without involving the end-user)\n    before retrying the request.\n",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      }
    }
  },
  "definitions": {
    "PagedQueryResponse": {
      "type": "object",
      "properties": {
        "count": {
          "type": "number",
          "format": "int64"
        },
        "total": {
          "type": "number",
          "format": "int64"
        },
        "offset": {
          "type": "number",
          "format": "int64"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Resource"
          },
          "x-annotation-generator-ignore-strict": true
        }
      },
      "required": [
        "count",
        "offset",
        "results"
      ]
    },
    "Update": {
      "type": "object",
      "properties": {
        "version": {
          "type": "number",
          "format": "int64"
        },
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UpdateAction"
          },
          "x-annotation-generator-ignore-strict": true
        }
      },
      "required": [
        "version",
        "actions"
      ]
    },
    "UpdateAction": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        }
      },
      "required": [
        "action"
      ],
      "x-annotation-generate-collection": true
    },
    "CurrencyCode": {
      "type": "string",
      "description": "The currency code compliant to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).\n",
      "pattern": "^[A-Z]{3}$",
      "x-annotation-generator-ignore": true
    },
    "CountryCode": {
      "type": "string",
      "description": "A two-digit country code as per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\n",
      "pattern": "^[A-Z]{2}$",
      "x-annotation-generator-ignore": true
    },
    "Reference": {
      "discriminator": "typeId",
      "allOf": [
        {
          "$ref": "#/definitions/ResourceIdentifier"
        },
        {
          "type": "object",
          "properties": {
            "typeId": {
              "x-annotation-generator-type": "string",
              "$ref": "#/definitions/ReferenceTypeId"
            }
          },
          "discriminator": "typeId",
          "required": [
            "typeId"
          ]
        }
      ],
      "x-annotation-generate-collection": true
    },
    "Resource": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "version": {
          "type": "number",
          "format": "int64"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "lastModifiedAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "version",
        "createdAt",
        "lastModifiedAt"
      ]
    },
    "ReferenceTypeId": {
      "type": "string",
      "enum": [
        "cart",
        "cart-discount",
        "category",
        "channel",
        "customer",
        "customer-group",
        "discount-code",
        "key-value-document",
        "payment",
        "product",
        "product-type",
        "product-discount",
        "order",
        "review",
        "shopping-list",
        "shipping-method",
        "state",
        "tax-category",
        "type",
        "zone"
      ]
    },
    "ResourceIdentifier": {
      "type": "object",
      "properties": {
        "typeId": {
          "x-annotation-generator-type": "string",
          "$ref": "#/definitions/ReferenceTypeId"
        },
        "id": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "Asset": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "sources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssetSource"
          }
        },
        "name": {
          "$ref": "#/definitions/LocalizedString"
        },
        "description": {
          "$ref": "#/definitions/LocalizedString"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "custom": {
          "$ref": "#/definitions/CustomFields"
        }
      },
      "required": [
        "id",
        "sources",
        "name"
      ],
      "x-annotation-generate-collection": true
    },
    "AssetSource": {
      "type": "object",
      "properties": {
        "uri": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "dimensions": {
          "$ref": "#/definitions/AssetDimensions"
        },
        "contentType": {
          "type": "string"
        }
      },
      "required": [
        "uri"
      ],
      "x-annotation-generate-collection": true
    },
    "AssetDimensions": {
      "type": "object",
      "properties": {
        "w": {
          "type": "number"
        },
        "h": {
          "type": "number"
        }
      },
      "required": [
        "w",
        "h"
      ]
    },
    "AssetDraft": {
      "type": "object",
      "properties": {
        "sources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssetSource"
          }
        },
        "name": {
          "$ref": "#/definitions/LocalizedString"
        },
        "description": {
          "$ref": "#/definitions/LocalizedString"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "custom": {
          "$ref": "#/definitions/CustomFieldsDraft"
        }
      },
      "required": [
        "sources",
        "name"
      ],
      "x-annotation-generate-collection": true
    },
    "Address": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "salutation": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "streetName": {
          "type": "string"
        },
        "streetNumber": {
          "type": "string"
        },
        "additionalStreetInfo": {
          "type": "string"
        },
        "postalCode": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "country": {
          "x-annotation-generator-type": "string",
          "$ref": "#/definitions/CountryCode"
        },
        "company": {
          "type": "string"
        },
        "department": {
          "type": "string"
        },
        "building": {
          "type": "string"
        },
        "apartment": {
          "type": "string"
        },
        "pOBox": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "mobile": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "fax": {
          "type": "string"
        },
        "additionalAddressInfo": {
          "type": "string"
        },
        "externalId": {
          "type": "string"
        }
      },
      "required": [
        "country"
      ],
      "x-annotation-generate-collection": true
    },
    "DiscountedPrice": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Money"
        },
        "discount": {
          "$ref": "#/definitions/ProductDiscountReference"
        }
      },
      "required": [
        "value",
        "discount"
      ]
    },
    "GeoJson": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "coordinates": {
          "type": "array"
        }
      },
      "discriminator": "type",
      "required": [
        "type",
        "coordinates"
      ]
    },
    "GeoJsonPoint": {
      "$ref": "#/definitions/GeoJson"
    },
    "Image": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        },
        "dimensions": {
          "$ref": "#/definitions/ImageDimensions"
        },
        "label": {
          "type": "string"
        }
      },
      "required": [
        "url",
        "dimensions"
      ],
      "x-annotation-generate-collection": true
    },
    "ImageDimensions": {
      "type": "object",
      "properties": {
        "w": {
          "type": "number"
        },
        "h": {
          "type": "number"
        }
      },
      "required": [
        "w",
        "h"
      ]
    },
    "LocalizedString": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      },
      "x-annotation-generator-type": "Collection"
    },
    "Money": {
      "type": "object",
      "properties": {
        "centAmount": {
          "type": "number",
          "format": "int64"
        },
        "currencyCode": {
          "x-annotation-generator-type": "string",
          "$ref": "#/definitions/CurrencyCode"
        }
      },
      "required": [
        "centAmount",
        "currencyCode"
      ]
    },
    "Price": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/Money"
        },
        "country": {
          "x-annotation-generator-type": "string",
          "$ref": "#/definitions/CountryCode"
        },
        "customerGroup": {
          "$ref": "#/definitions/CustomerGroupReference"
        },
        "channel": {
          "$ref": "#/definitions/ChannelReference"
        },
        "validFrom": {
          "type": "string",
          "format": "date-time"
        },
        "validUntil": {
          "type": "string",
          "format": "date-time"
        },
        "discounted": {
          "$ref": "#/definitions/DiscountedPrice"
        },
        "custom": {
          "$ref": "#/definitions/CustomFields"
        },
        "tiers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PriceTier"
          }
        }
      },
      "required": [
        "value"
      ],
      "x-annotation-generate-collection": true
    },
    "PriceDraft": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Money"
        },
        "country": {
          "x-annotation-generator-type": "string",
          "$ref": "#/definitions/CountryCode"
        },
        "customerGroup": {
          "$ref": "#/definitions/CustomerGroupReference"
        },
        "channel": {
          "$ref": "#/definitions/ChannelReference"
        },
        "validFrom": {
          "type": "string",
          "format": "date-time"
        },
        "validUntil": {
          "type": "string",
          "format": "date-time"
        },
        "custom": {
          "$ref": "#/definitions/CustomFieldsDraft"
        },
        "tiers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PriceTier"
          }
        }
      },
      "required": [
        "value"
      ],
      "x-annotation-generate-collection": true
    },
    "ScopedPrice": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/Money"
        },
        "currentValue": {
          "$ref": "#/definitions/Money"
        },
        "country": {
          "x-annotation-generator-type": "string",
          "$ref": "#/definitions/CountryCode"
        },
        "customerGroup": {
          "$ref": "#/definitions/CustomerGroupReference"
        },
        "channel": {
          "$ref": "#/definitions/ChannelReference"
        },
        "validFrom": {
          "type": "string",
          "format": "date-time"
        },
        "validUntil": {
          "type": "string",
          "format": "date-time"
        },
        "discounted": {
          "$ref": "#/definitions/DiscountedPrice"
        },
        "custom": {
          "$ref": "#/definitions/CustomFields"
        }
      },
      "required": [
        "id",
        "value",
        "currentValue"
      ],
      "x-annotation-generate-collection": true
    },
    "PriceTier": {
      "type": "object",
      "properties": {
        "minimumQuantity": {
          "type": "number",
          "format": "int64"
        },
        "value": {
          "$ref": "#/definitions/Money"
        }
      },
      "required": [
        "minimumQuantity",
        "value"
      ]
    },
    "Cart": {
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        },
        {
          "type": "object",
          "properties": {
            "customerId": {
              "type": "string"
            },
            "customerEmail": {
              "type": "string"
            },
            "anonymousId": {
              "type": "string"
            },
            "lineItems": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LineItem"
              }
            },
            "customLineItems": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomLineItem"
              }
            },
            "totalPrice": {
              "$ref": "#/definitions/Money"
            },
            "taxedPrice": {
              "$ref": "#/definitions/TaxedPrice"
            },
            "cartState": {
              "$ref": "#/definitions/CartState"
            },
            "shippingAddress": {
              "$ref": "#/definitions/Address"
            },
            "billingAddress": {
              "$ref": "#/definitions/Address"
            },
            "inventoryMode": {
              "$ref": "#/definitions/InventoryMode"
            },
            "taxMode": {
              "$ref": "#/definitions/TaxMode"
            },
            "taxRoundingMode": {
              "$ref": "#/definitions/RoundingMode"
            },
            "customerGroup": {
              "$ref": "#/definitions/CustomerGroupReference"
            },
            "country": {
              "type": "string"
            },
            "shippingInfo": {
              "$ref": "#/definitions/ShippingInfo"
            },
            "discountCodes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DiscountCodeInfo"
              }
            },
            "custom": {
              "$ref": "#/definitions/CustomFields"
            },
            "paymentInfo": {
              "$ref": "#/definitions/PaymentInfo"
            },
            "locale": {
              "type": "string"
            },
            "deleteDaysAfterLastModification": {
              "type": "number",
              "format": "int64"
            },
            "refusedGifts": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CartDiscountReference"
              }
            }
          },
          "required": [
            "lineItems",
            "customLineItems",
            "totalPrice",
            "cartState",
            "refusedGifts"
          ]
        }
      ],
      "x-annotation-generate-collection": true
    },
    "CartDraft": {
      "type": "object",
      "properties": {
        "currency": {
          "$ref": "#/definitions/CurrencyCode"
        },
        "customerId": {
          "type": "string"
        },
        "customerEmail": {
          "type": "string"
        },
        "anonymousId": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "inventoryMode": {
          "$ref": "#/definitions/InventoryMode"
        },
        "taxMode": {
          "$ref": "#/definitions/TaxMode"
        },
        "taxRoundingMode": {
          "$ref": "#/definitions/RoundingMode"
        },
        "lineItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LineItemDraft"
          }
        },
        "customLineItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomLineItemDraft"
          }
        },
        "shippingAddress": {
          "$ref": "#/definitions/Address"
        },
        "billingAddress": {
          "$ref": "#/definitions/Address"
        },
        "shippingMethod": {
          "$ref": "#/definitions/ShippingMethodReference"
        },
        "externalTaxRateForShippingMethod": {
          "$ref": "#/definitions/ExternalTaxRateDraft"
        },
        "custom": {
          "$ref": "#/definitions/CustomFieldsDraft"
        },
        "locale": {
          "type": "string"
        },
        "deleteDaysAfterLastModification": {
          "type": "number",
          "format": "int64"
        }
      },
      "required": [
        "currency"
      ]
    },
    "CartPagedQueryResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/PagedQueryResponse"
        },
        {
          "type": "object",
          "properties": {
            "results": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Cart"
              }
            }
          },
          "required": [
            "results"
          ]
        }
      ]
    },
    "CartReference": {
      "allOf": [
        {
          "$ref": "#/definitions/Reference"
        },
        {
          "type": "object",
          "properties": {
            "obj": {
              "$ref": "#/definitions/Cart"
            }
          }
        }
      ]
    },
    "CartState": {
      "type": "string",
      "enum": [
        "Active",
        "Merged",
        "Ordered"
      ]
    },
    "CustomLineItem": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "$ref": "#/definitions/LocalizedString"
        },
        "money": {
          "$ref": "#/definitions/Money"
        },
        "taxedPrice": {
          "$ref": "#/definitions/TaxedItemPrice"
        },
        "totalPrice": {
          "$ref": "#/definitions/Money"
        },
        "slug": {
          "type": "string"
        },
        "quantity": {
          "type": "number"
        },
        "state": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ItemState"
          }
        },
        "taxCategory": {
          "$ref": "#/definitions/TaxCategoryReference"
        },
        "taxRate": {
          "$ref": "#/definitions/TaxRate"
        },
        "discountedPricePerQuantity": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DiscountedLineItemPriceForQuantity"
          }
        },
        "custom": {
          "$ref": "#/definitions/CustomFields"
        }
      },
      "required": [
        "id",
        "name",
        "money",
        "totalPrice",
        "slug",
        "quantity",
        "state",
        "discountedPricePerQuantity"
      ],
      "x-annotation-generate-collection": true
    },
    "CustomLineItemDraft": {
      "type": "object",
      "properties": {
        "name": {
          "$ref": "#/definitions/LocalizedString"
        },
        "quantity": {
          "type": "number"
        },
        "money": {
          "$ref": "#/definitions/Money"
        },
        "slug": {
          "type": "string"
        },
        "taxCategory": {
          "$ref": "#/definitions/TaxCategoryReference"
        },
        "externalTaxRate": {
          "$ref": "#/definitions/ExternalTaxRateDraft"
        },
        "custom": {
          "$ref": "#/definitions/CustomFields"
        }
      },
      "required": [
        "name",
        "quantity",
        "money",
        "slug"
      ],
      "x-annotation-generate-collection": true
    },
    "DiscountCodeInfo": {
      "type": "object",
      "properties": {
        "discountCode": {
          "$ref": "#/definitions/DiscountCodeReference"
        },
        "state": {
          "$ref": "#/definitions/DiscountCodeState"
        }
      },
      "required": [
        "discountCode",
        "state"
      ],
      "x-annotation-generate-collection": true
    },
    "DiscountCodeState": {
      "type": "string",
      "enum": [
        "NotActive",
        "DoesNotMatchCart",
        "MatchesCart",
        "MaxApplicationReached"
      ]
    },
    "DiscountedLineItemPortion": {
      "type": "object",
      "properties": {
        "discount": {
          "$ref": "#/definitions/CartDiscountReference"
        },
        "discountedAmount": {
          "$ref": "#/definitions/Money"
        }
      },
      "required": [
        "discount",
        "discountedAmount"
      ],
      "x-annotation-generate-collection": true
    },
    "DiscountedLineItemPrice": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Money"
        },
        "includedDiscounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DiscountedLineItemPortion"
          }
        }
      },
      "required": [
        "value",
        "includedDiscounts"
      ]
    },
    "DiscountedLineItemPriceForQuantity": {
      "type": "object",
      "properties": {
        "quantity": {
          "type": "number"
        },
        "discountedPrice": {
          "$ref": "#/definitions/DiscountedLineItemPrice"
        }
      },
      "required": [
        "quantity",
        "discountedPrice"
      ]
    },
    "ExternalTaxRateDraft": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "amount": {
          "type": "number"
        },
        "country": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "subRates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubRate"
          }
        }
      },
      "required": [
        "name",
        "country"
      ]
    },
    "ExternalLineItemTotalPrice": {
      "type": "object",
      "properties": {
        "price": {
          "$ref": "#/definitions/Money"
        },
        "totalPrice": {
          "$ref": "#/definitions/Money"
        }
      },
      "required": [
        "price",
        "totalPrice"
      ]
    },
    "InventoryMode": {
      "type": "string",
      "enum": [
        "TrackOnly",
        "ReserveOnOrder",
        "None"
      ]
    },
    "LineItem": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "productId": {
          "type": "string"
        },
        "name": {
          "$ref": "#/definitions/LocalizedString"
        },
        "productSlug": {
          "$ref": "#/definitions/LocalizedString"
        },
        "productType": {
          "$ref": "#/definitions/ProductTypeReference"
        },
        "variant": {
          "$ref": "#/definitions/ProductVariant"
        },
        "price": {
          "$ref": "#/definitions/Price"
        },
        "taxedPrice": {
          "$ref": "#/definitions/TaxedItemPrice"
        },
        "totalPrice": {
          "$ref": "#/definitions/Money"
        },
        "quantity": {
          "type": "number"
        },
        "state": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ItemState"
          }
        },
        "taxRate": {
          "$ref": "#/definitions/TaxRate"
        },
        "supplyChannel": {
          "$ref": "#/definitions/ChannelReference"
        },
        "distributionChannel": {
          "$ref": "#/definitions/ChannelReference"
        },
        "discountedPricePerQuantity": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DiscountedLineItemPriceForQuantity"
          }
        },
        "priceMode": {
          "$ref": "#/definitions/LineItemPriceMode"
        },
        "lineItemMode": {
          "$ref": "#/definitions/LineItemMode"
        },
        "custom": {
          "$ref": "#/definitions/CustomFields"
        }
      },
      "required": [
        "id",
        "productId",
        "name",
        "productType",
        "variant",
        "price",
        "totalPrice",
        "quantity",
        "state",
        "discountedPricePerQuantity",
        "priceMode",
        "lineItemMode"
      ],
      "x-annotation-generate-collection": true
    },
    "LineItemDraft": {
      "type": "object",
      "properties": {
        "productId": {
          "type": "string"
        },
        "variantId": {
          "type": "number",
          "format": "int64"
        },
        "quantity": {
          "type": "number"
        },
        "supplyChannel": {
          "$ref": "#/definitions/ChannelReference"
        },
        "distributionChannel": {
          "$ref": "#/definitions/ChannelReference"
        },
        "externalTaxRate": {
          "$ref": "#/definitions/ExternalTaxRateDraft"
        },
        "custom": {
          "$ref": "#/definitions/CustomFieldsDraft"
        },
        "externalPrice": {
          "$ref": "#/definitions/Money"
        },
        "externalTotalPrice": {
          "$ref": "#/definitions/ExternalLineItemTotalPrice"
        }
      },
      "required": [
        "productId",
        "variantId",
        "quantity"
      ],
      "x-annotation-generate-collection": true
    },
    "LineItemPriceMode": {
      "type": "string",
      "enum": [
        "Platform",
        "ExternalTotal",
        "ExternalPrice"
      ]
    },
    "LineItemMode": {
      "type": "string",
      "enum": [
        "Standard",
        "GiftLineItem"
      ]
    },
    "RoundingMode": {
      "type": "string",
      "enum": [
        "HalfEven",
        "HalfUp",
        "HalfDown"
      ]
    },
    "ShippingInfo": {
      "type": "object",
      "properties": {
        "shippingMethodName": {
          "type": "string"
        },
        "price": {
          "$ref": "#/definitions/Money"
        },
        "shippingRate": {
          "$ref": "#/definitions/ShippingRate"
        },
        "taxedPrice": {
          "$ref": "#/definitions/TaxedItemPrice"
        },
        "taxRate": {
          "$ref": "#/definitions/TaxRate"
        },
        "taxCategory": {
          "$ref": "#/definitions/TaxCategoryReference"
        },
        "shippingMethod": {
          "$ref": "#/definitions/ShippingMethodReference"
        },
        "deliveries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Delivery"
          }
        },
        "discountedPrice": {
          "$ref": "#/definitions/DiscountedLineItemPrice"
        }
      },
      "required": [
        "shippingMethodName",
        "price",
        "shippingRate"
      ]
    },
    "TaxMode": {
      "type": "string",
      "enum": [
        "Platform",
        "External",
        "Disabled"
      ]
    },
    "TaxPortion": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "rate": {
          "type": "number",
          "minimum": 0,
          "maximum": 1
        },
        "amount": {
          "$ref": "#/definitions/Money"
        }
      },
      "required": [
        "rate",
        "amount"
      ]
    },
    "TaxedItemPrice": {
      "type": "object",
      "properties": {
        "totalNet": {
          "$ref": "#/definitions/Money"
        },
        "totalGross": {
          "$ref": "#/definitions/Money"
        }
      },
      "required": [
        "totalNet",
        "totalGross"
      ]
    },
    "TaxedPrice": {
      "type": "object",
      "properties": {
        "totalNet": {
          "$ref": "#/definitions/Money"
        },
        "totalGross": {
          "$ref": "#/definitions/Money"
        },
        "taxPortions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaxPortion"
          }
        }
      },
      "required": [
        "totalNet",
        "totalGross",
        "taxPortions"
      ]
    },
    "CartAddCustomLineItemAction": {
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "custom": {
              "$ref": "#/definitions/CustomFieldsDraft"
            },
            "externalTaxRate": {
              "$ref": "#/definitions/ExternalTaxRateDraft"
            },
            "money": {
              "$ref": "#/definitions/Money"
            },
            "name": {
              "$ref": "#/definitions/LocalizedString"
            },
            "quantity": {
              "type": "number"
            },
            "slug": {
              "type": "string"
            },
            "taxCategory": {
              "$ref": "#/definitions/TaxCategoryReference"
            }
          },
          "required": [
            "money",
            "name",
            "quantity",
            "slug"
          ]
        }
      ]
    },
    "CartAddDiscountCodeAction": {
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "code": {
              "type": "string"
            }
          },
          "required": [
            "code"
          ]
        }
      ]
    },
    "CartAddLineItemAction": {
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "custom": {
              "$ref": "#/definitions/CustomFieldsDraft"
            },
            "distributionChannel": {
              "$ref": "#/definitions/ChannelReference"
            },
            "externalTaxRate": {
              "$ref": "#/definitions/ExternalTaxRateDraft"
            },
            "productId": {
              "type": "string"
            },
            "quantity": {
              "type": "number"
            },
            "supplyChannel": {
              "$ref": "#/definitions/ChannelReference"
            },
            "variantId": {
              "type": "integer"
            },
            "externalPrice": {
              "$ref": "#/definitions/Money"
            },
            "externalTotalPrice": {
              "$ref": "#/definitions/ExternalLineItemTotalPrice"
            }
          },
          "required": [
            "productId",
            "quantity",
            "variantId"
          ]
        }
      ]
    },
    "CartAddPaymentAction": {
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "payment": {
              "$ref": "#/definitions/PaymentReference"
            }
          },
          "required": [
            "payment"
          ]
        }
      ]
    },
    "CartAddShoppingListAction": {
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "distributionChannel": {
              "$ref": "#/definitions/ChannelReference"
            },
            "shoppingList": {
              "$ref": "#/definitions/ShoppingListReference"
            },
            "supplyChannel": {
              "$ref": "#/definitions/ChannelReference"
            }
          },
          "required": [
            "shoppingList"
          ]
        }
      ]
    },
    "CartChangeCustomLineItemMoneyAction": {
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "customLineItemId": {
              "type": "string"
            },
            "money": {
              "$ref": "#/definitions/Money"
            }
          },
          "required": [
            "customLineItemId",
            "money"
          ]
        }
      ]
    },
    "CartChangeCustomLineItemQuantityAction": {
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "customLineItemId": {
              "type": "string"
            },
            "quantity": {
              "type": "number"
            }
          },
          "required": [
            "customLineItemId",
            "quantity"
          ]
        }
      ]
    },
    "CartChangeLineItemQuantityAction": {
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "lineItemId": {
              "type": "string"
            },
            "quantity": {
              "type": "number"
            },
            "externalPrice": {
              "$ref": "#/definitions/Money"
            },
            "externalTotalPrice": {
              "$ref": "#/definitions/ExternalLineItemTotalPrice"
            }
          },
          "required": [
            "lineItemId",
            "quantity"
          ]
        }
      ]
    },
    "CartChangeTaxModeAction": {
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "taxMode": {
              "$ref": "#/definitions/TaxMode"
            }
          }
        }
      ]
    },
    "CartChangeTaxRoundingModeAction": {
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "taxRoundingMode": {
              "$ref": "#/definitions/RoundingMode"
            }
          }
        }
      ]
    },
    "CartRecalculateAction": {
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "updateProductData": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "CartRemoveCustomLineItemAction": {
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "customLineItemId": {
              "type": "string"
            }
          },
          "required": [
            "customLineItemId"
          ]
        }
      ]
    },
    "CartRemoveDiscountCodeAction": {
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "discountCode": {
              "$ref": "#/definitions/DiscountCodeReference"
            }
          },
          "required": [
            "discountCode"
          ]
        }
      ]
    },
    "CartRemoveLineItemAction": {
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "lineItemId": {
              "type": "string"
            },
            "quantity": {
              "type": "number"
            },
            "externalPrice": {
              "$ref": "#/definitions/Money"
            },
            "externalTotalPrice": {
              "$ref": "#/definitions/ExternalLineItemTotalPrice"
            }
          },
          "required": [
            "lineItemId"
          ]
        }
      ]
    },
    "CartRemovePaymentAction": {
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "payment": {
              "$ref": "#/definitions/PaymentReference"
            }
          },
          "required": [
            "payment"
          ]
        }
      ]
    },
    "CartSetBillingAddressAction": {
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "address": {
              "$ref": "#/definitions/Address"
            }
          }
        }
      ]
    },
    "CartSetCountryAction": {
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "country": {
              "$ref": "#/definitions/CountryCode"
            }
          }
        }
      ]
    },
    "CartSetCustomFieldAction": {
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          },
          "required": [
            "name"
          ]
        }
      ]
    },
    "CartSetCustomLineItemCustomFieldAction": {
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "customLineItemId": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          },
          "required": [
            "customLineItemId",
            "name"
          ]
        }
      ]
    },
    "CartSetCustomLineItemCustomTypeAction": {
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "customLineItemId": {
              "type": "string"
            },
            "fields": {
              "type": "string"
            },
            "type": {
              "$ref": "#/definitions/Type"
            }
          },
          "required": [
            "customLineItemId"
          ]
        }
      ]
    },
    "CartSetCustomLineItemTaxRateAction": {
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "customLineItemId": {
              "type": "string"
            },
            "externalTaxRate": {
              "$ref": "#/definitions/ExternalTaxRateDraft"
            }
          },
          "required": [
            "customLineItemId"
          ]
        }
      ]
    },
    "CartSetCustomShippingMethodAction": {
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "externalTaxRate": {
              "$ref": "#/definitions/ExternalTaxRateDraft"
            },
            "shippingMethodName": {
              "type": "string"
            },
            "shippingRate": {
              "$ref": "#/definitions/ShippingRate"
            },
            "taxCategory": {
              "$ref": "#/definitions/TaxCategoryReference"
            }
          },
          "required": [
            "shippingMethodName",
            "shippingRate"
          ]
        }
      ]
    },
    "CartSetCustomTypeAction": {
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "fields": {
              "type": "string"
            },
            "type": {
              "$ref": "#/definitions/Type"
            }
          }
        }
      ]
    },
    "CartSetCustomerEmailAction": {
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "email": {
              "type": "string"
            }
          },
          "required": [
            "email"
          ]
        }
      ]
    },
    "CartSetCustomerIdAction": {
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "customerId": {
              "type": "string"
            }
          }
        }
      ]
    },
    "CartSetDeleteDaysAfterLastModificationAction": {
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "deleteDaysAfterLastModification": {
              "type": "integer"
            }
          }
        }
      ]
    },
    "CartSetLineItemCustomFieldAction": {
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "lineItemId": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          },
          "required": [
            "lineItemId",
            "name"
          ]
        }
      ]
    },
    "CartSetLineItemCustomTypeAction": {
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "fields": {
              "type": "string"
            },
            "lineItemId": {
              "type": "string"
            },
            "type": {
              "$ref": "#/definitions/Type"
            }
          },
          "required": [
            "lineItemId"
          ]
        }
      ]
    },
    "CartSetLineItemTaxRateAction": {
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "externalTaxRate": {
              "$ref": "#/definitions/ExternalTaxRateDraft"
            },
            "lineItemId": {
              "type": "string"
            }
          },
          "required": [
            "lineItemId"
          ]
        }
      ]
    },
    "CartSetLineItemTotalPriceAction": {
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "externalTotalPrice": {
              "$ref": "#/definitions/ExternalLineItemTotalPrice"
            },
            "lineItemId": {
              "type": "string"
            }
          },
          "required": [
            "lineItemId"
          ]
        }
      ]
    },
    "CartSetLocaleAction": {
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "locale": {
              "type": "string"
            }
          }
        }
      ]
    },
    "CartSetShippingAddressAction": {
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "address": {
              "$ref": "#/definitions/Address"
            }
          }
        }
      ]
    },
    "CartSetShippingMethodAction": {
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "shippingMethod": {
              "$ref": "#/definitions/ShippingMethodReference"
            }
          }
        }
      ]
    },
    "CartSetShippingMethodTaxRateAction": {
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "externalTaxRate": {
              "$ref": "#/definitions/ExternalTaxRateDraft"
            }
          }
        }
      ]
    },
    "CartSetLineItemPriceAction": {
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "externalPrice": {
              "$ref": "#/definitions/Money"
            },
            "lineItemId": {
              "type": "string"
            }
          },
          "required": [
            "lineItemId"
          ]
        }
      ]
    },
    "CartUpdate": {
      "allOf": [
        {
          "$ref": "#/definitions/Update"
        },
        {
          "type": "object",
          "properties": {
            "actions": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "required": [
            "actions"
          ]
        }
      ]
    },
    "CartUpdateAction": {
      "discriminator": "action",
      "$ref": "#/definitions/UpdateAction"
    },
    "CartDiscount": {
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        },
        {
          "type": "object",
          "properties": {
            "name": {
              "$ref": "#/definitions/LocalizedString"
            },
            "description": {
              "$ref": "#/definitions/LocalizedString"
            },
            "value": {
              "$ref": "#/definitions/CartDiscountValue"
            },
            "cartPredicate": {
              "type": "string"
            },
            "target": {
              "$ref": "#/definitions/CartDiscountTarget"
            },
            "sortOrder": {
              "type": "string"
            },
            "isActive": {
              "type": "boolean"
            },
            "validFrom": {
              "type": "string",
              "format": "date-time"
            },
            "validUntil": {
              "type": "string",
              "format": "date-time"
            },
            "requiresDiscountCode": {
              "type": "boolean"
            },
            "references": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            }
          },
          "required": [
            "name",
            "value",
            "cartPredicate",
            "sortOrder",
            "isActive",
            "requiresDiscountCode",
            "references"
          ]
        }
      ],
      "x-annotation-generate-collection": true
    },
    "CartDiscountChangeCartPredicateAction": {
      "allOf": [
        {
          "$ref": "#/definitions/CartDiscountUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "cartPredicate": {
              "type": "string"
            }
          },
          "required": [
            "cartPredicate"
          ]
        }
      ]
    },
    "CartDiscountChangeIsActiveAction": {
      "allOf": [
        {
          "$ref": "#/definitions/CartDiscountUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "isActive": {
              "type": "boolean"
            }
          },
          "required": [
            "isActive"
          ]
        }
      ]
    },
    "CartDiscountChangeNameAction": {
      "allOf": [
        {
          "$ref": "#/definitions/CartDiscountUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "name": {
              "$ref": "#/definitions/LocalizedString"
            }
          },
          "required": [
            "name"
          ]
        }
      ]
    },
    "CartDiscountChangeRequiresDiscountCodeAction": {
      "allOf": [
        {
          "$ref": "#/definitions/CartDiscountUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "requiresDiscountCode": {
              "type": "boolean"
            }
          },
          "required": [
            "requiresDiscountCode"
          ]
        }
      ]
    },
    "CartDiscountChangeSortOrderAction": {
      "allOf": [
        {
          "$ref": "#/definitions/CartDiscountUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "sortOrder": {
              "type": "string"
            }
          },
          "required": [
            "sortOrder"
          ]
        }
      ]
    },
    "CartDiscountChangeTargetAction": {
      "allOf": [
        {
          "$ref": "#/definitions/CartDiscountUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "target": {
              "$ref": "#/definitions/CartDiscountTarget"
            }
          },
          "required": [
            "target"
          ]
        }
      ]
    },
    "CartDiscountChangeValueAction": {
      "allOf": [
        {
          "$ref": "#/definitions/CartDiscountUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "value": {
              "$ref": "#/definitions/CartDiscountValue"
            }
          },
          "required": [
            "value"
          ]
        }
      ]
    },
    "CartDiscountCustomLineItemsTarget": {
      "allOf": [
        {
          "$ref": "#/definitions/CartDiscountTarget"
        },
        {
          "type": "object",
          "properties": {
            "predicate": {
              "type": "string"
            }
          },
          "required": [
            "predicate"
          ]
        }
      ]
    },
    "CartDiscountDraft": {
      "type": "object",
      "properties": {
        "name": {
          "$ref": "#/definitions/LocalizedString"
        },
        "description": {
          "$ref": "#/definitions/LocalizedString"
        },
        "value": {
          "$ref": "#/definitions/CartDiscountValue"
        },
        "cartPredicate": {
          "type": "string"
        },
        "target": {
          "$ref": "#/definitions/CartDiscountTarget"
        },
        "sortOrder": {
          "type": "string"
        },
        "isActive": {
          "type": "boolean"
        },
        "validFrom": {
          "type": "string",
          "format": "date-time"
        },
        "validUntil": {
          "type": "string",
          "format": "date-time"
        },
        "requiresDiscountCode": {
          "type": "boolean"
        }
      },
      "required": [
        "name",
        "value",
        "cartPredicate",
        "sortOrder",
        "requiresDiscountCode"
      ]
    },
    "CartDiscountLineItemsTarget": {
      "allOf": [
        {
          "$ref": "#/definitions/CartDiscountTarget"
        },
        {
          "type": "object",
          "properties": {
            "predicate": {
              "type": "string"
            }
          },
          "required": [
            "predicate"
          ]
        }
      ]
    },
    "CartDiscountPagedQueryResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/PagedQueryResponse"
        },
        {
          "type": "object",
          "properties": {
            "results": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CartDiscount"
              }
            }
          },
          "required": [
            "results"
          ]
        }
      ]
    },
    "CartDiscountReference": {
      "allOf": [
        {
          "$ref": "#/definitions/Reference"
        },
        {
          "type": "object",
          "properties": {
            "obj": {
              "$ref": "#/definitions/CartDiscount"
            }
          }
        }
      ],
      "x-annotation-generate-collection": true
    },
    "CartDiscountSetDescriptionAction": {
      "allOf": [
        {
          "$ref": "#/definitions/CartDiscountUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "description": {
              "$ref": "#/definitions/LocalizedString"
            }
          }
        }
      ]
    },
    "CartDiscountSetValidFromAction": {
      "allOf": [
        {
          "$ref": "#/definitions/CartDiscountUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "validFrom": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      ]
    },
    "CartDiscountSetValidUntilAction": {
      "allOf": [
        {
          "$ref": "#/definitions/CartDiscountUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "validUntil": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      ]
    },
    "CartDiscountShippingCostTarget": {
      "$ref": "#/definitions/CartDiscountTarget"
    },
    "CartDiscountTarget": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "discriminator": "type",
      "required": [
        "type"
      ]
    },
    "CartDiscountUpdate": {
      "allOf": [
        {
          "$ref": "#/definitions/Update"
        },
        {
          "type": "object",
          "properties": {
            "actions": {
              "type": "array",
              "items": {
                "type": "object"
              },
              "x-annotation-generator-type": "CartDiscountUpdateAction[]"
            }
          },
          "required": [
            "actions"
          ]
        }
      ]
    },
    "CartDiscountUpdateAction": {
      "discriminator": "action",
      "x-annotation-generate-collection": true,
      "$ref": "#/definitions/UpdateAction"
    },
    "CartDiscountValue": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "discriminator": "type",
      "required": [
        "type"
      ]
    },
    "CartDiscountValueAbsolute": {
      "allOf": [
        {
          "$ref": "#/definitions/CartDiscountValue"
        },
        {
          "type": "object",
          "properties": {
            "money": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Money"
              }
            }
          },
          "required": [
            "money"
          ]
        }
      ]
    },
    "CartDiscountValueRelative": {
      "allOf": [
        {
          "$ref": "#/definitions/CartDiscountValue"
        },
        {
          "type": "object",
          "properties": {
            "permyriad": {
              "type": "number",
              "format": "int64"
            }
          },
          "required": [
            "permyriad"
          ]
        }
      ]
    },
    "CartDiscountValueGiftLineItem": {
      "allOf": [
        {
          "$ref": "#/definitions/CartDiscountValue"
        },
        {
          "type": "object",
          "properties": {
            "product": {
              "$ref": "#/definitions/ProductReference"
            },
            "variantId": {
              "type": "number",
              "format": "int64"
            },
            "supplyChannel": {
              "$ref": "#/definitions/ChannelReference"
            },
            "distributionChannel": {
              "$ref": "#/definitions/ChannelReference"
            }
          },
          "required": [
            "product",
            "variantId"
          ]
        }
      ]
    },
    "Delivery": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeliveryItem"
          }
        },
        "parcels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Parcel"
          }
        }
      },
      "required": [
        "id",
        "createdAt",
        "items",
        "parcels"
      ]
    },
    "DeliveryItem": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "quantity": {
          "type": "number"
        }
      },
      "required": [
        "id",
        "quantity"
      ],
      "x-annotation-generate-collection": true
    },
    "ItemState": {
      "type": "object",
      "properties": {
        "quantity": {
          "type": "number"
        },
        "state": {
          "$ref": "#/definitions/StateReference"
        }
      },
      "required": [
        "quantity",
        "state"
      ]
    },
    "LineItemImportDraft": {
      "type": "object",
      "properties": {
        "productId": {
          "type": "string"
        },
        "name": {
          "$ref": "#/definitions/LocalizedString"
        },
        "variant": {
          "$ref": "#/definitions/ProductVariantImportDraft"
        },
        "price": {
          "$ref": "#/definitions/Price"
        },
        "quantity": {
          "type": "number"
        },
        "state": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ItemState"
          }
        },
        "supplyChannel": {
          "$ref": "#/definitions/ChannelReference"
        },
        "taxRate": {
          "$ref": "#/definitions/TaxRate"
        },
        "custom": {
          "$ref": "#/definitions/CustomFieldsDraft"
        }
      },
      "required": [
        "name",
        "variant",
        "price",
        "quantity"
      ],
      "x-annotation-generate-collection": true
    },
    "Order": {
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        },
        {
          "type": "object",
          "properties": {
            "completedAt": {
              "type": "string",
              "format": "date-time"
            },
            "orderNumber": {
              "type": "string"
            },
            "customerId": {
              "type": "string"
            },
            "customerEmail": {
              "type": "string"
            },
            "anonymousId": {
              "type": "string"
            },
            "lineItems": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LineItem"
              }
            },
            "customLineItems": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomLineItem"
              }
            },
            "totalPrice": {
              "$ref": "#/definitions/Money"
            },
            "taxedPrice": {
              "$ref": "#/definitions/TaxedPrice"
            },
            "shippingAddress": {
              "$ref": "#/definitions/Address"
            },
            "billingAddress": {
              "$ref": "#/definitions/Address"
            },
            "taxMode": {
              "$ref": "#/definitions/TaxMode"
            },
            "taxRoundingMode": {
              "$ref": "#/definitions/RoundingMode"
            },
            "customerGroup": {
              "$ref": "#/definitions/CustomerGroupReference"
            },
            "country": {
              "type": "string"
            },
            "orderState": {
              "$ref": "#/definitions/OrderState"
            },
            "state": {
              "$ref": "#/definitions/StateReference"
            },
            "shipmentState": {
              "$ref": "#/definitions/ShipmentState"
            },
            "paymentState": {
              "$ref": "#/definitions/PaymentState"
            },
            "shippingInfo": {
              "$ref": "#/definitions/ShippingInfo"
            },
            "syncInfo": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SyncInfo"
              }
            },
            "returnInfo": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ReturnInfo"
              }
            },
            "discountCodes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DiscountCodeInfo"
              }
            },
            "lastMessageSequenceNumber": {
              "type": "number",
              "format": "int64"
            },
            "cart": {
              "$ref": "#/definitions/CartReference"
            },
            "custom": {
              "$ref": "#/definitions/CustomFields"
            },
            "paymentInfo": {
              "$ref": "#/definitions/PaymentInfo"
            },
            "locale": {
              "type": "string"
            },
            "inventoryMode": {
              "$ref": "#/definitions/InventoryMode"
            }
          },
          "required": [
            "lineItems",
            "customLineItems",
            "totalPrice",
            "orderState",
            "syncInfo",
            "lastMessageSequenceNumber"
          ]
        }
      ],
      "x-annotation-generate-collection": true
    },
    "OrderFromCartDraft": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "version": {
          "type": "number",
          "format": "int64"
        },
        "orderNumber": {
          "type": "string"
        },
        "paymentState": {
          "$ref": "#/definitions/PaymentState"
        }
      },
      "required": [
        "id",
        "version"
      ]
    },
    "OrderImportDraft": {
      "type": "object",
      "properties": {
        "orderNumber": {
          "type": "string"
        },
        "customerId": {
          "type": "string"
        },
        "customerEmail": {
          "type": "string"
        },
        "lineItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LineItemImportDraft"
          }
        },
        "customLineItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomLineItemDraft"
          }
        },
        "totalPrice": {
          "$ref": "#/definitions/Money"
        },
        "taxedPrice": {
          "$ref": "#/definitions/TaxedPrice"
        },
        "shippingAddress": {
          "$ref": "#/definitions/Address"
        },
        "billingAddress": {
          "$ref": "#/definitions/Address"
        },
        "customerGroup": {
          "$ref": "#/definitions/CustomerGroupReference"
        },
        "country": {
          "type": "string"
        },
        "orderState": {
          "$ref": "#/definitions/OrderState"
        },
        "shipmentState": {
          "$ref": "#/definitions/ShipmentState"
        },
        "paymentState": {
          "$ref": "#/definitions/PaymentState"
        },
        "shippingInfo": {
          "$ref": "#/definitions/ShippingInfo"
        },
        "completedAt": {
          "type": "string",
          "format": "date-time"
        },
        "custom": {
          "$ref": "#/definitions/CustomFields"
        },
        "inventoryMode": {
          "$ref": "#/definitions/InventoryMode"
        },
        "taxRoundingMode": {
          "$ref": "#/definitions/RoundingMode"
        }
      },
      "required": [
        "totalPrice"
      ],
      "x-annotation-generate-collection": true
    },
    "OrderPagedQueryResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/PagedQueryResponse"
        },
        {
          "type": "object",
          "properties": {
            "results": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Order"
              }
            }
          },
          "required": [
            "results"
          ]
        }
      ]
    },
    "OrderState": {
      "type": "string",
      "enum": [
        "Open",
        "Confirmed",
        "Complete",
        "Cancelled"
      ]
    },
    "Parcel": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "measurements": {
          "$ref": "#/definitions/ParcelMeasurements"
        },
        "trackingData": {
          "$ref": "#/definitions/TrackingData"
        }
      },
      "required": [
        "id",
        "createdAt"
      ]
    },
    "ParcelMeasurements": {
      "type": "object",
      "properties": {
        "heightInMillimeter": {
          "type": "number"
        },
        "lengthInMillimeter": {
          "type": "number"
        },
        "widthInMillimeter": {
          "type": "number"
        },
        "weightInGram": {
          "type": "number"
        }
      },
      "required": [
        "heightInMillimeter",
        "lengthInMillimeter",
        "widthInMillimeter",
        "weightInGram"
      ]
    },
    "PaymentInfo": {
      "type": "object",
      "properties": {
        "payments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PaymentReference"
          }
        }
      },
      "required": [
        "payments"
      ]
    },
    "PaymentState": {
      "type": "string",
      "enum": [
        "BalanceDue",
        "Failed",
        "Pending",
        "CreditOwed",
        "Paid"
      ]
    },
    "ProductVariantImportDraft": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "format": "int64"
        },
        "sku": {
          "type": "string"
        },
        "prices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Price"
          }
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Attribute"
          }
        },
        "images": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Image"
          }
        }
      },
      "x-annotation-generate-collection": true
    },
    "ReturnInfo": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReturnItem"
          }
        },
        "returnTrackingId": {
          "type": "string"
        },
        "returnDate": {
          "type": "string",
          "format": "date-time"
        }
      },
      "required": [
        "items"
      ]
    },
    "ReturnItem": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "quantity": {
          "type": "number",
          "format": "int64"
        },
        "lineItemId": {
          "type": "string"
        },
        "comment": {
          "type": "string"
        },
        "shipmentState": {
          "$ref": "#/definitions/ReturnShipmentState"
        },
        "paymentState": {
          "$ref": "#/definitions/ReturnPaymentState"
        },
        "lastModifiedAt": {
          "type": "string",
          "format": "date-time"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "quantity",
        "lineItemId",
        "shipmentState",
        "paymentState",
        "lastModifiedAt",
        "createdAt"
      ],
      "x-annotation-generate-collection": true
    },
    "ReturnItemDraft": {
      "type": "object",
      "properties": {
        "quantity": {
          "type": "number",
          "format": "int64"
        },
        "lineItemId": {
          "type": "string"
        },
        "comment": {
          "type": "string"
        },
        "shipmentState": {
          "$ref": "#/definitions/ReturnShipmentState"
        }
      },
      "required": [
        "quantity",
        "lineItemId",
        "shipmentState"
      ],
      "x-annotation-generate-collection": true
    },
    "ReturnPaymentState": {
      "type": "string",
      "enum": [
        "NonRefundable",
        "Initial",
        "Refunded",
        "NotRefunded"
      ]
    },
    "ReturnShipmentState": {
      "type": "string",
      "enum": [
        "Advised",
        "Returned",
        "BackInStock",
        "Unusable"
      ]
    },
    "ShipmentState": {
      "type": "string",
      "enum": [
        "Shipped",
        "Ready",
        "Pending",
        "Delayed",
        "Partial",
        "Backorder"
      ]
    },
    "SyncInfo": {
      "type": "object",
      "properties": {
        "channel": {
          "$ref": "#/definitions/ChannelReference"
        },
        "externalId": {
          "type": "string"
        },
        "syncedAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "required": [
        "channel",
        "syncedAt"
      ]
    },
    "TrackingData": {
      "type": "object",
      "properties": {
        "trackingId": {
          "type": "string"
        },
        "carrier": {
          "type": "string"
        },
        "provider": {
          "type": "string"
        },
        "providerTransaction": {
          "type": "string"
        },
        "isReturn": {
          "type": "boolean"
        }
      }
    },
    "OrderAddDeliveryAction": {
      "allOf": [
        {
          "$ref": "#/definitions/OrderUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeliveryItem"
              }
            },
            "parcels": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Parcel"
              }
            }
          },
          "required": [
            "items",
            "parcels"
          ]
        }
      ]
    },
    "OrderAddParcelToDeliveryAction": {
      "allOf": [
        {
          "$ref": "#/definitions/OrderUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "deliveryId": {
              "type": "string"
            },
            "measurements": {
              "$ref": "#/definitions/ParcelMeasurements"
            },
            "trackingData": {
              "$ref": "#/definitions/TrackingData"
            }
          },
          "required": [
            "deliveryId"
          ]
        }
      ]
    },
    "OrderAddPaymentAction": {
      "allOf": [
        {
          "$ref": "#/definitions/OrderUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "payment": {
              "$ref": "#/definitions/PaymentReference"
            }
          },
          "required": [
            "payment"
          ]
        }
      ]
    },
    "OrderAddReturnInfoAction": {
      "allOf": [
        {
          "$ref": "#/definitions/OrderUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ReturnItemDraft"
              }
            },
            "returnDate": {
              "type": "string",
              "format": "date-time"
            },
            "returnTrackingId": {
              "type": "string"
            }
          },
          "required": [
            "items"
          ]
        }
      ]
    },
    "OrderChangeOrderStateAction": {
      "allOf": [
        {
          "$ref": "#/definitions/OrderUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "orderState": {
              "$ref": "#/definitions/OrderState"
            }
          },
          "required": [
            "orderState"
          ]
        }
      ]
    },
    "OrderChangePaymentStateAction": {
      "allOf": [
        {
          "$ref": "#/definitions/OrderUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "paymentState": {
              "$ref": "#/definitions/PaymentState"
            }
          },
          "required": [
            "paymentState"
          ]
        }
      ]
    },
    "OrderChangeShipmentStateAction": {
      "allOf": [
        {
          "$ref": "#/definitions/OrderUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "shipmentState": {
              "$ref": "#/definitions/ShipmentState"
            }
          },
          "required": [
            "shipmentState"
          ]
        }
      ]
    },
    "OrderImportCustomLineItemStateAction": {
      "allOf": [
        {
          "$ref": "#/definitions/OrderUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "customLineItemId": {
              "type": "string"
            },
            "state": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ItemState"
              }
            }
          },
          "required": [
            "customLineItemId",
            "state"
          ]
        }
      ]
    },
    "OrderImportLineItemStateAction": {
      "allOf": [
        {
          "$ref": "#/definitions/OrderUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "lineItemId": {
              "type": "string"
            },
            "state": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ItemState"
              }
            }
          },
          "required": [
            "lineItemId",
            "state"
          ]
        }
      ]
    },
    "OrderRemovePaymentAction": {
      "allOf": [
        {
          "$ref": "#/definitions/OrderUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "payment": {
              "$ref": "#/definitions/PaymentReference"
            }
          },
          "required": [
            "payment"
          ]
        }
      ]
    },
    "OrderSetBillingAddressAction": {
      "allOf": [
        {
          "$ref": "#/definitions/OrderUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "address": {
              "$ref": "#/definitions/Address"
            }
          }
        }
      ]
    },
    "OrderSetCustomFieldAction": {
      "allOf": [
        {
          "$ref": "#/definitions/OrderUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          },
          "required": [
            "name"
          ]
        }
      ]
    },
    "OrderSetCustomLineItemCustomFieldAction": {
      "allOf": [
        {
          "$ref": "#/definitions/OrderUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "customLineItemId": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          },
          "required": [
            "customLineItemId",
            "name"
          ]
        }
      ]
    },
    "OrderSetCustomLineItemCustomTypeAction": {
      "allOf": [
        {
          "$ref": "#/definitions/OrderUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "customLineItemId": {
              "type": "string"
            },
            "fields": {
              "type": "string"
            },
            "type": {
              "$ref": "#/definitions/Type"
            }
          },
          "required": [
            "customLineItemId"
          ]
        }
      ]
    },
    "OrderSetCustomTypeAction": {
      "allOf": [
        {
          "$ref": "#/definitions/OrderUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "fields": {
              "type": "string"
            },
            "type": {
              "$ref": "#/definitions/Type"
            }
          }
        }
      ]
    },
    "OrderSetCustomerEmailAction": {
      "allOf": [
        {
          "$ref": "#/definitions/OrderUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "email": {
              "type": "string"
            }
          },
          "required": [
            "email"
          ]
        }
      ]
    },
    "OrderSetLineItemCustomFieldAction": {
      "allOf": [
        {
          "$ref": "#/definitions/OrderUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "lineItemId": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          },
          "required": [
            "lineItemId",
            "name"
          ]
        }
      ]
    },
    "OrderSetLineItemCustomTypeAction": {
      "allOf": [
        {
          "$ref": "#/definitions/OrderUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "fields": {
              "type": "string"
            },
            "lineItemId": {
              "type": "string"
            },
            "type": {
              "$ref": "#/definitions/Type"
            }
          },
          "required": [
            "lineItemId"
          ]
        }
      ]
    },
    "OrderSetLocaleAction": {
      "allOf": [
        {
          "$ref": "#/definitions/OrderUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "locale": {
              "type": "string"
            }
          }
        }
      ]
    },
    "OrderSetOrderNumberAction": {
      "allOf": [
        {
          "$ref": "#/definitions/OrderUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "orderNumber": {
              "type": "string"
            }
          },
          "required": [
            "orderNumber"
          ]
        }
      ]
    },
    "OrderSetReturnPaymentStateAction": {
      "allOf": [
        {
          "$ref": "#/definitions/OrderUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "paymentState": {
              "$ref": "#/definitions/ReturnPaymentState"
            },
            "returnItemId": {
              "type": "string"
            }
          },
          "required": [
            "paymentState",
            "returnItemId"
          ]
        }
      ]
    },
    "OrderSetReturnShipmentStateAction": {
      "allOf": [
        {
          "$ref": "#/definitions/OrderUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "returnItemId": {
              "type": "string"
            },
            "shipmentState": {
              "$ref": "#/definitions/ReturnShipmentState"
            }
          },
          "required": [
            "returnItemId",
            "shipmentState"
          ]
        }
      ]
    },
    "OrderSetShippingAddressAction": {
      "allOf": [
        {
          "$ref": "#/definitions/OrderUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "address": {
              "$ref": "#/definitions/Address"
            }
          }
        }
      ]
    },
    "OrderTransitionCustomLineItemStateAction": {
      "allOf": [
        {
          "$ref": "#/definitions/OrderUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "actualTransitionDate": {
              "type": "string",
              "format": "date-time"
            },
            "customLineItemId": {
              "type": "string"
            },
            "fromState": {
              "$ref": "#/definitions/StateReference"
            },
            "quantity": {
              "type": "number"
            },
            "toState": {
              "$ref": "#/definitions/StateReference"
            }
          },
          "required": [
            "customLineItemId",
            "fromState",
            "quantity",
            "toState"
          ]
        }
      ]
    },
    "OrderTransitionLineItemLikeStateAction": {
      "allOf": [
        {
          "$ref": "#/definitions/OrderUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "actualTransitionDate": {
              "type": "string",
              "format": "date-time"
            },
            "fromState": {
              "$ref": "#/definitions/StateReference"
            },
            "quantity": {
              "type": "number"
            },
            "toState": {
              "$ref": "#/definitions/StateReference"
            }
          },
          "required": [
            "fromState",
            "quantity",
            "toState"
          ]
        }
      ]
    },
    "OrderTransitionLineItemStateAction": {
      "allOf": [
        {
          "$ref": "#/definitions/OrderUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "actualTransitionDate": {
              "type": "string",
              "format": "date-time"
            },
            "fromState": {
              "$ref": "#/definitions/StateReference"
            },
            "lineItemId": {
              "type": "string"
            },
            "quantity": {
              "type": "number"
            },
            "toState": {
              "$ref": "#/definitions/StateReference"
            }
          },
          "required": [
            "fromState",
            "lineItemId",
            "quantity",
            "toState"
          ]
        }
      ]
    },
    "OrderTransitionStateAction": {
      "allOf": [
        {
          "$ref": "#/definitions/OrderUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "state": {
              "$ref": "#/definitions/State"
            },
            "force": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "OrderUpdateSyncInfoAction": {
      "allOf": [
        {
          "$ref": "#/definitions/OrderUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "channel": {
              "$ref": "#/definitions/ChannelReference"
            },
            "externalId": {
              "type": "string"
            },
            "syncedAt": {
              "type": "string",
              "format": "date-time"
            }
          },
          "required": [
            "channel"
          ]
        }
      ]
    },
    "OrderUpdateAction": {
      "discriminator": "action",
      "$ref": "#/definitions/UpdateAction"
    },
    "OrderUpdate": {
      "allOf": [
        {
          "$ref": "#/definitions/Update"
        },
        {
          "type": "object",
          "properties": {
            "actions": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "required": [
            "actions"
          ]
        }
      ]
    },
    "Payment": {
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        },
        {
          "type": "object",
          "properties": {
            "customer": {
              "$ref": "#/definitions/CustomerReference"
            },
            "externalId": {
              "type": "string"
            },
            "interfaceId": {
              "type": "string"
            },
            "amountPlanned": {
              "$ref": "#/definitions/Money"
            },
            "amountAuthorized": {
              "$ref": "#/definitions/Money"
            },
            "authorizedUntil": {
              "type": "string"
            },
            "amountPaid": {
              "$ref": "#/definitions/Money"
            },
            "amountRefunded": {
              "$ref": "#/definitions/Money"
            },
            "paymentMethodInfo": {
              "$ref": "#/definitions/PaymentMethodInfo"
            },
            "paymentStatus": {
              "$ref": "#/definitions/PaymentStatus"
            },
            "transactions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Transaction"
              }
            },
            "interfaceInteractions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomFields"
              }
            },
            "custom": {
              "$ref": "#/definitions/CustomFields"
            },
            "key": {
              "type": "string"
            }
          },
          "required": [
            "amountPlanned",
            "paymentMethodInfo",
            "paymentStatus",
            "transactions",
            "interfaceInteractions"
          ]
        }
      ],
      "x-annotation-generate-collection": true
    },
    "PaymentDraft": {
      "type": "object",
      "properties": {
        "customer": {
          "$ref": "#/definitions/CustomerReference"
        },
        "externalId": {
          "type": "string"
        },
        "interfaceId": {
          "type": "string"
        },
        "amountPlanned": {
          "$ref": "#/definitions/Money"
        },
        "amountAuthorized": {
          "$ref": "#/definitions/Money"
        },
        "authorizedUntil": {
          "type": "string"
        },
        "amountPaid": {
          "$ref": "#/definitions/Money"
        },
        "amountRefunded": {
          "$ref": "#/definitions/Money"
        },
        "paymentMethodInfo": {
          "$ref": "#/definitions/PaymentMethodInfo"
        },
        "paymentStatus": {
          "$ref": "#/definitions/PaymentStatus"
        },
        "transactions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransactionDraft"
          }
        },
        "interfaceInteractions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomFieldsDraft"
          }
        },
        "custom": {
          "$ref": "#/definitions/CustomFieldsDraft"
        },
        "key": {
          "type": "string"
        }
      },
      "required": [
        "amountPlanned"
      ]
    },
    "PaymentMethodInfo": {
      "type": "object",
      "properties": {
        "paymentInterface": {
          "type": "string"
        },
        "method": {
          "type": "string"
        },
        "name": {
          "$ref": "#/definitions/LocalizedString"
        }
      }
    },
    "PaymentPagedQueryResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/PagedQueryResponse"
        },
        {
          "type": "object",
          "properties": {
            "results": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Payment"
              }
            }
          },
          "required": [
            "results"
          ]
        }
      ]
    },
    "PaymentReference": {
      "allOf": [
        {
          "$ref": "#/definitions/Reference"
        },
        {
          "type": "object",
          "properties": {
            "obj": {
              "$ref": "#/definitions/Payment"
            }
          }
        }
      ],
      "x-annotation-generate-collection": true
    },
    "PaymentStatus": {
      "type": "object",
      "properties": {
        "interfaceCode": {
          "type": "string"
        },
        "interfaceText": {
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/StateReference"
        }
      }
    },
    "Transaction": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        },
        "type": {
          "$ref": "#/definitions/TransactionType"
        },
        "amount": {
          "$ref": "#/definitions/Money"
        },
        "interactionId": {
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/TransactionState"
        }
      },
      "required": [
        "id",
        "type",
        "amount"
      ],
      "x-annotation-generate-collection": true
    },
    "TransactionDraft": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "string",
          "format": "date-time"
        },
        "type": {
          "$ref": "#/definitions/TransactionType"
        },
        "amount": {
          "$ref": "#/definitions/Money"
        },
        "interactionId": {
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/TransactionState"
        }
      },
      "required": [
        "type",
        "amount"
      ],
      "x-annotation-generate-collection": true
    },
    "TransactionState": {
      "type": "string",
      "enum": [
        "Pending",
        "Success",
        "Failure"
      ]
    },
    "TransactionType": {
      "type": "string",
      "enum": [
        "Authorization",
        "CancelAuthorization",
        "Charge",
        "Refund",
        "Chargeback"
      ]
    },
    "CustomObject": {
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        },
        {
          "type": "object",
          "properties": {
            "container": {
              "type": "string"
            },
            "key": {
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          },
          "required": [
            "container",
            "key",
            "value"
          ]
        }
      ],
      "x-annotation-generate-collection": true
    },
    "CustomObjectDraft": {
      "type": "object",
      "properties": {
        "container": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "version": {
          "type": "number",
          "format": "int64"
        }
      },
      "required": [
        "container",
        "key",
        "value"
      ]
    },
    "CustomObjectPagedQueryResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/PagedQueryResponse"
        },
        {
          "type": "object",
          "properties": {
            "results": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomObject"
              }
            }
          },
          "required": [
            "results"
          ]
        }
      ]
    },
    "PaymentAddInterfaceInteractionAction": {
      "allOf": [
        {
          "$ref": "#/definitions/PaymentUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "fields": {
              "type": "string"
            },
            "type": {
              "$ref": "#/definitions/Type"
            }
          }
        }
      ]
    },
    "PaymentAddTransactionAction": {
      "allOf": [
        {
          "$ref": "#/definitions/PaymentUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "transaction": {
              "$ref": "#/definitions/TransactionDraft"
            }
          },
          "required": [
            "transaction"
          ]
        }
      ]
    },
    "PaymentChangeAmountPlannedAction": {
      "allOf": [
        {
          "$ref": "#/definitions/PaymentUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "amount": {
              "$ref": "#/definitions/Money"
            }
          }
        }
      ]
    },
    "PaymentChangeTransactionInteractionIdAction": {
      "allOf": [
        {
          "$ref": "#/definitions/PaymentUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "interactionId": {
              "type": "string"
            },
            "transactionId": {
              "type": "string"
            }
          },
          "required": [
            "interactionId",
            "transactionId"
          ]
        }
      ]
    },
    "PaymentChangeTransactionStateAction": {
      "allOf": [
        {
          "$ref": "#/definitions/PaymentUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "state": {
              "$ref": "#/definitions/TransactionState"
            },
            "transactionId": {
              "type": "string"
            }
          },
          "required": [
            "state",
            "transactionId"
          ]
        }
      ]
    },
    "PaymentChangeTransactionTimestampAction": {
      "allOf": [
        {
          "$ref": "#/definitions/PaymentUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "timestamp": {
              "type": "string",
              "format": "date-time"
            },
            "transactionId": {
              "type": "string"
            }
          },
          "required": [
            "timestamp",
            "transactionId"
          ]
        }
      ]
    },
    "PaymentSetAmountPaidAction": {
      "allOf": [
        {
          "$ref": "#/definitions/PaymentUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "amount": {
              "$ref": "#/definitions/Money"
            }
          }
        }
      ]
    },
    "PaymentSetAmountRefundedAction": {
      "allOf": [
        {
          "$ref": "#/definitions/PaymentUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "amount": {
              "$ref": "#/definitions/Money"
            }
          }
        }
      ]
    },
    "PaymentSetAuthorizationAction": {
      "allOf": [
        {
          "$ref": "#/definitions/PaymentUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "amount": {
              "$ref": "#/definitions/Money"
            },
            "until": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      ]
    },
    "PaymentSetCustomFieldAction": {
      "allOf": [
        {
          "$ref": "#/definitions/PaymentUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          },
          "required": [
            "name"
          ]
        }
      ]
    },
    "PaymentSetCustomTypeAction": {
      "allOf": [
        {
          "$ref": "#/definitions/PaymentUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "fields": {
              "type": "string"
            },
            "type": {
              "$ref": "#/definitions/Type"
            }
          }
        }
      ]
    },
    "PaymentSetCustomerAction": {
      "allOf": [
        {
          "$ref": "#/definitions/PaymentUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "customer": {
              "$ref": "#/definitions/CustomerReference"
            }
          }
        }
      ]
    },
    "PaymentSetExternalIdAction": {
      "allOf": [
        {
          "$ref": "#/definitions/PaymentUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "externalId": {
              "type": "string"
            }
          }
        }
      ]
    },
    "PaymentSetInterfaceIdAction": {
      "allOf": [
        {
          "$ref": "#/definitions/PaymentUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "interfaceId": {
              "type": "string"
            }
          },
          "required": [
            "interfaceId"
          ]
        }
      ]
    },
    "PaymentSetMethodInfoInterfaceAction": {
      "allOf": [
        {
          "$ref": "#/definitions/PaymentUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "interface": {
              "type": "string"
            }
          },
          "required": [
            "interface"
          ]
        }
      ]
    },
    "PaymentSetMethodInfoMethodAction": {
      "allOf": [
        {
          "$ref": "#/definitions/PaymentUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "method": {
              "type": "string"
            }
          }
        }
      ]
    },
    "PaymentSetMethodInfoNameAction": {
      "allOf": [
        {
          "$ref": "#/definitions/PaymentUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "name": {
              "$ref": "#/definitions/LocalizedString"
            }
          }
        }
      ]
    },
    "PaymentSetStatusInterfaceCodeAction": {
      "allOf": [
        {
          "$ref": "#/definitions/PaymentUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "interfaceCode": {
              "type": "string"
            }
          }
        }
      ]
    },
    "PaymentSetStatusInterfaceTextAction": {
      "allOf": [
        {
          "$ref": "#/definitions/PaymentUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "interfaceText": {
              "type": "string"
            }
          }
        }
      ]
    },
    "PaymentTransitionStateAction": {
      "allOf": [
        {
          "$ref": "#/definitions/PaymentUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "state": {
              "$ref": "#/definitions/StateReference"
            }
          }
        }
      ]
    },
    "PaymentSetKeyAction": {
      "allOf": [
        {
          "$ref": "#/definitions/PaymentUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "key": {
              "type": "string"
            }
          }
        }
      ]
    },
    "PaymentUpdateAction": {
      "discriminator": "action",
      "$ref": "#/definitions/UpdateAction"
    },
    "PaymentUpdate": {
      "allOf": [
        {
          "$ref": "#/definitions/Update"
        },
        {
          "type": "object",
          "properties": {
            "actions": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "required": [
            "actions"
          ]
        }
      ]
    },
    "AnonymousCartSignInMode": {
      "type": "string",
      "enum": [
        "MergeWithExistingCustomerCart",
        "UseAsNewActiveCustomerCart"
      ]
    },
    "Customer": {
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        },
        {
          "type": "object",
          "properties": {
            "customerNumber": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "password": {
              "type": "string"
            },
            "firstName": {
              "type": "string"
            },
            "lastName": {
              "type": "string"
            },
            "middleName": {
              "type": "string"
            },
            "title": {
              "type": "string"
            },
            "dateOfBirth": {
              "type": "string",
              "format": "date"
            },
            "companyName": {
              "type": "string"
            },
            "vatId": {
              "type": "string"
            },
            "addresses": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Address"
              }
            },
            "defaultShippingAddressId": {
              "type": "string"
            },
            "shippingAddressIds": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "defaultBillingAddressId": {
              "type": "string"
            },
            "billingAddressIds": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "isEmailVerified": {
              "type": "boolean"
            },
            "externalId": {
              "type": "string"
            },
            "customerGroup": {
              "$ref": "#/definitions/CustomerGroupReference"
            },
            "custom": {
              "$ref": "#/definitions/CustomFields"
            },
            "locale": {
              "type": "string"
            },
            "salutation": {
              "type": "string"
            }
          },
          "required": [
            "email",
            "password",
            "addresses",
            "isEmailVerified"
          ]
        }
      ],
      "x-annotation-generate-collection": true
    },
    "CustomerDraft": {
      "type": "object",
      "properties": {
        "customerNumber": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "middleName": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "anonymousCartId": {
          "type": "string"
        },
        "anonymousId": {
          "type": "string"
        },
        "dateOfBirth": {
          "type": "string",
          "format": "date"
        },
        "companyName": {
          "type": "string"
        },
        "vatId": {
          "type": "string"
        },
        "addresses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Address"
          }
        },
        "defaultShippingAddress": {
          "type": "number",
          "format": "int64"
        },
        "shippingAddresses": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "defaultBillingAddress": {
          "type": "number",
          "format": "int64"
        },
        "billingAddresses": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "isEmailVerified": {
          "type": "boolean"
        },
        "externalId": {
          "type": "string"
        },
        "customerGroup": {
          "$ref": "#/definitions/CustomerGroupReference"
        },
        "custom": {
          "$ref": "#/definitions/CustomFieldsDraft"
        },
        "locale": {
          "type": "string"
        },
        "salutation": {
          "type": "string"
        }
      },
      "required": [
        "email",
        "password"
      ]
    },
    "CustomerEmailVerify": {
      "type": "object",
      "properties": {
        "version": {
          "type": "number",
          "format": "int64"
        },
        "tokenValue": {
          "type": "string"
        }
      },
      "required": [
        "tokenValue"
      ]
    },
    "CustomerReference": {
      "allOf": [
        {
          "$ref": "#/definitions/Reference"
        },
        {
          "type": "object",
          "properties": {
            "obj": {
              "$ref": "#/definitions/Customer"
            }
          }
        }
      ],
      "x-annotation-generate-collection": true
    },
    "CustomerSignin": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "anonymousCartId": {
          "type": "string"
        },
        "anonymousCartSignInMode": {
          "$ref": "#/definitions/AnonymousCartSignInMode"
        },
        "anonymousId": {
          "type": "string"
        }
      },
      "required": [
        "email",
        "password"
      ]
    },
    "CustomerSignInResult": {
      "type": "object",
      "properties": {
        "customer": {
          "$ref": "#/definitions/Customer"
        },
        "cart": {
          "type": "object"
        }
      },
      "required": [
        "customer"
      ]
    },
    "CustomerToken": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "lastModifiedAt": {
          "type": "string",
          "format": "date-time"
        },
        "customerId": {
          "type": "string"
        },
        "expiresAt": {
          "type": "string",
          "format": "date-time"
        },
        "value": {
          "type": "string"
        }
      },
      "required": [
        "id",
        "createdAt",
        "customerId",
        "expiresAt",
        "value"
      ]
    },
    "CustomerCreateEmailToken": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "version": {
          "type": "number",
          "format": "int64"
        },
        "ttlMinutes": {
          "type": "number",
          "format": "int64"
        }
      },
      "required": [
        "id",
        "ttlMinutes"
      ]
    },
    "CustomerCreatePasswordResetToken": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        }
      },
      "required": [
        "email"
      ]
    },
    "CustomerChangePassword": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "version": {
          "type": "number",
          "format": "int64"
        },
        "currentPassword": {
          "type": "string"
        },
        "newPassword": {
          "type": "string"
        }
      },
      "required": [
        "id",
        "version",
        "currentPassword",
        "newPassword"
      ]
    },
    "CustomerResetPassword": {
      "type": "object",
      "properties": {
        "tokenValue": {
          "type": "string"
        },
        "newPassword": {
          "type": "string"
        },
        "version": {
          "type": "number",
          "format": "int64"
        }
      },
      "required": [
        "tokenValue",
        "newPassword"
      ]
    },
    "CustomerGroup": {
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        },
        {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            }
          },
          "required": [
            "name"
          ]
        }
      ],
      "x-annotation-generate-collection": true
    },
    "CustomerGroupDraft": {
      "type": "object",
      "properties": {
        "groupName": {
          "type": "string"
        }
      },
      "required": [
        "groupName"
      ]
    },
    "CustomerGroupReference": {
      "allOf": [
        {
          "$ref": "#/definitions/Reference"
        },
        {
          "type": "object",
          "properties": {
            "obj": {
              "$ref": "#/definitions/CustomerGroup"
            }
          }
        }
      ],
      "x-annotation-generate-collection": true
    },
    "CustomerGroupPagedQueryResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/PagedQueryResponse"
        },
        {
          "type": "object",
          "properties": {
            "results": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerGroup"
              }
            }
          },
          "required": [
            "results"
          ]
        }
      ]
    },
    "CustomerGroupUpdate": {
      "allOf": [
        {
          "$ref": "#/definitions/Update"
        },
        {
          "type": "object",
          "properties": {
            "actions": {
              "type": "array",
              "items": {
                "type": "object"
              },
              "x-annotation-generator-type": "CustomerGroupUpdateAction[]"
            }
          },
          "required": [
            "actions"
          ]
        }
      ]
    },
    "CustomerGroupUpdateAction": {
      "discriminator": "action",
      "x-annotation-generate-collection": true,
      "$ref": "#/definitions/UpdateAction"
    },
    "CustomerGroupChangeNameAction": {
      "allOf": [
        {
          "$ref": "#/definitions/CustomerGroupUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            }
          },
          "required": [
            "name"
          ]
        }
      ]
    },
    "VariantValues": {
      "type": "object",
      "properties": {
        "sku": {
          "type": "string"
        },
        "prices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Price"
          }
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Attribute"
          }
        }
      },
      "required": [
        "prices",
        "attributes"
      ]
    },
    "ErrorResponse": {
      "type": "object",
      "properties": {
        "statusCode": {
          "type": "integer"
        },
        "message": {
          "type": "string"
        },
        "error": {
          "type": "string"
        },
        "error_description": {
          "type": "string"
        },
        "errors": {
          "type": "array",
          "items": {
            "type": "object"
          },
          "x-annotation-generator-type": "ErrorObject[]"
        }
      },
      "required": [
        "statusCode",
        "message"
      ]
    },
    "ErrorObject": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      },
      "discriminator": "code",
      "required": [
        "code",
        "message"
      ],
      "x-annotation-generate-collection": true
    },
    "AccessDeniedError": {
      "$ref": "#/definitions/ErrorObject"
    },
    "ConcurrentModificationError": {
      "allOf": [
        {
          "$ref": "#/definitions/ErrorObject"
        },
        {
          "type": "object",
          "properties": {
            "currentVersion": {
              "type": "number",
              "format": "int64"
            }
          }
        }
      ]
    },
    "DiscountCodeNonApplicableError": {
      "$ref": "#/definitions/ErrorObject"
    },
    "DuplicateAttributeValueError": {
      "allOf": [
        {
          "$ref": "#/definitions/ErrorObject"
        },
        {
          "type": "object",
          "properties": {
            "attribute": {
              "$ref": "#/definitions/Attribute"
            }
          },
          "required": [
            "attribute"
          ]
        }
      ]
    },
    "DuplicateAttributeValuesError": {
      "allOf": [
        {
          "$ref": "#/definitions/ErrorObject"
        },
        {
          "type": "object",
          "properties": {
            "attributes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Attribute"
              }
            }
          },
          "required": [
            "attributes"
          ]
        }
      ]
    },
    "DuplicateFieldError": {
      "allOf": [
        {
          "$ref": "#/definitions/ErrorObject"
        },
        {
          "type": "object",
          "properties": {
            "field": {
              "type": "string"
            },
            "duplicateValue": {
              "type": "string"
            }
          },
          "required": [
            "field",
            "duplicateValue"
          ]
        }
      ]
    },
    "DuplicatePriceScopeError": {
      "allOf": [
        {
          "$ref": "#/definitions/ErrorObject"
        },
        {
          "type": "object",
          "properties": {
            "conflictingPrices": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Price"
              }
            }
          },
          "required": [
            "conflictingPrices"
          ]
        }
      ]
    },
    "DuplicateVariantValuesError": {
      "allOf": [
        {
          "$ref": "#/definitions/ErrorObject"
        },
        {
          "type": "object",
          "properties": {
            "variantValues": {
              "$ref": "#/definitions/VariantValues"
            }
          },
          "required": [
            "variantValues"
          ]
        }
      ]
    },
    "InsufficientScopeError": {
      "$ref": "#/definitions/ErrorObject"
    },
    "InvalidCredentialsError": {
      "$ref": "#/definitions/ErrorObject"
    },
    "InvalidCurrentPasswordError": {
      "$ref": "#/definitions/ErrorObject"
    },
    "InvalidFieldError": {
      "allOf": [
        {
          "$ref": "#/definitions/ErrorObject"
        },
        {
          "type": "object",
          "properties": {
            "field": {
              "type": "string"
            },
            "invalidValue": {
              "type": "string"
            },
            "allowedValues": {
              "type": "array"
            }
          },
          "required": [
            "field",
            "invalidValue"
          ]
        }
      ]
    },
    "InvalidOperationError": {
      "$ref": "#/definitions/ErrorObject"
    },
    "InvalidSubjectError": {
      "$ref": "#/definitions/ErrorObject"
    },
    "InvalidTokenError": {
      "$ref": "#/definitions/ErrorObject"
    },
    "OutOfStockError": {
      "allOf": [
        {
          "$ref": "#/definitions/ErrorObject"
        },
        {
          "type": "object",
          "properties": {
            "lineItems": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "skus": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "required": [
            "lineItems",
            "skus"
          ]
        }
      ]
    },
    "PriceChangedError": {
      "allOf": [
        {
          "$ref": "#/definitions/ErrorObject"
        },
        {
          "type": "object",
          "properties": {
            "lineItems": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "shipping": {
              "type": "boolean"
            }
          },
          "required": [
            "lineItems",
            "shipping"
          ]
        }
      ]
    },
    "RequiredFieldError": {
      "allOf": [
        {
          "$ref": "#/definitions/ErrorObject"
        },
        {
          "type": "object",
          "properties": {
            "field": {
              "type": "string"
            }
          },
          "required": [
            "field"
          ]
        }
      ]
    },
    "ResourceNotFoundError": {
      "$ref": "#/definitions/ErrorObject"
    },
    "Category": {
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        },
        {
          "type": "object",
          "properties": {
            "name": {
              "$ref": "#/definitions/LocalizedString"
            },
            "slug": {
              "$ref": "#/definitions/LocalizedString"
            },
            "description": {
              "$ref": "#/definitions/LocalizedString"
            },
            "ancestors": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CategoryReference"
              }
            },
            "parent": {
              "$ref": "#/definitions/CategoryReference"
            },
            "orderHint": {
              "type": "string"
            },
            "externalId": {
              "type": "string"
            },
            "metaTitle": {
              "$ref": "#/definitions/LocalizedString"
            },
            "metaDescription": {
              "$ref": "#/definitions/LocalizedString"
            },
            "metaKeywords": {
              "$ref": "#/definitions/LocalizedString"
            },
            "custom": {
              "$ref": "#/definitions/CustomFields"
            },
            "assets": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Asset"
              }
            },
            "key": {
              "type": "string"
            }
          },
          "required": [
            "name",
            "slug",
            "ancestors"
          ]
        }
      ],
      "x-annotation-generate-collection": true
    },
    "CategoryDraft": {
      "type": "object",
      "properties": {
        "name": {
          "$ref": "#/definitions/LocalizedString"
        },
        "slug": {
          "$ref": "#/definitions/LocalizedString"
        },
        "description": {
          "$ref": "#/definitions/LocalizedString"
        },
        "parent": {
          "$ref": "#/definitions/CategoryReference"
        },
        "orderHint": {
          "type": "string"
        },
        "externalId": {
          "type": "string"
        },
        "metaTitle": {
          "$ref": "#/definitions/LocalizedString"
        },
        "metaDescription": {
          "$ref": "#/definitions/LocalizedString"
        },
        "metaKeywords": {
          "$ref": "#/definitions/LocalizedString"
        },
        "custom": {
          "$ref": "#/definitions/CustomFieldsDraft"
        },
        "assets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssetDraft"
          }
        },
        "key": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "slug"
      ]
    },
    "CategoryReference": {
      "allOf": [
        {
          "$ref": "#/definitions/Reference"
        },
        {
          "type": "object",
          "properties": {
            "obj": {
              "$ref": "#/definitions/Category"
            }
          }
        }
      ],
      "x-annotation-generate-collection": true
    },
    "CategoryPagedQueryResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/PagedQueryResponse"
        },
        {
          "type": "object",
          "properties": {
            "results": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Category"
              }
            }
          },
          "required": [
            "results"
          ]
        }
      ]
    },
    "CategoryUpdate": {
      "allOf": [
        {
          "$ref": "#/definitions/Update"
        },
        {
          "type": "object",
          "properties": {
            "actions": {
              "type": "array",
              "items": {
                "type": "object"
              },
              "x-annotation-generator-type": "CategoryUpdateAction[]"
            }
          },
          "required": [
            "actions"
          ]
        }
      ]
    },
    "CategoryUpdateAction": {
      "discriminator": "action",
      "x-annotation-generate-collection": true,
      "$ref": "#/definitions/UpdateAction"
    },
    "CategoryChangeNameAction": {
      "allOf": [
        {
          "$ref": "#/definitions/CategoryUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "name": {
              "$ref": "#/definitions/LocalizedString"
            }
          },
          "required": [
            "name"
          ]
        }
      ]
    },
    "CategoryChangeSlugAction": {
      "allOf": [
        {
          "$ref": "#/definitions/CategoryUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "slug": {
              "$ref": "#/definitions/LocalizedString"
            }
          },
          "required": [
            "slug"
          ]
        }
      ]
    },
    "CategorySetDescriptionAction": {
      "allOf": [
        {
          "$ref": "#/definitions/CategoryUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "description": {
              "$ref": "#/definitions/LocalizedString"
            }
          },
          "required": [
            "description"
          ]
        }
      ]
    },
    "CategoryChangeParentAction": {
      "allOf": [
        {
          "$ref": "#/definitions/CategoryUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "parent": {
              "$ref": "#/definitions/CategoryReference"
            }
          },
          "required": [
            "parent"
          ]
        }
      ]
    },
    "CategoryChangeOrderHintAction": {
      "allOf": [
        {
          "$ref": "#/definitions/CategoryUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "orderHint": {
              "type": "string"
            }
          },
          "required": [
            "orderHint"
          ]
        }
      ]
    },
    "CategorySetExternalIdAction": {
      "allOf": [
        {
          "$ref": "#/definitions/CategoryUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "externalId": {
              "type": "string"
            }
          }
        }
      ]
    },
    "CategorySetMetaTitleAction": {
      "allOf": [
        {
          "$ref": "#/definitions/CategoryUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "metaTitle": {
              "$ref": "#/definitions/LocalizedString"
            }
          },
          "required": [
            "metaTitle"
          ]
        }
      ]
    },
    "CategorySetMetaKeywordsAction": {
      "allOf": [
        {
          "$ref": "#/definitions/CategoryUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "metaKeywords": {
              "$ref": "#/definitions/LocalizedString"
            }
          },
          "required": [
            "metaKeywords"
          ]
        }
      ]
    },
    "CategorySetMetaDescriptionAction": {
      "allOf": [
        {
          "$ref": "#/definitions/CategoryUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "metaDescription": {
              "$ref": "#/definitions/LocalizedString"
            }
          },
          "required": [
            "metaDescription"
          ]
        }
      ]
    },
    "CategorySetCustomTypeAction": {
      "allOf": [
        {
          "$ref": "#/definitions/CategoryUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "$ref": "#/definitions/TypeReference"
            },
            "fields": {
              "type": "object"
            }
          }
        }
      ]
    },
    "CategorySetCustomFieldAction": {
      "allOf": [
        {
          "$ref": "#/definitions/CategoryUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          },
          "required": [
            "name"
          ]
        }
      ]
    },
    "CategoryAddAssetAction": {
      "allOf": [
        {
          "$ref": "#/definitions/CategoryUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "asset": {
              "$ref": "#/definitions/AssetDraft"
            }
          },
          "required": [
            "asset"
          ]
        }
      ]
    },
    "CategoryRemoveAssetAction": {
      "allOf": [
        {
          "$ref": "#/definitions/CategoryUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "assetId": {
              "type": "string"
            }
          },
          "required": [
            "assetId"
          ]
        }
      ]
    },
    "CategoryChangeAssetOrderAction": {
      "allOf": [
        {
          "$ref": "#/definitions/CategoryUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "assetOrder": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "required": [
            "assetOrder"
          ]
        }
      ]
    },
    "CategoryChangeAssetNameAction": {
      "allOf": [
        {
          "$ref": "#/definitions/CategoryUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "assetId": {
              "type": "string"
            },
            "name": {
              "$ref": "#/definitions/LocalizedString"
            }
          },
          "required": [
            "assetId",
            "name"
          ]
        }
      ]
    },
    "CategorySetAssetDescriptionAction": {
      "allOf": [
        {
          "$ref": "#/definitions/CategoryUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "assetId": {
              "type": "string"
            },
            "description": {
              "$ref": "#/definitions/LocalizedString"
            }
          },
          "required": [
            "assetId"
          ]
        }
      ]
    },
    "CategorySetAssetTagsAction": {
      "allOf": [
        {
          "$ref": "#/definitions/CategoryUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "assetId": {
              "type": "string"
            },
            "tags": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "required": [
            "assetId",
            "tags"
          ]
        }
      ]
    },
    "CategorySetAssetSourcesAction": {
      "allOf": [
        {
          "$ref": "#/definitions/CategoryUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "assetId": {
              "type": "string"
            },
            "sources": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetSource"
              }
            }
          },
          "required": [
            "assetId",
            "sources"
          ]
        }
      ]
    },
    "CategorySetAssetCustomTypeAction": {
      "allOf": [
        {
          "$ref": "#/definitions/CategoryUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "assetId": {
              "type": "string"
            },
            "type": {
              "$ref": "#/definitions/TypeReference"
            },
            "fields": {
              "type": "object"
            }
          },
          "required": [
            "assetId",
            "type",
            "fields"
          ]
        }
      ]
    },
    "CategorySetAssetCustomFieldAction": {
      "allOf": [
        {
          "$ref": "#/definitions/CategoryUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "assetId": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          },
          "required": [
            "assetId",
            "name"
          ]
        }
      ]
    },
    "CategorySetKeyAction": {
      "allOf": [
        {
          "$ref": "#/definitions/CategoryUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "key": {
              "type": "string"
            }
          },
          "required": [
            "key"
          ]
        }
      ]
    },
    "Channel": {
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        },
        {
          "type": "object",
          "properties": {
            "key": {
              "type": "string"
            },
            "roles": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ChannelRoleEnum"
              },
              "x-annotation-generator-type": "string[]"
            },
            "name": {
              "$ref": "#/definitions/LocalizedString"
            },
            "description": {
              "$ref": "#/definitions/LocalizedString"
            },
            "address": {
              "$ref": "#/definitions/Address"
            },
            "reviewRatingStatistics": {
              "$ref": "#/definitions/ReviewRatingStatistics"
            },
            "custom": {
              "$ref": "#/definitions/CustomFields"
            },
            "geoLocation": {
              "type": "object"
            }
          },
          "required": [
            "key",
            "roles"
          ]
        }
      ],
      "x-annotation-generate-collection": true
    },
    "ChannelAddRolesAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ChannelUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "roles": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ChannelRoleEnum"
              }
            }
          },
          "required": [
            "roles"
          ]
        }
      ]
    },
    "ChannelChangeDescriptionAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ChannelUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "description": {
              "$ref": "#/definitions/LocalizedString"
            }
          },
          "required": [
            "description"
          ]
        }
      ]
    },
    "ChannelChangeKeyAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ChannelUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "key": {
              "type": "string"
            }
          },
          "required": [
            "key"
          ]
        }
      ]
    },
    "ChannelChangeNameAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ChannelUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "name": {
              "$ref": "#/definitions/LocalizedString"
            }
          },
          "required": [
            "name"
          ]
        }
      ]
    },
    "ChannelDraft": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ChannelRoleEnum"
          },
          "x-annotation-generator-type": "string[]"
        },
        "name": {
          "$ref": "#/definitions/LocalizedString"
        },
        "description": {
          "$ref": "#/definitions/LocalizedString"
        },
        "address": {
          "$ref": "#/definitions/Address"
        },
        "custom": {
          "$ref": "#/definitions/CustomFieldsDraft"
        },
        "geoLocation": {
          "type": "object"
        }
      },
      "required": [
        "key"
      ]
    },
    "ChannelReference": {
      "allOf": [
        {
          "$ref": "#/definitions/Reference"
        },
        {
          "type": "object",
          "properties": {
            "obj": {
              "$ref": "#/definitions/Channel"
            }
          }
        }
      ],
      "x-annotation-generate-collection": true
    },
    "ChannelRemoveRolesAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ChannelUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "roles": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ChannelRoleEnum"
              }
            }
          },
          "required": [
            "roles"
          ]
        }
      ]
    },
    "ChannelRoleEnum": {
      "type": "string",
      "enum": [
        "InventorySupply",
        "ProductDistribution",
        "OrderExport",
        "OrderImport",
        "Primary"
      ]
    },
    "ChannelSetAddressAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ChannelUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "address": {
              "$ref": "#/definitions/Address"
            }
          }
        }
      ]
    },
    "ChannelSetCustomFieldAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ChannelUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          },
          "required": [
            "name"
          ]
        }
      ]
    },
    "ChannelSetCustomTypeAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ChannelUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "$ref": "#/definitions/TypeReference"
            },
            "fields": {
              "type": "object"
            }
          }
        }
      ]
    },
    "ChannelSetGeolocationAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ChannelUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "geoLocation": {
              "type": "object"
            }
          }
        }
      ]
    },
    "ChannelSetRolesAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ChannelUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "roles": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ChannelRoleEnum"
              }
            }
          },
          "required": [
            "roles"
          ]
        }
      ]
    },
    "ChannelUpdate": {
      "allOf": [
        {
          "$ref": "#/definitions/Update"
        },
        {
          "type": "object",
          "properties": {
            "actions": {
              "type": "array",
              "items": {
                "type": "object"
              },
              "x-annotation-generator-type": "ChannelUpdateAction[]"
            }
          },
          "required": [
            "actions"
          ]
        }
      ]
    },
    "ChannelUpdateAction": {
      "discriminator": "action",
      "x-annotation-generate-collection": true,
      "$ref": "#/definitions/UpdateAction"
    },
    "DiscountCode": {
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        },
        {
          "type": "object",
          "properties": {
            "name": {
              "$ref": "#/definitions/LocalizedString"
            },
            "description": {
              "$ref": "#/definitions/LocalizedString"
            },
            "code": {
              "type": "string"
            },
            "cartDiscounts": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CartDiscountReference"
              }
            },
            "cartPredicate": {
              "type": "string"
            },
            "isActive": {
              "type": "boolean"
            },
            "references": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "maxApplications": {
              "type": "number",
              "format": "int64"
            },
            "maxApplicationsPerCustomer": {
              "type": "number",
              "format": "int64"
            }
          },
          "required": [
            "code",
            "cartDiscounts",
            "isActive",
            "references"
          ]
        }
      ],
      "x-annotation-generate-collection": true
    },
    "DiscountCodeDraft": {
      "type": "object",
      "properties": {
        "name": {
          "$ref": "#/definitions/LocalizedString"
        },
        "description": {
          "$ref": "#/definitions/LocalizedString"
        },
        "code": {
          "type": "string"
        },
        "cartDiscounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CartDiscountReference"
          }
        },
        "cartPredicate": {
          "type": "string"
        },
        "isActive": {
          "type": "boolean"
        },
        "maxApplications": {
          "type": "number",
          "format": "int64"
        },
        "maxApplicationsPerCustomer": {
          "type": "number",
          "format": "int64"
        }
      },
      "required": [
        "code",
        "cartDiscounts"
      ]
    },
    "DiscountCodePagedQueryResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/PagedQueryResponse"
        },
        {
          "type": "object",
          "properties": {
            "results": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DiscountCode"
              }
            }
          },
          "required": [
            "results"
          ]
        }
      ]
    },
    "DiscountCodeReference": {
      "allOf": [
        {
          "$ref": "#/definitions/Reference"
        },
        {
          "type": "object",
          "properties": {
            "obj": {
              "$ref": "#/definitions/DiscountCode"
            }
          }
        }
      ],
      "x-annotation-generate-collection": true
    },
    "DiscountCodeChangeCartDiscountsAction": {
      "allOf": [
        {
          "$ref": "#/definitions/DiscountCodeUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "cartDiscounts": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            }
          },
          "required": [
            "cartDiscounts"
          ]
        }
      ]
    },
    "DiscountCodeSetCartPredicateAction": {
      "allOf": [
        {
          "$ref": "#/definitions/DiscountCodeUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "cartPredicate": {
              "type": "string"
            }
          }
        }
      ]
    },
    "DiscountCodeSetDescriptionAction": {
      "allOf": [
        {
          "$ref": "#/definitions/DiscountCodeUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "description": {
              "$ref": "#/definitions/LocalizedString"
            }
          }
        }
      ]
    },
    "DiscountCodeSetMaxApplicationsAction": {
      "allOf": [
        {
          "$ref": "#/definitions/DiscountCodeUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "maxApplications": {
              "type": "number"
            }
          }
        }
      ]
    },
    "DiscountCodeSetMaxApplicationsPerCustomerAction": {
      "allOf": [
        {
          "$ref": "#/definitions/DiscountCodeUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "maxApplicationsPerCustomer": {
              "type": "number"
            }
          }
        }
      ]
    },
    "DiscountCodeSetNameAction": {
      "allOf": [
        {
          "$ref": "#/definitions/DiscountCodeUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "name": {
              "$ref": "#/definitions/LocalizedString"
            }
          }
        }
      ]
    },
    "DiscountCodeUpdateAction": {
      "discriminator": "action",
      "$ref": "#/definitions/UpdateAction"
    },
    "DiscountCodeUpdate": {
      "allOf": [
        {
          "$ref": "#/definitions/Update"
        },
        {
          "type": "object",
          "properties": {
            "actions": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "required": [
            "actions"
          ]
        }
      ]
    },
    "Inventory": {
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        },
        {
          "type": "object",
          "properties": {
            "sku": {
              "type": "string"
            },
            "supplyChannel": {
              "$ref": "#/definitions/ChannelReference"
            },
            "quantityOnStock": {
              "type": "number",
              "format": "int64"
            },
            "availableQuantity": {
              "type": "number",
              "format": "int64"
            },
            "restockableInDays": {
              "type": "number",
              "format": "int64"
            },
            "expectedDelivery": {
              "type": "string",
              "format": "date-time"
            },
            "custom": {
              "$ref": "#/definitions/CustomFields"
            }
          },
          "required": [
            "sku",
            "quantityOnStock",
            "availableQuantity"
          ]
        }
      ],
      "x-annotation-generate-collection": true
    },
    "InventoryAddQuantityAction": {
      "allOf": [
        {
          "$ref": "#/definitions/InventoryUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "quantity": {
              "type": "number",
              "format": "int64"
            }
          },
          "required": [
            "quantity"
          ]
        }
      ]
    },
    "InventoryChangeQuantityAction": {
      "allOf": [
        {
          "$ref": "#/definitions/InventoryUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "quantity": {
              "type": "number",
              "format": "int64"
            }
          },
          "required": [
            "quantity"
          ]
        }
      ]
    },
    "InventoryDraft": {
      "type": "object",
      "properties": {
        "sku": {
          "type": "string"
        },
        "supplyChannel": {
          "$ref": "#/definitions/ChannelReference"
        },
        "quantityOnStock": {
          "type": "number",
          "format": "int64"
        },
        "availableQuantity": {
          "type": "number",
          "format": "int64"
        },
        "restockableInDays": {
          "type": "number",
          "format": "int64"
        },
        "expectedDelivery": {
          "type": "string",
          "format": "date-time"
        },
        "custom": {
          "$ref": "#/definitions/CustomFieldsDraft"
        }
      },
      "required": [
        "sku",
        "quantityOnStock"
      ]
    },
    "InventoryPagedQueryResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/PagedQueryResponse"
        },
        {
          "type": "object",
          "properties": {
            "results": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Inventory"
              }
            }
          },
          "required": [
            "results"
          ]
        }
      ]
    },
    "InventoryRemoveQuantityAction": {
      "allOf": [
        {
          "$ref": "#/definitions/InventoryUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "quantity": {
              "type": "number",
              "format": "int64"
            }
          },
          "required": [
            "quantity"
          ]
        }
      ]
    },
    "InventorySetCustomFieldAction": {
      "allOf": [
        {
          "$ref": "#/definitions/InventoryUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          },
          "required": [
            "name"
          ]
        }
      ]
    },
    "InventorySetCustomTypeAction": {
      "allOf": [
        {
          "$ref": "#/definitions/InventoryUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "$ref": "#/definitions/TypeReference"
            },
            "fields": {
              "type": "object"
            }
          }
        }
      ]
    },
    "InventorySetExpectedDeliveryAction": {
      "allOf": [
        {
          "$ref": "#/definitions/InventoryUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "expectedDelivery": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      ]
    },
    "InventorySetRestockableInDaysAction": {
      "allOf": [
        {
          "$ref": "#/definitions/InventoryUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "restockableInDays": {
              "type": "number",
              "format": "int64"
            }
          }
        }
      ]
    },
    "InventorySetSupplyChannelAction": {
      "allOf": [
        {
          "$ref": "#/definitions/InventoryUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "supplyChannel": {
              "$ref": "#/definitions/ChannelReference"
            }
          }
        }
      ]
    },
    "InventoryUpdate": {
      "allOf": [
        {
          "$ref": "#/definitions/Update"
        },
        {
          "type": "object",
          "properties": {
            "actions": {
              "type": "array",
              "items": {
                "type": "object"
              },
              "x-annotation-generator-type": "InventoryUpdateAction[]"
            }
          },
          "required": [
            "actions"
          ]
        }
      ]
    },
    "InventoryUpdateAction": {
      "discriminator": "action",
      "x-annotation-generate-collection": true,
      "$ref": "#/definitions/UpdateAction"
    },
    "MessageConfiguration": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        }
      },
      "required": [
        "enabled"
      ]
    },
    "AttributeBooleanType": {
      "$ref": "#/definitions/AttributeType"
    },
    "AttributeConstraintEnum": {
      "type": "string",
      "enum": [
        "None",
        "Unique",
        "CombinationUnique",
        "SameForAll"
      ]
    },
    "AttributeDateTimeType": {
      "$ref": "#/definitions/AttributeType"
    },
    "AttributeDateType": {
      "$ref": "#/definitions/AttributeType"
    },
    "AttributeTimeType": {
      "$ref": "#/definitions/AttributeType"
    },
    "AttributeDefinition": {
      "type": "object",
      "properties": {
        "type": {
          "type": "object",
          "x-annotation-generator-type": "AttributeType"
        },
        "name": {
          "type": "string"
        },
        "label": {
          "$ref": "#/definitions/LocalizedString"
        },
        "isRequired": {
          "type": "boolean"
        },
        "attributeConstraint": {
          "x-annotation-generator-type": "string",
          "$ref": "#/definitions/AttributeConstraintEnum"
        },
        "inputTip": {
          "$ref": "#/definitions/LocalizedString"
        },
        "inputHint": {
          "$ref": "#/definitions/TextInputHint"
        },
        "isSearchable": {
          "type": "boolean"
        }
      },
      "required": [
        "type",
        "name",
        "label",
        "isRequired",
        "attributeConstraint",
        "inputHint",
        "isSearchable"
      ],
      "x-annotation-generate-collection": true
    },
    "AttributeDefinitionDraft": {
      "type": "object",
      "properties": {
        "type": {
          "type": "object",
          "x-annotation-generator-type": "AttributeType"
        },
        "name": {
          "type": "string"
        },
        "label": {
          "$ref": "#/definitions/LocalizedString"
        },
        "isRequired": {
          "type": "boolean"
        },
        "attributeConstraint": {
          "x-annotation-generator-type": "string",
          "$ref": "#/definitions/AttributeConstraintEnum"
        },
        "inputTip": {
          "$ref": "#/definitions/LocalizedString"
        },
        "inputHint": {
          "$ref": "#/definitions/TextInputHint"
        },
        "isSearchable": {
          "type": "boolean"
        }
      },
      "required": [
        "type",
        "name",
        "label",
        "isRequired"
      ],
      "x-annotation-generate-collection": true
    },
    "AttributeEnumType": {
      "allOf": [
        {
          "$ref": "#/definitions/AttributeType"
        },
        {
          "type": "object",
          "properties": {
            "values": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AttributePlainEnumValue"
              }
            }
          },
          "required": [
            "values"
          ]
        }
      ]
    },
    "AttributeLocalizableTextType": {
      "$ref": "#/definitions/AttributeType"
    },
    "AttributeLocalizedEnumType": {
      "allOf": [
        {
          "$ref": "#/definitions/AttributeType"
        },
        {
          "type": "object",
          "properties": {
            "values": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AttributeLocalizedEnumValue"
              }
            }
          },
          "required": [
            "values"
          ]
        }
      ]
    },
    "AttributeLocalizedEnumValue": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "label": {
          "$ref": "#/definitions/LocalizedString"
        }
      },
      "required": [
        "key",
        "label"
      ]
    },
    "AttributeMoneyType": {
      "$ref": "#/definitions/AttributeType"
    },
    "AttributeNestedType": {
      "allOf": [
        {
          "$ref": "#/definitions/AttributeType"
        },
        {
          "type": "object",
          "properties": {
            "typeReference": {
              "$ref": "#/definitions/ProductTypeReference"
            }
          },
          "required": [
            "typeReference"
          ]
        }
      ]
    },
    "AttributeNumberType": {
      "$ref": "#/definitions/AttributeType"
    },
    "AttributePlainEnumValue": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "label": {
          "type": "string"
        }
      },
      "required": [
        "key",
        "label"
      ]
    },
    "AttributeReferenceType": {
      "allOf": [
        {
          "$ref": "#/definitions/AttributeType"
        },
        {
          "type": "object",
          "properties": {
            "referenceTypeId": {
              "x-annotation-generator-type": "string",
              "$ref": "#/definitions/ReferenceTypeId"
            }
          },
          "required": [
            "referenceTypeId"
          ]
        }
      ]
    },
    "AttributeSetType": {
      "allOf": [
        {
          "$ref": "#/definitions/AttributeType"
        },
        {
          "type": "object",
          "properties": {
            "elementType": {
              "$ref": "#/definitions/AttributeType"
            }
          },
          "required": [
            "elementType"
          ]
        }
      ]
    },
    "AttributeTextType": {
      "$ref": "#/definitions/AttributeType"
    },
    "AttributeType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      },
      "discriminator": "name",
      "required": [
        "name"
      ]
    },
    "ProductPagedQueryResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/PagedQueryResponse"
        },
        {
          "type": "object",
          "properties": {
            "results": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Product"
              }
            }
          },
          "required": [
            "results"
          ]
        }
      ]
    },
    "ProductType": {
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        },
        {
          "type": "object",
          "properties": {
            "key": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "attributes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AttributeDefinition"
              }
            }
          },
          "required": [
            "name",
            "description"
          ]
        }
      ],
      "x-annotation-generate-collection": true
    },
    "ProductTypeDraft": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AttributeDefinitionDraft"
          }
        }
      },
      "required": [
        "name",
        "description"
      ]
    },
    "ProductTypeReference": {
      "allOf": [
        {
          "$ref": "#/definitions/Reference"
        },
        {
          "type": "object",
          "properties": {
            "obj": {
              "$ref": "#/definitions/ProductType"
            }
          }
        }
      ],
      "x-annotation-generate-collection": true
    },
    "ProductTypePagedQueryResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/PagedQueryResponse"
        },
        {
          "type": "object",
          "properties": {
            "results": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProductType"
              }
            }
          },
          "required": [
            "results"
          ]
        }
      ]
    },
    "ProductTypeUpdate": {
      "allOf": [
        {
          "$ref": "#/definitions/Update"
        },
        {
          "type": "object",
          "properties": {
            "actions": {
              "type": "array",
              "items": {
                "type": "object"
              },
              "x-annotation-generator-type": "ProductTypeUpdateAction[]"
            }
          },
          "required": [
            "actions"
          ]
        }
      ]
    },
    "ProductTypeUpdateAction": {
      "discriminator": "action",
      "x-annotation-generate-collection": true,
      "$ref": "#/definitions/UpdateAction"
    },
    "TextInputHint": {
      "type": "string",
      "enum": [
        "SingleLine",
        "MultiLine"
      ]
    },
    "ProductTypeSetKeyAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ProductTypeUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "key": {
              "type": "string"
            }
          }
        }
      ]
    },
    "ProductTypeChangeNameAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ProductTypeUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            }
          },
          "required": [
            "name"
          ]
        }
      ]
    },
    "ProductTypeChangeDescriptionAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ProductTypeUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "description": {
              "type": "string"
            }
          },
          "required": [
            "description"
          ]
        }
      ]
    },
    "ProductTypeAddAttributeDefinitionAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ProductTypeUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "attribute": {
              "$ref": "#/definitions/AttributeDefinitionDraft"
            }
          },
          "required": [
            "attribute"
          ]
        }
      ]
    },
    "ProductTypeRemoveAttributeDefinitionAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ProductTypeUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            }
          },
          "required": [
            "name"
          ]
        }
      ]
    },
    "ProductTypeChangeLabelAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ProductTypeUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "attributeName": {
              "type": "string"
            },
            "label": {
              "$ref": "#/definitions/LocalizedString"
            }
          },
          "required": [
            "attributeName",
            "label"
          ]
        }
      ]
    },
    "ProductTypeSetInputTipAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ProductTypeUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "attributeName": {
              "type": "string"
            },
            "inputTip": {
              "$ref": "#/definitions/LocalizedString"
            }
          },
          "required": [
            "attributeName"
          ]
        }
      ]
    },
    "ProductTypeAddPlainEnumValueAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ProductTypeUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "attributeName": {
              "type": "string"
            },
            "value": {
              "$ref": "#/definitions/AttributePlainEnumValue"
            }
          },
          "required": [
            "attributeName",
            "value"
          ]
        }
      ]
    },
    "ProductTypeAddLocalizedEnumValueAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ProductTypeUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "attributeName": {
              "type": "string"
            },
            "value": {
              "$ref": "#/definitions/AttributeLocalizedEnumValue"
            }
          },
          "required": [
            "attributeName",
            "value"
          ]
        }
      ]
    },
    "ProductTypeChangeAttributeOrderAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ProductTypeUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "attributes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AttributeDefinitionDraft"
              }
            }
          },
          "required": [
            "attributes"
          ]
        }
      ]
    },
    "ProductTypeChangePlainEnumValueOrderAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ProductTypeUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "attributeName": {
              "type": "string"
            },
            "values": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AttributePlainEnumValue"
              }
            }
          },
          "required": [
            "attributeName",
            "values"
          ]
        }
      ]
    },
    "ProductTypeChangeLocalizedEnumValueOrderAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ProductTypeUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "attributeName": {
              "type": "string"
            },
            "values": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AttributeLocalizedEnumValue"
              }
            }
          },
          "required": [
            "attributeName",
            "values"
          ]
        }
      ]
    },
    "ProductTypeChangePlainEnumValueLabelAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ProductTypeUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "attributeName": {
              "type": "string"
            },
            "newValue": {
              "$ref": "#/definitions/AttributePlainEnumValue"
            }
          },
          "required": [
            "attributeName",
            "newValue"
          ]
        }
      ]
    },
    "ProductTypeChangeLocalizedEnumValueLabelAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ProductTypeUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "attributeName": {
              "type": "string"
            },
            "newValue": {
              "$ref": "#/definitions/AttributeLocalizedEnumValue"
            }
          },
          "required": [
            "attributeName",
            "newValue"
          ]
        }
      ]
    },
    "ProductTypeChangeIsSearchableAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ProductTypeUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "attributeName": {
              "type": "string"
            },
            "isSearchable": {
              "type": "boolean"
            }
          },
          "required": [
            "attributeName",
            "isSearchable"
          ]
        }
      ]
    },
    "ProductTypeChangeInputHintAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ProductTypeUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "attributeName": {
              "type": "string"
            },
            "newValue": {
              "type": "string"
            }
          },
          "required": [
            "attributeName",
            "newValue"
          ]
        }
      ]
    },
    "Project": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "countries": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "currencies": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "languages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "trialUntil": {
          "type": "string",
          "format": "date-time"
        },
        "messages": {
          "$ref": "#/definitions/MessageConfiguration"
        }
      },
      "required": [
        "key",
        "name",
        "countries",
        "currencies",
        "languages",
        "createdAt",
        "messages"
      ]
    },
    "Attribute": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "value"
      ],
      "x-annotation-generate-collection": true
    },
    "CategoryOrderHints": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      },
      "x-annotation-generator-type": "Collection"
    },
    "CustomTokenizer": {
      "allOf": [
        {
          "$ref": "#/definitions/SuggestTokenizer"
        },
        {
          "type": "object",
          "properties": {
            "inputs": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "required": [
            "inputs"
          ]
        }
      ]
    },
    "Product": {
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        },
        {
          "type": "object",
          "properties": {
            "key": {
              "type": "string"
            },
            "productType": {
              "$ref": "#/definitions/ProductTypeReference"
            },
            "masterData": {
              "$ref": "#/definitions/ProductCatalogData"
            },
            "taxCategory": {
              "$ref": "#/definitions/TaxCategoryReference"
            },
            "state": {
              "$ref": "#/definitions/StateReference"
            },
            "reviewRatingStatistics": {
              "$ref": "#/definitions/ReviewRatingStatistics"
            }
          },
          "required": [
            "productType",
            "masterData"
          ]
        }
      ],
      "x-annotation-generate-collection": true
    },
    "ProductCatalogData": {
      "type": "object",
      "properties": {
        "published": {
          "type": "boolean"
        },
        "current": {
          "$ref": "#/definitions/ProductData"
        },
        "staged": {
          "$ref": "#/definitions/ProductData"
        },
        "hasStagedChanges": {
          "type": "boolean"
        }
      },
      "required": [
        "published",
        "current",
        "staged",
        "hasStagedChanges"
      ]
    },
    "ProductData": {
      "type": "object",
      "properties": {
        "name": {
          "$ref": "#/definitions/LocalizedString"
        },
        "categories": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CategoryReference"
          }
        },
        "categoryOrderHints": {
          "$ref": "#/definitions/CategoryOrderHints"
        },
        "description": {
          "$ref": "#/definitions/LocalizedString"
        },
        "slug": {
          "$ref": "#/definitions/LocalizedString"
        },
        "metaTitle": {
          "$ref": "#/definitions/LocalizedString"
        },
        "metaDescription": {
          "$ref": "#/definitions/LocalizedString"
        },
        "metaKeywords": {
          "$ref": "#/definitions/LocalizedString"
        },
        "masterVariant": {
          "$ref": "#/definitions/ProductVariant"
        },
        "variants": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductVariant"
          }
        },
        "searchKeywords": {
          "$ref": "#/definitions/SearchKeywords"
        }
      },
      "required": [
        "name",
        "categories",
        "slug",
        "masterVariant",
        "variants",
        "searchKeywords"
      ]
    },
    "ProductDraft": {
      "type": "object",
      "properties": {
        "productType": {
          "$ref": "#/definitions/ProductTypeReference"
        },
        "name": {
          "$ref": "#/definitions/LocalizedString"
        },
        "slug": {
          "$ref": "#/definitions/LocalizedString"
        },
        "key": {
          "type": "string"
        },
        "description": {
          "$ref": "#/definitions/LocalizedString"
        },
        "categories": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CategoryReference"
          }
        },
        "categoryOrderHints": {
          "$ref": "#/definitions/CategoryOrderHints"
        },
        "metaTitle": {
          "$ref": "#/definitions/LocalizedString"
        },
        "metaDescription": {
          "$ref": "#/definitions/LocalizedString"
        },
        "metaKeywords": {
          "$ref": "#/definitions/LocalizedString"
        },
        "masterVariant": {
          "$ref": "#/definitions/ProductVariantDraft"
        },
        "variants": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductVariantDraft"
          }
        },
        "taxCategory": {
          "$ref": "#/definitions/TaxCategoryReference"
        },
        "searchKeywords": {
          "$ref": "#/definitions/SearchKeywords"
        },
        "state": {
          "$ref": "#/definitions/StateReference"
        },
        "publish": {
          "type": "boolean"
        }
      },
      "required": [
        "name",
        "slug"
      ]
    },
    "ProductReference": {
      "allOf": [
        {
          "$ref": "#/definitions/Reference"
        },
        {
          "type": "object",
          "properties": {
            "obj": {
              "$ref": "#/definitions/Product"
            }
          }
        }
      ],
      "x-annotation-generate-collection": true
    },
    "ProductVariant": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "format": "int64"
        },
        "sku": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "prices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Price"
          }
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Attribute"
          }
        },
        "price": {
          "$ref": "#/definitions/Price"
        },
        "images": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Image"
          }
        },
        "assets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Asset"
          }
        },
        "availability": {
          "$ref": "#/definitions/ProductVariantAvailability"
        },
        "isMatchingVariant": {
          "type": "boolean"
        },
        "scopedPrice": {
          "$ref": "#/definitions/ScopedPrice"
        },
        "scopedPriceDiscounted": {
          "type": "boolean"
        }
      },
      "required": [
        "id"
      ],
      "x-annotation-generate-collection": true
    },
    "ProductVariantAvailability": {
      "type": "object",
      "properties": {
        "isOnStock": {
          "type": "boolean"
        },
        "restockableInDays": {
          "type": "number",
          "format": "int64"
        },
        "availableQuantity": {
          "type": "number",
          "format": "int64"
        },
        "channels": {
          "x-annotation-generator-type": "ProductVariantChannelAvailability[]",
          "$ref": "#/definitions/ProductVariantChannelAvailabilityMap"
        }
      },
      "x-annotation-generate-collection": true
    },
    "ProductVariantChannelAvailability": {
      "type": "object",
      "properties": {
        "isOnStock": {
          "type": "boolean"
        },
        "restockableInDays": {
          "type": "number",
          "format": "int64"
        },
        "availableQuantity": {
          "type": "number",
          "format": "int64"
        }
      },
      "x-annotation-generate-collection": true
    },
    "ProductVariantChannelAvailabilityMap": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/ProductVariantChannelAvailability"
      }
    },
    "ProductVariantDraft": {
      "type": "object",
      "properties": {
        "sku": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "prices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PriceDraft"
          }
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Attribute"
          }
        },
        "images": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Image"
          }
        },
        "assets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssetDraft"
          }
        }
      },
      "x-annotation-generate-collection": true
    },
    "SearchKeyword": {
      "type": "object",
      "properties": {
        "text": {
          "type": "string"
        },
        "suggestTokenizer": {
          "type": "object",
          "x-annotation-generator-type": "SuggestTokenizer"
        }
      },
      "required": [
        "text"
      ],
      "x-annotation-generate-collection": true
    },
    "SearchKeywords": {
      "type": "object",
      "properties": {
        "/^[a-z]{2}(-[A-Z]{2})?$/": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SearchKeyword"
          }
        }
      },
      "required": [
        "/^[a-z]{2}(-[A-Z]{2})?$/"
      ],
      "x-annotation-generator-type": "Collection"
    },
    "SuggestTokenizer": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "whitespace",
            "custom"
          ]
        }
      },
      "discriminator": "type",
      "required": [
        "type"
      ]
    },
    "WhitespaceTokenizer": {
      "$ref": "#/definitions/SuggestTokenizer"
    },
    "ProductAddAssetAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "asset": {
              "$ref": "#/definitions/AssetDraft"
            },
            "sku": {
              "type": "string"
            },
            "variantId": {
              "type": "integer"
            }
          },
          "required": [
            "asset"
          ]
        }
      ]
    },
    "ProductAddExternalImageAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "image": {
              "$ref": "#/definitions/Image"
            },
            "sku": {
              "type": "string"
            },
            "variantId": {
              "type": "integer"
            },
            "staged": {
              "type": "boolean"
            }
          },
          "required": [
            "image"
          ]
        }
      ]
    },
    "ProductAddPriceAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "price": {
              "$ref": "#/definitions/PriceDraft"
            },
            "sku": {
              "type": "string"
            },
            "variantId": {
              "type": "integer"
            },
            "staged": {
              "type": "boolean"
            }
          },
          "required": [
            "price"
          ]
        }
      ]
    },
    "ProductAddToCategoryAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "category": {
              "$ref": "#/definitions/CategoryReference"
            },
            "orderHint": {
              "type": "string"
            },
            "staged": {
              "type": "boolean"
            }
          },
          "required": [
            "category"
          ]
        }
      ]
    },
    "ProductAddVariantAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "attributes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Attribute"
              }
            },
            "images": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Image"
              }
            },
            "key": {
              "type": "string"
            },
            "prices": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PriceDraft"
              }
            },
            "sku": {
              "type": "string"
            },
            "staged": {
              "type": "boolean"
            }
          },
          "required": [
            "attributes",
            "prices"
          ]
        }
      ]
    },
    "ProductChangeAssetNameAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "assetId": {
              "type": "string"
            },
            "name": {
              "$ref": "#/definitions/LocalizedString"
            },
            "sku": {
              "type": "string"
            },
            "variantId": {
              "type": "integer"
            },
            "staged": {
              "type": "boolean"
            }
          },
          "required": [
            "assetId",
            "name"
          ]
        }
      ]
    },
    "ProductChangeAssetOrderAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "assetOrder": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "sku": {
              "type": "string"
            },
            "variantId": {
              "type": "integer"
            },
            "staged": {
              "type": "boolean"
            }
          },
          "required": [
            "assetOrder"
          ]
        }
      ]
    },
    "ProductChangeMasterVariantAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "sku": {
              "type": "string"
            },
            "variantId": {
              "type": "integer"
            },
            "staged": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "ProductChangeNameAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "name": {
              "$ref": "#/definitions/LocalizedString"
            },
            "staged": {
              "type": "boolean"
            }
          },
          "required": [
            "name"
          ]
        }
      ]
    },
    "ProductChangePriceAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "price": {
              "$ref": "#/definitions/PriceDraft"
            },
            "priceId": {
              "type": "string"
            },
            "staged": {
              "type": "boolean"
            }
          },
          "required": [
            "price",
            "priceId"
          ]
        }
      ]
    },
    "ProductChangeSlugAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "slug": {
              "$ref": "#/definitions/LocalizedString"
            },
            "staged": {
              "type": "boolean"
            }
          },
          "required": [
            "slug"
          ]
        }
      ]
    },
    "ProductLegacySetSkuAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "sku": {
              "type": "string"
            },
            "variantId": {
              "type": "integer"
            }
          },
          "required": [
            "variantId"
          ]
        }
      ]
    },
    "ProductMoveImageToPositionAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "imageUrl": {
              "type": "string"
            },
            "position": {
              "type": "integer"
            },
            "sku": {
              "type": "string"
            },
            "variantId": {
              "type": "integer"
            },
            "staged": {
              "type": "boolean"
            }
          },
          "required": [
            "imageUrl",
            "position"
          ]
        }
      ]
    },
    "ProductPublishAction": {
      "$ref": "#/definitions/ProductUpdateAction"
    },
    "ProductRemoveAssetAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "assetId": {
              "type": "string"
            },
            "sku": {
              "type": "string"
            },
            "variantId": {
              "type": "integer"
            },
            "staged": {
              "type": "boolean"
            }
          },
          "required": [
            "assetId"
          ]
        }
      ]
    },
    "ProductRemoveFromCategoryAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "category": {
              "$ref": "#/definitions/CategoryReference"
            },
            "staged": {
              "type": "boolean"
            }
          },
          "required": [
            "category"
          ]
        }
      ]
    },
    "ProductRemoveImageAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "imageUrl": {
              "type": "string"
            },
            "sku": {
              "type": "string"
            },
            "variantId": {
              "type": "integer"
            },
            "staged": {
              "type": "boolean"
            }
          },
          "required": [
            "imageUrl"
          ]
        }
      ]
    },
    "ProductRemovePriceAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "priceId": {
              "type": "string"
            },
            "staged": {
              "type": "boolean"
            }
          },
          "required": [
            "priceId"
          ]
        }
      ]
    },
    "ProductRemoveVariantAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer"
            },
            "sku": {
              "type": "string"
            },
            "staged": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "ProductRevertStagedChangesAction": {
      "$ref": "#/definitions/ProductUpdateAction"
    },
    "ProductSetAssetCustomFieldAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "assetId": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "sku": {
              "type": "string"
            },
            "staged": {
              "type": "boolean"
            },
            "value": {
              "type": "string"
            },
            "variantId": {
              "type": "integer"
            }
          },
          "required": [
            "assetId",
            "name"
          ]
        }
      ]
    },
    "ProductSetAssetCustomTypeAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "assetId": {
              "type": "string"
            },
            "fields": {
              "type": "string"
            },
            "sku": {
              "type": "string"
            },
            "staged": {
              "type": "boolean"
            },
            "type": {
              "$ref": "#/definitions/Type"
            },
            "variantId": {
              "type": "integer"
            }
          },
          "required": [
            "assetId"
          ]
        }
      ]
    },
    "ProductSetAssetDescriptionAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "assetId": {
              "type": "string"
            },
            "description": {
              "$ref": "#/definitions/LocalizedString"
            },
            "sku": {
              "type": "string"
            },
            "variantId": {
              "type": "integer"
            },
            "staged": {
              "type": "boolean"
            }
          },
          "required": [
            "assetId"
          ]
        }
      ]
    },
    "ProductSetAssetTagsAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "assetId": {
              "type": "string"
            },
            "sku": {
              "type": "string"
            },
            "tags": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "variantId": {
              "type": "integer"
            },
            "staged": {
              "type": "boolean"
            }
          },
          "required": [
            "assetId"
          ]
        }
      ]
    },
    "ProductSetAttributeAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "sku": {
              "type": "string"
            },
            "value": {
              "type": "string"
            },
            "variantId": {
              "type": "integer"
            },
            "staged": {
              "type": "boolean"
            }
          },
          "required": [
            "name"
          ]
        }
      ]
    },
    "ProductSetAttributeInAllVariantsAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "value": {
              "type": "string"
            },
            "staged": {
              "type": "boolean"
            }
          },
          "required": [
            "name"
          ]
        }
      ]
    },
    "ProductSetCategoryOrderHintAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "categoryId": {
              "type": "string"
            },
            "orderHint": {
              "type": "string"
            },
            "staged": {
              "type": "boolean"
            }
          },
          "required": [
            "categoryId"
          ]
        }
      ]
    },
    "ProductSetDescriptionAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "description": {
              "$ref": "#/definitions/LocalizedString"
            },
            "staged": {
              "type": "boolean"
            }
          },
          "required": [
            "description"
          ]
        }
      ]
    },
    "ProductSetDiscountedPriceAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "discounted": {
              "$ref": "#/definitions/DiscountedPrice"
            },
            "priceId": {
              "type": "string"
            },
            "staged": {
              "type": "boolean"
            }
          },
          "required": [
            "priceId"
          ]
        }
      ]
    },
    "ProductSetKeyAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "key": {
              "type": "string"
            }
          }
        }
      ]
    },
    "ProductSetMetaDescriptionAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "metaDescription": {
              "$ref": "#/definitions/LocalizedString"
            }
          }
        }
      ]
    },
    "ProductSetMetaKeywordsAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "metaKeywords": {
              "$ref": "#/definitions/LocalizedString"
            }
          }
        }
      ]
    },
    "ProductSetMetaTitleAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "metaTitle": {
              "$ref": "#/definitions/LocalizedString"
            }
          }
        }
      ]
    },
    "ProductSetPricesAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "prices": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PriceDraft"
              }
            },
            "sku": {
              "type": "string"
            },
            "variantId": {
              "type": "integer"
            },
            "staged": {
              "type": "boolean"
            }
          },
          "required": [
            "prices"
          ]
        }
      ]
    },
    "ProductSetProductPriceCustomFieldAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "priceId": {
              "type": "string"
            },
            "staged": {
              "type": "boolean"
            },
            "value": {
              "type": "string"
            }
          },
          "required": [
            "name",
            "priceId"
          ]
        }
      ]
    },
    "ProductSetProductPriceCustomTypeAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "fields": {
              "type": "string"
            },
            "priceId": {
              "type": "string"
            },
            "staged": {
              "type": "boolean"
            },
            "type": {
              "$ref": "#/definitions/Type"
            }
          },
          "required": [
            "priceId"
          ]
        }
      ]
    },
    "ProductSetProductVariantKeyAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "key": {
              "type": "string"
            },
            "sku": {
              "type": "string"
            },
            "variantId": {
              "type": "integer"
            },
            "staged": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "ProductSetSearchKeywordsAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "searchKeywords": {
              "$ref": "#/definitions/SearchKeywords"
            },
            "staged": {
              "type": "boolean"
            }
          },
          "required": [
            "searchKeywords"
          ]
        }
      ]
    },
    "ProductSetSkuAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "sku": {
              "type": "string"
            },
            "variantId": {
              "type": "integer"
            },
            "staged": {
              "type": "boolean"
            }
          },
          "required": [
            "variantId"
          ]
        }
      ]
    },
    "ProductSetTaxCategoryAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "taxCategory": {
              "$ref": "#/definitions/TaxCategoryReference"
            }
          }
        }
      ]
    },
    "ProductStagedProductUpdateActionImplAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "staged": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "ProductTransitionStateAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "state": {
              "$ref": "#/definitions/State"
            },
            "force": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "ProductUnpublishAction": {
      "$ref": "#/definitions/ProductUpdateAction"
    },
    "ProductUpdate": {
      "allOf": [
        {
          "$ref": "#/definitions/Update"
        },
        {
          "type": "object",
          "properties": {
            "actions": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "required": [
            "actions"
          ]
        }
      ]
    },
    "ProductUpdateAction": {
      "discriminator": "action",
      "$ref": "#/definitions/UpdateAction"
    },
    "ProductProjection": {
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        },
        {
          "type": "object",
          "properties": {
            "key": {
              "type": "string"
            },
            "productType": {
              "$ref": "#/definitions/ProductTypeReference"
            },
            "name": {
              "$ref": "#/definitions/LocalizedString"
            },
            "description": {
              "$ref": "#/definitions/LocalizedString"
            },
            "slug": {
              "$ref": "#/definitions/LocalizedString"
            },
            "categories": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CategoryReference"
              }
            },
            "categoryOrderHints": {
              "$ref": "#/definitions/CategoryOrderHints"
            },
            "metaTitle": {
              "$ref": "#/definitions/LocalizedString"
            },
            "metaDescription": {
              "$ref": "#/definitions/LocalizedString"
            },
            "metaKeywords": {
              "$ref": "#/definitions/LocalizedString"
            },
            "searchKeywords": {
              "$ref": "#/definitions/SearchKeywords"
            },
            "hasStagedChanges": {
              "type": "boolean"
            },
            "published": {
              "type": "boolean"
            },
            "masterVariant": {
              "$ref": "#/definitions/ProductVariant"
            },
            "variants": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProductVariant"
              }
            },
            "taxCategory": {
              "$ref": "#/definitions/TaxCategoryReference"
            },
            "state": {
              "$ref": "#/definitions/StateReference"
            },
            "reviewRatingStatistics": {
              "$ref": "#/definitions/ReviewRatingStatistics"
            }
          },
          "required": [
            "productType",
            "name",
            "slug",
            "categories",
            "masterVariant",
            "variants"
          ]
        }
      ],
      "x-annotation-generate-collection": true
    },
    "ProductProjectionPagedQueryResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/PagedQueryResponse"
        },
        {
          "type": "object",
          "properties": {
            "results": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProductProjection"
              }
            }
          },
          "required": [
            "results"
          ]
        }
      ]
    },
    "FacetTypes": {
      "type": "string",
      "enum": [
        "terms",
        "range",
        "filter"
      ]
    },
    "FacetResult": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/FacetTypes"
        }
      },
      "discriminator": "type",
      "required": [
        "type"
      ]
    },
    "FacetResultRange": {
      "type": "object",
      "properties": {
        "from": {
          "type": "number"
        },
        "fromStr": {
          "type": "string"
        },
        "to": {
          "type": "number"
        },
        "toStr": {
          "type": "string"
        },
        "count": {
          "type": "number",
          "format": "int64"
        },
        "productCount": {
          "type": "number",
          "format": "int64"
        },
        "total": {
          "type": "number",
          "format": "int64"
        },
        "min": {
          "type": "number"
        },
        "max": {
          "type": "number"
        },
        "mean": {
          "type": "number"
        }
      },
      "required": [
        "from",
        "fromStr",
        "to",
        "toStr",
        "count",
        "total",
        "min",
        "max",
        "mean"
      ],
      "x-annotation-generate-collection": true
    },
    "FacetResultTerm": {
      "type": "object",
      "properties": {
        "term": {
          "type": "string"
        },
        "count": {
          "type": "number",
          "format": "int64"
        },
        "productCount": {
          "type": "number",
          "format": "int64"
        }
      },
      "required": [
        "term",
        "count"
      ],
      "x-annotation-generate-collection": true
    },
    "FacetResults": {
      "type": "object",
      "additionalProperties": {
        "type": "object"
      },
      "x-annotation-generator-type": "Collection"
    },
    "FilteredFacetResult": {
      "allOf": [
        {
          "$ref": "#/definitions/FacetResult"
        },
        {
          "type": "object",
          "properties": {
            "count": {
              "type": "number",
              "format": "int64"
            },
            "productCount": {
              "type": "number",
              "format": "int64"
            }
          },
          "required": [
            "count"
          ]
        }
      ]
    },
    "ProductProjectionPagedSearchResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/PagedQueryResponse"
        },
        {
          "type": "object",
          "properties": {
            "results": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProductProjection"
              }
            },
            "facets": {
              "$ref": "#/definitions/FacetResults"
            }
          },
          "required": [
            "results",
            "facets"
          ]
        }
      ]
    },
    "RangeFacetResult": {
      "allOf": [
        {
          "$ref": "#/definitions/FacetResult"
        },
        {
          "type": "object",
          "properties": {
            "ranges": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FacetResultRange"
              }
            }
          },
          "required": [
            "ranges"
          ]
        }
      ]
    },
    "TermFacetResult": {
      "allOf": [
        {
          "$ref": "#/definitions/FacetResult"
        },
        {
          "type": "object",
          "properties": {
            "dataType": {
              "$ref": "#/definitions/TermFacetResultType"
            },
            "missing": {
              "type": "number",
              "format": "int64"
            },
            "total": {
              "type": "number",
              "format": "int64"
            },
            "other": {
              "type": "number",
              "format": "int64"
            },
            "terms": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FacetResultTerm"
              }
            }
          },
          "required": [
            "dataType",
            "missing",
            "total",
            "other",
            "terms"
          ]
        }
      ]
    },
    "TermFacetResultType": {
      "type": "string",
      "enum": [
        "text",
        "date",
        "time",
        "datetime",
        "boolean",
        "number"
      ]
    },
    "ProductDiscount": {
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        },
        {
          "type": "object",
          "properties": {
            "name": {
              "$ref": "#/definitions/LocalizedString"
            },
            "description": {
              "$ref": "#/definitions/LocalizedString"
            },
            "value": {
              "$ref": "#/definitions/ProductDiscountValue"
            },
            "predicate": {
              "type": "string"
            },
            "sortOrder": {
              "type": "string"
            },
            "isActive": {
              "type": "boolean"
            },
            "references": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            }
          },
          "required": [
            "name",
            "value",
            "predicate",
            "sortOrder",
            "isActive",
            "references"
          ]
        }
      ],
      "x-annotation-generate-collection": true
    },
    "ProductDiscountChangeIsActiveAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ProductDiscountUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "isActive": {
              "type": "boolean"
            }
          },
          "required": [
            "isActive"
          ]
        }
      ]
    },
    "ProductDiscountChangeNameAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ProductDiscountUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "name": {
              "$ref": "#/definitions/LocalizedString"
            }
          },
          "required": [
            "name"
          ]
        }
      ]
    },
    "ProductDiscountChangePredicateAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ProductDiscountUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "predicate": {
              "type": "string"
            }
          },
          "required": [
            "predicate"
          ]
        }
      ]
    },
    "ProductDiscountChangeSortOrderAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ProductDiscountUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "sortOrder": {
              "type": "string"
            }
          },
          "required": [
            "sortOrder"
          ]
        }
      ]
    },
    "ProductDiscountChangeValueAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ProductDiscountUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "value": {
              "$ref": "#/definitions/ProductDiscountValue"
            }
          },
          "required": [
            "value"
          ]
        }
      ]
    },
    "ProductDiscountDraft": {
      "type": "object",
      "properties": {
        "name": {
          "$ref": "#/definitions/LocalizedString"
        },
        "description": {
          "$ref": "#/definitions/LocalizedString"
        },
        "value": {
          "$ref": "#/definitions/ProductDiscountValue"
        },
        "predicate": {
          "type": "string"
        },
        "sortOrder": {
          "type": "string"
        },
        "isActive": {
          "type": "boolean"
        }
      },
      "required": [
        "name",
        "value",
        "predicate",
        "sortOrder",
        "isActive"
      ]
    },
    "ProductDiscountPagedQueryResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/PagedQueryResponse"
        },
        {
          "type": "object",
          "properties": {
            "results": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProductDiscount"
              }
            }
          },
          "required": [
            "results"
          ]
        }
      ]
    },
    "ProductDiscountReference": {
      "x-annotation-generate-collection": true,
      "$ref": "#/definitions/Reference"
    },
    "ProductDiscountSetDescriptionAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ProductDiscountUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "description": {
              "$ref": "#/definitions/LocalizedString"
            }
          }
        }
      ]
    },
    "ProductDiscountUpdate": {
      "allOf": [
        {
          "$ref": "#/definitions/Update"
        },
        {
          "type": "object",
          "properties": {
            "actions": {
              "type": "array",
              "items": {
                "type": "object"
              },
              "x-annotation-generator-type": "ProductDiscountUpdateAction[]"
            }
          },
          "required": [
            "actions"
          ]
        }
      ]
    },
    "ProductDiscountUpdateAction": {
      "discriminator": "action",
      "x-annotation-generate-collection": true,
      "$ref": "#/definitions/UpdateAction"
    },
    "ProductDiscountValue": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "discriminator": "type",
      "required": [
        "type"
      ]
    },
    "ProductDiscountValueAbsolut": {
      "allOf": [
        {
          "$ref": "#/definitions/ProductDiscountValue"
        },
        {
          "type": "object",
          "properties": {
            "money": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Money"
              }
            }
          },
          "required": [
            "money"
          ]
        }
      ]
    },
    "ProductDiscountValueExternal": {
      "$ref": "#/definitions/ProductDiscountValue"
    },
    "ProductDiscountValueRelative": {
      "allOf": [
        {
          "$ref": "#/definitions/ProductDiscountValue"
        },
        {
          "type": "object",
          "properties": {
            "permyriad": {
              "type": "number",
              "format": "int64"
            }
          },
          "required": [
            "permyriad"
          ]
        }
      ]
    },
    "Review": {
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        },
        {
          "type": "object",
          "properties": {
            "key": {
              "type": "string"
            },
            "uniquenessValue": {
              "type": "string"
            },
            "locale": {
              "type": "string"
            },
            "authorName": {
              "type": "string"
            },
            "title": {
              "type": "string"
            },
            "text": {
              "type": "string"
            },
            "target": {
              "type": "object",
              "x-annotation-generator-type": "Reference"
            },
            "includedInStatistics": {
              "type": "boolean"
            },
            "rating": {
              "type": "number",
              "minimum": -100,
              "maximum": 100,
              "format": "int8"
            },
            "state": {
              "$ref": "#/definitions/StateReference"
            },
            "customer": {
              "$ref": "#/definitions/CustomerReference"
            },
            "custom": {
              "$ref": "#/definitions/CustomFields"
            }
          },
          "required": [
            "includedInStatistics"
          ]
        }
      ],
      "x-annotation-generate-collection": true
    },
    "ReviewDraft": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "uniquenessValue": {
          "type": "string"
        },
        "locale": {
          "type": "string"
        },
        "authorName": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "text": {
          "type": "string"
        },
        "target": {
          "type": "object",
          "x-annotation-generator-type": "Reference"
        },
        "state": {
          "type": "object"
        },
        "rating": {
          "type": "number",
          "minimum": -100,
          "maximum": 100,
          "format": "int8"
        },
        "customer": {
          "$ref": "#/definitions/CustomerReference"
        },
        "custom": {
          "$ref": "#/definitions/CustomFieldsDraft"
        }
      }
    },
    "ReviewPagedQueryResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/PagedQueryResponse"
        },
        {
          "type": "object",
          "properties": {
            "results": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Review"
              }
            }
          },
          "required": [
            "results"
          ]
        }
      ]
    },
    "ReviewRatingStatistics": {
      "type": "object",
      "properties": {
        "averageRating": {
          "type": "number"
        },
        "highestRating": {
          "type": "number"
        },
        "lowestRating": {
          "type": "number"
        },
        "count": {
          "type": "integer"
        },
        "ratingsDistribution": {
          "type": "object"
        }
      },
      "required": [
        "averageRating",
        "highestRating",
        "lowestRating",
        "count",
        "ratingsDistribution"
      ]
    },
    "ReviewSetAuthorNameAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ReviewUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "authorName": {
              "type": "string"
            }
          }
        }
      ]
    },
    "ReviewSetCustomFieldAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ReviewUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          },
          "required": [
            "name"
          ]
        }
      ]
    },
    "ReviewSetCustomTypeAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ReviewUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "fields": {
              "type": "string"
            },
            "type": {
              "$ref": "#/definitions/ResourceIdentifier"
            }
          }
        }
      ]
    },
    "ReviewSetCustomerAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ReviewUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "customer": {
              "$ref": "#/definitions/ResourceIdentifier"
            }
          }
        }
      ]
    },
    "ReviewSetKeyAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ReviewUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "key": {
              "type": "string"
            }
          }
        }
      ]
    },
    "ReviewSetLocaleAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ReviewUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "locale": {
              "type": "string"
            }
          }
        }
      ]
    },
    "ReviewSetRatingAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ReviewUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "rating": {
              "type": "integer"
            }
          }
        }
      ]
    },
    "ReviewSetTargetAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ReviewUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "target": {
              "$ref": "#/definitions/ResourceIdentifier"
            }
          }
        }
      ]
    },
    "ReviewSetTextAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ReviewUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "text": {
              "type": "string"
            }
          }
        }
      ]
    },
    "ReviewSetTitleAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ReviewUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "title": {
              "type": "string"
            }
          }
        }
      ]
    },
    "ReviewTransitionStateAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ReviewUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "state": {
              "$ref": "#/definitions/ResourceIdentifier"
            },
            "force": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "ReviewUpdateAction": {
      "discriminator": "action",
      "$ref": "#/definitions/UpdateAction"
    },
    "ReviewUpdate": {
      "allOf": [
        {
          "$ref": "#/definitions/Update"
        },
        {
          "type": "object",
          "properties": {
            "actions": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "required": [
            "actions"
          ]
        }
      ]
    },
    "ShippingMethod": {
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        },
        {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "taxCategory": {
              "$ref": "#/definitions/TaxCategoryReference"
            },
            "zoneRates": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ZoneRate"
              }
            },
            "isDefault": {
              "type": "boolean"
            }
          },
          "required": [
            "name",
            "taxCategory",
            "zoneRates",
            "isDefault"
          ]
        }
      ],
      "x-annotation-generate-collection": true
    },
    "ShippingMethodDraft": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "taxCategory": {
          "$ref": "#/definitions/TaxCategoryReference"
        },
        "zoneRates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ZoneRate"
          }
        },
        "isDefault": {
          "type": "boolean"
        }
      },
      "required": [
        "name",
        "taxCategory",
        "zoneRates",
        "isDefault"
      ]
    },
    "ShippingMethodPagedQueryResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/PagedQueryResponse"
        },
        {
          "type": "object",
          "properties": {
            "results": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ShippingMethod"
              }
            }
          },
          "required": [
            "results"
          ]
        }
      ]
    },
    "ShippingMethodReference": {
      "x-annotation-generate-collection": true,
      "$ref": "#/definitions/Reference"
    },
    "ShippingRate": {
      "type": "object",
      "properties": {
        "price": {
          "$ref": "#/definitions/Money"
        },
        "freeAbove": {
          "$ref": "#/definitions/Money"
        },
        "isMatching": {
          "type": "boolean"
        }
      },
      "required": [
        "price"
      ]
    },
    "ZoneRate": {
      "type": "object",
      "properties": {
        "zone": {
          "$ref": "#/definitions/ZoneReference"
        },
        "shippingRates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ShippingRate"
          }
        }
      },
      "required": [
        "zone",
        "shippingRates"
      ]
    },
    "ShippingMethodAddShippingRateAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ShippingMethodUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "shippingRate": {
              "$ref": "#/definitions/ShippingRate"
            },
            "zone": {
              "$ref": "#/definitions/ZoneReference"
            }
          },
          "required": [
            "shippingRate",
            "zone"
          ]
        }
      ]
    },
    "ShippingMethodAddZoneAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ShippingMethodUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "zone": {
              "$ref": "#/definitions/ZoneReference"
            }
          },
          "required": [
            "zone"
          ]
        }
      ]
    },
    "ShippingMethodChangeIsDefaultAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ShippingMethodUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "default": {
              "type": "boolean"
            }
          },
          "required": [
            "default"
          ]
        }
      ]
    },
    "ShippingMethodChangeNameAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ShippingMethodUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            }
          },
          "required": [
            "name"
          ]
        }
      ]
    },
    "ShippingMethodChangeTaxCategoryAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ShippingMethodUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "taxCategory": {
              "$ref": "#/definitions/TaxCategoryReference"
            }
          },
          "required": [
            "taxCategory"
          ]
        }
      ]
    },
    "ShippingMethodRemoveShippingRateAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ShippingMethodUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "shippingRate": {
              "$ref": "#/definitions/ShippingRate"
            },
            "zone": {
              "$ref": "#/definitions/ZoneReference"
            }
          },
          "required": [
            "shippingRate",
            "zone"
          ]
        }
      ]
    },
    "ShippingMethodRemoveZoneAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ShippingMethodUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "zone": {
              "$ref": "#/definitions/ZoneReference"
            }
          },
          "required": [
            "zone"
          ]
        }
      ]
    },
    "ShippingMethodSetDescriptionAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ShippingMethodUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "description": {
              "type": "string"
            }
          }
        }
      ]
    },
    "ShippingMethodUpdateAction": {
      "discriminator": "action",
      "$ref": "#/definitions/UpdateAction"
    },
    "ShippingMethodUpdate": {
      "allOf": [
        {
          "$ref": "#/definitions/Update"
        },
        {
          "type": "object",
          "properties": {
            "actions": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "required": [
            "actions"
          ]
        }
      ]
    },
    "SubRate": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "amount": {
          "type": "number",
          "minimum": 0,
          "maximum": 1
        }
      },
      "required": [
        "name",
        "amount"
      ],
      "x-annotation-generate-collection": true
    },
    "TaxCategory": {
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        },
        {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "rates": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaxRate"
              }
            }
          },
          "required": [
            "name",
            "rates"
          ]
        }
      ],
      "x-annotation-generate-collection": true
    },
    "TaxCategoryAddTaxRateAction": {
      "allOf": [
        {
          "$ref": "#/definitions/TaxCategoryUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "taxRate": {
              "$ref": "#/definitions/TaxRateDraft"
            }
          },
          "required": [
            "taxRate"
          ]
        }
      ]
    },
    "TaxCategoryChangeNameAction": {
      "allOf": [
        {
          "$ref": "#/definitions/TaxCategoryUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            }
          },
          "required": [
            "name"
          ]
        }
      ]
    },
    "TaxCategoryDraft": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "rates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaxRateDraft"
          }
        }
      },
      "required": [
        "name",
        "rates"
      ]
    },
    "TaxCategoryPagedQueryResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/PagedQueryResponse"
        },
        {
          "type": "object",
          "properties": {
            "results": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaxCategory"
              }
            }
          },
          "required": [
            "results"
          ]
        }
      ]
    },
    "TaxCategoryReference": {
      "allOf": [
        {
          "$ref": "#/definitions/Reference"
        },
        {
          "type": "object",
          "properties": {
            "obj": {
              "$ref": "#/definitions/TaxCategory"
            }
          }
        }
      ],
      "x-annotation-generate-collection": true
    },
    "TaxCategoryRemoveTaxRateAction": {
      "allOf": [
        {
          "$ref": "#/definitions/TaxCategoryUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "taxRateId": {
              "type": "string"
            }
          },
          "required": [
            "taxRateId"
          ]
        }
      ]
    },
    "TaxCategoryReplaceTaxRateAction": {
      "allOf": [
        {
          "$ref": "#/definitions/TaxCategoryUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "taxRateId": {
              "type": "string"
            },
            "taxRate": {
              "$ref": "#/definitions/TaxRateDraft"
            }
          },
          "required": [
            "taxRateId",
            "taxRate"
          ]
        }
      ]
    },
    "TaxCategorySetDescriptionAction": {
      "allOf": [
        {
          "$ref": "#/definitions/TaxCategoryUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "description": {
              "type": "string"
            }
          }
        }
      ]
    },
    "TaxCategoryUpdate": {
      "allOf": [
        {
          "$ref": "#/definitions/Update"
        },
        {
          "type": "object",
          "properties": {
            "actions": {
              "type": "array",
              "items": {
                "type": "object"
              },
              "x-annotation-generator-type": "TaxCategoryUpdateAction[]"
            }
          },
          "required": [
            "actions"
          ]
        }
      ]
    },
    "TaxCategoryUpdateAction": {
      "discriminator": "action",
      "x-annotation-generate-collection": true,
      "$ref": "#/definitions/UpdateAction"
    },
    "TaxRate": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "amount": {
          "type": "number",
          "minimum": 0,
          "maximum": 1
        },
        "includedInPrice": {
          "type": "boolean"
        },
        "country": {
          "x-annotation-generator-type": "string",
          "$ref": "#/definitions/CountryCode"
        },
        "state": {
          "type": "string"
        },
        "subRates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubRate"
          }
        }
      },
      "required": [
        "name",
        "amount",
        "includedInPrice",
        "country"
      ],
      "x-annotation-generate-collection": true
    },
    "TaxRateDraft": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "amount": {
          "type": "number",
          "minimum": 0,
          "maximum": 1
        },
        "includedInPrice": {
          "type": "boolean"
        },
        "country": {
          "x-annotation-generator-type": "string",
          "$ref": "#/definitions/CountryCode"
        },
        "state": {
          "type": "string"
        },
        "subRates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubRate"
          }
        }
      },
      "required": [
        "name",
        "includedInPrice",
        "country"
      ],
      "x-annotation-generate-collection": true
    },
    "ShoppingListLineItem": {
      "type": "object",
      "properties": {
        "addedAt": {
          "type": "string",
          "format": "date-time"
        },
        "custom": {
          "$ref": "#/definitions/CustomFields"
        },
        "deactivatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "$ref": "#/definitions/LocalizedString"
        },
        "productId": {
          "type": "string"
        },
        "productSlug": {
          "$ref": "#/definitions/LocalizedString"
        },
        "productType": {
          "$ref": "#/definitions/ProductTypeReference"
        },
        "quantity": {
          "type": "number"
        },
        "variant": {
          "$ref": "#/definitions/ProductVariant"
        },
        "variantId": {
          "type": "number",
          "format": "int64"
        }
      },
      "required": [
        "addedAt",
        "id",
        "name",
        "productId",
        "productType",
        "quantity"
      ]
    },
    "ShoppingListLineItemDraft": {
      "type": "object",
      "properties": {
        "addedAt": {
          "type": "string",
          "format": "date-time"
        },
        "custom": {
          "$ref": "#/definitions/CustomFieldsDraft"
        },
        "productId": {
          "type": "string"
        },
        "quantity": {
          "type": "number"
        },
        "variantId": {
          "type": "number",
          "format": "int64"
        }
      },
      "required": [
        "productId"
      ]
    },
    "ShoppingList": {
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        },
        {
          "type": "object",
          "properties": {
            "custom": {
              "$ref": "#/definitions/CustomFields"
            },
            "customer": {
              "$ref": "#/definitions/CustomerReference"
            },
            "deleteDaysAfterLastModification": {
              "type": "number",
              "format": "int64"
            },
            "description": {
              "$ref": "#/definitions/LocalizedString"
            },
            "key": {
              "type": "string"
            },
            "lineItems": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ShoppingListLineItem"
              }
            },
            "name": {
              "$ref": "#/definitions/LocalizedString"
            },
            "slug": {
              "$ref": "#/definitions/LocalizedString"
            },
            "textLineItems": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TextLineItem"
              }
            }
          },
          "required": [
            "name"
          ]
        }
      ]
    },
    "ShoppingListDraft": {
      "type": "object",
      "properties": {
        "custom": {
          "$ref": "#/definitions/CustomFieldsDraft"
        },
        "customer": {
          "$ref": "#/definitions/CustomerReference"
        },
        "deleteDaysAfterLastModification": {
          "type": "number",
          "format": "int64"
        },
        "description": {
          "$ref": "#/definitions/LocalizedString"
        },
        "key": {
          "type": "string"
        },
        "lineItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ShoppingListLineItemDraft"
          }
        },
        "name": {
          "$ref": "#/definitions/LocalizedString"
        },
        "slug": {
          "$ref": "#/definitions/LocalizedString"
        },
        "textLineItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TextLineItemDraft"
          }
        }
      },
      "required": [
        "name"
      ]
    },
    "ShoppingListPagedQueryResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/PagedQueryResponse"
        },
        {
          "type": "object",
          "properties": {
            "results": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ShoppingList"
              }
            }
          },
          "required": [
            "results"
          ]
        }
      ]
    },
    "ShoppingListReference": {
      "allOf": [
        {
          "$ref": "#/definitions/Reference"
        },
        {
          "type": "object",
          "properties": {
            "obj": {
              "$ref": "#/definitions/ShoppingList"
            }
          }
        }
      ],
      "x-annotation-generate-collection": true
    },
    "TextLineItem": {
      "type": "object",
      "properties": {
        "addedAt": {
          "type": "string",
          "format": "date-time"
        },
        "custom": {
          "$ref": "#/definitions/CustomFields"
        },
        "description": {
          "$ref": "#/definitions/LocalizedString"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "$ref": "#/definitions/LocalizedString"
        },
        "quantity": {
          "type": "number"
        }
      },
      "required": [
        "addedAt",
        "id",
        "name",
        "quantity"
      ]
    },
    "TextLineItemDraft": {
      "type": "object",
      "properties": {
        "addedAt": {
          "type": "string",
          "format": "date-time"
        },
        "custom": {
          "$ref": "#/definitions/CustomFieldsDraft"
        },
        "description": {
          "$ref": "#/definitions/LocalizedString"
        },
        "name": {
          "$ref": "#/definitions/LocalizedString"
        },
        "quantity": {
          "type": "number"
        }
      },
      "required": [
        "name"
      ]
    },
    "ShoppingListAddLineItemAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ShoppingListUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "addedAt": {
              "type": "string",
              "format": "date-time"
            },
            "custom": {
              "$ref": "#/definitions/CustomFieldsDraft"
            },
            "productId": {
              "type": "string"
            },
            "quantity": {
              "type": "number"
            },
            "variantId": {
              "type": "integer"
            }
          },
          "required": [
            "productId"
          ]
        }
      ]
    },
    "ShoppingListAddTextLineItemAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ShoppingListUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "custom": {
              "$ref": "#/definitions/CustomFieldsDraft"
            },
            "description": {
              "$ref": "#/definitions/LocalizedString"
            },
            "name": {
              "$ref": "#/definitions/LocalizedString"
            },
            "quantity": {
              "type": "number"
            }
          },
          "required": [
            "name"
          ]
        }
      ]
    },
    "ShoppingListChangeLineItemQuantityAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ShoppingListUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "lineItemId": {
              "type": "string"
            },
            "quantity": {
              "type": "number"
            }
          },
          "required": [
            "lineItemId",
            "quantity"
          ]
        }
      ]
    },
    "ShoppingListChangeLineItemsOrderAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ShoppingListUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "lineItemOrder": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "required": [
            "lineItemOrder"
          ]
        }
      ]
    },
    "ShoppingListChangeNameAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ShoppingListUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "name": {
              "$ref": "#/definitions/LocalizedString"
            }
          },
          "required": [
            "name"
          ]
        }
      ]
    },
    "ShoppingListChangeTextLineItemNameAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ShoppingListUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "name": {
              "$ref": "#/definitions/LocalizedString"
            },
            "textLineItemId": {
              "type": "string"
            }
          },
          "required": [
            "name",
            "textLineItemId"
          ]
        }
      ]
    },
    "ShoppingListChangeTextLineItemQuantityAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ShoppingListUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "quantity": {
              "type": "number"
            },
            "textLineItemId": {
              "type": "string"
            }
          },
          "required": [
            "quantity",
            "textLineItemId"
          ]
        }
      ]
    },
    "ShoppingListChangeTextLineItemsOrderAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ShoppingListUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "textLineItemOrder": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "required": [
            "textLineItemOrder"
          ]
        }
      ]
    },
    "ShoppingListRemoveLineItemAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ShoppingListUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "lineItemId": {
              "type": "string"
            },
            "quantity": {
              "type": "number"
            }
          },
          "required": [
            "lineItemId"
          ]
        }
      ]
    },
    "ShoppingListRemoveTextLineItemAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ShoppingListUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "quantity": {
              "type": "number"
            },
            "textLineItemId": {
              "type": "string"
            }
          },
          "required": [
            "textLineItemId"
          ]
        }
      ]
    },
    "ShoppingListSetCustomFieldAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ShoppingListUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          },
          "required": [
            "name"
          ]
        }
      ]
    },
    "ShoppingListSetCustomTypeAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ShoppingListUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "fields": {
              "type": "string"
            },
            "type": {
              "$ref": "#/definitions/Type"
            }
          }
        }
      ]
    },
    "ShoppingListSetCustomerAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ShoppingListUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "customer": {
              "$ref": "#/definitions/Customer"
            }
          }
        }
      ]
    },
    "ShoppingListSetDeleteDaysAfterLastModificationAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ShoppingListUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "deleteDaysAfterLastModification": {
              "type": "integer"
            }
          }
        }
      ]
    },
    "ShoppingListSetDescriptionAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ShoppingListUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "description": {
              "$ref": "#/definitions/LocalizedString"
            }
          }
        }
      ]
    },
    "ShoppingListSetKeyAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ShoppingListUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "key": {
              "type": "string"
            }
          },
          "required": [
            "key"
          ]
        }
      ]
    },
    "ShoppingListSetLineItemCustomFieldAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ShoppingListUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "lineItemId": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          },
          "required": [
            "lineItemId",
            "name"
          ]
        }
      ]
    },
    "ShoppingListSetLineItemCustomTypeAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ShoppingListUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "fields": {
              "type": "string"
            },
            "lineItemId": {
              "type": "string"
            },
            "type": {
              "$ref": "#/definitions/Type"
            }
          },
          "required": [
            "lineItemId"
          ]
        }
      ]
    },
    "ShoppingListSetSlugAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ShoppingListUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "slug": {
              "$ref": "#/definitions/LocalizedString"
            }
          }
        }
      ]
    },
    "ShoppingListSetTextLineItemCustomFieldAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ShoppingListUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "textLineItemId": {
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          },
          "required": [
            "name",
            "textLineItemId"
          ]
        }
      ]
    },
    "ShoppingListSetTextLineItemCustomTypeAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ShoppingListUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "fields": {
              "type": "string"
            },
            "textLineItemId": {
              "type": "string"
            },
            "type": {
              "$ref": "#/definitions/Type"
            }
          },
          "required": [
            "textLineItemId"
          ]
        }
      ]
    },
    "ShoppingListSetTextLineItemDescriptionAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ShoppingListUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "description": {
              "$ref": "#/definitions/LocalizedString"
            },
            "textLineItemId": {
              "type": "string"
            }
          },
          "required": [
            "textLineItemId"
          ]
        }
      ]
    },
    "ShoppingListUpdateAction": {
      "discriminator": "action",
      "$ref": "#/definitions/UpdateAction"
    },
    "ShoppingListUpdate": {
      "allOf": [
        {
          "$ref": "#/definitions/Update"
        },
        {
          "type": "object",
          "properties": {
            "actions": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "required": [
            "actions"
          ]
        }
      ]
    },
    "ChangeSubscription": {
      "type": "object",
      "properties": {
        "resourceTypeId": {
          "type": "string"
        }
      },
      "required": [
        "resourceTypeId"
      ]
    },
    "Destination": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "discriminator": "type",
      "required": [
        "type"
      ]
    },
    "IronMqDestination": {
      "allOf": [
        {
          "$ref": "#/definitions/Destination"
        },
        {
          "type": "object",
          "properties": {
            "uri": {
              "type": "string"
            }
          },
          "required": [
            "uri"
          ]
        }
      ]
    },
    "MessageSubscription": {
      "type": "object",
      "properties": {
        "resourceTypeId": {
          "type": "string"
        },
        "typeNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "resourceTypeId"
      ]
    },
    "SnsDestination": {
      "allOf": [
        {
          "$ref": "#/definitions/Destination"
        },
        {
          "type": "object",
          "properties": {
            "accessKey": {
              "type": "string"
            },
            "accessSecret": {
              "type": "string"
            },
            "topicArn": {
              "type": "string"
            }
          },
          "required": [
            "accessKey",
            "accessSecret",
            "topicArn"
          ]
        }
      ]
    },
    "SqsDestination": {
      "allOf": [
        {
          "$ref": "#/definitions/Destination"
        },
        {
          "type": "object",
          "properties": {
            "accessKey": {
              "type": "string"
            },
            "accessSecret": {
              "type": "string"
            },
            "queueURL": {
              "type": "string"
            },
            "region": {
              "type": "string"
            }
          },
          "required": [
            "accessKey",
            "accessSecret",
            "queueURL",
            "region"
          ]
        }
      ]
    },
    "Subscription": {
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        },
        {
          "type": "object",
          "properties": {
            "changes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ChangeSubscription"
              }
            },
            "destination": {
              "$ref": "#/definitions/Destination"
            },
            "key": {
              "type": "string"
            },
            "messages": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MessageSubscription"
              }
            }
          },
          "required": [
            "changes",
            "destination",
            "messages"
          ]
        }
      ]
    },
    "SubscriptionDraft": {
      "type": "object",
      "properties": {
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ChangeSubscription"
          }
        },
        "destination": {
          "$ref": "#/definitions/Destination"
        },
        "key": {
          "type": "string"
        },
        "messages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MessageSubscription"
          }
        }
      },
      "required": [
        "destination"
      ]
    },
    "SubscriptionPagedQueryResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/PagedQueryResponse"
        },
        {
          "type": "object",
          "properties": {
            "results": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Subscription"
              }
            }
          },
          "required": [
            "results"
          ]
        }
      ]
    },
    "SubscriptionSetChangesAction": {
      "allOf": [
        {
          "$ref": "#/definitions/SubscriptionUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "changes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ChangeSubscription"
              }
            }
          }
        }
      ]
    },
    "SubscriptionSetKeyAction": {
      "allOf": [
        {
          "$ref": "#/definitions/SubscriptionUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "key": {
              "type": "string"
            }
          }
        }
      ]
    },
    "SubscriptionSetMessagesAction": {
      "allOf": [
        {
          "$ref": "#/definitions/SubscriptionUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "messages": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MessageSubscription"
              }
            }
          }
        }
      ]
    },
    "SubscriptionUpdate": {
      "allOf": [
        {
          "$ref": "#/definitions/Update"
        },
        {
          "type": "object",
          "properties": {
            "actions": {
              "type": "array",
              "items": {
                "type": "object"
              },
              "x-annotation-generator-type": "SubscriptionUpdateAction[]"
            }
          },
          "required": [
            "actions"
          ]
        }
      ]
    },
    "SubscriptionUpdateAction": {
      "discriminator": "action",
      "x-annotation-generate-collection": true,
      "$ref": "#/definitions/UpdateAction"
    },
    "State": {
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        },
        {
          "type": "object",
          "properties": {
            "key": {
              "type": "string"
            },
            "type": {
              "x-annotation-generator-type": "string",
              "$ref": "#/definitions/StateTypeEnum"
            },
            "name": {
              "$ref": "#/definitions/LocalizedString"
            },
            "description": {
              "$ref": "#/definitions/LocalizedString"
            },
            "initial": {
              "type": "boolean"
            },
            "builtIn": {
              "type": "boolean"
            },
            "roles": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/StateRoleEnum"
              },
              "x-annotation-generator-type": "string[]"
            },
            "transitions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/StateReference"
              }
            }
          },
          "required": [
            "key",
            "type",
            "initial",
            "builtIn"
          ]
        }
      ],
      "x-annotation-generate-collection": true
    },
    "StateAddRolesAction": {
      "allOf": [
        {
          "$ref": "#/definitions/StateUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "roles": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/StateRoleEnum"
              }
            }
          },
          "required": [
            "roles"
          ]
        }
      ]
    },
    "StateChangeInitialAction": {
      "allOf": [
        {
          "$ref": "#/definitions/StateUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "initial": {
              "type": "boolean"
            }
          },
          "required": [
            "initial"
          ]
        }
      ]
    },
    "StateChangeKeyAction": {
      "allOf": [
        {
          "$ref": "#/definitions/StateUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "key": {
              "type": "string"
            }
          },
          "required": [
            "key"
          ]
        }
      ]
    },
    "StateChangeTypeAction": {
      "allOf": [
        {
          "$ref": "#/definitions/StateUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "x-annotation-generator-type": "string",
              "$ref": "#/definitions/StateTypeEnum"
            }
          },
          "required": [
            "type"
          ]
        }
      ]
    },
    "StateDraft": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "type": {
          "x-annotation-generator-type": "string",
          "$ref": "#/definitions/StateTypeEnum"
        },
        "name": {
          "$ref": "#/definitions/LocalizedString"
        },
        "description": {
          "$ref": "#/definitions/LocalizedString"
        },
        "initial": {
          "type": "boolean"
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StateRoleEnum"
          },
          "x-annotation-generator-type": "string[]"
        },
        "transitions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StateReference"
          }
        }
      },
      "required": [
        "key",
        "type"
      ]
    },
    "StatePagedQueryResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/PagedQueryResponse"
        },
        {
          "type": "object",
          "properties": {
            "results": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/State"
              }
            }
          },
          "required": [
            "results"
          ]
        }
      ]
    },
    "StateReference": {
      "allOf": [
        {
          "$ref": "#/definitions/Reference"
        },
        {
          "type": "object",
          "properties": {
            "obj": {
              "$ref": "#/definitions/State"
            }
          }
        }
      ],
      "x-annotation-generate-collection": true
    },
    "StateRemoveRolesAction": {
      "allOf": [
        {
          "$ref": "#/definitions/StateUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "roles": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/StateRoleEnum"
              }
            }
          },
          "required": [
            "roles"
          ]
        }
      ]
    },
    "StateRoleEnum": {
      "type": "string",
      "enum": [
        "ReviewIncludedInStatistics"
      ]
    },
    "StateSetDescriptionAction": {
      "allOf": [
        {
          "$ref": "#/definitions/StateUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "description": {
              "$ref": "#/definitions/LocalizedString"
            }
          },
          "required": [
            "description"
          ]
        }
      ]
    },
    "StateSetNameAction": {
      "allOf": [
        {
          "$ref": "#/definitions/StateUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "name": {
              "$ref": "#/definitions/LocalizedString"
            }
          },
          "required": [
            "name"
          ]
        }
      ]
    },
    "StateSetRolesAction": {
      "allOf": [
        {
          "$ref": "#/definitions/StateUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "roles": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/StateRoleEnum"
              }
            }
          },
          "required": [
            "roles"
          ]
        }
      ]
    },
    "StateSetTransitions": {
      "allOf": [
        {
          "$ref": "#/definitions/StateUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "transitions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/StateReference"
              }
            }
          },
          "required": [
            "transitions"
          ]
        }
      ]
    },
    "StateTypeEnum": {
      "type": "string",
      "enum": [
        "OrderState",
        "LineItemState",
        "ProductState",
        "ReviewState",
        "PaymentState"
      ]
    },
    "StateUpdate": {
      "allOf": [
        {
          "$ref": "#/definitions/Update"
        },
        {
          "type": "object",
          "properties": {
            "actions": {
              "type": "array",
              "items": {
                "type": "object"
              },
              "x-annotation-generator-type": "StateUpdateAction[]"
            }
          },
          "required": [
            "actions"
          ]
        }
      ]
    },
    "StateUpdateAction": {
      "discriminator": "action",
      "x-annotation-generate-collection": true,
      "$ref": "#/definitions/UpdateAction"
    },
    "CustomFieldBooleanType": {
      "$ref": "#/definitions/FieldType"
    },
    "CustomFieldDateTimeType": {
      "$ref": "#/definitions/FieldType"
    },
    "CustomFieldDateType": {
      "$ref": "#/definitions/FieldType"
    },
    "CustomFieldEnumType": {
      "allOf": [
        {
          "$ref": "#/definitions/FieldType"
        },
        {
          "type": "object",
          "properties": {
            "values": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomFieldEnumValue"
              }
            }
          },
          "required": [
            "values"
          ]
        }
      ]
    },
    "CustomFieldEnumValue": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "label": {
          "type": "string"
        }
      },
      "required": [
        "key",
        "label"
      ]
    },
    "CustomFieldLocalizedEnumType": {
      "allOf": [
        {
          "$ref": "#/definitions/FieldType"
        },
        {
          "type": "object",
          "properties": {
            "values": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomFieldLocalizedEnumValue"
              }
            }
          },
          "required": [
            "values"
          ]
        }
      ]
    },
    "CustomFieldLocalizedEnumValue": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "label": {
          "$ref": "#/definitions/LocalizedString"
        }
      },
      "required": [
        "key",
        "label"
      ]
    },
    "CustomFieldLocalizedStringType": {
      "$ref": "#/definitions/FieldType"
    },
    "CustomFieldMoneyType": {
      "$ref": "#/definitions/FieldType"
    },
    "CustomFieldNumberType": {
      "$ref": "#/definitions/FieldType"
    },
    "CustomFieldReferenceType": {
      "allOf": [
        {
          "$ref": "#/definitions/FieldType"
        },
        {
          "type": "object",
          "properties": {
            "referenceTypeId": {
              "x-annotation-generator-type": "string",
              "$ref": "#/definitions/ReferenceTypeId"
            }
          },
          "required": [
            "referenceTypeId"
          ]
        }
      ]
    },
    "CustomFieldSetType": {
      "allOf": [
        {
          "$ref": "#/definitions/FieldType"
        },
        {
          "type": "object",
          "properties": {
            "elementType": {
              "$ref": "#/definitions/FieldType"
            }
          },
          "required": [
            "elementType"
          ]
        }
      ]
    },
    "CustomFieldStringType": {
      "$ref": "#/definitions/FieldType"
    },
    "CustomFieldTimeType": {
      "$ref": "#/definitions/FieldType"
    },
    "ResourceTypeId": {
      "type": "string",
      "enum": [
        "asset",
        "category",
        "customer",
        "order",
        "inventory-entry",
        "line-item",
        "custom-line-item",
        "product-price",
        "payment",
        "payment-interface-interaction",
        "review"
      ]
    },
    "TypeReference": {
      "allOf": [
        {
          "$ref": "#/definitions/Reference"
        },
        {
          "type": "object",
          "properties": {
            "obj": {
              "$ref": "#/definitions/Type"
            }
          }
        }
      ],
      "x-annotation-generate-collection": true
    },
    "Type": {
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        },
        {
          "type": "object",
          "properties": {
            "key": {
              "type": "string"
            },
            "name": {
              "$ref": "#/definitions/LocalizedString"
            },
            "description": {
              "$ref": "#/definitions/LocalizedString"
            },
            "resourceTypeIds": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ResourceTypeId"
              },
              "x-annotation-generator-type": "string[]"
            },
            "fieldDefinitions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FieldDefinition"
              }
            }
          },
          "required": [
            "key",
            "name",
            "resourceTypeIds",
            "fieldDefinitions"
          ]
        }
      ],
      "x-annotation-generate-collection": true
    },
    "FieldDefinition": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/FieldType"
        },
        "name": {
          "type": "string"
        },
        "label": {
          "$ref": "#/definitions/LocalizedString"
        },
        "required": {
          "type": "boolean"
        },
        "inputHint": {
          "type": "string"
        }
      },
      "required": [
        "type",
        "name",
        "label",
        "required",
        "inputHint"
      ],
      "x-annotation-generate-collection": true
    },
    "FieldType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      },
      "discriminator": "name",
      "required": [
        "name"
      ]
    },
    "CustomFields": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/TypeReference"
        },
        "fields": {
          "type": "object"
        }
      },
      "required": [
        "type",
        "fields"
      ],
      "x-annotation-generate-collection": true
    },
    "CustomFieldsDraft": {
      "type": "object",
      "properties": {
        "type": {
          "type": "object"
        },
        "fields": {
          "type": "object"
        }
      },
      "required": [
        "type"
      ]
    },
    "TypeAddEnumValueAction": {
      "allOf": [
        {
          "$ref": "#/definitions/TypeUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "fieldName": {
              "type": "string"
            },
            "value": {
              "$ref": "#/definitions/CustomFieldEnumValue"
            }
          },
          "required": [
            "fieldName",
            "value"
          ]
        }
      ]
    },
    "TypeAddFieldDefinitionAction": {
      "allOf": [
        {
          "$ref": "#/definitions/TypeUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "fieldDefinition": {
              "$ref": "#/definitions/FieldDefinition"
            }
          },
          "required": [
            "fieldDefinition"
          ]
        }
      ]
    },
    "TypeAddLocalizedEnumValueAction": {
      "allOf": [
        {
          "$ref": "#/definitions/TypeUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "fieldName": {
              "type": "string"
            },
            "value": {
              "$ref": "#/definitions/CustomFieldLocalizedEnumValue"
            }
          },
          "required": [
            "fieldName",
            "value"
          ]
        }
      ]
    },
    "TypeChangeEnumValueOrderAction": {
      "allOf": [
        {
          "$ref": "#/definitions/TypeUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "fieldName": {
              "type": "string"
            },
            "keys": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "required": [
            "fieldName",
            "keys"
          ]
        }
      ]
    },
    "TypeChangeFieldDefinitionLabelAction": {
      "allOf": [
        {
          "$ref": "#/definitions/TypeUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "fieldName": {
              "type": "string"
            },
            "label": {
              "$ref": "#/definitions/LocalizedString"
            }
          },
          "required": [
            "fieldName",
            "label"
          ]
        }
      ]
    },
    "TypeChangeFieldDefinitionOrderAction": {
      "allOf": [
        {
          "$ref": "#/definitions/TypeUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "fieldNames": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "required": [
            "fieldNames"
          ]
        }
      ]
    },
    "TypeChangeKeyAction": {
      "allOf": [
        {
          "$ref": "#/definitions/TypeUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "key": {
              "type": "string"
            }
          },
          "required": [
            "key"
          ]
        }
      ]
    },
    "TypeChangeLocalizedEnumValueOrderAction": {
      "allOf": [
        {
          "$ref": "#/definitions/TypeUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "fieldName": {
              "type": "string"
            },
            "keys": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "required": [
            "fieldName",
            "keys"
          ]
        }
      ]
    },
    "TypeChangeNameAction": {
      "allOf": [
        {
          "$ref": "#/definitions/TypeUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "name": {
              "$ref": "#/definitions/LocalizedString"
            }
          },
          "required": [
            "name"
          ]
        }
      ]
    },
    "TypeRemoveFieldDefinitionAction": {
      "allOf": [
        {
          "$ref": "#/definitions/TypeUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "fieldName": {
              "type": "string"
            }
          },
          "required": [
            "fieldName"
          ]
        }
      ]
    },
    "TypeSetDescriptionAction": {
      "allOf": [
        {
          "$ref": "#/definitions/TypeUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "description": {
              "$ref": "#/definitions/LocalizedString"
            }
          }
        }
      ]
    },
    "TypeUpdateAction": {
      "discriminator": "action",
      "$ref": "#/definitions/UpdateAction"
    },
    "TypeUpdate": {
      "allOf": [
        {
          "$ref": "#/definitions/Update"
        },
        {
          "type": "object",
          "properties": {
            "actions": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "required": [
            "actions"
          ]
        }
      ]
    },
    "Location": {
      "type": "object",
      "properties": {
        "country": {
          "x-annotation-generator-type": "string",
          "$ref": "#/definitions/CountryCode"
        },
        "state": {
          "type": "string"
        }
      },
      "required": [
        "country"
      ],
      "x-annotation-generate-collection": true
    },
    "Zone": {
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        },
        {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "locations": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Location"
              }
            }
          },
          "required": [
            "name",
            "locations"
          ]
        }
      ],
      "x-annotation-generate-collection": true
    },
    "ZoneAddLocationAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ZoneUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "location": {
              "$ref": "#/definitions/Location"
            }
          },
          "required": [
            "location"
          ]
        }
      ]
    },
    "ZoneChangeNameAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ZoneUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            }
          },
          "required": [
            "name"
          ]
        }
      ]
    },
    "ZoneDraft": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "locations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Location"
          }
        }
      },
      "required": [
        "name",
        "locations"
      ]
    },
    "ZonePagedQueryResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/PagedQueryResponse"
        },
        {
          "type": "object",
          "properties": {
            "results": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Zone"
              }
            }
          },
          "required": [
            "results"
          ]
        }
      ]
    },
    "ZoneReference": {
      "allOf": [
        {
          "$ref": "#/definitions/Reference"
        },
        {
          "type": "object",
          "properties": {
            "obj": {
              "$ref": "#/definitions/Zone"
            }
          }
        }
      ]
    },
    "ZoneRemoveLocationAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ZoneUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "location": {
              "$ref": "#/definitions/Location"
            }
          },
          "required": [
            "location"
          ]
        }
      ]
    },
    "ZoneSetDescriptionAction": {
      "allOf": [
        {
          "$ref": "#/definitions/ZoneUpdateAction"
        },
        {
          "type": "object",
          "properties": {
            "description": {
              "type": "string"
            }
          }
        }
      ]
    },
    "ZoneUpdate": {
      "allOf": [
        {
          "$ref": "#/definitions/Update"
        },
        {
          "type": "object",
          "properties": {
            "actions": {
              "type": "array",
              "items": {
                "type": "object"
              },
              "x-annotation-generator-type": "ZoneUpdateAction[]"
            }
          },
          "required": [
            "actions"
          ]
        }
      ]
    },
    "ZoneUpdateAction": {
      "discriminator": "action",
      "x-annotation-generate-collection": true,
      "$ref": "#/definitions/UpdateAction"
    },
    "MyCartDraft": {
      "type": "object",
      "properties": {
        "currency": {
          "$ref": "#/definitions/CurrencyCode"
        },
        "customerEmail": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "inventoryMode": {
          "$ref": "#/definitions/InventoryMode"
        },
        "lineItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MyLineItemDraft"
          }
        },
        "shippingAddress": {
          "$ref": "#/definitions/Address"
        },
        "billingAddress": {
          "$ref": "#/definitions/Address"
        },
        "shippingMethod": {
          "$ref": "#/definitions/ShippingMethodReference"
        },
        "custom": {
          "$ref": "#/definitions/CustomFieldsDraft"
        },
        "locale": {
          "type": "string"
        },
        "taxMode": {
          "$ref": "#/definitions/TaxMode"
        },
        "deleteDaysAfterLastModification": {
          "type": "number",
          "format": "int64"
        }
      },
      "required": [
        "currency"
      ]
    },
    "MyCustomerDraft": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "middleName": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "dateOfBirth": {
          "type": "string",
          "format": "date"
        },
        "companyName": {
          "type": "string"
        },
        "vatId": {
          "type": "string"
        },
        "addresses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Address"
          }
        },
        "defaultShippingAddress": {
          "type": "number",
          "format": "int64"
        },
        "defaultBillingAddress": {
          "type": "number",
          "format": "int64"
        },
        "custom": {
          "$ref": "#/definitions/CustomFields"
        },
        "locale": {
          "type": "string"
        }
      },
      "required": [
        "email",
        "password"
      ]
    },
    "MyLineItemDraft": {
      "type": "object",
      "properties": {
        "productId": {
          "type": "string"
        },
        "variantId": {
          "type": "number",
          "format": "int64"
        },
        "quantity": {
          "type": "number"
        },
        "supplyChannel": {
          "$ref": "#/definitions/ChannelReference"
        },
        "distributionChannel": {
          "$ref": "#/definitions/ChannelReference"
        },
        "custom": {
          "$ref": "#/definitions/CustomFieldsDraft"
        }
      },
      "required": [
        "productId",
        "variantId",
        "quantity"
      ],
      "x-annotation-generate-collection": true
    },
    "MyOrderFromCartDraft": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "version": {
          "type": "number",
          "format": "int64"
        }
      },
      "required": [
        "id",
        "version"
      ]
    }
  }
}
