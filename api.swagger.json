{
  "swagger": "2.0",
  "info": {
    "title": "Commercetools",
    "version": "v1"
  },
  "host": "api.europe-west1.gcp.commercetools.com",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "oauth_2_0": {
      "description": "HTTP API authorization uses [OAuth2](http://tools.ietf.org/html/rfc6750).\n\nClients must obtain an access token from the auth service using one of\nthe authorization flows described below, before they are able to make authorized requests\nto other commercetools services. On successful completion of an authorization flow,\na client will be given an `access_token`, which they need to include in requests\nto authorized service endpoints via the HTTP `Authorization` header like this:\n",
      "type": "oauth2",
      "flow": "application",
      "tokenUrl": "https://auth.europe-west1.gcp.commercetools.com/oauth/token",
      "scopes": {
        "manage_project:{projectKey}": "",
        "manage_products:{projectKey}": "",
        "view_products:{projectKey}": "",
        "manage_orders:{projectKey}": "",
        "manage_orders:{projectKey}:{storeKey}": "",
        "view_orders:{projectKey}": "",
        "view_orders:{projectKey}:{storeKey}": "",
        "manage_customers:{projectKey}": "",
        "view_customers:{projectKey}": "",
        "manage_payments:{projectKey}": "",
        "view_payments:{projectKey}": "",
        "manage_subscriptions:{projectKey}": "",
        "manage_extensions:{projectKey}": "",
        "manage_types:{projectKey}": "",
        "view_types:{projectKey}": "",
        "view_shopping_lists:{projectKey}": "",
        "manage_shopping_lists:{projectKey}": "",
        "manage_my_orders:{projectKey}": "",
        "manage_my_orders:{projectKey}:{storeKey}": "",
        "manage_my_profile:{projectKey}": "",
        "view_project_settings:{projectKey}": "",
        "view_published_products:{projectKey}": "",
        "manage_cart_discounts:{projectKey}": "",
        "view_cart_discounts:{projectKey}": "",
        "manage_customer_groups:{projectKey}": "",
        "view_customer_groups:{projectKey}": "",
        "view_shipping_methods:{projectKey}": "",
        "manage_shipping_methods:{projectKey}": "",
        "manage_tax_categories:{projectKey}": "",
        "view_tax_categories:{projectKey}": "",
        "manage_categories:{projectKey}": "",
        "view_categories:{projectKey}": ""
      }
    }
  },
  "definitions": {
    "PagedQueryResponse": {
      "title": "PagedQueryResponse",
      "type": "object",
      "properties": {
        "limit": {
          "format": "int64",
          "type": "number"
        },
        "count": {
          "format": "int64",
          "type": "number"
        },
        "total": {
          "format": "int64",
          "type": "number"
        },
        "offset": {
          "format": "int64",
          "type": "number"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BaseResource"
          }
        },
        "facets": {
          "$ref": "#/definitions/FacetResults"
        },
        "meta": {
          "type": "object"
        }
      },
      "required": [
        "limit",
        "count",
        "offset",
        "results"
      ],
      "x-annotation-package": "Common"
    },
    "Update": {
      "title": "Update",
      "type": "object",
      "properties": {
        "version": {
          "format": "int64",
          "type": "number"
        },
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UpdateAction"
          }
        }
      },
      "required": [
        "version",
        "actions"
      ],
      "x-annotation-package": "Common"
    },
    "UpdateAction": {
      "title": "UpdateAction",
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        }
      },
      "required": [
        "action"
      ],
      "x-annotation-package": "Common"
    },
    "ApiClient": {
      "title": "ApiClient",
      "type": "object",
      "properties": {
        "id": {
          "description": "The unique ID of the API client.\nThis is the OAuth2 `client_id` and can be used to obtain a token.",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "scope": {
          "description": "A whitespace separated list of the OAuth scopes.\nThis is the OAuth2 `scope` and can be used to obtain a token.",
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "lastUsedAt": {
          "description": "The last day this API Client was used to obtain a token.",
          "type": "string",
          "format": "date"
        },
        "deleteAt": {
          "description": "If set, the client will be deleted on (or shortly after) this point in time.",
          "type": "string",
          "format": "date-time"
        },
        "secret": {
          "description": "The secret is only shown once in the response of creating the API Client.\nThis is the OAuth2 `client_secret` and can be used to obtain a token.",
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "scope"
      ],
      "x-annotation-package": "ApiClient",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-apiClients.html#apiclient"
    },
    "ApiClientDraft": {
      "title": "ApiClientDraft",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "scope": {
          "type": "string"
        },
        "deleteDaysAfterCreation": {
          "format": "int64",
          "description": "If set, the client will be deleted after the specified amount of days.",
          "type": "number"
        }
      },
      "required": [
        "name",
        "scope"
      ],
      "x-annotation-package": "ApiClient",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-apiClients.html#apiclientdraft"
    },
    "ApiClientPagedQueryResponse": {
      "title": "ApiClientPagedQueryResponse",
      "type": "object",
      "properties": {
        "limit": {
          "format": "int64",
          "type": "number"
        },
        "count": {
          "format": "int64",
          "type": "number"
        },
        "total": {
          "format": "int64",
          "type": "number"
        },
        "offset": {
          "format": "int64",
          "type": "number"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiClient"
          }
        }
      },
      "required": [
        "limit",
        "count",
        "offset",
        "results"
      ],
      "x-annotation-package": "ApiClient"
    },
    "CartDiscount": {
      "title": "CartDiscount",
      "allOf": [
        {
          "$ref": "#/definitions/BaseResource"
        },
        {
          "properties": {
            "id": {
              "description": "The unique ID of the cart discount.",
              "type": "string",
              "x-annotation-identifier": true
            },
            "version": {
              "format": "int64",
              "description": "The current version of the cart discount.",
              "type": "number"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            },
            "lastModifiedAt": {
              "type": "string",
              "format": "date-time"
            },
            "lastModifiedBy": {
              "description": "Present on resources updated after 1/02/2019 except for events not tracked.",
              "$ref": "#/definitions/LastModifiedBy"
            },
            "createdBy": {
              "description": "Present on resources created after 1/02/2019 except for events not tracked.",
              "$ref": "#/definitions/CreatedBy"
            },
            "name": {
              "$ref": "#/definitions/LocalizedString"
            },
            "key": {
              "description": "User-specific unique identifier for a cart discount.\nMust be unique across a project.",
              "type": "string"
            },
            "description": {
              "$ref": "#/definitions/LocalizedString"
            },
            "value": {
              "$ref": "#/definitions/CartDiscountValue"
            },
            "cartPredicate": {
              "description": "A valid Cart predicate.",
              "type": "string"
            },
            "target": {
              "description": "Empty when the `value` has type `giftLineItem`, otherwise a CartDiscountTarget is set.",
              "$ref": "#/definitions/CartDiscountTarget"
            },
            "sortOrder": {
              "description": "The string must contain a number between 0 and 1.\nAll matching cart discounts are applied to a cart in the order defined by this field.\nA discount with greater sort order is prioritized higher than a discount with lower sort order.\nThe sort order is unambiguous among all cart discounts.",
              "type": "string"
            },
            "isActive": {
              "description": "Only active discount can be applied to the cart.",
              "type": "boolean"
            },
            "validFrom": {
              "type": "string",
              "format": "date-time"
            },
            "validUntil": {
              "type": "string",
              "format": "date-time"
            },
            "requiresDiscountCode": {
              "description": "States whether the discount can only be used in a connection with a DiscountCode.",
              "type": "boolean"
            },
            "references": {
              "description": "The platform will generate this array from the predicate.\nIt contains the references of all the resources that are addressed in the predicate.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "stackingMode": {
              "description": "Specifies whether the application of this discount causes the following discounts to be ignored.\nDefaults to Stacking.",
              "$ref": "#/definitions/StackingMode"
            },
            "custom": {
              "$ref": "#/definitions/CustomFields"
            }
          },
          "required": [
            "id",
            "version",
            "createdAt",
            "lastModifiedAt",
            "name",
            "value",
            "cartPredicate",
            "sortOrder",
            "isActive",
            "requiresDiscountCode",
            "references",
            "stackingMode"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "CartDiscount",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-cartDiscounts.html#cartdiscount",
      "x-annotation-updateType": "CartDiscountUpdate"
    },
    "CartDiscountCustomLineItemsTarget": {
      "title": "CartDiscountCustomLineItemsTarget",
      "allOf": [
        {
          "$ref": "#/definitions/CartDiscountTarget"
        },
        {
          "properties": {
            "predicate": {
              "type": "string"
            }
          },
          "required": [
            "predicate"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "CartDiscount"
    },
    "CartDiscountDraft": {
      "title": "CartDiscountDraft",
      "type": "object",
      "properties": {
        "name": {
          "$ref": "#/definitions/LocalizedString"
        },
        "key": {
          "description": "User-specific unique identifier for a cart discount.\nMust be unique across a project.\nThe field can be reset using the Set Key UpdateAction.",
          "type": "string"
        },
        "description": {
          "$ref": "#/definitions/LocalizedString"
        },
        "value": {
          "$ref": "#/definitions/CartDiscountValueDraft"
        },
        "cartPredicate": {
          "description": "A valid Cart predicate.",
          "type": "string"
        },
        "target": {
          "description": "Must not be set when the `value` has type `giftLineItem`, otherwise a CartDiscountTarget must be set.",
          "$ref": "#/definitions/CartDiscountTarget"
        },
        "sortOrder": {
          "description": "The string must contain a number between 0 and 1.\nA discount with greater sort order is prioritized higher than a discount with lower sort order.\nThe sort order must be unambiguous among all cart discounts.",
          "type": "string"
        },
        "isActive": {
          "description": "Only active discount can be applied to the cart.\nDefaults to `true`.",
          "type": "boolean"
        },
        "validFrom": {
          "type": "string",
          "format": "date-time"
        },
        "validUntil": {
          "type": "string",
          "format": "date-time"
        },
        "requiresDiscountCode": {
          "description": "States whether the discount can only be used in a connection with a DiscountCode.\nDefaults to `false`.",
          "type": "boolean"
        },
        "stackingMode": {
          "description": "Specifies whether the application of this discount causes the following discounts to be ignored.\nDefaults to Stacking.",
          "$ref": "#/definitions/StackingMode"
        },
        "custom": {
          "$ref": "#/definitions/CustomFields"
        }
      },
      "required": [
        "name",
        "value",
        "cartPredicate",
        "sortOrder",
        "requiresDiscountCode"
      ],
      "x-annotation-package": "CartDiscount",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-cartDiscounts.html#cartdiscount"
    },
    "CartDiscountLineItemsTarget": {
      "title": "CartDiscountLineItemsTarget",
      "allOf": [
        {
          "$ref": "#/definitions/CartDiscountTarget"
        },
        {
          "properties": {
            "predicate": {
              "type": "string"
            }
          },
          "required": [
            "predicate"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "CartDiscount"
    },
    "CartDiscountPagedQueryResponse": {
      "title": "CartDiscountPagedQueryResponse",
      "type": "object",
      "properties": {
        "limit": {
          "format": "int64",
          "type": "number"
        },
        "count": {
          "format": "int64",
          "type": "number"
        },
        "total": {
          "format": "int64",
          "type": "number"
        },
        "offset": {
          "format": "int64",
          "type": "number"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CartDiscount"
          }
        }
      },
      "required": [
        "limit",
        "count",
        "offset",
        "results"
      ],
      "x-annotation-package": "CartDiscount"
    },
    "CartDiscountReference": {
      "title": "CartDiscountReference",
      "allOf": [
        {
          "$ref": "#/definitions/Reference"
        },
        {
          "properties": {
            "obj": {
              "$ref": "#/definitions/CartDiscount"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "CartDiscount",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-cartDiscounts.html#cartdiscount"
    },
    "CartDiscountResourceIdentifier": {
      "title": "CartDiscountResourceIdentifier",
      "$ref": "#/definitions/ResourceIdentifier",
      "x-annotation-package": "CartDiscount",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-cartDiscounts.html#cartdiscount"
    },
    "CartDiscountShippingCostTarget": {
      "title": "CartDiscountShippingCostTarget",
      "$ref": "#/definitions/CartDiscountTarget",
      "x-annotation-package": "CartDiscount"
    },
    "CartDiscountTarget": {
      "title": "CartDiscountTarget",
      "discriminator": "type",
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "x-annotation-package": "CartDiscount",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-cartDiscounts.html#cartdiscounttarget"
    },
    "CartDiscountUpdate": {
      "title": "CartDiscountUpdate",
      "type": "object",
      "properties": {
        "version": {
          "format": "int64",
          "type": "number"
        },
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CartDiscountUpdateAction"
          }
        }
      },
      "required": [
        "version",
        "actions"
      ],
      "x-annotation-package": "CartDiscount"
    },
    "CartDiscountUpdateAction": {
      "title": "CartDiscountUpdateAction",
      "discriminator": "action",
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        }
      },
      "required": [
        "action"
      ],
      "x-annotation-package": "CartDiscount"
    },
    "CartDiscountValue": {
      "title": "CartDiscountValue",
      "discriminator": "type",
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "x-annotation-package": "CartDiscount",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-cartDiscounts.html#cartdiscountvalue"
    },
    "CartDiscountValueAbsolute": {
      "title": "CartDiscountValueAbsolute",
      "allOf": [
        {
          "$ref": "#/definitions/CartDiscountValue"
        },
        {
          "properties": {
            "money": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TypedMoney"
              }
            }
          },
          "required": [
            "money"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "CartDiscount"
    },
    "CartDiscountValueAbsoluteDraft": {
      "title": "CartDiscountValueAbsoluteDraft",
      "allOf": [
        {
          "$ref": "#/definitions/CartDiscountValueDraft"
        },
        {
          "properties": {
            "money": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Money"
              }
            }
          },
          "required": [
            "money"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "CartDiscount"
    },
    "CartDiscountValueDraft": {
      "title": "CartDiscountValueDraft",
      "discriminator": "type",
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "x-annotation-package": "CartDiscount",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-cartDiscounts.html#cartdiscountvalue"
    },
    "CartDiscountValueGiftLineItem": {
      "title": "CartDiscountValueGiftLineItem",
      "allOf": [
        {
          "$ref": "#/definitions/CartDiscountValue"
        },
        {
          "properties": {
            "product": {
              "$ref": "#/definitions/ProductReference"
            },
            "variantId": {
              "format": "int64",
              "type": "number"
            },
            "supplyChannel": {
              "$ref": "#/definitions/ChannelReference"
            },
            "distributionChannel": {
              "$ref": "#/definitions/ChannelReference"
            }
          },
          "required": [
            "product",
            "variantId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "CartDiscount"
    },
    "CartDiscountValueGiftLineItemDraft": {
      "title": "CartDiscountValueGiftLineItemDraft",
      "allOf": [
        {
          "$ref": "#/definitions/CartDiscountValueDraft"
        },
        {
          "properties": {
            "product": {
              "$ref": "#/definitions/ProductReference"
            },
            "variantId": {
              "format": "int64",
              "type": "number"
            },
            "supplyChannel": {
              "$ref": "#/definitions/ChannelReference"
            },
            "distributionChannel": {
              "$ref": "#/definitions/ChannelReference"
            }
          },
          "required": [
            "product",
            "variantId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "CartDiscount"
    },
    "CartDiscountValueRelative": {
      "title": "CartDiscountValueRelative",
      "allOf": [
        {
          "$ref": "#/definitions/CartDiscountValue"
        },
        {
          "properties": {
            "permyriad": {
              "format": "int64",
              "type": "number"
            }
          },
          "required": [
            "permyriad"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "CartDiscount"
    },
    "CartDiscountValueRelativeDraft": {
      "title": "CartDiscountValueRelativeDraft",
      "allOf": [
        {
          "$ref": "#/definitions/CartDiscountValueDraft"
        },
        {
          "properties": {
            "permyriad": {
              "format": "int64",
              "type": "number"
            }
          },
          "required": [
            "permyriad"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "CartDiscount"
    },
    "MultiBuyCustomLineItemsTarget": {
      "title": "MultiBuyCustomLineItemsTarget",
      "allOf": [
        {
          "$ref": "#/definitions/CartDiscountTarget"
        },
        {
          "properties": {
            "predicate": {
              "description": "A valid custom line item target predicate. The discount will be applied to custom line items that are\nmatched by the predicate.\n",
              "type": "string"
            },
            "triggerQuantity": {
              "description": "Quantity of line items that need to be present in order to trigger an application of this discount.",
              "type": "integer"
            },
            "discountedQuantity": {
              "description": "Quantity of line items that are discounted per application of this discount.",
              "type": "integer"
            },
            "maxOccurrence": {
              "description": "Maximum number of applications of this discount.",
              "type": "integer"
            },
            "selectionMode": {
              "$ref": "#/definitions/SelectionMode"
            }
          },
          "required": [
            "predicate",
            "triggerQuantity",
            "discountedQuantity",
            "selectionMode"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "CartDiscount"
    },
    "MultiBuyLineItemsTarget": {
      "title": "MultiBuyLineItemsTarget",
      "allOf": [
        {
          "$ref": "#/definitions/CartDiscountTarget"
        },
        {
          "properties": {
            "predicate": {
              "description": "A valid line item target predicate. The discount will be applied to line items that are matched by the predicate.\n",
              "type": "string"
            },
            "triggerQuantity": {
              "description": "Quantity of line items that need to be present in order to trigger an application of this discount.",
              "type": "integer"
            },
            "discountedQuantity": {
              "description": "Quantity of line items that are discounted per application of this discount.",
              "type": "integer"
            },
            "maxOccurrence": {
              "description": "Maximum number of applications of this discount.",
              "type": "integer"
            },
            "selectionMode": {
              "$ref": "#/definitions/SelectionMode"
            }
          },
          "required": [
            "predicate",
            "triggerQuantity",
            "discountedQuantity",
            "selectionMode"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "CartDiscount"
    },
    "SelectionMode": {
      "title": "SelectionMode",
      "enum": [
        "Cheapest",
        "MostExpensive"
      ],
      "type": "string",
      "x-annotation-package": "CartDiscount"
    },
    "StackingMode": {
      "title": "StackingMode",
      "enum": [
        "Stacking",
        "StopAfterThisDiscount"
      ],
      "type": "string",
      "x-annotation-package": "CartDiscount"
    },
    "CartDiscountChangeCartPredicateAction": {
      "title": "CartDiscountChangeCartPredicateAction",
      "allOf": [
        {
          "$ref": "#/definitions/CartDiscountUpdateAction"
        },
        {
          "properties": {
            "cartPredicate": {
              "description": "A valid Cart predicate.",
              "type": "string"
            }
          },
          "required": [
            "cartPredicate"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "CartDiscount",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-cartDiscounts.html#change-cart-predicate",
      "x-annotation-postman-example": null
    },
    "CartDiscountChangeIsActiveAction": {
      "title": "CartDiscountChangeIsActiveAction",
      "allOf": [
        {
          "$ref": "#/definitions/CartDiscountUpdateAction"
        },
        {
          "properties": {
            "isActive": {
              "type": "boolean"
            }
          },
          "required": [
            "isActive"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "CartDiscount",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-cartDiscounts.html#change-isactive",
      "x-annotation-postman-example": null
    },
    "CartDiscountChangeNameAction": {
      "title": "CartDiscountChangeNameAction",
      "allOf": [
        {
          "$ref": "#/definitions/CartDiscountUpdateAction"
        },
        {
          "properties": {
            "name": {
              "$ref": "#/definitions/LocalizedString"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "CartDiscount",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-cartDiscounts.html#change-name",
      "x-annotation-postman-example": null
    },
    "CartDiscountChangeRequiresDiscountCodeAction": {
      "title": "CartDiscountChangeRequiresDiscountCodeAction",
      "allOf": [
        {
          "$ref": "#/definitions/CartDiscountUpdateAction"
        },
        {
          "properties": {
            "requiresDiscountCode": {
              "type": "boolean"
            }
          },
          "required": [
            "requiresDiscountCode"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "CartDiscount",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-cartDiscounts.html#change-requires-discountcode",
      "x-annotation-postman-example": null
    },
    "CartDiscountChangeSortOrderAction": {
      "title": "CartDiscountChangeSortOrderAction",
      "allOf": [
        {
          "$ref": "#/definitions/CartDiscountUpdateAction"
        },
        {
          "properties": {
            "sortOrder": {
              "description": "The string must contain a number between 0 and 1.\nA discount with greater sortOrder is prioritized higher than a discount with lower sortOrder.",
              "type": "string"
            }
          },
          "required": [
            "sortOrder"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "CartDiscount",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-cartDiscounts.html#change-sort-order",
      "x-annotation-postman-example": null
    },
    "CartDiscountChangeStackingModeAction": {
      "title": "CartDiscountChangeStackingModeAction",
      "allOf": [
        {
          "$ref": "#/definitions/CartDiscountUpdateAction"
        },
        {
          "properties": {
            "stackingMode": {
              "$ref": "#/definitions/StackingMode"
            }
          },
          "required": [
            "stackingMode"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "CartDiscount",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-cartDiscounts.html#change-stacking-mode",
      "x-annotation-postman-example": null
    },
    "CartDiscountChangeTargetAction": {
      "title": "CartDiscountChangeTargetAction",
      "allOf": [
        {
          "$ref": "#/definitions/CartDiscountUpdateAction"
        },
        {
          "properties": {
            "target": {
              "$ref": "#/definitions/CartDiscountTarget"
            }
          },
          "required": [
            "target"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "CartDiscount",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-cartDiscounts.html#change-target",
      "x-annotation-postman-example": null
    },
    "CartDiscountChangeValueAction": {
      "title": "CartDiscountChangeValueAction",
      "allOf": [
        {
          "$ref": "#/definitions/CartDiscountUpdateAction"
        },
        {
          "properties": {
            "value": {
              "$ref": "#/definitions/CartDiscountValueDraft"
            }
          },
          "required": [
            "value"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "CartDiscount",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-cartDiscounts.html#change-value",
      "x-annotation-postman-example": null
    },
    "CartDiscountSetCustomFieldAction": {
      "title": "CartDiscountSetCustomFieldAction",
      "allOf": [
        {
          "$ref": "#/definitions/CartDiscountUpdateAction"
        },
        {
          "properties": {
            "name": {
              "type": "string"
            },
            "value": {
              "description": "If `value` is absent or `null`, this field will be removed if it exists.\nTrying to remove a field that does not exist will fail with an `InvalidOperation` error.\nIf `value` is provided, set the `value` of the field defined by the `name`.\nThe FieldDefinition determines the format for the `value` to be provided.",
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "CartDiscount",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-cartDiscounts.html#set-customfield",
      "x-annotation-postman-example": null
    },
    "CartDiscountSetCustomTypeAction": {
      "title": "CartDiscountSetCustomTypeAction",
      "allOf": [
        {
          "$ref": "#/definitions/CartDiscountUpdateAction"
        },
        {
          "properties": {
            "type": {
              "description": "If absent, the custom type and any existing CustomFields are removed.",
              "$ref": "#/definitions/TypeResourceIdentifier"
            },
            "fields": {
              "description": "A valid JSON object, based on the FieldDefinitions of the Type.\nSets the custom fields to this value.",
              "type": "object"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "CartDiscount",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-cartDiscounts.html#set-custom-type",
      "x-annotation-postman-example": null
    },
    "CartDiscountSetDescriptionAction": {
      "title": "CartDiscountSetDescriptionAction",
      "allOf": [
        {
          "$ref": "#/definitions/CartDiscountUpdateAction"
        },
        {
          "properties": {
            "description": {
              "description": "If the `description` parameter is not included, the field will be emptied.",
              "$ref": "#/definitions/LocalizedString"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "CartDiscount",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-cartDiscounts.html#set-description",
      "x-annotation-postman-example": null
    },
    "CartDiscountSetKeyAction": {
      "title": "CartDiscountSetKeyAction",
      "allOf": [
        {
          "$ref": "#/definitions/CartDiscountUpdateAction"
        },
        {
          "properties": {
            "key": {
              "description": "If `key` is absent or `null`, this field will be removed if it exists.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "CartDiscount",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-cartDiscounts.html#set-key"
    },
    "CartDiscountSetValidFromAction": {
      "title": "CartDiscountSetValidFromAction",
      "allOf": [
        {
          "$ref": "#/definitions/CartDiscountUpdateAction"
        },
        {
          "properties": {
            "validFrom": {
              "description": "If absent, the field with the value is removed in case a value was set before.",
              "type": "string",
              "format": "date-time"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "CartDiscount",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-cartDiscounts.html#set-valid-from",
      "x-annotation-postman-example": null
    },
    "CartDiscountSetValidFromAndUntilAction": {
      "title": "CartDiscountSetValidFromAndUntilAction",
      "allOf": [
        {
          "$ref": "#/definitions/CartDiscountUpdateAction"
        },
        {
          "properties": {
            "validFrom": {
              "description": "If absent, the field with the value is removed in case a value was set before.",
              "type": "string",
              "format": "date-time"
            },
            "validUntil": {
              "description": "If absent, the field with the value is removed in case a value was set before.",
              "type": "string",
              "format": "date-time"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "CartDiscount",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-cartDiscounts.html#set-valid-from-and-until",
      "x-annotation-postman-example": null
    },
    "CartDiscountSetValidUntilAction": {
      "title": "CartDiscountSetValidUntilAction",
      "allOf": [
        {
          "$ref": "#/definitions/CartDiscountUpdateAction"
        },
        {
          "properties": {
            "validUntil": {
              "description": "If absent, the field with the value is removed in case a value was set before.",
              "type": "string",
              "format": "date-time"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "CartDiscount",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-cartDiscounts.html#set-valid-until",
      "x-annotation-postman-example": null
    },
    "Cart": {
      "title": "Cart",
      "allOf": [
        {
          "$ref": "#/definitions/BaseResource"
        },
        {
          "properties": {
            "id": {
              "description": "The unique ID of the cart.",
              "type": "string",
              "x-annotation-identifier": true
            },
            "version": {
              "format": "int64",
              "description": "The current version of the cart.",
              "type": "number"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            },
            "lastModifiedAt": {
              "type": "string",
              "format": "date-time"
            },
            "lastModifiedBy": {
              "description": "Present on resources updated after 1/02/2019 except for events not tracked.",
              "$ref": "#/definitions/LastModifiedBy"
            },
            "createdBy": {
              "description": "Present on resources created after 1/02/2019 except for events not tracked.",
              "$ref": "#/definitions/CreatedBy"
            },
            "customerId": {
              "type": "string"
            },
            "customerEmail": {
              "type": "string"
            },
            "anonymousId": {
              "description": "Identifies carts and orders belonging to an anonymous session (the customer has not signed up/in yet).",
              "type": "string"
            },
            "store": {
              "$ref": "#/definitions/StoreKeyReference"
            },
            "lineItems": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LineItem"
              }
            },
            "customLineItems": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomLineItem"
              }
            },
            "totalPrice": {
              "description": "The sum of all `totalPrice` fields of the `lineItems` and `customLineItems`, as well as the `price` field of `shippingInfo` (if it exists).\n`totalPrice` may or may not include the taxes: it depends on the taxRate.includedInPrice property of each price.",
              "$ref": "#/definitions/TypedMoney"
            },
            "taxedPrice": {
              "description": "Not set until the shipping address is set.\nWill be set automatically in the `Platform` TaxMode.\nFor the `External` tax mode it will be set  as soon as the external tax rates for all line items, custom line items, and shipping in the cart are set.",
              "$ref": "#/definitions/TaxedPrice"
            },
            "cartState": {
              "$ref": "#/definitions/CartState"
            },
            "shippingAddress": {
              "description": "The shipping address is used to determine the eligible shipping methods and rates as well as the tax rate of the line items.",
              "$ref": "#/definitions/Address"
            },
            "billingAddress": {
              "$ref": "#/definitions/Address"
            },
            "inventoryMode": {
              "$ref": "#/definitions/InventoryMode"
            },
            "taxMode": {
              "$ref": "#/definitions/TaxMode"
            },
            "taxRoundingMode": {
              "description": "When calculating taxes for `taxedPrice`, the selected mode is used for rounding.",
              "$ref": "#/definitions/RoundingMode"
            },
            "taxCalculationMode": {
              "description": "When calculating taxes for `taxedPrice`, the selected mode is used for calculating the price with `LineItemLevel` (horizontally) or `UnitPriceLevel` (vertically) calculation mode.",
              "$ref": "#/definitions/TaxCalculationMode"
            },
            "customerGroup": {
              "description": "Set automatically when the customer is set and the customer is a member of a customer group.\nUsed for product variant\nprice selection.",
              "$ref": "#/definitions/CustomerGroupReference"
            },
            "country": {
              "description": "A two-digit country code as per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\nUsed for product variant price selection.",
              "$ref": "#/definitions/CountryCode"
            },
            "shippingInfo": {
              "description": "Set automatically once the ShippingMethod is set.",
              "$ref": "#/definitions/ShippingInfo"
            },
            "discountCodes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DiscountCodeInfo"
              }
            },
            "custom": {
              "$ref": "#/definitions/CustomFields"
            },
            "paymentInfo": {
              "$ref": "#/definitions/PaymentInfo"
            },
            "locale": {
              "type": "string"
            },
            "deleteDaysAfterLastModification": {
              "description": "The cart will be deleted automatically if it hasn't been modified for the specified amount of days and it is in the `Active` CartState.",
              "type": "integer"
            },
            "refusedGifts": {
              "description": "Automatically filled when a line item with LineItemMode `GiftLineItem` is removed from the cart.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CartDiscountReference"
              }
            },
            "origin": {
              "description": "The origin field indicates how this cart was created.\nThe value `Customer` indicates, that the cart was created by the customer.",
              "$ref": "#/definitions/CartOrigin"
            },
            "shippingRateInput": {
              "description": "The shippingRateInput is used as an input to select a ShippingRatePriceTier.",
              "$ref": "#/definitions/ShippingRateInput"
            },
            "itemShippingAddresses": {
              "description": "Contains addresses for carts with multiple shipping addresses.\nLine items reference these addresses under their `shippingDetails`.\nThe addresses captured here are not used to determine eligible shipping methods or the applicable tax rate.\nOnly the cart's `shippingAddress` is used for this.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Address"
              }
            }
          },
          "required": [
            "id",
            "version",
            "createdAt",
            "lastModifiedAt",
            "lineItems",
            "customLineItems",
            "totalPrice",
            "cartState",
            "taxMode",
            "taxRoundingMode",
            "taxCalculationMode",
            "refusedGifts",
            "origin"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#cart",
      "x-annotation-updateType": "CartUpdate"
    },
    "CartDraft": {
      "title": "CartDraft",
      "type": "object",
      "properties": {
        "currency": {
          "description": "A three-digit currency code as per [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).",
          "$ref": "#/definitions/CurrencyCode"
        },
        "customerId": {
          "description": "Id of an existing Customer.",
          "type": "string"
        },
        "customerEmail": {
          "type": "string"
        },
        "customerGroup": {
          "description": "Will be set automatically when the `customerId` is set and the customer is a member of a customer group.\nCan be set explicitly when no `customerId` is present.",
          "$ref": "#/definitions/CustomerGroupResourceIdentifier"
        },
        "anonymousId": {
          "description": "Assigns the new cart to an anonymous session (the customer has not signed up/in yet).",
          "type": "string"
        },
        "store": {
          "description": "Assigns the new cart to the store.\nThe store assignment can not be modified.",
          "$ref": "#/definitions/StoreResourceIdentifier"
        },
        "country": {
          "description": "A two-digit country code as per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).",
          "type": "string"
        },
        "inventoryMode": {
          "description": "Default inventory mode is `None`.",
          "$ref": "#/definitions/InventoryMode"
        },
        "taxMode": {
          "description": "The default tax mode is `Platform`.",
          "$ref": "#/definitions/TaxMode"
        },
        "taxRoundingMode": {
          "description": "The default tax rounding mode is `HalfEven`.",
          "$ref": "#/definitions/RoundingMode"
        },
        "taxCalculationMode": {
          "description": "The default tax calculation mode is `LineItemLevel`.",
          "$ref": "#/definitions/TaxCalculationMode"
        },
        "lineItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LineItemDraft"
          }
        },
        "customLineItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomLineItemDraft"
          }
        },
        "shippingAddress": {
          "description": "The shipping address is used to determine the eligible shipping methods and rates as well as the tax rate of the line items.",
          "$ref": "#/definitions/Address"
        },
        "billingAddress": {
          "$ref": "#/definitions/Address"
        },
        "shippingMethod": {
          "$ref": "#/definitions/ShippingMethodResourceIdentifier"
        },
        "externalTaxRateForShippingMethod": {
          "description": "An external tax rate can be set for the `shippingMethod` if the cart has the `External` TaxMode.",
          "$ref": "#/definitions/ExternalTaxRateDraft"
        },
        "custom": {
          "description": "The custom fields.",
          "$ref": "#/definitions/CustomFieldsDraft"
        },
        "locale": {
          "description": "Must be one of the languages supported for this project",
          "type": "string"
        },
        "deleteDaysAfterLastModification": {
          "format": "int64",
          "description": "The cart will be deleted automatically if it hasn't been modified for the specified amount of days and it is in the `Active` CartState.\nIf a ChangeSubscription for carts exists, a `ResourceDeleted` notification will be sent.",
          "type": "number"
        },
        "origin": {
          "description": "The default origin is `Customer`.",
          "$ref": "#/definitions/CartOrigin"
        },
        "shippingRateInput": {
          "description": "The shippingRateInput is used as an input to select a ShippingRatePriceTier.\nBased on the definition of ShippingRateInputType.\nIf CartClassification is defined, it must be ClassificationShippingRateInput.\nIf CartScore is defined, it must be ScoreShippingRateInput.\nOtherwise it can not bet set.",
          "$ref": "#/definitions/ShippingRateInputDraft"
        },
        "itemShippingAddresses": {
          "description": "Contains addresses for carts with multiple shipping addresses.\nEach address must contain a key which is unique in this cart.\nLine items will use these keys to reference the addresses under their `shippingDetails`.\nThe addresses captured here are not used to determine eligible shipping methods or the applicable tax rate.\nOnly the cart's `shippingAddress` is used for this.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Address"
          }
        }
      },
      "required": [
        "currency"
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#cartdraft"
    },
    "CartOrigin": {
      "title": "CartOrigin",
      "enum": [
        "Customer",
        "Merchant"
      ],
      "type": "string",
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#cartorigin"
    },
    "CartPagedQueryResponse": {
      "title": "CartPagedQueryResponse",
      "type": "object",
      "properties": {
        "limit": {
          "format": "int64",
          "type": "number"
        },
        "count": {
          "format": "int64",
          "type": "number"
        },
        "total": {
          "format": "int64",
          "type": "number"
        },
        "offset": {
          "format": "int64",
          "type": "number"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Cart"
          }
        }
      },
      "required": [
        "limit",
        "count",
        "offset",
        "results"
      ],
      "x-annotation-package": "Cart"
    },
    "CartReference": {
      "title": "CartReference",
      "allOf": [
        {
          "$ref": "#/definitions/Reference"
        },
        {
          "properties": {
            "obj": {
              "$ref": "#/definitions/Cart"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#cart"
    },
    "CartResourceIdentifier": {
      "title": "CartResourceIdentifier",
      "$ref": "#/definitions/ResourceIdentifier",
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#cart"
    },
    "CartState": {
      "title": "CartState",
      "enum": [
        "Active",
        "Merged",
        "Ordered"
      ],
      "type": "string",
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#cartstate"
    },
    "CartUpdate": {
      "title": "CartUpdate",
      "type": "object",
      "properties": {
        "version": {
          "format": "int64",
          "type": "number"
        },
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CartUpdateAction"
          }
        }
      },
      "required": [
        "version",
        "actions"
      ],
      "x-annotation-package": "Cart"
    },
    "CartUpdateAction": {
      "title": "CartUpdateAction",
      "discriminator": "action",
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        }
      },
      "required": [
        "action"
      ],
      "x-annotation-package": "Cart"
    },
    "ClassificationShippingRateInput": {
      "title": "ClassificationShippingRateInput",
      "allOf": [
        {
          "$ref": "#/definitions/ShippingRateInput"
        },
        {
          "properties": {
            "key": {
              "type": "string"
            },
            "label": {
              "$ref": "#/definitions/LocalizedString"
            }
          },
          "required": [
            "key",
            "label"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#classificationshippingrateinput"
    },
    "ClassificationShippingRateInputDraft": {
      "title": "ClassificationShippingRateInputDraft",
      "allOf": [
        {
          "$ref": "#/definitions/ShippingRateInputDraft"
        },
        {
          "properties": {
            "key": {
              "type": "string"
            }
          },
          "required": [
            "key"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#classificationshippingrateinputdraft"
    },
    "CustomLineItem": {
      "title": "CustomLineItem",
      "type": "object",
      "properties": {
        "id": {
          "description": "The unique ID of this CustomLineItem.",
          "type": "string"
        },
        "name": {
          "description": "The name of this CustomLineItem.",
          "$ref": "#/definitions/LocalizedString"
        },
        "money": {
          "description": "The cost to add to the cart.\nThe amount can be negative.",
          "$ref": "#/definitions/TypedMoney"
        },
        "taxedPrice": {
          "description": "Set once the `taxRate` is set.",
          "$ref": "#/definitions/TaxedItemPrice"
        },
        "totalPrice": {
          "description": "The total price of this custom line item.\nIf custom line item is discounted, then the `totalPrice` would be the discounted custom line item price multiplied by `quantity`.\nOtherwise a total price is just a `money` multiplied by the `quantity`.\n`totalPrice` may or may not include the taxes: it depends on the taxRate.includedInPrice property.",
          "$ref": "#/definitions/TypedMoney"
        },
        "slug": {
          "description": "A unique String in the cart to identify this CustomLineItem.",
          "type": "string"
        },
        "quantity": {
          "description": "The amount of a CustomLineItem in the cart.\nMust be a positive integer.",
          "type": "number"
        },
        "state": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ItemState"
          }
        },
        "taxCategory": {
          "$ref": "#/definitions/TaxCategoryReference"
        },
        "taxRate": {
          "description": "Will be set automatically in the `Platform` TaxMode once the shipping address is set is set.\nFor the `External` tax mode the tax rate has to be set explicitly with the ExternalTaxRateDraft.",
          "$ref": "#/definitions/TaxRate"
        },
        "discountedPricePerQuantity": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DiscountedLineItemPriceForQuantity"
          }
        },
        "custom": {
          "$ref": "#/definitions/CustomFields"
        },
        "shippingDetails": {
          "description": "Container for custom line item specific address(es).\nCustomLineItem fields that can be used in query predicates: `slug`, `name`, `quantity`,\n`money`, `state`, `discountedPricePerQuantity`.",
          "$ref": "#/definitions/ItemShippingDetails"
        }
      },
      "required": [
        "id",
        "name",
        "money",
        "totalPrice",
        "slug",
        "quantity",
        "state",
        "discountedPricePerQuantity"
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#customlineitem"
    },
    "CustomLineItemDraft": {
      "title": "CustomLineItemDraft",
      "type": "object",
      "properties": {
        "name": {
          "$ref": "#/definitions/LocalizedString"
        },
        "quantity": {
          "description": "The amount of a CustomLineItemin the cart.\nMust be a positive integer.",
          "type": "number"
        },
        "money": {
          "$ref": "#/definitions/Money"
        },
        "slug": {
          "type": "string"
        },
        "taxCategory": {
          "description": "The given tax category will be used to select a tax rate when a cart has the TaxMode `Platform`.",
          "$ref": "#/definitions/TaxCategoryResourceIdentifier"
        },
        "externalTaxRate": {
          "description": "An external tax rate can be set if the cart has the `External` TaxMode.",
          "$ref": "#/definitions/ExternalTaxRateDraft"
        },
        "custom": {
          "description": "The custom fields.",
          "$ref": "#/definitions/CustomFields"
        },
        "shippingDetails": {
          "description": "Container for custom line item specific address(es).",
          "$ref": "#/definitions/ItemShippingDetailsDraft"
        }
      },
      "required": [
        "name",
        "quantity",
        "money",
        "slug"
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#customlineitemdraft"
    },
    "DiscountCodeInfo": {
      "title": "DiscountCodeInfo",
      "type": "object",
      "properties": {
        "discountCode": {
          "$ref": "#/definitions/DiscountCodeReference"
        },
        "state": {
          "$ref": "#/definitions/DiscountCodeState"
        }
      },
      "required": [
        "discountCode",
        "state"
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#discountcodereference"
    },
    "DiscountCodeState": {
      "title": "DiscountCodeState",
      "enum": [
        "NotActive",
        "DoesNotMatchCart",
        "MatchesCart",
        "MaxApplicationReached",
        "ApplicationStoppedByPreviousDiscount",
        "NotValid"
      ],
      "type": "string",
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#discountcodestate"
    },
    "DiscountedLineItemPortion": {
      "title": "DiscountedLineItemPortion",
      "type": "object",
      "properties": {
        "discount": {
          "$ref": "#/definitions/CartDiscountReference"
        },
        "discountedAmount": {
          "$ref": "#/definitions/TypedMoney"
        }
      },
      "required": [
        "discount",
        "discountedAmount"
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#discountedlineitemportion"
    },
    "DiscountedLineItemPrice": {
      "title": "DiscountedLineItemPrice",
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/TypedMoney"
        },
        "includedDiscounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DiscountedLineItemPortion"
          }
        }
      },
      "required": [
        "value",
        "includedDiscounts"
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#discountedlineitemprice"
    },
    "DiscountedLineItemPriceForQuantity": {
      "title": "DiscountedLineItemPriceForQuantity",
      "type": "object",
      "properties": {
        "quantity": {
          "type": "number"
        },
        "discountedPrice": {
          "$ref": "#/definitions/DiscountedLineItemPrice"
        }
      },
      "required": [
        "quantity",
        "discountedPrice"
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#discountedlineitempriceforquantity"
    },
    "ExternalLineItemTotalPrice": {
      "title": "ExternalLineItemTotalPrice",
      "type": "object",
      "properties": {
        "price": {
          "$ref": "#/definitions/Money"
        },
        "totalPrice": {
          "$ref": "#/definitions/Money"
        }
      },
      "required": [
        "price",
        "totalPrice"
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#externallineitemtotalprice"
    },
    "ExternalTaxAmountDraft": {
      "title": "ExternalTaxAmountDraft",
      "type": "object",
      "properties": {
        "totalGross": {
          "description": "The total gross amount of the item (totalNet + taxes).",
          "$ref": "#/definitions/Money"
        },
        "taxRate": {
          "$ref": "#/definitions/ExternalTaxRateDraft"
        }
      },
      "required": [
        "totalGross",
        "taxRate"
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#externaltaxamountdraft"
    },
    "ExternalTaxRateDraft": {
      "title": "ExternalTaxRateDraft",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "amount": {
          "description": "Percentage in the range of [0..1].\nMust be supplied if no `subRates` are specified.\nIf `subRates` are specified\nthen the `amount` can be omitted or it must be the sum of the amounts of all `subRates`.",
          "type": "number"
        },
        "country": {
          "description": "A two-digit country code as per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).",
          "type": "string"
        },
        "state": {
          "description": "The state in the country",
          "type": "string"
        },
        "subRates": {
          "description": "For countries (e.g.\nthe US) where the total tax is a combination of multiple taxes (e.g.\nstate and local taxes).",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubRate"
          }
        },
        "includedInPrice": {
          "description": "The default value for `includedInPrice` is FALSE.",
          "type": "boolean"
        }
      },
      "required": [
        "name",
        "country"
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#externaltaxratedraft"
    },
    "InventoryMode": {
      "title": "InventoryMode",
      "enum": [
        "TrackOnly",
        "ReserveOnOrder",
        "None"
      ],
      "type": "string",
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#inventorymode"
    },
    "ItemShippingDetails": {
      "title": "ItemShippingDetails",
      "type": "object",
      "properties": {
        "targets": {
          "description": "Used to map what sub-quantity should be shipped to which address.\nDuplicate address keys are not allowed.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ItemShippingTarget"
          }
        },
        "valid": {
          "description": "`true` if the quantity of the (custom) line item is equal to the sum of the sub-quantities in `targets`, `false` otherwise.\nA cart cannot be ordered when the value is `false`.\nThe error InvalidItemShippingDetails will be triggered.",
          "type": "boolean"
        }
      },
      "required": [
        "targets",
        "valid"
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#itemshippingdetails"
    },
    "ItemShippingDetailsDraft": {
      "title": "ItemShippingDetailsDraft",
      "type": "object",
      "properties": {
        "targets": {
          "description": "Used to capture one or more (custom) line item specific shipping addresses.\nBy specifying sub-quantities, it is possible to set multiple shipping addresses for one line item.\nA cart can have `shippingDetails` where the `targets` sum does not match the quantity of the line item or custom line item.\nFor the order creation and order updates the `targets` sum must match the quantity.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ItemShippingTarget"
          }
        }
      },
      "required": [
        "targets"
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#itemshippingdetailsdraft"
    },
    "ItemShippingTarget": {
      "title": "ItemShippingTarget",
      "type": "object",
      "properties": {
        "addressKey": {
          "description": "The key of the address in the cart's `itemShippingAddresses`",
          "type": "string"
        },
        "quantity": {
          "description": "The quantity of items that should go to the address with the specified `addressKey`.\nOnly positive values are allowed.\nUsing `0` as quantity is also possible in a draft object, but the element will not be present in the resulting ItemShippingDetails.",
          "type": "number"
        }
      },
      "required": [
        "addressKey",
        "quantity"
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#itemshippingtarget"
    },
    "LineItem": {
      "title": "LineItem",
      "type": "object",
      "properties": {
        "id": {
          "description": "The unique ID of this LineItem.",
          "type": "string"
        },
        "productId": {
          "type": "string"
        },
        "name": {
          "description": "The product name.",
          "$ref": "#/definitions/LocalizedString"
        },
        "productSlug": {
          "description": "The slug of a product is inserted on the fly.\nIt is always up-to-date and can therefore be used to link to the product detail page of the product.\nIt is empty if the product has been deleted.\nThe slug is also empty if the cart or order is retrieved via Reference Expansion or is a snapshot in a Message.",
          "$ref": "#/definitions/LocalizedString"
        },
        "productType": {
          "$ref": "#/definitions/ProductTypeReference"
        },
        "variant": {
          "description": "The variant data is saved when the variant is added to the cart, and not updated automatically.\nIt can manually be updated with the Recalculate update action.",
          "$ref": "#/definitions/ProductVariant"
        },
        "price": {
          "description": "The price of a line item is selected from the prices array of the product variant.\nIf the `variant` field hasn't been updated, the price may not correspond to a price in `variant.prices`.",
          "$ref": "#/definitions/Price"
        },
        "taxedPrice": {
          "description": "Set once the `taxRate` is set.",
          "$ref": "#/definitions/TaxedItemPrice"
        },
        "totalPrice": {
          "description": "The total price of this line item.\nIf the line item is discounted, then the `totalPrice` is the DiscountedLineItemPriceForQuantity multiplied by `quantity`.\nOtherwise the total price is the product price multiplied by the `quantity`.\n`totalPrice` may or may not include the taxes: it depends on the taxRate.includedInPrice property.",
          "$ref": "#/definitions/TypedMoney"
        },
        "quantity": {
          "format": "int64",
          "description": "The amount of a LineItem in the cart.\nMust be a positive integer.",
          "type": "number"
        },
        "state": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ItemState"
          }
        },
        "taxRate": {
          "description": "Will be set automatically in the `Platform` TaxMode once the shipping address is set is set.\nFor the `External` tax mode the tax rate has to be set explicitly with the ExternalTaxRateDraft.",
          "$ref": "#/definitions/TaxRate"
        },
        "supplyChannel": {
          "description": "The supply channel identifies the inventory entries that should be reserved.\nThe channel has\nthe role InventorySupply.",
          "$ref": "#/definitions/ChannelReference"
        },
        "distributionChannel": {
          "description": "The distribution channel is used to select a ProductPrice.\nThe channel has the role ProductDistribution.",
          "$ref": "#/definitions/ChannelReference"
        },
        "discountedPricePerQuantity": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DiscountedLineItemPriceForQuantity"
          }
        },
        "priceMode": {
          "$ref": "#/definitions/LineItemPriceMode"
        },
        "lineItemMode": {
          "$ref": "#/definitions/LineItemMode"
        },
        "custom": {
          "$ref": "#/definitions/CustomFields"
        },
        "shippingDetails": {
          "description": "Container for line item specific address(es).",
          "$ref": "#/definitions/ItemShippingDetails"
        }
      },
      "required": [
        "id",
        "productId",
        "name",
        "productType",
        "variant",
        "price",
        "totalPrice",
        "quantity",
        "state",
        "discountedPricePerQuantity",
        "priceMode",
        "lineItemMode"
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#lineitem"
    },
    "LineItemDraft": {
      "title": "LineItemDraft",
      "properties": {
        "productId": {
          "type": "string"
        },
        "variantId": {
          "format": "int64",
          "type": "number"
        },
        "sku": {
          "type": "string"
        },
        "quantity": {
          "default": 1,
          "format": "int64",
          "description": "The amount of a `LineItem`in the cart.\nMust be a positive integer.",
          "type": "number"
        },
        "supplyChannel": {
          "description": "By providing supply channel information, you can unique identify\ninventory entries that should be reserved.\nThe provided channel should have\nthe InventorySupply role.",
          "$ref": "#/definitions/ChannelResourceIdentifier"
        },
        "distributionChannel": {
          "description": "The channel is used to select a ProductPrice.\nThe provided channel should have the ProductDistribution role.",
          "$ref": "#/definitions/ChannelResourceIdentifier"
        },
        "externalTaxRate": {
          "description": "An external tax rate can be set if the cart has the `External` TaxMode.",
          "$ref": "#/definitions/ExternalTaxRateDraft"
        },
        "custom": {
          "description": "The custom fields.",
          "$ref": "#/definitions/CustomFieldsDraft"
        },
        "externalPrice": {
          "description": "Sets the line item `price` to the given value and sets the line item `priceMode` to `ExternalPrice` LineItemPriceMode.",
          "$ref": "#/definitions/Money"
        },
        "externalTotalPrice": {
          "description": "Sets the line item `price` and `totalPrice` to the given values and sets the line item `priceMode` to `ExternalTotal` LineItemPriceMode.",
          "$ref": "#/definitions/ExternalLineItemTotalPrice"
        },
        "shippingDetails": {
          "description": "Container for line item specific address(es).",
          "$ref": "#/definitions/ItemShippingDetailsDraft"
        }
      },
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#lineitemdraft",
      "x-annotation-builder": [
        {
          "paramNames": [
            "productId",
            "variantId",
            "quantity"
          ]
        },
        {
          "paramNames": [
            "sku",
            "quantity"
          ]
        }
      ],
      "type": "object"
    },
    "LineItemMode": {
      "title": "LineItemMode",
      "enum": [
        "Standard",
        "GiftLineItem"
      ],
      "type": "string",
      "x-annotation-package": "Cart"
    },
    "LineItemPriceMode": {
      "title": "LineItemPriceMode",
      "enum": [
        "Platform",
        "ExternalTotal",
        "ExternalPrice"
      ],
      "type": "string",
      "x-annotation-package": "Cart"
    },
    "ReplicaCartDraft": {
      "title": "ReplicaCartDraft",
      "type": "object",
      "properties": {
        "reference": {
          "oneOf": [
            {
              "$ref": "#/definitions/CartReference"
            },
            {
              "$ref": "#/definitions/OrderReference"
            }
          ]
        }
      },
      "required": [
        "reference"
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#replicacartdraft"
    },
    "RoundingMode": {
      "title": "RoundingMode",
      "enum": [
        "HalfEven",
        "HalfUp",
        "HalfDown"
      ],
      "type": "string",
      "x-annotation-package": "Cart"
    },
    "ScoreShippingRateInput": {
      "title": "ScoreShippingRateInput",
      "allOf": [
        {
          "$ref": "#/definitions/ShippingRateInput"
        },
        {
          "properties": {
            "score": {
              "type": "number"
            }
          },
          "required": [
            "score"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#scoreshippingrateinput"
    },
    "ScoreShippingRateInputDraft": {
      "title": "ScoreShippingRateInputDraft",
      "allOf": [
        {
          "$ref": "#/definitions/ShippingRateInputDraft"
        },
        {
          "properties": {
            "score": {
              "type": "number"
            }
          },
          "required": [
            "score"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#scoreshippingrateinputdraft"
    },
    "ShippingInfo": {
      "title": "ShippingInfo",
      "type": "object",
      "properties": {
        "shippingMethodName": {
          "type": "string"
        },
        "price": {
          "description": "Determined based on the ShippingRate and its tiered prices, and either the sum of LineItem prices or the `shippingRateInput` field.",
          "$ref": "#/definitions/TypedMoney"
        },
        "shippingRate": {
          "description": "The shipping rate used to determine the price.",
          "$ref": "#/definitions/ShippingRate"
        },
        "taxedPrice": {
          "description": "Set once the `taxRate` is set.",
          "$ref": "#/definitions/TaxedItemPrice"
        },
        "taxRate": {
          "description": "Will be set automatically in the `Platform` TaxMode once the shipping address is set is set.\nFor the `External` tax mode the tax rate has to be set explicitly with the ExternalTaxRateDraft.",
          "$ref": "#/definitions/TaxRate"
        },
        "taxCategory": {
          "$ref": "#/definitions/TaxCategoryReference"
        },
        "shippingMethod": {
          "description": "Not set if custom shipping method is used.",
          "$ref": "#/definitions/ShippingMethodReference"
        },
        "deliveries": {
          "description": "Deliveries are compilations of information on how the articles are being delivered to the customers.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Delivery"
          }
        },
        "discountedPrice": {
          "$ref": "#/definitions/DiscountedLineItemPrice"
        },
        "shippingMethodState": {
          "description": "Indicates whether the ShippingMethod referenced in this ShippingInfo is allowed for the cart or not.",
          "$ref": "#/definitions/ShippingMethodState"
        }
      },
      "required": [
        "shippingMethodName",
        "price",
        "shippingRate",
        "shippingMethodState"
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#shippinginfo"
    },
    "ShippingMethodState": {
      "title": "ShippingMethodState",
      "enum": [
        "DoesNotMatchCart",
        "MatchesCart"
      ],
      "type": "string",
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#shippingmethodstate"
    },
    "ShippingRateInput": {
      "title": "ShippingRateInput",
      "discriminator": "type",
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#shippingrateinput"
    },
    "ShippingRateInputDraft": {
      "title": "ShippingRateInputDraft",
      "discriminator": "type",
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#shippingrateinputdraft"
    },
    "TaxCalculationMode": {
      "title": "TaxCalculationMode",
      "enum": [
        "LineItemLevel",
        "UnitPriceLevel"
      ],
      "type": "string",
      "x-annotation-package": "Cart"
    },
    "TaxMode": {
      "title": "TaxMode",
      "enum": [
        "Platform",
        "External",
        "ExternalAmount",
        "Disabled"
      ],
      "type": "string",
      "x-annotation-package": "Cart"
    },
    "TaxPortion": {
      "title": "TaxPortion",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "rate": {
          "minimum": 0,
          "maximum": 1,
          "description": "A number in the range [0..1]",
          "type": "number"
        },
        "amount": {
          "$ref": "#/definitions/TypedMoney"
        }
      },
      "required": [
        "rate",
        "amount"
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#taxportion"
    },
    "TaxPortionDraft": {
      "title": "TaxPortionDraft",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "rate": {
          "minimum": 0,
          "maximum": 1,
          "type": "number"
        },
        "amount": {
          "$ref": "#/definitions/Money"
        }
      },
      "required": [
        "rate",
        "amount"
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#taxportion"
    },
    "TaxedItemPrice": {
      "title": "TaxedItemPrice",
      "type": "object",
      "properties": {
        "totalNet": {
          "$ref": "#/definitions/TypedMoney"
        },
        "totalGross": {
          "description": "TaxedItemPrice fields can not be used in query predicates.",
          "$ref": "#/definitions/TypedMoney"
        }
      },
      "required": [
        "totalNet",
        "totalGross"
      ],
      "x-annotation-package": "Cart"
    },
    "TaxedPrice": {
      "title": "TaxedPrice",
      "type": "object",
      "properties": {
        "totalNet": {
          "$ref": "#/definitions/TypedMoney"
        },
        "totalGross": {
          "$ref": "#/definitions/TypedMoney"
        },
        "taxPortions": {
          "description": "TaxedPrice fields that can be used in query predicates: `totalNet`, `totalGross`.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaxPortion"
          }
        }
      },
      "required": [
        "totalNet",
        "totalGross",
        "taxPortions"
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#taxedprice"
    },
    "TaxedPriceDraft": {
      "title": "TaxedPriceDraft",
      "type": "object",
      "properties": {
        "totalNet": {
          "$ref": "#/definitions/TypedMoneyDraft"
        },
        "totalGross": {
          "$ref": "#/definitions/TypedMoneyDraft"
        },
        "taxPortions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaxPortionDraft"
          }
        }
      },
      "required": [
        "totalNet",
        "totalGross",
        "taxPortions"
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#taxedprice"
    },
    "CartAddCustomLineItemAction": {
      "title": "CartAddCustomLineItemAction",
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "properties": {
            "money": {
              "$ref": "#/definitions/Money"
            },
            "name": {
              "$ref": "#/definitions/LocalizedString"
            },
            "quantity": {
              "type": "number"
            },
            "slug": {
              "type": "string"
            },
            "taxCategory": {
              "$ref": "#/definitions/TaxCategoryResourceIdentifier"
            },
            "custom": {
              "$ref": "#/definitions/CustomFieldsDraft"
            },
            "externalTaxRate": {
              "$ref": "#/definitions/ExternalTaxRateDraft"
            }
          },
          "required": [
            "money",
            "name",
            "quantity",
            "slug"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#add-customlineitem",
      "x-annotation-postman-example": null
    },
    "CartAddDiscountCodeAction": {
      "title": "CartAddDiscountCodeAction",
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "properties": {
            "code": {
              "type": "string"
            }
          },
          "required": [
            "code"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#add-discountcode",
      "x-annotation-postman-example": null
    },
    "CartAddItemShippingAddressAction": {
      "title": "CartAddItemShippingAddressAction",
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "properties": {
            "address": {
              "$ref": "#/definitions/Address"
            }
          },
          "required": [
            "address"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#add-itemshippingaddress",
      "x-annotation-postman-example": null
    },
    "CartAddLineItemAction": {
      "title": "CartAddLineItemAction",
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "properties": {
            "custom": {
              "$ref": "#/definitions/CustomFieldsDraft"
            },
            "distributionChannel": {
              "$ref": "#/definitions/ChannelResourceIdentifier"
            },
            "externalTaxRate": {
              "$ref": "#/definitions/ExternalTaxRateDraft"
            },
            "productId": {
              "type": "string"
            },
            "variantId": {
              "format": "int64",
              "type": "number"
            },
            "sku": {
              "type": "string"
            },
            "quantity": {
              "type": "number"
            },
            "supplyChannel": {
              "$ref": "#/definitions/ChannelResourceIdentifier"
            },
            "externalPrice": {
              "$ref": "#/definitions/Money"
            },
            "externalTotalPrice": {
              "$ref": "#/definitions/ExternalLineItemTotalPrice"
            },
            "shippingDetails": {
              "$ref": "#/definitions/ItemShippingDetailsDraft"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#add-lineitem",
      "x-annotation-postman-example": null
    },
    "CartAddPaymentAction": {
      "title": "CartAddPaymentAction",
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "properties": {
            "payment": {
              "$ref": "#/definitions/PaymentResourceIdentifier"
            }
          },
          "required": [
            "payment"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#add-payment",
      "x-annotation-postman-example": null
    },
    "CartAddShoppingListAction": {
      "title": "CartAddShoppingListAction",
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "properties": {
            "shoppingList": {
              "$ref": "#/definitions/ShoppingListResourceIdentifier"
            },
            "supplyChannel": {
              "$ref": "#/definitions/ChannelResourceIdentifier"
            },
            "distributionChannel": {
              "$ref": "#/definitions/ChannelResourceIdentifier"
            }
          },
          "required": [
            "shoppingList"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#add-shopping-list",
      "x-annotation-postman-example": null
    },
    "CartApplyDeltaToCustomLineItemShippingDetailsTargetsAction": {
      "title": "CartApplyDeltaToCustomLineItemShippingDetailsTargetsAction",
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "properties": {
            "customLineItemId": {
              "type": "string"
            },
            "targetsDelta": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ItemShippingTarget"
              }
            }
          },
          "required": [
            "customLineItemId",
            "targetsDelta"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#apply-deltatocustomlineitemshippingdetailstargets",
      "x-annotation-postman-example": null
    },
    "CartApplyDeltaToLineItemShippingDetailsTargetsAction": {
      "title": "CartApplyDeltaToLineItemShippingDetailsTargetsAction",
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "properties": {
            "lineItemId": {
              "type": "string"
            },
            "targetsDelta": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ItemShippingTarget"
              }
            }
          },
          "required": [
            "lineItemId",
            "targetsDelta"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#apply-deltatolineitemshippingdetailstargets",
      "x-annotation-postman-example": null
    },
    "CartChangeCustomLineItemMoneyAction": {
      "title": "CartChangeCustomLineItemMoneyAction",
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "properties": {
            "customLineItemId": {
              "type": "string"
            },
            "money": {
              "$ref": "#/definitions/Money"
            }
          },
          "required": [
            "customLineItemId",
            "money"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#change-customlineitem-money",
      "x-annotation-postman-example": null
    },
    "CartChangeCustomLineItemQuantityAction": {
      "title": "CartChangeCustomLineItemQuantityAction",
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "properties": {
            "customLineItemId": {
              "type": "string"
            },
            "quantity": {
              "type": "number"
            }
          },
          "required": [
            "customLineItemId",
            "quantity"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#change-customlineitem-quantity",
      "x-annotation-postman-example": null
    },
    "CartChangeLineItemQuantityAction": {
      "title": "CartChangeLineItemQuantityAction",
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "properties": {
            "lineItemId": {
              "type": "string"
            },
            "quantity": {
              "type": "number"
            },
            "externalPrice": {
              "$ref": "#/definitions/Money"
            },
            "externalTotalPrice": {
              "$ref": "#/definitions/ExternalLineItemTotalPrice"
            }
          },
          "required": [
            "lineItemId",
            "quantity"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#change-lineitem-quantity",
      "x-annotation-postman-example": null
    },
    "CartChangeTaxCalculationModeAction": {
      "title": "CartChangeTaxCalculationModeAction",
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "properties": {
            "taxCalculationMode": {
              "$ref": "#/definitions/TaxCalculationMode"
            }
          },
          "required": [
            "taxCalculationMode"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#change-taxcalculationmode",
      "x-annotation-postman-example": null
    },
    "CartChangeTaxModeAction": {
      "title": "CartChangeTaxModeAction",
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "properties": {
            "taxMode": {
              "$ref": "#/definitions/TaxMode"
            }
          },
          "required": [
            "taxMode"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#change-taxmode",
      "x-annotation-postman-example": null
    },
    "CartChangeTaxRoundingModeAction": {
      "title": "CartChangeTaxRoundingModeAction",
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "properties": {
            "taxRoundingMode": {
              "$ref": "#/definitions/RoundingMode"
            }
          },
          "required": [
            "taxRoundingMode"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#change-tax-roundingmode",
      "x-annotation-postman-example": null
    },
    "CartRecalculateAction": {
      "title": "CartRecalculateAction",
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "properties": {
            "updateProductData": {
              "description": "If set to `true`, the line item product data (`name`, `variant` and `productType`) will also be updated.\nIf set to `false`,\nonly the prices and tax rates of the line item will be updated.\nThe updated price of a line item may not correspond to a price in `variant.prices` anymore.",
              "type": "boolean"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#recalculate",
      "x-annotation-postman-example": null
    },
    "CartRemoveCustomLineItemAction": {
      "title": "CartRemoveCustomLineItemAction",
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "properties": {
            "customLineItemId": {
              "type": "string"
            }
          },
          "required": [
            "customLineItemId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#remove-customlineitem",
      "x-annotation-postman-example": null
    },
    "CartRemoveDiscountCodeAction": {
      "title": "CartRemoveDiscountCodeAction",
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "properties": {
            "discountCode": {
              "$ref": "#/definitions/DiscountCodeReference"
            }
          },
          "required": [
            "discountCode"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#remove-discountcode",
      "x-annotation-postman-example": null
    },
    "CartRemoveItemShippingAddressAction": {
      "title": "CartRemoveItemShippingAddressAction",
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "properties": {
            "addressKey": {
              "type": "string"
            }
          },
          "required": [
            "addressKey"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#remove-itemshippingaddress",
      "x-annotation-postman-example": null
    },
    "CartRemoveLineItemAction": {
      "title": "CartRemoveLineItemAction",
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "properties": {
            "lineItemId": {
              "type": "string"
            },
            "quantity": {
              "type": "number"
            },
            "externalPrice": {
              "$ref": "#/definitions/Money"
            },
            "externalTotalPrice": {
              "$ref": "#/definitions/ExternalLineItemTotalPrice"
            },
            "shippingDetailsToRemove": {
              "$ref": "#/definitions/ItemShippingDetailsDraft"
            }
          },
          "required": [
            "lineItemId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#remove-lineitem",
      "x-annotation-postman-example": null
    },
    "CartRemovePaymentAction": {
      "title": "CartRemovePaymentAction",
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "properties": {
            "payment": {
              "$ref": "#/definitions/PaymentResourceIdentifier"
            }
          },
          "required": [
            "payment"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#remove-payment",
      "x-annotation-postman-example": null
    },
    "CartSetAnonymousIdAction": {
      "title": "CartSetAnonymousIdAction",
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "properties": {
            "anonymousId": {
              "description": "If not set, any existing anonymous ID will be removed.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#set-anonymous-id",
      "x-annotation-postman-example": null
    },
    "CartSetBillingAddressAction": {
      "title": "CartSetBillingAddressAction",
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "properties": {
            "address": {
              "$ref": "#/definitions/Address"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#set-billing-address",
      "x-annotation-postman-example": null
    },
    "CartSetCartTotalTaxAction": {
      "title": "CartSetCartTotalTaxAction",
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "properties": {
            "externalTotalGross": {
              "description": "The total gross amount of the cart (totalNet + taxes).",
              "$ref": "#/definitions/Money"
            },
            "externalTaxPortions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaxPortionDraft"
              }
            }
          },
          "required": [
            "externalTotalGross"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#set-cart-total-tax",
      "x-annotation-postman-example": null
    },
    "CartSetCountryAction": {
      "title": "CartSetCountryAction",
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "properties": {
            "country": {
              "$ref": "#/definitions/CountryCode"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#set-country",
      "x-annotation-postman-example": null
    },
    "CartSetCustomFieldAction": {
      "title": "CartSetCustomFieldAction",
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "properties": {
            "name": {
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#set-customfield",
      "x-annotation-postman-example": null
    },
    "CartSetCustomLineItemCustomFieldAction": {
      "title": "CartSetCustomLineItemCustomFieldAction",
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "properties": {
            "customLineItemId": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          },
          "required": [
            "customLineItemId",
            "name"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#set-customlineitem-customfield",
      "x-annotation-postman-example": null
    },
    "CartSetCustomLineItemCustomTypeAction": {
      "title": "CartSetCustomLineItemCustomTypeAction",
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "properties": {
            "customLineItemId": {
              "type": "string"
            },
            "type": {
              "$ref": "#/definitions/TypeResourceIdentifier"
            },
            "fields": {
              "$ref": "#/definitions/FieldContainer"
            }
          },
          "required": [
            "customLineItemId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#set-customlineitem-custom-type",
      "x-annotation-postman-example": null
    },
    "CartSetCustomLineItemShippingDetailsAction": {
      "title": "CartSetCustomLineItemShippingDetailsAction",
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "properties": {
            "customLineItemId": {
              "type": "string"
            },
            "shippingDetails": {
              "$ref": "#/definitions/ItemShippingDetailsDraft"
            }
          },
          "required": [
            "customLineItemId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#set-customlineitemshippingdetails",
      "x-annotation-postman-example": null
    },
    "CartSetCustomLineItemTaxAmountAction": {
      "title": "CartSetCustomLineItemTaxAmountAction",
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "properties": {
            "customLineItemId": {
              "type": "string"
            },
            "externalTaxAmount": {
              "$ref": "#/definitions/ExternalTaxAmountDraft"
            }
          },
          "required": [
            "customLineItemId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#set-customlineitem-taxamount",
      "x-annotation-postman-example": null
    },
    "CartSetCustomLineItemTaxRateAction": {
      "title": "CartSetCustomLineItemTaxRateAction",
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "properties": {
            "customLineItemId": {
              "type": "string"
            },
            "externalTaxRate": {
              "$ref": "#/definitions/ExternalTaxRateDraft"
            }
          },
          "required": [
            "customLineItemId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#set-customlineitem-taxrate",
      "x-annotation-postman-example": null
    },
    "CartSetCustomShippingMethodAction": {
      "title": "CartSetCustomShippingMethodAction",
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "properties": {
            "shippingMethodName": {
              "type": "string"
            },
            "shippingRate": {
              "$ref": "#/definitions/ShippingRateDraft"
            },
            "taxCategory": {
              "$ref": "#/definitions/TaxCategoryResourceIdentifier"
            },
            "externalTaxRate": {
              "$ref": "#/definitions/ExternalTaxRateDraft"
            }
          },
          "required": [
            "shippingMethodName",
            "shippingRate"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#set-custom-shipping-method",
      "x-annotation-postman-example": null
    },
    "CartSetCustomTypeAction": {
      "title": "CartSetCustomTypeAction",
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "properties": {
            "type": {
              "$ref": "#/definitions/TypeResourceIdentifier"
            },
            "fields": {
              "$ref": "#/definitions/FieldContainer"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#set-custom-type",
      "x-annotation-postman-example": null
    },
    "CartSetCustomerEmailAction": {
      "title": "CartSetCustomerEmailAction",
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "properties": {
            "email": {
              "type": "string"
            }
          },
          "required": [
            "email"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#set-customer-email",
      "x-annotation-postman-example": null
    },
    "CartSetCustomerGroupAction": {
      "title": "CartSetCustomerGroupAction",
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "properties": {
            "customerGroup": {
              "$ref": "#/definitions/CustomerGroupResourceIdentifier"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#set-customer-group",
      "x-annotation-postman-example": null
    },
    "CartSetCustomerIdAction": {
      "title": "CartSetCustomerIdAction",
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "properties": {
            "customerId": {
              "description": "If set, a customer with the given ID must exist in the project.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#set-customer-id",
      "x-annotation-postman-example": null
    },
    "CartSetDeleteDaysAfterLastModificationAction": {
      "title": "CartSetDeleteDaysAfterLastModificationAction",
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "properties": {
            "deleteDaysAfterLastModification": {
              "type": "integer"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#set-deletedaysafterlastmodification-beta",
      "x-annotation-postman-example": null
    },
    "CartSetLineItemCustomFieldAction": {
      "title": "CartSetLineItemCustomFieldAction",
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "properties": {
            "lineItemId": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          },
          "required": [
            "lineItemId",
            "name"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#set-lineitem-customfield",
      "x-annotation-postman-example": null
    },
    "CartSetLineItemCustomTypeAction": {
      "title": "CartSetLineItemCustomTypeAction",
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "properties": {
            "lineItemId": {
              "type": "string"
            },
            "type": {
              "$ref": "#/definitions/TypeResourceIdentifier"
            },
            "fields": {
              "$ref": "#/definitions/FieldContainer"
            }
          },
          "required": [
            "lineItemId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#set-lineitem-custom-type",
      "x-annotation-postman-example": null
    },
    "CartSetLineItemPriceAction": {
      "title": "CartSetLineItemPriceAction",
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "properties": {
            "lineItemId": {
              "type": "string"
            },
            "externalPrice": {
              "$ref": "#/definitions/Money"
            }
          },
          "required": [
            "lineItemId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#set-lineitem-price",
      "x-annotation-postman-example": null
    },
    "CartSetLineItemShippingDetailsAction": {
      "title": "CartSetLineItemShippingDetailsAction",
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "properties": {
            "lineItemId": {
              "type": "string"
            },
            "shippingDetails": {
              "$ref": "#/definitions/ItemShippingDetailsDraft"
            }
          },
          "required": [
            "lineItemId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#set-lineitemshippingdetails",
      "x-annotation-postman-example": null
    },
    "CartSetLineItemTaxAmountAction": {
      "title": "CartSetLineItemTaxAmountAction",
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "properties": {
            "lineItemId": {
              "type": "string"
            },
            "externalTaxAmount": {
              "$ref": "#/definitions/ExternalTaxAmountDraft"
            }
          },
          "required": [
            "lineItemId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#set-lineitem-taxamount",
      "x-annotation-postman-example": null
    },
    "CartSetLineItemTaxRateAction": {
      "title": "CartSetLineItemTaxRateAction",
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "properties": {
            "lineItemId": {
              "type": "string"
            },
            "externalTaxRate": {
              "$ref": "#/definitions/ExternalTaxRateDraft"
            }
          },
          "required": [
            "lineItemId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#set-lineitem-taxrate",
      "x-annotation-postman-example": null
    },
    "CartSetLineItemTotalPriceAction": {
      "title": "CartSetLineItemTotalPriceAction",
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "properties": {
            "lineItemId": {
              "type": "string"
            },
            "externalTotalPrice": {
              "$ref": "#/definitions/ExternalLineItemTotalPrice"
            }
          },
          "required": [
            "lineItemId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#set-lineitem-totalprice",
      "x-annotation-postman-example": null
    },
    "CartSetLocaleAction": {
      "title": "CartSetLocaleAction",
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "properties": {
            "locale": {
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#set-locale",
      "x-annotation-postman-example": null
    },
    "CartSetShippingAddressAction": {
      "title": "CartSetShippingAddressAction",
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "properties": {
            "address": {
              "$ref": "#/definitions/Address"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#set-shipping-address",
      "x-annotation-postman-example": null
    },
    "CartSetShippingMethodAction": {
      "title": "CartSetShippingMethodAction",
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "properties": {
            "shippingMethod": {
              "$ref": "#/definitions/ShippingMethodResourceIdentifier"
            },
            "externalTaxRate": {
              "$ref": "#/definitions/ExternalTaxRateDraft"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#set-shipping-method",
      "x-annotation-postman-example": null
    },
    "CartSetShippingMethodTaxAmountAction": {
      "title": "CartSetShippingMethodTaxAmountAction",
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "properties": {
            "externalTaxAmount": {
              "$ref": "#/definitions/ExternalTaxAmountDraft"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#set-shippingmethod-taxamount",
      "x-annotation-postman-example": null
    },
    "CartSetShippingMethodTaxRateAction": {
      "title": "CartSetShippingMethodTaxRateAction",
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "properties": {
            "externalTaxRate": {
              "$ref": "#/definitions/ExternalTaxRateDraft"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#set-shippingmethod-taxrate",
      "x-annotation-postman-example": null
    },
    "CartSetShippingRateInputAction": {
      "title": "CartSetShippingRateInputAction",
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "properties": {
            "shippingRateInput": {
              "description": "Based on the definition of ShippingRateInputType.\nIf CartClassification is defined, it must be ClassificationShippingRateInput.\nIf CartScore is defined, it must be ScoreShippingRateInput.\nOtherwise it can not bet set.",
              "$ref": "#/definitions/ShippingRateInputDraft"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#set-shipping-rate-input",
      "x-annotation-postman-example": null
    },
    "CartUpdateItemShippingAddressAction": {
      "title": "CartUpdateItemShippingAddressAction",
      "allOf": [
        {
          "$ref": "#/definitions/CartUpdateAction"
        },
        {
          "properties": {
            "address": {
              "$ref": "#/definitions/Address"
            }
          },
          "required": [
            "address"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#update-itemshippingaddress",
      "x-annotation-postman-example": null
    },
    "Category": {
      "title": "Category",
      "allOf": [
        {
          "$ref": "#/definitions/BaseResource"
        },
        {
          "properties": {
            "id": {
              "description": "The unique ID of the category.",
              "type": "string",
              "x-annotation-identifier": true
            },
            "version": {
              "format": "int64",
              "description": "The current version of the category.",
              "type": "number"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            },
            "lastModifiedAt": {
              "type": "string",
              "format": "date-time"
            },
            "lastModifiedBy": {
              "description": "Present on resources updated after 1/02/2019 except for events not tracked.",
              "$ref": "#/definitions/LastModifiedBy"
            },
            "createdBy": {
              "description": "Present on resources created after 1/02/2019 except for events not tracked.",
              "$ref": "#/definitions/CreatedBy"
            },
            "name": {
              "$ref": "#/definitions/LocalizedString"
            },
            "slug": {
              "description": "human-readable identifiers usually used as deep-link URL to the related category.\nEach slug is unique across a project, but a category can have the same slug for different languages.",
              "$ref": "#/definitions/LocalizedString"
            },
            "description": {
              "$ref": "#/definitions/LocalizedString"
            },
            "ancestors": {
              "description": "Contains the parent path towards the root category.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CategoryReference"
              }
            },
            "parent": {
              "description": "A category that is the parent of this category in the category tree.",
              "$ref": "#/definitions/CategoryReference"
            },
            "orderHint": {
              "description": "An attribute as base for a custom category order in one level.",
              "type": "string"
            },
            "externalId": {
              "type": "string"
            },
            "metaTitle": {
              "$ref": "#/definitions/LocalizedString"
            },
            "metaDescription": {
              "$ref": "#/definitions/LocalizedString"
            },
            "metaKeywords": {
              "$ref": "#/definitions/LocalizedString"
            },
            "custom": {
              "$ref": "#/definitions/CustomFields"
            },
            "assets": {
              "description": "Can be used to store images, icons or movies related to this category.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Asset"
              }
            },
            "key": {
              "description": "User-specific unique identifier for the category.",
              "type": "string"
            }
          },
          "required": [
            "id",
            "version",
            "createdAt",
            "lastModifiedAt",
            "name",
            "slug",
            "ancestors",
            "orderHint"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Category",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-categories.html#category",
      "x-annotation-updateType": "CategoryUpdate"
    },
    "CategoryDraft": {
      "title": "CategoryDraft",
      "type": "object",
      "properties": {
        "name": {
          "$ref": "#/definitions/LocalizedString"
        },
        "slug": {
          "description": "human-readable identifier usually used as deep-link URL to the related category.\nAllowed are alphabetic, numeric, underscore (`_`) and hyphen (`-`) characters.\nMaximum size is 256.\n**Must be unique across a project!** The same category can have the same slug for different languages.",
          "$ref": "#/definitions/LocalizedString"
        },
        "description": {
          "$ref": "#/definitions/LocalizedString"
        },
        "parent": {
          "description": "A category that is the parent of this category in the category tree.\nThe parent can be set by its ID or by its key.",
          "$ref": "#/definitions/CategoryResourceIdentifier"
        },
        "orderHint": {
          "description": "An attribute as base for a custom category order in one level.\nA random value will be assigned by API if not set.",
          "type": "string"
        },
        "externalId": {
          "type": "string"
        },
        "metaTitle": {
          "$ref": "#/definitions/LocalizedString"
        },
        "metaDescription": {
          "$ref": "#/definitions/LocalizedString"
        },
        "metaKeywords": {
          "$ref": "#/definitions/LocalizedString"
        },
        "custom": {
          "description": "The custom fields.",
          "$ref": "#/definitions/CustomFieldsDraft"
        },
        "assets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssetDraft"
          }
        },
        "key": {
          "description": "User-defined unique identifier for the category.\nKeys can only contain alphanumeric characters (`a-Z, 0-9`), underscores and hyphens (`-, _`) and be between 2 and 256 characters.",
          "type": "string"
        }
      },
      "required": [
        "name",
        "slug"
      ],
      "x-annotation-package": "Category",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-categories.html#categorydraft"
    },
    "CategoryPagedQueryResponse": {
      "title": "CategoryPagedQueryResponse",
      "type": "object",
      "properties": {
        "limit": {
          "format": "int64",
          "type": "number"
        },
        "count": {
          "format": "int64",
          "type": "number"
        },
        "total": {
          "format": "int64",
          "type": "number"
        },
        "offset": {
          "format": "int64",
          "type": "number"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Category"
          }
        }
      },
      "required": [
        "limit",
        "count",
        "offset",
        "results"
      ],
      "x-annotation-package": "Category"
    },
    "CategoryReference": {
      "title": "CategoryReference",
      "allOf": [
        {
          "$ref": "#/definitions/Reference"
        },
        {
          "properties": {
            "obj": {
              "$ref": "#/definitions/Category"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Category",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-categories.html#category"
    },
    "CategoryResourceIdentifier": {
      "title": "CategoryResourceIdentifier",
      "$ref": "#/definitions/ResourceIdentifier",
      "x-annotation-package": "Category",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-categories.html#category"
    },
    "CategoryUpdate": {
      "title": "CategoryUpdate",
      "type": "object",
      "properties": {
        "version": {
          "format": "int64",
          "type": "number"
        },
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CategoryUpdateAction"
          }
        }
      },
      "required": [
        "version",
        "actions"
      ],
      "x-annotation-package": "Category"
    },
    "CategoryUpdateAction": {
      "title": "CategoryUpdateAction",
      "discriminator": "action",
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        }
      },
      "required": [
        "action"
      ],
      "x-annotation-package": "Category"
    },
    "CategoryAddAssetAction": {
      "title": "CategoryAddAssetAction",
      "allOf": [
        {
          "$ref": "#/definitions/CategoryUpdateAction"
        },
        {
          "properties": {
            "asset": {
              "$ref": "#/definitions/AssetDraft"
            },
            "position": {
              "format": "int32",
              "description": "When specified, the value might be `0` and should be lower than the total of the assets list.",
              "type": "number"
            }
          },
          "required": [
            "asset"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Category",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-categories.html#add-asset",
      "x-annotation-postman-example": null
    },
    "CategoryChangeAssetNameAction": {
      "title": "CategoryChangeAssetNameAction",
      "allOf": [
        {
          "$ref": "#/definitions/CategoryUpdateAction"
        },
        {
          "properties": {
            "assetId": {
              "type": "string"
            },
            "assetKey": {
              "type": "string"
            },
            "name": {
              "$ref": "#/definitions/LocalizedString"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Category",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-categories.html#change-asset-name",
      "x-annotation-postman-example": null
    },
    "CategoryChangeAssetOrderAction": {
      "title": "CategoryChangeAssetOrderAction",
      "allOf": [
        {
          "$ref": "#/definitions/CategoryUpdateAction"
        },
        {
          "properties": {
            "assetOrder": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "required": [
            "assetOrder"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Category",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-categories.html#change-asset-order",
      "x-annotation-postman-example": null
    },
    "CategoryChangeNameAction": {
      "title": "CategoryChangeNameAction",
      "allOf": [
        {
          "$ref": "#/definitions/CategoryUpdateAction"
        },
        {
          "properties": {
            "name": {
              "$ref": "#/definitions/LocalizedString"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Category",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-categories.html#change-name",
      "x-annotation-postman-example": null
    },
    "CategoryChangeOrderHintAction": {
      "title": "CategoryChangeOrderHintAction",
      "allOf": [
        {
          "$ref": "#/definitions/CategoryUpdateAction"
        },
        {
          "properties": {
            "orderHint": {
              "type": "string"
            }
          },
          "required": [
            "orderHint"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Category",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-categories.html#change-orderhint",
      "x-annotation-postman-example": null
    },
    "CategoryChangeParentAction": {
      "title": "CategoryChangeParentAction",
      "allOf": [
        {
          "$ref": "#/definitions/CategoryUpdateAction"
        },
        {
          "properties": {
            "parent": {
              "$ref": "#/definitions/CategoryResourceIdentifier"
            }
          },
          "required": [
            "parent"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Category",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-categories.html#change-parent",
      "x-annotation-postman-example": null
    },
    "CategoryChangeSlugAction": {
      "title": "CategoryChangeSlugAction",
      "allOf": [
        {
          "$ref": "#/definitions/CategoryUpdateAction"
        },
        {
          "properties": {
            "slug": {
              "description": "Allowed are alphabetic, numeric, underscore (&#95;) and hyphen (&#45;) characters.\nMaximum size is {{ site.data.api-limits.slugLength }}.",
              "$ref": "#/definitions/LocalizedString"
            }
          },
          "required": [
            "slug"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Category",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-categories.html#change-slug",
      "x-annotation-postman-example": null
    },
    "CategoryRemoveAssetAction": {
      "title": "CategoryRemoveAssetAction",
      "allOf": [
        {
          "$ref": "#/definitions/CategoryUpdateAction"
        },
        {
          "properties": {
            "assetId": {
              "type": "string"
            },
            "assetKey": {
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Category",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-categories.html#remove-asset",
      "x-annotation-postman-example": null
    },
    "CategorySetAssetCustomFieldAction": {
      "title": "CategorySetAssetCustomFieldAction",
      "allOf": [
        {
          "$ref": "#/definitions/CategoryUpdateAction"
        },
        {
          "properties": {
            "assetId": {
              "type": "string"
            },
            "assetKey": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Category",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-categories.html#set-asset-custom-field",
      "x-annotation-postman-example": null
    },
    "CategorySetAssetCustomTypeAction": {
      "title": "CategorySetAssetCustomTypeAction",
      "allOf": [
        {
          "$ref": "#/definitions/CategoryUpdateAction"
        },
        {
          "properties": {
            "assetId": {
              "type": "string"
            },
            "assetKey": {
              "type": "string"
            },
            "type": {
              "description": "If set, the custom type is set to this new value.\nIf absent, the custom type and any existing custom fields are removed.",
              "$ref": "#/definitions/TypeResourceIdentifier"
            },
            "fields": {
              "description": "If set, the custom fields are set to this new value.",
              "type": "object"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Category",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-categories.html#set-asset-custom-type",
      "x-annotation-postman-example": null
    },
    "CategorySetAssetDescriptionAction": {
      "title": "CategorySetAssetDescriptionAction",
      "allOf": [
        {
          "$ref": "#/definitions/CategoryUpdateAction"
        },
        {
          "properties": {
            "assetId": {
              "type": "string"
            },
            "assetKey": {
              "type": "string"
            },
            "description": {
              "$ref": "#/definitions/LocalizedString"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Category",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-categories.html#set-asset-description",
      "x-annotation-postman-example": null
    },
    "CategorySetAssetKeyAction": {
      "title": "CategorySetAssetKeyAction",
      "allOf": [
        {
          "$ref": "#/definitions/CategoryUpdateAction"
        },
        {
          "properties": {
            "assetId": {
              "type": "string"
            },
            "assetKey": {
              "description": "User-defined identifier for the asset.\nIf left blank or set to `null`, the asset key is unset/removed.",
              "type": "string"
            }
          },
          "required": [
            "assetId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Category",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-categories.html#set-asset-key",
      "x-annotation-postman-example": null
    },
    "CategorySetAssetSourcesAction": {
      "title": "CategorySetAssetSourcesAction",
      "allOf": [
        {
          "$ref": "#/definitions/CategoryUpdateAction"
        },
        {
          "properties": {
            "assetId": {
              "type": "string"
            },
            "assetKey": {
              "type": "string"
            },
            "sources": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetSource"
              }
            }
          },
          "required": [
            "sources"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Category",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-categories.html#set-asset-sources",
      "x-annotation-postman-example": null
    },
    "CategorySetAssetTagsAction": {
      "title": "CategorySetAssetTagsAction",
      "allOf": [
        {
          "$ref": "#/definitions/CategoryUpdateAction"
        },
        {
          "properties": {
            "assetId": {
              "type": "string"
            },
            "assetKey": {
              "type": "string"
            },
            "tags": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Category",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-categories.html#set-asset-tags",
      "x-annotation-postman-example": null
    },
    "CategorySetCustomFieldAction": {
      "title": "CategorySetCustomFieldAction",
      "allOf": [
        {
          "$ref": "#/definitions/CategoryUpdateAction"
        },
        {
          "properties": {
            "name": {
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Category",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-categories.html#set-customfield",
      "x-annotation-postman-example": null
    },
    "CategorySetCustomTypeAction": {
      "title": "CategorySetCustomTypeAction",
      "allOf": [
        {
          "$ref": "#/definitions/CategoryUpdateAction"
        },
        {
          "properties": {
            "type": {
              "description": "If absent, the custom type and any existing CustomFields are removed.",
              "$ref": "#/definitions/TypeResourceIdentifier"
            },
            "fields": {
              "description": "A valid JSON object, based on the FieldDefinitions of the Type. Sets the custom fields to this value.",
              "$ref": "#/definitions/FieldContainer"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Category",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-categories.html#set-custom-type",
      "x-annotation-postman-example": null
    },
    "CategorySetDescriptionAction": {
      "title": "CategorySetDescriptionAction",
      "allOf": [
        {
          "$ref": "#/definitions/CategoryUpdateAction"
        },
        {
          "properties": {
            "description": {
              "$ref": "#/definitions/LocalizedString"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Category",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-categories.html#set-description",
      "x-annotation-postman-example": null
    },
    "CategorySetExternalIdAction": {
      "title": "CategorySetExternalIdAction",
      "allOf": [
        {
          "$ref": "#/definitions/CategoryUpdateAction"
        },
        {
          "properties": {
            "externalId": {
              "description": "If not defined, the external ID is unset.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Category",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-categories.html#set-external-id",
      "x-annotation-postman-example": null
    },
    "CategorySetKeyAction": {
      "title": "CategorySetKeyAction",
      "allOf": [
        {
          "$ref": "#/definitions/CategoryUpdateAction"
        },
        {
          "properties": {
            "key": {
              "description": "User-defined unique identifier for the category.\nKeys can only contain alphanumeric characters (`a-Z, 0-9`), underscores and hyphens (`-, _`) and be between 2 and 256 characters.\nIf `key` is absent or `null`, this field will be removed if it exists.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Category",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-categories.html#set-key",
      "x-annotation-postman-example": null
    },
    "CategorySetMetaDescriptionAction": {
      "title": "CategorySetMetaDescriptionAction",
      "allOf": [
        {
          "$ref": "#/definitions/CategoryUpdateAction"
        },
        {
          "properties": {
            "metaDescription": {
              "$ref": "#/definitions/LocalizedString"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Category",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-categories.html#set-meta-description",
      "x-annotation-postman-example": null
    },
    "CategorySetMetaKeywordsAction": {
      "title": "CategorySetMetaKeywordsAction",
      "allOf": [
        {
          "$ref": "#/definitions/CategoryUpdateAction"
        },
        {
          "properties": {
            "metaKeywords": {
              "$ref": "#/definitions/LocalizedString"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Category",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-categories.html#set-meta-keywords",
      "x-annotation-postman-example": null
    },
    "CategorySetMetaTitleAction": {
      "title": "CategorySetMetaTitleAction",
      "allOf": [
        {
          "$ref": "#/definitions/CategoryUpdateAction"
        },
        {
          "properties": {
            "metaTitle": {
              "$ref": "#/definitions/LocalizedString"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Category",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-categories.html#set-meta-title",
      "x-annotation-postman-example": null
    },
    "Channel": {
      "title": "Channel",
      "allOf": [
        {
          "$ref": "#/definitions/BaseResource"
        },
        {
          "properties": {
            "id": {
              "description": "The unique ID of the channel.",
              "type": "string",
              "x-annotation-identifier": true
            },
            "version": {
              "format": "int64",
              "type": "number"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            },
            "lastModifiedAt": {
              "type": "string",
              "format": "date-time"
            },
            "lastModifiedBy": {
              "description": "Present on resources updated after 1/02/2019 except for events not tracked.",
              "$ref": "#/definitions/LastModifiedBy"
            },
            "createdBy": {
              "description": "Present on resources created after 1/02/2019 except for events not tracked.",
              "$ref": "#/definitions/CreatedBy"
            },
            "key": {
              "description": "Any arbitrary string key that uniquely identifies this channel within the project.",
              "type": "string"
            },
            "roles": {
              "description": "The roles of this channel.\nEach channel must have at least one role.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ChannelRoleEnum"
              }
            },
            "name": {
              "description": "A human-readable name of the channel.",
              "$ref": "#/definitions/LocalizedString"
            },
            "description": {
              "description": "A human-readable description of the channel.",
              "$ref": "#/definitions/LocalizedString"
            },
            "address": {
              "description": "The address where this channel is located (e.g.\nif the channel is a physical store).",
              "$ref": "#/definitions/Address"
            },
            "reviewRatingStatistics": {
              "description": "Statistics about the review ratings taken into account for this channel.",
              "$ref": "#/definitions/ReviewRatingStatistics"
            },
            "custom": {
              "$ref": "#/definitions/CustomFields"
            },
            "geoLocation": {
              "description": "A GeoJSON geometry object encoding the geo location of the channel.",
              "$ref": "#/definitions/GeoJson"
            }
          },
          "required": [
            "id",
            "version",
            "createdAt",
            "lastModifiedAt",
            "key",
            "roles"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Channel",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-channels.html#channel",
      "x-annotation-updateType": "ChannelUpdate"
    },
    "ChannelDraft": {
      "title": "ChannelDraft",
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "roles": {
          "description": "If not specified, then channel will get InventorySupply role by default",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ChannelRoleEnum"
          }
        },
        "name": {
          "$ref": "#/definitions/LocalizedString"
        },
        "description": {
          "$ref": "#/definitions/LocalizedString"
        },
        "address": {
          "$ref": "#/definitions/Address"
        },
        "custom": {
          "description": "The custom fields.",
          "$ref": "#/definitions/CustomFieldsDraft"
        },
        "geoLocation": {
          "$ref": "#/definitions/GeoJson"
        }
      },
      "required": [
        "key"
      ],
      "x-annotation-package": "Channel",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-channels.html#channeldraft"
    },
    "ChannelPagedQueryResponse": {
      "title": "ChannelPagedQueryResponse",
      "type": "object",
      "properties": {
        "limit": {
          "format": "int64",
          "type": "number"
        },
        "count": {
          "format": "int64",
          "type": "number"
        },
        "total": {
          "format": "int64",
          "type": "number"
        },
        "offset": {
          "format": "int64",
          "type": "number"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Channel"
          }
        }
      },
      "required": [
        "limit",
        "count",
        "offset",
        "results"
      ],
      "x-annotation-package": "Channel"
    },
    "ChannelReference": {
      "title": "ChannelReference",
      "allOf": [
        {
          "$ref": "#/definitions/Reference"
        },
        {
          "properties": {
            "obj": {
              "$ref": "#/definitions/Channel"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Channel",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-channels.html#channel"
    },
    "ChannelResourceIdentifier": {
      "title": "ChannelResourceIdentifier",
      "$ref": "#/definitions/ResourceIdentifier",
      "x-annotation-package": "Channel",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-channels.html#channel"
    },
    "ChannelRoleEnum": {
      "title": "ChannelRoleEnum",
      "enum": [
        "InventorySupply",
        "ProductDistribution",
        "OrderExport",
        "OrderImport",
        "Primary"
      ],
      "type": "string",
      "x-annotation-package": "Channel",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-channels.html#channelroleenum"
    },
    "ChannelUpdate": {
      "title": "ChannelUpdate",
      "type": "object",
      "properties": {
        "version": {
          "format": "int64",
          "type": "number"
        },
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ChannelUpdateAction"
          }
        }
      },
      "required": [
        "version",
        "actions"
      ],
      "x-annotation-package": "Channel"
    },
    "ChannelUpdateAction": {
      "title": "ChannelUpdateAction",
      "discriminator": "action",
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        }
      },
      "required": [
        "action"
      ],
      "x-annotation-package": "Channel"
    },
    "ChannelAddRolesAction": {
      "title": "ChannelAddRolesAction",
      "allOf": [
        {
          "$ref": "#/definitions/ChannelUpdateAction"
        },
        {
          "properties": {
            "roles": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ChannelRoleEnum"
              }
            }
          },
          "required": [
            "roles"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Channel",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-channels.html#add-roles",
      "x-annotation-postman-example": null
    },
    "ChannelChangeDescriptionAction": {
      "title": "ChannelChangeDescriptionAction",
      "allOf": [
        {
          "$ref": "#/definitions/ChannelUpdateAction"
        },
        {
          "properties": {
            "description": {
              "$ref": "#/definitions/LocalizedString"
            }
          },
          "required": [
            "description"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Channel",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-channels.html#change-description",
      "x-annotation-postman-example": null
    },
    "ChannelChangeKeyAction": {
      "title": "ChannelChangeKeyAction",
      "allOf": [
        {
          "$ref": "#/definitions/ChannelUpdateAction"
        },
        {
          "properties": {
            "key": {
              "type": "string"
            }
          },
          "required": [
            "key"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Channel",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-channels.html#change-key",
      "x-annotation-postman-example": null
    },
    "ChannelChangeNameAction": {
      "title": "ChannelChangeNameAction",
      "allOf": [
        {
          "$ref": "#/definitions/ChannelUpdateAction"
        },
        {
          "properties": {
            "name": {
              "$ref": "#/definitions/LocalizedString"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Channel",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-channels.html#change-name",
      "x-annotation-postman-example": null
    },
    "ChannelRemoveRolesAction": {
      "title": "ChannelRemoveRolesAction",
      "allOf": [
        {
          "$ref": "#/definitions/ChannelUpdateAction"
        },
        {
          "properties": {
            "roles": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ChannelRoleEnum"
              }
            }
          },
          "required": [
            "roles"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Channel",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-channels.html#remove-roles",
      "x-annotation-postman-example": null
    },
    "ChannelSetAddressAction": {
      "title": "ChannelSetAddressAction",
      "allOf": [
        {
          "$ref": "#/definitions/ChannelUpdateAction"
        },
        {
          "properties": {
            "address": {
              "$ref": "#/definitions/Address"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Channel",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-channels.html#set-address",
      "x-annotation-postman-example": null
    },
    "ChannelSetCustomFieldAction": {
      "title": "ChannelSetCustomFieldAction",
      "allOf": [
        {
          "$ref": "#/definitions/ChannelUpdateAction"
        },
        {
          "properties": {
            "name": {
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Channel",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-channels.html#set-customfield",
      "x-annotation-postman-example": null
    },
    "ChannelSetCustomTypeAction": {
      "title": "ChannelSetCustomTypeAction",
      "allOf": [
        {
          "$ref": "#/definitions/ChannelUpdateAction"
        },
        {
          "properties": {
            "type": {
              "$ref": "#/definitions/TypeResourceIdentifier"
            },
            "fields": {
              "$ref": "#/definitions/FieldContainer"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Channel",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-channels.html#set-custom-type",
      "x-annotation-postman-example": null
    },
    "ChannelSetGeoLocationAction": {
      "title": "ChannelSetGeoLocationAction",
      "allOf": [
        {
          "$ref": "#/definitions/ChannelUpdateAction"
        },
        {
          "properties": {
            "geoLocation": {
              "$ref": "#/definitions/GeoJson"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Channel",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-channels.html#set-geolocation",
      "x-annotation-postman-example": null
    },
    "ChannelSetRolesAction": {
      "title": "ChannelSetRolesAction",
      "allOf": [
        {
          "$ref": "#/definitions/ChannelUpdateAction"
        },
        {
          "properties": {
            "roles": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ChannelRoleEnum"
              }
            }
          },
          "required": [
            "roles"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Channel",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-channels.html#set-roles",
      "x-annotation-postman-example": null
    },
    "Address": {
      "title": "Address",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "salutation": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "streetName": {
          "type": "string"
        },
        "streetNumber": {
          "type": "string"
        },
        "additionalStreetInfo": {
          "type": "string"
        },
        "postalCode": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "country": {
          "$ref": "#/definitions/CountryCode"
        },
        "company": {
          "type": "string"
        },
        "department": {
          "type": "string"
        },
        "building": {
          "type": "string"
        },
        "apartment": {
          "type": "string"
        },
        "pOBox": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "mobile": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "fax": {
          "type": "string"
        },
        "additionalAddressInfo": {
          "type": "string"
        },
        "externalId": {
          "type": "string"
        }
      },
      "required": [
        "country"
      ],
      "x-annotation-package": "Common",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-types.html#address"
    },
    "Asset": {
      "title": "Asset",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "sources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssetSource"
          }
        },
        "name": {
          "$ref": "#/definitions/LocalizedString"
        },
        "description": {
          "$ref": "#/definitions/LocalizedString"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "custom": {
          "$ref": "#/definitions/CustomFields"
        },
        "key": {
          "type": "string"
        }
      },
      "required": [
        "id",
        "sources",
        "name"
      ],
      "x-annotation-package": "Common"
    },
    "AssetDimensions": {
      "title": "AssetDimensions",
      "type": "object",
      "properties": {
        "w": {
          "type": "number"
        },
        "h": {
          "type": "number"
        }
      },
      "required": [
        "w",
        "h"
      ],
      "x-annotation-package": "Common"
    },
    "AssetDraft": {
      "title": "AssetDraft",
      "type": "object",
      "properties": {
        "sources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssetSource"
          }
        },
        "name": {
          "$ref": "#/definitions/LocalizedString"
        },
        "description": {
          "$ref": "#/definitions/LocalizedString"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "custom": {
          "$ref": "#/definitions/CustomFieldsDraft"
        },
        "key": {
          "type": "string"
        }
      },
      "required": [
        "sources",
        "name"
      ],
      "x-annotation-package": "Common"
    },
    "AssetSource": {
      "title": "AssetSource",
      "type": "object",
      "properties": {
        "uri": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "dimensions": {
          "$ref": "#/definitions/AssetDimensions"
        },
        "contentType": {
          "type": "string"
        }
      },
      "required": [
        "uri"
      ],
      "x-annotation-package": "Common"
    },
    "BaseResource": {
      "title": "BaseResource",
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "x-annotation-identifier": true
        },
        "version": {
          "format": "int64",
          "type": "number"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "lastModifiedAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "version",
        "createdAt",
        "lastModifiedAt"
      ],
      "x-annotation-package": "Common",
      "x-annotation-abstract": true
    },
    "CentPrecisionMoney": {
      "title": "CentPrecisionMoney",
      "$ref": "#/definitions/TypedMoney",
      "x-annotation-package": "Common",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-types.html#money"
    },
    "CentPrecisionMoneyDraft": {
      "title": "CentPrecisionMoneyDraft",
      "$ref": "#/definitions/TypedMoneyDraft",
      "x-annotation-package": "Common",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-types.html#money"
    },
    "ClientLogging": {
      "title": "ClientLogging",
      "type": "object",
      "properties": {
        "clientId": {
          "type": "string"
        },
        "externalUserId": {
          "type": "string"
        },
        "customer": {
          "$ref": "#/definitions/CustomerReference"
        },
        "anonymousId": {
          "type": "string"
        }
      },
      "x-annotation-package": "Common",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-types#client-logging"
    },
    "CountryCode": {
      "title": "CountryCode",
      "pattern": "^[A-Z]{2}$",
      "description": "A two-digit country code as per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\n",
      "type": "string",
      "x-annotation-package": "Common"
    },
    "CreatedBy": {
      "title": "CreatedBy",
      "$ref": "#/definitions/ClientLogging",
      "x-annotation-package": "Common"
    },
    "CurrencyCode": {
      "title": "CurrencyCode",
      "pattern": "^[A-Z]{3}$",
      "description": "The currency code compliant to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).\n",
      "type": "string",
      "x-annotation-package": "Common"
    },
    "DiscountedPrice": {
      "title": "DiscountedPrice",
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Money"
        },
        "discount": {
          "$ref": "#/definitions/ProductDiscountReference"
        }
      },
      "required": [
        "value",
        "discount"
      ],
      "x-annotation-package": "Common",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-products.html#discountedprice"
    },
    "GeoJson": {
      "title": "GeoJson",
      "discriminator": "type",
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "x-annotation-package": "Common"
    },
    "GeoJsonPoint": {
      "title": "GeoJsonPoint",
      "allOf": [
        {
          "$ref": "#/definitions/GeoJson"
        },
        {
          "properties": {
            "coordinates": {
              "type": "array",
              "items": {
                "type": "number"
              }
            }
          },
          "required": [
            "coordinates"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Common"
    },
    "HighPrecisionMoney": {
      "title": "HighPrecisionMoney",
      "allOf": [
        {
          "$ref": "#/definitions/TypedMoney"
        },
        {
          "properties": {
            "preciseAmount": {
              "format": "int64",
              "type": "number"
            }
          },
          "required": [
            "preciseAmount"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Common",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-types.html#money"
    },
    "HighPrecisionMoneyDraft": {
      "title": "HighPrecisionMoneyDraft",
      "allOf": [
        {
          "$ref": "#/definitions/TypedMoneyDraft"
        },
        {
          "properties": {
            "preciseAmount": {
              "format": "int64",
              "type": "number"
            }
          },
          "required": [
            "preciseAmount"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Common",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-types.html#money"
    },
    "Image": {
      "title": "Image",
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        },
        "dimensions": {
          "$ref": "#/definitions/ImageDimensions"
        },
        "label": {
          "type": "string"
        }
      },
      "required": [
        "url",
        "dimensions"
      ],
      "x-annotation-package": "Common",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-products.html#images"
    },
    "ImageDimensions": {
      "title": "ImageDimensions",
      "type": "object",
      "properties": {
        "w": {
          "type": "number"
        },
        "h": {
          "type": "number"
        }
      },
      "required": [
        "w",
        "h"
      ],
      "x-annotation-package": "Common",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-products.html#images"
    },
    "KeyReference": {
      "title": "KeyReference",
      "discriminator": "typeId",
      "type": "object",
      "properties": {
        "typeId": {
          "$ref": "#/definitions/ReferenceTypeId"
        },
        "key": {
          "type": "string"
        }
      },
      "required": [
        "typeId",
        "key"
      ],
      "x-annotation-package": "Common",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-types.html#keyreference"
    },
    "LastModifiedBy": {
      "title": "LastModifiedBy",
      "$ref": "#/definitions/ClientLogging",
      "x-annotation-package": "Common"
    },
    "Locale": {
      "title": "Locale",
      "pattern": "^[a-z]{2}(-[A-Z]{2})?$",
      "description": "A locale of [IETF language tag](https://en.wikipedia.org/wiki/IETF_language_tag).\n",
      "type": "string",
      "x-annotation-package": "Common"
    },
    "LocalizedString": {
      "title": "LocalizedString",
      "type": "object",
      "additionalProperties": {
        "type": "string"
      },
      "x-annotation-package": "Common",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-types.html#localizedstring",
      "x-annotation-asMap": {
        "key": "string",
        "value": "string"
      }
    },
    "Money": {
      "title": "Money",
      "type": "object",
      "properties": {
        "centAmount": {
          "format": "int64",
          "type": "number"
        },
        "currencyCode": {
          "$ref": "#/definitions/CurrencyCode"
        }
      },
      "required": [
        "centAmount",
        "currencyCode"
      ],
      "x-annotation-package": "Common",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-types.html#basemoney"
    },
    "MoneyType": {
      "title": "MoneyType",
      "enum": [
        "centPrecision",
        "highPrecision"
      ],
      "type": "string",
      "x-annotation-package": "Common",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-types.html#money"
    },
    "Price": {
      "title": "Price",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/TypedMoney"
        },
        "country": {
          "$ref": "#/definitions/CountryCode"
        },
        "customerGroup": {
          "$ref": "#/definitions/CustomerGroupReference"
        },
        "channel": {
          "$ref": "#/definitions/ChannelReference"
        },
        "validFrom": {
          "type": "string",
          "format": "date-time"
        },
        "validUntil": {
          "type": "string",
          "format": "date-time"
        },
        "discounted": {
          "$ref": "#/definitions/DiscountedPrice"
        },
        "custom": {
          "$ref": "#/definitions/CustomFields"
        },
        "tiers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PriceTier"
          }
        }
      },
      "required": [
        "id",
        "value"
      ],
      "x-annotation-package": "Common",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-products.html#price"
    },
    "PriceDraft": {
      "title": "PriceDraft",
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Money"
        },
        "country": {
          "$ref": "#/definitions/CountryCode"
        },
        "customerGroup": {
          "$ref": "#/definitions/CustomerGroupResourceIdentifier"
        },
        "channel": {
          "$ref": "#/definitions/ChannelResourceIdentifier"
        },
        "validFrom": {
          "type": "string",
          "format": "date-time"
        },
        "validUntil": {
          "type": "string",
          "format": "date-time"
        },
        "custom": {
          "$ref": "#/definitions/CustomFieldsDraft"
        },
        "tiers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PriceTierDraft"
          }
        },
        "discounted": {
          "$ref": "#/definitions/DiscountedPrice"
        }
      },
      "required": [
        "value"
      ],
      "x-annotation-package": "Common",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-products.html#pricedraft"
    },
    "PriceTier": {
      "title": "PriceTier",
      "type": "object",
      "properties": {
        "minimumQuantity": {
          "format": "int64",
          "type": "number"
        },
        "value": {
          "$ref": "#/definitions/TypedMoney"
        }
      },
      "required": [
        "minimumQuantity",
        "value"
      ],
      "x-annotation-package": "Common"
    },
    "PriceTierDraft": {
      "title": "PriceTierDraft",
      "type": "object",
      "properties": {
        "minimumQuantity": {
          "format": "int64",
          "type": "number"
        },
        "value": {
          "$ref": "#/definitions/Money"
        }
      },
      "required": [
        "minimumQuantity",
        "value"
      ],
      "x-annotation-package": "Common"
    },
    "QueryPrice": {
      "title": "QueryPrice",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/Money"
        },
        "country": {
          "$ref": "#/definitions/CountryCode"
        },
        "customerGroup": {
          "$ref": "#/definitions/CustomerGroupReference"
        },
        "channel": {
          "$ref": "#/definitions/ChannelReference"
        },
        "validFrom": {
          "type": "string",
          "format": "date-time"
        },
        "validUntil": {
          "type": "string",
          "format": "date-time"
        },
        "discounted": {
          "$ref": "#/definitions/DiscountedPrice"
        },
        "custom": {
          "$ref": "#/definitions/CustomFields"
        },
        "tiers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PriceTierDraft"
          }
        }
      },
      "required": [
        "id",
        "value"
      ],
      "x-annotation-package": "Common",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-products.html#price"
    },
    "Reference": {
      "title": "Reference",
      "discriminator": "typeId",
      "type": "object",
      "properties": {
        "typeId": {
          "$ref": "#/definitions/ReferenceTypeId"
        },
        "id": {
          "type": "string"
        }
      },
      "required": [
        "typeId",
        "id"
      ],
      "x-annotation-package": "Common",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-types.html#reference"
    },
    "ReferenceTypeId": {
      "title": "ReferenceTypeId",
      "enum": [
        "cart",
        "cart-discount",
        "category",
        "channel",
        "customer",
        "customer-group",
        "discount-code",
        "key-value-document",
        "payment",
        "product",
        "product-type",
        "product-discount",
        "order",
        "review",
        "shopping-list",
        "shipping-method",
        "state",
        "store",
        "tax-category",
        "type",
        "zone",
        "inventory-entry",
        "order-edit"
      ],
      "type": "string",
      "x-annotation-package": "Common"
    },
    "ResourceIdentifier": {
      "title": "ResourceIdentifier",
      "discriminator": "typeId",
      "type": "object",
      "properties": {
        "typeId": {
          "$ref": "#/definitions/ReferenceTypeId"
        },
        "id": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      },
      "x-annotation-package": "Common",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-types.html#resourceidentifier"
    },
    "ScopedPrice": {
      "title": "ScopedPrice",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/TypedMoney"
        },
        "currentValue": {
          "$ref": "#/definitions/TypedMoney"
        },
        "country": {
          "$ref": "#/definitions/CountryCode"
        },
        "customerGroup": {
          "$ref": "#/definitions/CustomerGroupReference"
        },
        "channel": {
          "$ref": "#/definitions/ChannelReference"
        },
        "validFrom": {
          "type": "string",
          "format": "date-time"
        },
        "validUntil": {
          "type": "string",
          "format": "date-time"
        },
        "discounted": {
          "$ref": "#/definitions/DiscountedPrice"
        },
        "custom": {
          "$ref": "#/definitions/CustomFields"
        }
      },
      "required": [
        "id",
        "value",
        "currentValue"
      ],
      "x-annotation-package": "Common",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-products.html#scopedprice"
    },
    "TypedMoney": {
      "title": "TypedMoney",
      "discriminator": "type",
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/MoneyType"
        },
        "fractionDigits": {
          "maximum": 12,
          "format": "int32",
          "type": "number"
        },
        "centAmount": {
          "format": "int64",
          "type": "number"
        },
        "currencyCode": {
          "$ref": "#/definitions/CurrencyCode"
        }
      },
      "required": [
        "type",
        "fractionDigits",
        "centAmount",
        "currencyCode"
      ],
      "x-annotation-package": "Common",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-types.html#money"
    },
    "TypedMoneyDraft": {
      "title": "TypedMoneyDraft",
      "discriminator": "type",
      "allOf": [
        {
          "$ref": "#/definitions/Money"
        },
        {
          "properties": {
            "type": {
              "$ref": "#/definitions/MoneyType"
            }
          },
          "required": [
            "type"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Common",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-types.html#basemoney"
    },
    "CustomObject": {
      "title": "CustomObject",
      "allOf": [
        {
          "$ref": "#/definitions/BaseResource"
        },
        {
          "properties": {
            "id": {
              "type": "string",
              "x-annotation-identifier": true
            },
            "version": {
              "format": "int64",
              "type": "number"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            },
            "lastModifiedAt": {
              "type": "string",
              "format": "date-time"
            },
            "lastModifiedBy": {
              "$ref": "#/definitions/LastModifiedBy"
            },
            "createdBy": {
              "$ref": "#/definitions/CreatedBy"
            },
            "container": {
              "description": "A namespace to group custom objects.",
              "type": "string"
            },
            "key": {
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          },
          "required": [
            "id",
            "version",
            "createdAt",
            "lastModifiedAt",
            "container",
            "key",
            "value"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "CustomObject",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-custom-objects.html#customobject"
    },
    "CustomObjectDraft": {
      "title": "CustomObjectDraft",
      "type": "object",
      "properties": {
        "container": {
          "description": "A namespace to group custom objects.",
          "type": "string"
        },
        "key": {
          "description": "A user-defined key that is unique within the given container.",
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "version": {
          "format": "int64",
          "type": "number"
        }
      },
      "required": [
        "container",
        "key",
        "value"
      ],
      "x-annotation-package": "CustomObject",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-custom-objects.html#create-a-customobject"
    },
    "CustomObjectPagedQueryResponse": {
      "title": "CustomObjectPagedQueryResponse",
      "type": "object",
      "properties": {
        "limit": {
          "format": "int64",
          "type": "number"
        },
        "count": {
          "format": "int64",
          "type": "number"
        },
        "total": {
          "format": "int64",
          "type": "number"
        },
        "offset": {
          "format": "int64",
          "type": "number"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomObject"
          }
        }
      },
      "required": [
        "limit",
        "count",
        "offset",
        "results"
      ],
      "x-annotation-package": "CustomObject"
    },
    "CustomObjectReference": {
      "title": "CustomObjectReference",
      "allOf": [
        {
          "$ref": "#/definitions/Reference"
        },
        {
          "properties": {
            "obj": {
              "$ref": "#/definitions/CustomObject"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "CustomObject",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-types.html#reference-types"
    },
    "CustomerGroup": {
      "title": "CustomerGroup",
      "allOf": [
        {
          "$ref": "#/definitions/BaseResource"
        },
        {
          "properties": {
            "id": {
              "description": "The unique ID of the customer group.",
              "type": "string",
              "x-annotation-identifier": true
            },
            "version": {
              "format": "int64",
              "description": "The current version of the customer group.",
              "type": "number"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            },
            "lastModifiedAt": {
              "type": "string",
              "format": "date-time"
            },
            "lastModifiedBy": {
              "description": "Present on resources updated after 1/02/2019 except for events not tracked.",
              "$ref": "#/definitions/LastModifiedBy"
            },
            "createdBy": {
              "description": "Present on resources created after 1/02/2019 except for events not tracked.",
              "$ref": "#/definitions/CreatedBy"
            },
            "key": {
              "description": "User-specific unique identifier for the customer group.",
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "custom": {
              "$ref": "#/definitions/CustomFields"
            }
          },
          "required": [
            "id",
            "version",
            "createdAt",
            "lastModifiedAt",
            "name"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "CustomerGroup",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-customerGroups.html#customergroup",
      "x-annotation-updateType": "CustomerGroupUpdate"
    },
    "CustomerGroupDraft": {
      "title": "CustomerGroupDraft",
      "type": "object",
      "properties": {
        "key": {
          "description": "User-specific unique identifier for the customer group.",
          "type": "string"
        },
        "groupName": {
          "type": "string"
        },
        "custom": {
          "$ref": "#/definitions/CustomFields"
        }
      },
      "required": [
        "groupName"
      ],
      "x-annotation-package": "CustomerGroup",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-customerGroups.html#create-a-customergroup"
    },
    "CustomerGroupPagedQueryResponse": {
      "title": "CustomerGroupPagedQueryResponse",
      "type": "object",
      "properties": {
        "limit": {
          "format": "int64",
          "type": "number"
        },
        "count": {
          "format": "int64",
          "type": "number"
        },
        "total": {
          "format": "int64",
          "type": "number"
        },
        "offset": {
          "format": "int64",
          "type": "number"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomerGroup"
          }
        }
      },
      "required": [
        "limit",
        "count",
        "offset",
        "results"
      ],
      "x-annotation-package": "CustomerGroup"
    },
    "CustomerGroupReference": {
      "title": "CustomerGroupReference",
      "allOf": [
        {
          "$ref": "#/definitions/Reference"
        },
        {
          "properties": {
            "obj": {
              "$ref": "#/definitions/CustomerGroup"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "CustomerGroup",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-customerGroups.html#customergroup"
    },
    "CustomerGroupResourceIdentifier": {
      "title": "CustomerGroupResourceIdentifier",
      "$ref": "#/definitions/ResourceIdentifier",
      "x-annotation-package": "CustomerGroup",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-customerGroups.html#customergroup"
    },
    "CustomerGroupUpdate": {
      "title": "CustomerGroupUpdate",
      "type": "object",
      "properties": {
        "version": {
          "format": "int64",
          "type": "number"
        },
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomerGroupUpdateAction"
          }
        }
      },
      "required": [
        "version",
        "actions"
      ],
      "x-annotation-package": "CustomerGroup"
    },
    "CustomerGroupUpdateAction": {
      "title": "CustomerGroupUpdateAction",
      "discriminator": "action",
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        }
      },
      "required": [
        "action"
      ],
      "x-annotation-package": "CustomerGroup"
    },
    "CustomerGroupChangeNameAction": {
      "title": "CustomerGroupChangeNameAction",
      "allOf": [
        {
          "$ref": "#/definitions/CustomerGroupUpdateAction"
        },
        {
          "properties": {
            "name": {
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "CustomerGroup",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-customerGroups.html#change-name",
      "x-annotation-postman-example": null
    },
    "CustomerGroupSetCustomFieldAction": {
      "title": "CustomerGroupSetCustomFieldAction",
      "allOf": [
        {
          "$ref": "#/definitions/CustomerGroupUpdateAction"
        },
        {
          "properties": {
            "name": {
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "CustomerGroup",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-customerGroups.html#set-customfield",
      "x-annotation-postman-example": null
    },
    "CustomerGroupSetCustomTypeAction": {
      "title": "CustomerGroupSetCustomTypeAction",
      "allOf": [
        {
          "$ref": "#/definitions/CustomerGroupUpdateAction"
        },
        {
          "properties": {
            "type": {
              "description": "If absent, the custom type and any existing CustomFields are removed.",
              "$ref": "#/definitions/TypeResourceIdentifier"
            },
            "fields": {
              "description": "A valid JSON object, based on the FieldDefinitions of the Type.\nSets the custom fields to this value.",
              "$ref": "#/definitions/FieldContainer"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "CustomerGroup",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-customerGroups.html#set-custom-type",
      "x-annotation-postman-example": null
    },
    "CustomerGroupSetKeyAction": {
      "title": "CustomerGroupSetKeyAction",
      "allOf": [
        {
          "$ref": "#/definitions/CustomerGroupUpdateAction"
        },
        {
          "properties": {
            "key": {
              "description": "User-specific unique identifier for the customer group.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "CustomerGroup",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-customerGroups.html#set-key",
      "x-annotation-postman-example": null
    },
    "AnonymousCartSignInMode": {
      "title": "AnonymousCartSignInMode",
      "enum": [
        "MergeWithExistingCustomerCart",
        "UseAsNewActiveCustomerCart"
      ],
      "type": "string",
      "x-annotation-package": "Customer"
    },
    "Customer": {
      "title": "Customer",
      "allOf": [
        {
          "$ref": "#/definitions/BaseResource"
        },
        {
          "properties": {
            "id": {
              "description": "The unique ID of the customer.",
              "type": "string",
              "x-annotation-identifier": true
            },
            "version": {
              "format": "int64",
              "description": "The current version of the customer.",
              "type": "number"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            },
            "lastModifiedAt": {
              "type": "string",
              "format": "date-time"
            },
            "lastModifiedBy": {
              "description": "Present on resources updated after 1/02/2019 except for events not tracked.",
              "$ref": "#/definitions/LastModifiedBy"
            },
            "createdBy": {
              "description": "Present on resources created after 1/02/2019 except for events not tracked.",
              "$ref": "#/definitions/CreatedBy"
            },
            "customerNumber": {
              "description": "The customer number can be used to create a more human-readable (in contrast to ID) identifier for the customer.\nIt should be unique across a project.\nOnce the field was set it cannot be changed anymore.",
              "type": "string"
            },
            "email": {
              "description": "The customer's email address and the main identifier of uniqueness for a customer account.\nEmail addresses are either unique to the store they're specified for, _or_ for the entire project.\nFor more information, see Email uniquenes.",
              "type": "string"
            },
            "password": {
              "type": "string"
            },
            "firstName": {
              "type": "string"
            },
            "lastName": {
              "type": "string"
            },
            "middleName": {
              "type": "string"
            },
            "title": {
              "type": "string"
            },
            "dateOfBirth": {
              "type": "string",
              "format": "date"
            },
            "companyName": {
              "type": "string"
            },
            "vatId": {
              "type": "string"
            },
            "addresses": {
              "description": "The addresses have unique IDs in the addresses list",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Address"
              }
            },
            "defaultShippingAddressId": {
              "description": "The address ID in the addresses list",
              "type": "string"
            },
            "shippingAddressIds": {
              "description": "The IDs from the addresses list which are used as shipping addresses",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "defaultBillingAddressId": {
              "description": "The address ID in the addresses list",
              "type": "string"
            },
            "billingAddressIds": {
              "description": "The IDs from the addresses list which are used as billing addresses",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "isEmailVerified": {
              "type": "boolean"
            },
            "externalId": {
              "type": "string"
            },
            "customerGroup": {
              "$ref": "#/definitions/CustomerGroupReference"
            },
            "custom": {
              "$ref": "#/definitions/CustomFields"
            },
            "locale": {
              "type": "string"
            },
            "salutation": {
              "type": "string"
            },
            "key": {
              "description": "User-specific unique identifier for a customer.\nMust be unique across a project.\nThe field can be reset using the Set Key UpdateAction",
              "type": "string"
            },
            "stores": {
              "description": "References to the stores the customer account is associated with.\nIf no stores are specified, the customer is a global customer, and can log in using the Password Flow for global Customers.\nIf one or more stores are specified, the customer can only log in using the Password Flow for Customers in a Store for those specific stores.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/StoreKeyReference"
              }
            }
          },
          "required": [
            "id",
            "version",
            "createdAt",
            "lastModifiedAt",
            "email",
            "password",
            "addresses",
            "isEmailVerified"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Customer",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-customers.html#customer",
      "x-annotation-updateType": "CustomerUpdate"
    },
    "CustomerChangePassword": {
      "title": "CustomerChangePassword",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "version": {
          "format": "int64",
          "type": "number"
        },
        "currentPassword": {
          "type": "string"
        },
        "newPassword": {
          "type": "string"
        }
      },
      "required": [
        "id",
        "version",
        "currentPassword",
        "newPassword"
      ],
      "x-annotation-package": "Customer"
    },
    "CustomerCreateEmailToken": {
      "title": "CustomerCreateEmailToken",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "version": {
          "format": "int64",
          "type": "number"
        },
        "ttlMinutes": {
          "format": "int64",
          "type": "number"
        }
      },
      "required": [
        "id",
        "ttlMinutes"
      ],
      "x-annotation-package": "Customer"
    },
    "CustomerCreatePasswordResetToken": {
      "title": "CustomerCreatePasswordResetToken",
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "ttlMinutes": {
          "format": "int64",
          "type": "number"
        }
      },
      "required": [
        "email"
      ],
      "x-annotation-package": "Customer"
    },
    "CustomerDraft": {
      "title": "CustomerDraft",
      "type": "object",
      "properties": {
        "customerNumber": {
          "description": "String that uniquely identifies a customer.\nIt can be used to create more human-readable (in contrast to ID) identifier for the customer.\nIt should be **unique** across a project.\nOnce it's set it cannot be changed.",
          "type": "string"
        },
        "email": {
          "description": "The customer's email address and the main identifier of uniqueness for a customer account.\nEmail addresses are either unique to the store they're specified for, _or_ for the entire project, and are case insensitive.\nFor more information, see Email uniquenes.",
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "middleName": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "anonymousCartId": {
          "description": "Identifies a single cart that will be assigned to the new customer account.",
          "type": "string"
        },
        "anonymousId": {
          "description": "Identifies carts and orders belonging to an anonymous session that will be assigned to the new customer account.",
          "type": "string"
        },
        "dateOfBirth": {
          "type": "string",
          "format": "date"
        },
        "companyName": {
          "type": "string"
        },
        "vatId": {
          "type": "string"
        },
        "addresses": {
          "description": "Sets the ID of each address to be unique in the addresses list.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Address"
          }
        },
        "defaultShippingAddress": {
          "format": "int64",
          "description": "The index of the address in the addresses array.\nThe `defaultShippingAddressId` of the customer will be set to the ID of that address.",
          "type": "number"
        },
        "shippingAddresses": {
          "description": "The indices of the shipping addresses in the addresses array.\nThe `shippingAddressIds` of the Customer will be set to the IDs of that addresses.",
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "defaultBillingAddress": {
          "format": "int64",
          "description": "The index of the address in the addresses array.\nThe `defaultBillingAddressId` of the customer will be set to the ID of that address.",
          "type": "number"
        },
        "billingAddresses": {
          "description": "The indices of the billing addresses in the addresses array.\nThe `billingAddressIds` of the customer will be set to the IDs of that addresses.",
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "isEmailVerified": {
          "type": "boolean"
        },
        "externalId": {
          "type": "string"
        },
        "customerGroup": {
          "$ref": "#/definitions/CustomerGroupResourceIdentifier"
        },
        "custom": {
          "description": "The custom fields.",
          "$ref": "#/definitions/CustomFieldsDraft"
        },
        "locale": {
          "description": "Must be one of the languages supported for this project",
          "type": "string"
        },
        "salutation": {
          "type": "string"
        },
        "key": {
          "description": "User-specific unique identifier for a customer.\nMust be unique across a project.\nThe field can be reset using the Set Key UpdateAction",
          "type": "string"
        },
        "stores": {
          "description": "References to the stores the customer account is associated with.\nIf no stores are specified, the customer is a global customer, and can log in using the Password Flow for global Customers.\nIf one or more stores are specified, the customer can only log in using the Password Flow for Customers in a Store for those specific stores.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/StoreResourceIdentifier"
          }
        }
      },
      "required": [
        "email",
        "password"
      ],
      "x-annotation-package": "Customer",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-customers.html#customerdraft"
    },
    "CustomerEmailVerify": {
      "title": "CustomerEmailVerify",
      "type": "object",
      "properties": {
        "version": {
          "format": "int64",
          "type": "number"
        },
        "tokenValue": {
          "type": "string"
        }
      },
      "required": [
        "tokenValue"
      ],
      "x-annotation-package": "Customer"
    },
    "CustomerPagedQueryResponse": {
      "title": "CustomerPagedQueryResponse",
      "type": "object",
      "properties": {
        "limit": {
          "format": "int64",
          "type": "number"
        },
        "count": {
          "format": "int64",
          "type": "number"
        },
        "total": {
          "format": "int64",
          "type": "number"
        },
        "offset": {
          "format": "int64",
          "type": "number"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Customer"
          }
        }
      },
      "required": [
        "limit",
        "count",
        "offset",
        "results"
      ],
      "x-annotation-package": "Customer"
    },
    "CustomerReference": {
      "title": "CustomerReference",
      "allOf": [
        {
          "$ref": "#/definitions/Reference"
        },
        {
          "properties": {
            "obj": {
              "$ref": "#/definitions/Customer"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Customer",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-customers.html#customer"
    },
    "CustomerResetPassword": {
      "title": "CustomerResetPassword",
      "type": "object",
      "properties": {
        "tokenValue": {
          "type": "string"
        },
        "newPassword": {
          "type": "string"
        },
        "version": {
          "format": "int64",
          "type": "number"
        }
      },
      "required": [
        "tokenValue",
        "newPassword"
      ],
      "x-annotation-package": "Customer"
    },
    "CustomerResourceIdentifier": {
      "title": "CustomerResourceIdentifier",
      "$ref": "#/definitions/ResourceIdentifier",
      "x-annotation-package": "Customer",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-customers.html#customer"
    },
    "CustomerSignInResult": {
      "title": "CustomerSignInResult",
      "type": "object",
      "properties": {
        "customer": {
          "$ref": "#/definitions/Customer"
        },
        "cart": {
          "description": "A cart that is associated to the customer.\nEmpty if the customer does not have a cart yet.",
          "type": "object"
        }
      },
      "required": [
        "customer"
      ],
      "x-annotation-package": "Customer",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-customers.html#customersigninresult"
    },
    "CustomerSignin": {
      "title": "CustomerSignin",
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "anonymousCartId": {
          "type": "string"
        },
        "anonymousCartSignInMode": {
          "$ref": "#/definitions/AnonymousCartSignInMode"
        },
        "anonymousId": {
          "type": "string"
        },
        "updateProductData": {
          "type": "boolean"
        }
      },
      "required": [
        "email",
        "password"
      ],
      "x-annotation-package": "Customer"
    },
    "CustomerToken": {
      "title": "CustomerToken",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "lastModifiedAt": {
          "type": "string",
          "format": "date-time"
        },
        "customerId": {
          "type": "string"
        },
        "expiresAt": {
          "type": "string",
          "format": "date-time"
        },
        "value": {
          "type": "string"
        }
      },
      "required": [
        "id",
        "createdAt",
        "customerId",
        "expiresAt",
        "value"
      ],
      "x-annotation-package": "Customer",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-customers.html#customertoken"
    },
    "CustomerUpdate": {
      "title": "CustomerUpdate",
      "type": "object",
      "properties": {
        "version": {
          "format": "int64",
          "type": "number"
        },
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomerUpdateAction"
          }
        }
      },
      "required": [
        "version",
        "actions"
      ],
      "x-annotation-package": "Customer"
    },
    "CustomerUpdateAction": {
      "title": "CustomerUpdateAction",
      "discriminator": "action",
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        }
      },
      "required": [
        "action"
      ],
      "x-annotation-package": "Customer"
    },
    "CustomerAddAddressAction": {
      "title": "CustomerAddAddressAction",
      "allOf": [
        {
          "$ref": "#/definitions/CustomerUpdateAction"
        },
        {
          "properties": {
            "address": {
              "$ref": "#/definitions/Address"
            }
          },
          "required": [
            "address"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Customer",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-customers.html#add-address",
      "x-annotation-postman-example": null
    },
    "CustomerAddBillingAddressIdAction": {
      "title": "CustomerAddBillingAddressIdAction",
      "allOf": [
        {
          "$ref": "#/definitions/CustomerUpdateAction"
        },
        {
          "properties": {
            "addressId": {
              "type": "string"
            },
            "addressKey": {
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Customer",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-customers.html#add-billing-address-id",
      "x-annotation-postman-example": null
    },
    "CustomerAddShippingAddressIdAction": {
      "title": "CustomerAddShippingAddressIdAction",
      "allOf": [
        {
          "$ref": "#/definitions/CustomerUpdateAction"
        },
        {
          "properties": {
            "addressId": {
              "type": "string"
            },
            "addressKey": {
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Customer",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-customers.html#add-shipping-address-id",
      "x-annotation-postman-example": null
    },
    "CustomerAddStoreAction": {
      "title": "CustomerAddStoreAction",
      "allOf": [
        {
          "$ref": "#/definitions/CustomerUpdateAction"
        },
        {
          "properties": {
            "store": {
              "$ref": "#/definitions/StoreResourceIdentifier"
            }
          },
          "required": [
            "store"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Customer",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-customers#add-store-beta",
      "x-annotation-postman-example": null
    },
    "CustomerChangeAddressAction": {
      "title": "CustomerChangeAddressAction",
      "allOf": [
        {
          "$ref": "#/definitions/CustomerUpdateAction"
        },
        {
          "properties": {
            "addressId": {
              "type": "string"
            },
            "addressKey": {
              "type": "string"
            },
            "address": {
              "$ref": "#/definitions/Address"
            }
          },
          "required": [
            "address"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Customer",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-customers.html#change-address",
      "x-annotation-postman-example": null
    },
    "CustomerChangeEmailAction": {
      "title": "CustomerChangeEmailAction",
      "allOf": [
        {
          "$ref": "#/definitions/CustomerUpdateAction"
        },
        {
          "properties": {
            "email": {
              "type": "string"
            }
          },
          "required": [
            "email"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Customer",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-customers.html#change-email",
      "x-annotation-postman-example": null
    },
    "CustomerRemoveAddressAction": {
      "title": "CustomerRemoveAddressAction",
      "allOf": [
        {
          "$ref": "#/definitions/CustomerUpdateAction"
        },
        {
          "properties": {
            "addressId": {
              "type": "string"
            },
            "addressKey": {
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Customer",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-customers.html#remove-address",
      "x-annotation-postman-example": null
    },
    "CustomerRemoveBillingAddressIdAction": {
      "title": "CustomerRemoveBillingAddressIdAction",
      "allOf": [
        {
          "$ref": "#/definitions/CustomerUpdateAction"
        },
        {
          "properties": {
            "addressId": {
              "type": "string"
            },
            "addressKey": {
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Customer",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-customers.html#remove-billing-address-id",
      "x-annotation-postman-example": null
    },
    "CustomerRemoveShippingAddressIdAction": {
      "title": "CustomerRemoveShippingAddressIdAction",
      "allOf": [
        {
          "$ref": "#/definitions/CustomerUpdateAction"
        },
        {
          "properties": {
            "addressId": {
              "type": "string"
            },
            "addressKey": {
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Customer",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-customers.html#remove-shipping-address-id",
      "x-annotation-postman-example": null
    },
    "CustomerRemoveStoreAction": {
      "title": "CustomerRemoveStoreAction",
      "allOf": [
        {
          "$ref": "#/definitions/CustomerUpdateAction"
        },
        {
          "properties": {
            "store": {
              "$ref": "#/definitions/StoreResourceIdentifier"
            }
          },
          "required": [
            "store"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Customer",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-customers#remove-store-beta",
      "x-annotation-postman-example": null
    },
    "CustomerSetCompanyNameAction": {
      "title": "CustomerSetCompanyNameAction",
      "allOf": [
        {
          "$ref": "#/definitions/CustomerUpdateAction"
        },
        {
          "properties": {
            "companyName": {
              "description": "If not defined, the company name is unset.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Customer",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-customers.html#set-company-name",
      "x-annotation-postman-example": null
    },
    "CustomerSetCustomFieldAction": {
      "title": "CustomerSetCustomFieldAction",
      "allOf": [
        {
          "$ref": "#/definitions/CustomerUpdateAction"
        },
        {
          "properties": {
            "name": {
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Customer",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-customers.html#set-customfield",
      "x-annotation-postman-example": null
    },
    "CustomerSetCustomTypeAction": {
      "title": "CustomerSetCustomTypeAction",
      "allOf": [
        {
          "$ref": "#/definitions/CustomerUpdateAction"
        },
        {
          "properties": {
            "type": {
              "description": "If absent, the custom type and any existing custom fields are removed.",
              "$ref": "#/definitions/TypeResourceIdentifier"
            },
            "fields": {
              "description": "A valid JSON object, based on the FieldDefinitions of the Type.\nSets the custom fields to this value.",
              "$ref": "#/definitions/FieldContainer"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Customer",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-customers.html#set-custom-type",
      "x-annotation-postman-example": null
    },
    "CustomerSetCustomerGroupAction": {
      "title": "CustomerSetCustomerGroupAction",
      "allOf": [
        {
          "$ref": "#/definitions/CustomerUpdateAction"
        },
        {
          "properties": {
            "customerGroup": {
              "description": "If not defined, the customer group is unset.",
              "$ref": "#/definitions/CustomerGroupResourceIdentifier"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Customer",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-customers.html#set-customergroup",
      "x-annotation-postman-example": null
    },
    "CustomerSetCustomerNumberAction": {
      "title": "CustomerSetCustomerNumberAction",
      "allOf": [
        {
          "$ref": "#/definitions/CustomerUpdateAction"
        },
        {
          "properties": {
            "customerNumber": {
              "description": "It should be **unique** across a project.\nOnce it's set, it cannot be changed.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Customer",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-customers.html#set-customer-number",
      "x-annotation-postman-example": null
    },
    "CustomerSetDateOfBirthAction": {
      "title": "CustomerSetDateOfBirthAction",
      "allOf": [
        {
          "$ref": "#/definitions/CustomerUpdateAction"
        },
        {
          "properties": {
            "dateOfBirth": {
              "description": "If not defined, the date of birth is unset.",
              "type": "string",
              "format": "date"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Customer",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-customers.html#set-date-of-birth",
      "x-annotation-postman-example": null
    },
    "CustomerSetDefaultBillingAddressAction": {
      "title": "CustomerSetDefaultBillingAddressAction",
      "allOf": [
        {
          "$ref": "#/definitions/CustomerUpdateAction"
        },
        {
          "properties": {
            "addressId": {
              "description": "If not defined, the customer's `defaultBillingAddress` is unset.",
              "type": "string"
            },
            "addressKey": {
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Customer",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-customers.html#set-default-billing-address",
      "x-annotation-postman-example": null
    },
    "CustomerSetDefaultShippingAddressAction": {
      "title": "CustomerSetDefaultShippingAddressAction",
      "allOf": [
        {
          "$ref": "#/definitions/CustomerUpdateAction"
        },
        {
          "properties": {
            "addressId": {
              "description": "If not defined, the customer's `defaultShippingAddress` is unset.",
              "type": "string"
            },
            "addressKey": {
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Customer",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-customers.html#set-default-shipping-address",
      "x-annotation-postman-example": null
    },
    "CustomerSetExternalIdAction": {
      "title": "CustomerSetExternalIdAction",
      "allOf": [
        {
          "$ref": "#/definitions/CustomerUpdateAction"
        },
        {
          "properties": {
            "externalId": {
              "description": "If not defined, the external ID is unset.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Customer",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-customers.html#set-external-id",
      "x-annotation-postman-example": null
    },
    "CustomerSetFirstNameAction": {
      "title": "CustomerSetFirstNameAction",
      "allOf": [
        {
          "$ref": "#/definitions/CustomerUpdateAction"
        },
        {
          "properties": {
            "firstName": {
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Customer",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-customers.html#set-first-name",
      "x-annotation-postman-example": null
    },
    "CustomerSetKeyAction": {
      "title": "CustomerSetKeyAction",
      "allOf": [
        {
          "$ref": "#/definitions/CustomerUpdateAction"
        },
        {
          "properties": {
            "key": {
              "description": "If `key` is absent or `null`, this field will be removed if it exists.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Customer",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-customers.html#set-key",
      "x-annotation-postman-example": null
    },
    "CustomerSetLastNameAction": {
      "title": "CustomerSetLastNameAction",
      "allOf": [
        {
          "$ref": "#/definitions/CustomerUpdateAction"
        },
        {
          "properties": {
            "lastName": {
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Customer",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-customers.html#set-last-name",
      "x-annotation-postman-example": null
    },
    "CustomerSetLocaleAction": {
      "title": "CustomerSetLocaleAction",
      "allOf": [
        {
          "$ref": "#/definitions/CustomerUpdateAction"
        },
        {
          "properties": {
            "locale": {
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Customer",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-customers.html#set-locale",
      "x-annotation-postman-example": null
    },
    "CustomerSetMiddleNameAction": {
      "title": "CustomerSetMiddleNameAction",
      "allOf": [
        {
          "$ref": "#/definitions/CustomerUpdateAction"
        },
        {
          "properties": {
            "middleName": {
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Customer",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-customers.html#set-middle-name",
      "x-annotation-postman-example": null
    },
    "CustomerSetSalutationAction": {
      "title": "CustomerSetSalutationAction",
      "allOf": [
        {
          "$ref": "#/definitions/CustomerUpdateAction"
        },
        {
          "properties": {
            "salutation": {
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Customer",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-customers.html#set-salutation",
      "x-annotation-postman-example": null
    },
    "CustomerSetStoresAction": {
      "title": "CustomerSetStoresAction",
      "allOf": [
        {
          "$ref": "#/definitions/CustomerUpdateAction"
        },
        {
          "properties": {
            "stores": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/StoreResourceIdentifier"
              }
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Customer",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-customers#set-stores-beta",
      "x-annotation-postman-example": null
    },
    "CustomerSetTitleAction": {
      "title": "CustomerSetTitleAction",
      "allOf": [
        {
          "$ref": "#/definitions/CustomerUpdateAction"
        },
        {
          "properties": {
            "title": {
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Customer",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-customers.html#set-title",
      "x-annotation-postman-example": null
    },
    "CustomerSetVatIdAction": {
      "title": "CustomerSetVatIdAction",
      "allOf": [
        {
          "$ref": "#/definitions/CustomerUpdateAction"
        },
        {
          "properties": {
            "vatId": {
              "description": "If not defined, the vat Id is unset.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Customer",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-customers.html#set-vat-id",
      "x-annotation-postman-example": null
    },
    "DiscountCode": {
      "title": "DiscountCode",
      "allOf": [
        {
          "$ref": "#/definitions/BaseResource"
        },
        {
          "properties": {
            "id": {
              "description": "The unique ID of the discount code.",
              "type": "string",
              "x-annotation-identifier": true
            },
            "version": {
              "format": "int64",
              "type": "number"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            },
            "lastModifiedAt": {
              "type": "string",
              "format": "date-time"
            },
            "lastModifiedBy": {
              "description": "Present on resources updated after 1/02/2019 except for events not tracked.",
              "$ref": "#/definitions/LastModifiedBy"
            },
            "createdBy": {
              "description": "Present on resources created after 1/02/2019 except for events not tracked.",
              "$ref": "#/definitions/CreatedBy"
            },
            "name": {
              "$ref": "#/definitions/LocalizedString"
            },
            "description": {
              "$ref": "#/definitions/LocalizedString"
            },
            "code": {
              "description": "Unique identifier of this discount code.\nThis value is added to the cart\nto enable the related cart discounts in the cart.",
              "type": "string"
            },
            "cartDiscounts": {
              "description": "The referenced matching cart discounts can be applied to the cart once the DiscountCode is added.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CartDiscountReference"
              }
            },
            "cartPredicate": {
              "description": "The discount code can only be applied to carts that match this predicate.",
              "type": "string"
            },
            "isActive": {
              "type": "boolean"
            },
            "references": {
              "description": "The platform will generate this array from the cart predicate.\nIt contains the references of all the resources that are addressed in the predicate.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "maxApplications": {
              "format": "int64",
              "description": "The discount code can only be applied `maxApplications` times.",
              "type": "number"
            },
            "maxApplicationsPerCustomer": {
              "format": "int64",
              "description": "The discount code can only be applied `maxApplicationsPerCustomer` times per customer.",
              "type": "number"
            },
            "custom": {
              "$ref": "#/definitions/CustomFields"
            },
            "groups": {
              "description": "The groups to which this discount code belong.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "validFrom": {
              "description": "The time from which the discount can be applied on a cart.\nBefore that time the code is invalid.",
              "type": "string",
              "format": "date-time"
            },
            "validUntil": {
              "description": "The time until the discount can be applied on a cart.\nAfter that time the code is invalid.",
              "type": "string",
              "format": "date-time"
            }
          },
          "required": [
            "id",
            "version",
            "createdAt",
            "lastModifiedAt",
            "code",
            "cartDiscounts",
            "isActive",
            "references",
            "groups"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "DiscountCode",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-discountCodes.html#discountcode",
      "x-annotation-updateType": "DiscountCodeUpdate"
    },
    "DiscountCodeDraft": {
      "title": "DiscountCodeDraft",
      "type": "object",
      "properties": {
        "name": {
          "$ref": "#/definitions/LocalizedString"
        },
        "description": {
          "$ref": "#/definitions/LocalizedString"
        },
        "code": {
          "description": "Unique identifier of this discount code.\nThis value is added to the cart\nto enable the related cart discounts in the cart.",
          "type": "string"
        },
        "cartDiscounts": {
          "description": "The referenced matching cart discounts can be applied to the cart once the discount code is added.\nThe number of cart discounts in a discount code is limited to **10**.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CartDiscountResourceIdentifier"
          }
        },
        "cartPredicate": {
          "description": "The discount code can only be applied to carts that match this predicate.",
          "type": "string"
        },
        "isActive": {
          "type": "boolean"
        },
        "maxApplications": {
          "format": "int64",
          "type": "number"
        },
        "maxApplicationsPerCustomer": {
          "format": "int64",
          "type": "number"
        },
        "custom": {
          "$ref": "#/definitions/CustomFieldsDraft"
        },
        "groups": {
          "description": "The groups to which this discount code shall belong to.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "validFrom": {
          "description": "The time from which the discount can be applied on a cart.\nBefore that time the code is invalid.",
          "type": "string",
          "format": "date-time"
        },
        "validUntil": {
          "description": "The time until the discount can be applied on a cart.\nAfter that time the code is invalid.",
          "type": "string",
          "format": "date-time"
        }
      },
      "required": [
        "code",
        "cartDiscounts"
      ],
      "x-annotation-package": "DiscountCode",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-discountCodes.html#discountcodedraft"
    },
    "DiscountCodePagedQueryResponse": {
      "title": "DiscountCodePagedQueryResponse",
      "type": "object",
      "properties": {
        "limit": {
          "format": "int64",
          "type": "number"
        },
        "count": {
          "format": "int64",
          "type": "number"
        },
        "total": {
          "format": "int64",
          "type": "number"
        },
        "offset": {
          "format": "int64",
          "type": "number"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DiscountCode"
          }
        }
      },
      "required": [
        "limit",
        "count",
        "offset",
        "results"
      ],
      "x-annotation-package": "DiscountCode"
    },
    "DiscountCodeReference": {
      "title": "DiscountCodeReference",
      "allOf": [
        {
          "$ref": "#/definitions/Reference"
        },
        {
          "properties": {
            "obj": {
              "$ref": "#/definitions/DiscountCode"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "DiscountCode",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-discountCodes.html#discountcode"
    },
    "DiscountCodeResourceIdentifier": {
      "title": "DiscountCodeResourceIdentifier",
      "$ref": "#/definitions/ResourceIdentifier",
      "x-annotation-package": "DiscountCode",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-discountCodes.html#discountcode"
    },
    "DiscountCodeUpdate": {
      "title": "DiscountCodeUpdate",
      "type": "object",
      "properties": {
        "version": {
          "format": "int64",
          "type": "number"
        },
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DiscountCodeUpdateAction"
          }
        }
      },
      "required": [
        "version",
        "actions"
      ],
      "x-annotation-package": "DiscountCode"
    },
    "DiscountCodeUpdateAction": {
      "title": "DiscountCodeUpdateAction",
      "discriminator": "action",
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        }
      },
      "required": [
        "action"
      ],
      "x-annotation-package": "DiscountCode"
    },
    "DiscountCodeChangeCartDiscountsAction": {
      "title": "DiscountCodeChangeCartDiscountsAction",
      "allOf": [
        {
          "$ref": "#/definitions/DiscountCodeUpdateAction"
        },
        {
          "properties": {
            "cartDiscounts": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CartDiscountResourceIdentifier"
              }
            }
          },
          "required": [
            "cartDiscounts"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "DiscountCode",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-discountCodes.html#change-cartdiscounts",
      "x-annotation-postman-example": null
    },
    "DiscountCodeChangeGroupsAction": {
      "title": "DiscountCodeChangeGroupsAction",
      "allOf": [
        {
          "$ref": "#/definitions/DiscountCodeUpdateAction"
        },
        {
          "properties": {
            "groups": {
              "description": "The groups to which this discount code shall belong to.\nUse empty array to remove the code from all groups.",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "required": [
            "groups"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "DiscountCode",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-discountCodes.html#change-groups",
      "x-annotation-postman-example": null
    },
    "DiscountCodeChangeIsActiveAction": {
      "title": "DiscountCodeChangeIsActiveAction",
      "allOf": [
        {
          "$ref": "#/definitions/DiscountCodeUpdateAction"
        },
        {
          "properties": {
            "isActive": {
              "type": "boolean"
            }
          },
          "required": [
            "isActive"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "DiscountCode",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-discountCodes.html#change-isactive",
      "x-annotation-postman-example": null
    },
    "DiscountCodeSetCartPredicateAction": {
      "title": "DiscountCodeSetCartPredicateAction",
      "allOf": [
        {
          "$ref": "#/definitions/DiscountCodeUpdateAction"
        },
        {
          "properties": {
            "cartPredicate": {
              "description": "If the `cartPredicate` parameter is not included, the field will be emptied.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "DiscountCode",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-discountCodes.html#set-cart-predicate",
      "x-annotation-postman-example": null
    },
    "DiscountCodeSetCustomFieldAction": {
      "title": "DiscountCodeSetCustomFieldAction",
      "allOf": [
        {
          "$ref": "#/definitions/DiscountCodeUpdateAction"
        },
        {
          "properties": {
            "name": {
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "DiscountCode",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-discountCodes.html#set-customfield",
      "x-annotation-postman-example": null
    },
    "DiscountCodeSetCustomTypeAction": {
      "title": "DiscountCodeSetCustomTypeAction",
      "allOf": [
        {
          "$ref": "#/definitions/DiscountCodeUpdateAction"
        },
        {
          "properties": {
            "type": {
              "description": "If absent, the custom type and any existing CustomFields are removed.",
              "$ref": "#/definitions/TypeResourceIdentifier"
            },
            "fields": {
              "description": "A valid JSON object, based on the FieldDefinitions of the Type.\nSets the custom fields to this value.",
              "$ref": "#/definitions/FieldContainer"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "DiscountCode",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-discountCodes.html#set-custom-type",
      "x-annotation-postman-example": null
    },
    "DiscountCodeSetDescriptionAction": {
      "title": "DiscountCodeSetDescriptionAction",
      "allOf": [
        {
          "$ref": "#/definitions/DiscountCodeUpdateAction"
        },
        {
          "properties": {
            "description": {
              "description": "If the `description` parameter is not included, the field will be emptied.",
              "$ref": "#/definitions/LocalizedString"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "DiscountCode",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-discountCodes.html#set-description",
      "x-annotation-postman-example": null
    },
    "DiscountCodeSetMaxApplicationsAction": {
      "title": "DiscountCodeSetMaxApplicationsAction",
      "allOf": [
        {
          "$ref": "#/definitions/DiscountCodeUpdateAction"
        },
        {
          "properties": {
            "maxApplications": {
              "format": "int64",
              "description": "If the `maxApplications` parameter is not included, the field will be emptied.",
              "type": "number"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "DiscountCode",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-discountCodes.html#set-max-applications",
      "x-annotation-postman-example": null
    },
    "DiscountCodeSetMaxApplicationsPerCustomerAction": {
      "title": "DiscountCodeSetMaxApplicationsPerCustomerAction",
      "allOf": [
        {
          "$ref": "#/definitions/DiscountCodeUpdateAction"
        },
        {
          "properties": {
            "maxApplicationsPerCustomer": {
              "format": "int64",
              "description": "If the `maxApplicationsPerCustomer` parameter is not included, the field will be emptied.",
              "type": "number"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "DiscountCode",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-discountCodes.html#set-max-applications-per-customer",
      "x-annotation-postman-example": null
    },
    "DiscountCodeSetNameAction": {
      "title": "DiscountCodeSetNameAction",
      "allOf": [
        {
          "$ref": "#/definitions/DiscountCodeUpdateAction"
        },
        {
          "properties": {
            "name": {
              "description": "If the `name` parameter is not included, the field will be emptied.",
              "$ref": "#/definitions/LocalizedString"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "DiscountCode",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-discountCodes.html#set-name",
      "x-annotation-postman-example": null
    },
    "DiscountCodeSetValidFromAction": {
      "title": "DiscountCodeSetValidFromAction",
      "allOf": [
        {
          "$ref": "#/definitions/DiscountCodeUpdateAction"
        },
        {
          "properties": {
            "validFrom": {
              "description": "If absent, the field with the value is removed in case a value was set before.",
              "type": "string",
              "format": "date-time"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "DiscountCode",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-discountCodes.html#set-validfrom",
      "x-annotation-postman-example": null
    },
    "DiscountCodeSetValidFromAndUntilAction": {
      "title": "DiscountCodeSetValidFromAndUntilAction",
      "allOf": [
        {
          "$ref": "#/definitions/DiscountCodeUpdateAction"
        },
        {
          "properties": {
            "validFrom": {
              "description": "If absent, the field with the value is removed in case a value was set before.",
              "type": "string",
              "format": "date-time"
            },
            "validUntil": {
              "description": "If absent, the field with the value is removed in case a value was set before.",
              "type": "string",
              "format": "date-time"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "DiscountCode",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-discountCodes.html#set-valid-from-and-until",
      "x-annotation-postman-example": null
    },
    "DiscountCodeSetValidUntilAction": {
      "title": "DiscountCodeSetValidUntilAction",
      "allOf": [
        {
          "$ref": "#/definitions/DiscountCodeUpdateAction"
        },
        {
          "properties": {
            "validUntil": {
              "description": "If absent, the field with the value is removed in case a value was set before.",
              "type": "string",
              "format": "date-time"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "DiscountCode",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-discountCodes.html#set-validuntil",
      "x-annotation-postman-example": null
    },
    "AccessDeniedError": {
      "title": "AccessDeniedError",
      "$ref": "#/definitions/ErrorObject",
      "x-annotation-package": "Error"
    },
    "ConcurrentModificationError": {
      "title": "ConcurrentModificationError",
      "allOf": [
        {
          "$ref": "#/definitions/ErrorObject"
        },
        {
          "properties": {
            "currentVersion": {
              "format": "int64",
              "type": "number"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Error"
    },
    "DiscountCodeNonApplicableError": {
      "title": "DiscountCodeNonApplicableError",
      "allOf": [
        {
          "$ref": "#/definitions/ErrorObject"
        },
        {
          "properties": {
            "discountCode": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "dicountCodeId": {
              "type": "string"
            },
            "validFrom": {
              "type": "string",
              "format": "date-time"
            },
            "validUntil": {
              "type": "string",
              "format": "date-time"
            },
            "validityCheckTime": {
              "type": "string",
              "format": "date-time"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Error"
    },
    "DuplicateAttributeValueError": {
      "title": "DuplicateAttributeValueError",
      "allOf": [
        {
          "$ref": "#/definitions/ErrorObject"
        },
        {
          "properties": {
            "attribute": {
              "$ref": "#/definitions/Attribute"
            }
          },
          "required": [
            "attribute"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Error"
    },
    "DuplicateAttributeValuesError": {
      "title": "DuplicateAttributeValuesError",
      "allOf": [
        {
          "$ref": "#/definitions/ErrorObject"
        },
        {
          "properties": {
            "attributes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Attribute"
              }
            }
          },
          "required": [
            "attributes"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Error"
    },
    "DuplicateFieldError": {
      "title": "DuplicateFieldError",
      "allOf": [
        {
          "$ref": "#/definitions/ErrorObject"
        },
        {
          "properties": {
            "field": {
              "type": "string"
            },
            "duplicateValue": {
              "type": "string"
            },
            "conflictingResource": {
              "$ref": "#/definitions/Reference"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Error"
    },
    "DuplicateFieldWithConflictingResourceError": {
      "title": "DuplicateFieldWithConflictingResourceError",
      "allOf": [
        {
          "$ref": "#/definitions/ErrorObject"
        },
        {
          "properties": {
            "field": {
              "type": "string"
            },
            "duplicateValue": {
              "type": "string"
            },
            "conflictingResource": {
              "$ref": "#/definitions/Reference"
            }
          },
          "required": [
            "field",
            "duplicateValue",
            "conflictingResource"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Error"
    },
    "DuplicatePriceScopeError": {
      "title": "DuplicatePriceScopeError",
      "allOf": [
        {
          "$ref": "#/definitions/ErrorObject"
        },
        {
          "properties": {
            "conflictingPrices": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Price"
              }
            }
          },
          "required": [
            "conflictingPrices"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Error"
    },
    "DuplicateVariantValuesError": {
      "title": "DuplicateVariantValuesError",
      "allOf": [
        {
          "$ref": "#/definitions/ErrorObject"
        },
        {
          "properties": {
            "variantValues": {
              "$ref": "#/definitions/VariantValues"
            }
          },
          "required": [
            "variantValues"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Error"
    },
    "EnumValueIsUsedError": {
      "title": "EnumValueIsUsedError",
      "$ref": "#/definitions/ErrorObject",
      "x-annotation-package": "Error"
    },
    "ErrorByExtension": {
      "title": "ErrorByExtension",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "x-annotation-package": "Error"
    },
    "ErrorObject": {
      "title": "ErrorObject",
      "discriminator": "code",
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      },
      "required": [
        "code",
        "message"
      ],
      "x-annotation-package": "Error"
    },
    "ErrorResponse": {
      "title": "ErrorResponse",
      "type": "object",
      "properties": {
        "statusCode": {
          "type": "integer"
        },
        "message": {
          "type": "string"
        },
        "error": {
          "type": "string"
        },
        "error_description": {
          "type": "string"
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ErrorObject"
          }
        }
      },
      "required": [
        "statusCode",
        "message"
      ],
      "x-annotation-package": "Error"
    },
    "ExtensionBadResponseError": {
      "title": "ExtensionBadResponseError",
      "allOf": [
        {
          "$ref": "#/definitions/ErrorObject"
        },
        {
          "properties": {
            "localizedMessage": {
              "$ref": "#/definitions/LocalizedString"
            },
            "extensionExtraInfo": {
              "type": "object"
            },
            "errorByExtension": {
              "$ref": "#/definitions/ErrorByExtension"
            }
          },
          "required": [
            "errorByExtension"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Error"
    },
    "ExtensionNoResponseError": {
      "title": "ExtensionNoResponseError",
      "allOf": [
        {
          "$ref": "#/definitions/ErrorObject"
        },
        {
          "properties": {
            "localizedMessage": {
              "$ref": "#/definitions/LocalizedString"
            },
            "extensionExtraInfo": {
              "type": "object"
            },
            "errorByExtension": {
              "$ref": "#/definitions/ErrorByExtension"
            }
          },
          "required": [
            "errorByExtension"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Error"
    },
    "ExtensionUpdateActionsFailedError": {
      "title": "ExtensionUpdateActionsFailedError",
      "allOf": [
        {
          "$ref": "#/definitions/ErrorObject"
        },
        {
          "properties": {
            "localizedMessage": {
              "$ref": "#/definitions/LocalizedString"
            },
            "extensionExtraInfo": {
              "type": "object"
            },
            "errorByExtension": {
              "$ref": "#/definitions/ErrorByExtension"
            }
          },
          "required": [
            "errorByExtension"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Error"
    },
    "InsufficientScopeError": {
      "title": "InsufficientScopeError",
      "$ref": "#/definitions/ErrorObject",
      "x-annotation-package": "Error"
    },
    "InvalidCredentialsError": {
      "title": "InvalidCredentialsError",
      "$ref": "#/definitions/ErrorObject",
      "x-annotation-package": "Error"
    },
    "InvalidCurrentPasswordError": {
      "title": "InvalidCurrentPasswordError",
      "$ref": "#/definitions/ErrorObject",
      "x-annotation-package": "Error"
    },
    "InvalidFieldError": {
      "title": "InvalidFieldError",
      "allOf": [
        {
          "$ref": "#/definitions/ErrorObject"
        },
        {
          "properties": {
            "field": {
              "type": "string"
            },
            "invalidValue": {
              "type": "string"
            },
            "allowedValues": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "required": [
            "field",
            "invalidValue"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Error"
    },
    "InvalidInputError": {
      "title": "InvalidInputError",
      "$ref": "#/definitions/ErrorObject",
      "x-annotation-package": "Error"
    },
    "InvalidItemShippingDetailsError": {
      "title": "InvalidItemShippingDetailsError",
      "allOf": [
        {
          "$ref": "#/definitions/ErrorObject"
        },
        {
          "properties": {
            "subject": {
              "type": "string"
            },
            "itemId": {
              "type": "string"
            }
          },
          "required": [
            "subject",
            "itemId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Error"
    },
    "InvalidJsonInputError": {
      "title": "InvalidJsonInputError",
      "$ref": "#/definitions/ErrorObject",
      "x-annotation-package": "Error"
    },
    "InvalidOperationError": {
      "title": "InvalidOperationError",
      "$ref": "#/definitions/ErrorObject",
      "x-annotation-package": "Error"
    },
    "InvalidSubjectError": {
      "title": "InvalidSubjectError",
      "$ref": "#/definitions/ErrorObject",
      "x-annotation-package": "Error"
    },
    "InvalidTokenError": {
      "title": "InvalidTokenError",
      "$ref": "#/definitions/ErrorObject",
      "x-annotation-package": "Error"
    },
    "LanguageUsedInStoresError": {
      "title": "LanguageUsedInStoresError",
      "$ref": "#/definitions/ErrorObject",
      "x-annotation-package": "Error"
    },
    "MatchingPriceNotFoundError": {
      "title": "MatchingPriceNotFoundError",
      "allOf": [
        {
          "$ref": "#/definitions/ErrorObject"
        },
        {
          "properties": {
            "productId": {
              "type": "string"
            },
            "variantId": {
              "type": "integer"
            },
            "currency": {
              "type": "string"
            },
            "country": {
              "type": "string"
            },
            "customerGroup": {
              "$ref": "#/definitions/CustomerGroupReference"
            },
            "channel": {
              "$ref": "#/definitions/ChannelReference"
            }
          },
          "required": [
            "productId",
            "variantId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Error"
    },
    "MissingTaxRateForCountryError": {
      "title": "MissingTaxRateForCountryError",
      "allOf": [
        {
          "$ref": "#/definitions/ErrorObject"
        },
        {
          "properties": {
            "taxCategoryId": {
              "type": "string"
            },
            "country": {
              "type": "string"
            },
            "state": {
              "type": "string"
            }
          },
          "required": [
            "taxCategoryId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Error"
    },
    "NoMatchingProductDiscountFoundError": {
      "title": "NoMatchingProductDiscountFoundError",
      "$ref": "#/definitions/ErrorObject",
      "x-annotation-package": "Error"
    },
    "OutOfStockError": {
      "title": "OutOfStockError",
      "allOf": [
        {
          "$ref": "#/definitions/ErrorObject"
        },
        {
          "properties": {
            "lineItems": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "skus": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "required": [
            "lineItems",
            "skus"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Error"
    },
    "PriceChangedError": {
      "title": "PriceChangedError",
      "allOf": [
        {
          "$ref": "#/definitions/ErrorObject"
        },
        {
          "properties": {
            "lineItems": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "shipping": {
              "type": "boolean"
            }
          },
          "required": [
            "lineItems",
            "shipping"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Error"
    },
    "ReferenceExistsError": {
      "title": "ReferenceExistsError",
      "allOf": [
        {
          "$ref": "#/definitions/ErrorObject"
        },
        {
          "properties": {
            "referencedBy": {
              "$ref": "#/definitions/ReferenceTypeId"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Error"
    },
    "RequiredFieldError": {
      "title": "RequiredFieldError",
      "allOf": [
        {
          "$ref": "#/definitions/ErrorObject"
        },
        {
          "properties": {
            "field": {
              "type": "string"
            }
          },
          "required": [
            "field"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Error"
    },
    "ResourceNotFoundError": {
      "title": "ResourceNotFoundError",
      "$ref": "#/definitions/ErrorObject",
      "x-annotation-package": "Error"
    },
    "ShippingMethodDoesNotMatchCartError": {
      "title": "ShippingMethodDoesNotMatchCartError",
      "$ref": "#/definitions/ErrorObject",
      "x-annotation-package": "Error"
    },
    "VariantValues": {
      "title": "VariantValues",
      "type": "object",
      "properties": {
        "sku": {
          "type": "string"
        },
        "prices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PriceDraft"
          }
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Attribute"
          }
        }
      },
      "required": [
        "prices",
        "attributes"
      ],
      "x-annotation-package": "Error"
    },
    "Extension": {
      "title": "Extension",
      "allOf": [
        {
          "$ref": "#/definitions/BaseResource"
        },
        {
          "properties": {
            "id": {
              "type": "string",
              "x-annotation-identifier": true
            },
            "version": {
              "format": "int64",
              "type": "number"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            },
            "lastModifiedAt": {
              "type": "string",
              "format": "date-time"
            },
            "lastModifiedBy": {
              "description": "Present on resources updated after 1/02/2019 except for events not tracked.",
              "$ref": "#/definitions/LastModifiedBy"
            },
            "createdBy": {
              "description": "Present on resources created after 1/02/2019 except for events not tracked.",
              "$ref": "#/definitions/CreatedBy"
            },
            "key": {
              "type": "string"
            },
            "destination": {
              "$ref": "#/definitions/ExtensionDestination"
            },
            "triggers": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExtensionTrigger"
              }
            },
            "timeoutInMs": {
              "description": "The maximum time the commercetools platform waits for a response from the extension.\nIf not present, `2000` (2 seconds) is used.",
              "type": "integer"
            }
          },
          "required": [
            "id",
            "version",
            "createdAt",
            "lastModifiedAt",
            "destination",
            "triggers"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Extension",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-api-extensions.html",
      "x-annotation-updateType": "ExtensionUpdate"
    },
    "ExtensionAWSLambdaDestination": {
      "title": "ExtensionAWSLambdaDestination",
      "allOf": [
        {
          "$ref": "#/definitions/ExtensionDestination"
        },
        {
          "properties": {
            "arn": {
              "type": "string"
            },
            "accessKey": {
              "type": "string"
            },
            "accessSecret": {
              "type": "string"
            }
          },
          "required": [
            "arn",
            "accessKey",
            "accessSecret"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Extension"
    },
    "ExtensionAction": {
      "title": "ExtensionAction",
      "enum": [
        "Create",
        "Update"
      ],
      "type": "string",
      "x-annotation-package": "Extension"
    },
    "ExtensionAuthorizationHeaderAuthentication": {
      "title": "ExtensionAuthorizationHeaderAuthentication",
      "allOf": [
        {
          "$ref": "#/definitions/ExtensionHttpDestinationAuthentication"
        },
        {
          "properties": {
            "headerValue": {
              "type": "string"
            }
          },
          "required": [
            "headerValue"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Extension"
    },
    "ExtensionAzureFunctionsAuthentication": {
      "title": "ExtensionAzureFunctionsAuthentication",
      "allOf": [
        {
          "$ref": "#/definitions/ExtensionHttpDestinationAuthentication"
        },
        {
          "properties": {
            "key": {
              "type": "string"
            }
          },
          "required": [
            "key"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Extension"
    },
    "ExtensionDestination": {
      "title": "ExtensionDestination",
      "discriminator": "type",
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "x-annotation-package": "Extension"
    },
    "ExtensionDraft": {
      "title": "ExtensionDraft",
      "type": "object",
      "properties": {
        "key": {
          "description": "User-specific unique identifier for the extension",
          "type": "string"
        },
        "destination": {
          "description": "Details where the extension can be reached",
          "$ref": "#/definitions/ExtensionDestination"
        },
        "triggers": {
          "description": "Describes what triggers the extension",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExtensionTrigger"
          }
        },
        "timeoutInMs": {
          "description": "The maximum time the commercetools platform waits for a response from the extension.\nThe maximum value is 2000 ms (2 seconds).\nThis limit can be increased per project after we review the performance impact.\nPlease contact Support via the [Support Portal](https://support.commercetools.com) and provide the region, project key and use case.",
          "type": "integer"
        }
      },
      "required": [
        "destination",
        "triggers"
      ],
      "x-annotation-package": "Extension"
    },
    "ExtensionHttpDestination": {
      "title": "ExtensionHttpDestination",
      "allOf": [
        {
          "$ref": "#/definitions/ExtensionDestination"
        },
        {
          "properties": {
            "url": {
              "type": "string"
            },
            "authentication": {
              "$ref": "#/definitions/ExtensionHttpDestinationAuthentication"
            }
          },
          "required": [
            "url"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Extension"
    },
    "ExtensionHttpDestinationAuthentication": {
      "title": "ExtensionHttpDestinationAuthentication",
      "discriminator": "type",
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "x-annotation-package": "Extension"
    },
    "ExtensionInput": {
      "title": "ExtensionInput",
      "type": "object",
      "properties": {
        "action": {
          "$ref": "#/definitions/ExtensionAction"
        },
        "resource": {
          "$ref": "#/definitions/Reference"
        }
      },
      "required": [
        "action",
        "resource"
      ],
      "x-annotation-package": "Extension"
    },
    "ExtensionPagedQueryResponse": {
      "title": "ExtensionPagedQueryResponse",
      "type": "object",
      "properties": {
        "limit": {
          "format": "int64",
          "type": "number"
        },
        "count": {
          "format": "int64",
          "type": "number"
        },
        "total": {
          "format": "int64",
          "type": "number"
        },
        "offset": {
          "format": "int64",
          "type": "number"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Extension"
          }
        }
      },
      "required": [
        "limit",
        "count",
        "offset",
        "results"
      ],
      "x-annotation-package": "Extension"
    },
    "ExtensionResourceTypeId": {
      "title": "ExtensionResourceTypeId",
      "enum": [
        "cart",
        "order",
        "payment",
        "customer"
      ],
      "type": "string",
      "x-annotation-package": "Extension"
    },
    "ExtensionTrigger": {
      "title": "ExtensionTrigger",
      "type": "object",
      "properties": {
        "resourceTypeId": {
          "$ref": "#/definitions/ExtensionResourceTypeId"
        },
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExtensionAction"
          }
        }
      },
      "required": [
        "resourceTypeId",
        "actions"
      ],
      "x-annotation-package": "Extension"
    },
    "ExtensionUpdate": {
      "title": "ExtensionUpdate",
      "type": "object",
      "properties": {
        "version": {
          "format": "int64",
          "type": "number"
        },
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExtensionUpdateAction"
          }
        }
      },
      "required": [
        "version",
        "actions"
      ],
      "x-annotation-package": "Extension"
    },
    "ExtensionUpdateAction": {
      "title": "ExtensionUpdateAction",
      "discriminator": "action",
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        }
      },
      "required": [
        "action"
      ],
      "x-annotation-package": "Extension"
    },
    "ExtensionChangeDestinationAction": {
      "title": "ExtensionChangeDestinationAction",
      "allOf": [
        {
          "$ref": "#/definitions/ExtensionUpdateAction"
        },
        {
          "properties": {
            "destination": {
              "$ref": "#/definitions/ExtensionDestination"
            }
          },
          "required": [
            "destination"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Extension",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-api-extensions.html#change-destination",
      "x-annotation-postman-example": null
    },
    "ExtensionChangeTriggersAction": {
      "title": "ExtensionChangeTriggersAction",
      "allOf": [
        {
          "$ref": "#/definitions/ExtensionUpdateAction"
        },
        {
          "properties": {
            "triggers": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExtensionTrigger"
              }
            }
          },
          "required": [
            "triggers"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Extension",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-api-extensions.html#change-triggers",
      "x-annotation-postman-example": null
    },
    "ExtensionSetKeyAction": {
      "title": "ExtensionSetKeyAction",
      "allOf": [
        {
          "$ref": "#/definitions/ExtensionUpdateAction"
        },
        {
          "properties": {
            "key": {
              "description": "If `key` is absent or `null`, this field will be removed if it exists.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Extension",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-api-extensions.html#set-key",
      "x-annotation-postman-example": null
    },
    "ExtensionSetTimeoutInMsAction": {
      "title": "ExtensionSetTimeoutInMsAction",
      "allOf": [
        {
          "$ref": "#/definitions/ExtensionUpdateAction"
        },
        {
          "properties": {
            "timeoutInMs": {
              "description": "The maximum time the commercetools platform waits for a response from the extension.\nThe maximum value is 2000 ms (2 seconds).\nThis limit can be increased per project after we review the performance impact.\nPlease contact Support via the support and provide the region, project key and use case.",
              "type": "integer"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Extension",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-api-extensions.html#set-timeout-in-ms"
    },
    "GraphQLError": {
      "title": "GraphQLError",
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "locations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GraphQLErrorLocation"
          }
        },
        "path": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "message",
        "locations",
        "path"
      ],
      "x-annotation-package": "GraphQL"
    },
    "GraphQLErrorLocation": {
      "title": "GraphQLErrorLocation",
      "type": "object",
      "properties": {
        "line": {
          "type": "integer"
        },
        "column": {
          "type": "integer"
        }
      },
      "required": [
        "line",
        "column"
      ],
      "x-annotation-package": "GraphQL"
    },
    "GraphQLRequest": {
      "title": "GraphQLRequest",
      "type": "object",
      "properties": {
        "query": {
          "type": "string"
        },
        "operationName": {
          "type": "string"
        },
        "variables": {
          "$ref": "#/definitions/GraphQLVariablesMap"
        }
      },
      "required": [
        "query"
      ],
      "x-annotation-package": "GraphQL"
    },
    "GraphQLResponse": {
      "title": "GraphQLResponse",
      "type": "object",
      "properties": {
        "data": {
          "type": "string"
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GraphQLError"
          }
        }
      },
      "x-annotation-package": "GraphQL"
    },
    "GraphQLVariablesMap": {
      "title": "GraphQLVariablesMap",
      "type": "object",
      "additionalProperties": {
        "type": "string"
      },
      "x-annotation-package": "GraphQL"
    },
    "InventoryEntry": {
      "title": "InventoryEntry",
      "allOf": [
        {
          "$ref": "#/definitions/BaseResource"
        },
        {
          "properties": {
            "id": {
              "description": "The unique ID of the inventory entry.",
              "type": "string",
              "x-annotation-identifier": true
            },
            "version": {
              "format": "int64",
              "type": "number"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            },
            "lastModifiedAt": {
              "type": "string",
              "format": "date-time"
            },
            "lastModifiedBy": {
              "description": "Present on resources updated after 1/02/2019 except for events not tracked.",
              "$ref": "#/definitions/LastModifiedBy"
            },
            "createdBy": {
              "description": "Present on resources created after 1/02/2019 except for events not tracked.",
              "$ref": "#/definitions/CreatedBy"
            },
            "sku": {
              "type": "string"
            },
            "supplyChannel": {
              "description": "Optional connection to a particular supplier.",
              "$ref": "#/definitions/ChannelResourceIdentifier"
            },
            "quantityOnStock": {
              "format": "int64",
              "description": "Overall amount of stock.\n(available + reserved)",
              "type": "number"
            },
            "availableQuantity": {
              "format": "int64",
              "description": "Available amount of stock.\n(available means: `quantityOnStock` - reserved quantity)",
              "type": "number"
            },
            "restockableInDays": {
              "format": "int64",
              "description": "The time period in days, that tells how often this inventory entry is restocked.",
              "type": "number"
            },
            "expectedDelivery": {
              "description": "The date and time of the next restock.",
              "type": "string",
              "format": "date-time"
            },
            "custom": {
              "$ref": "#/definitions/CustomFields"
            }
          },
          "required": [
            "id",
            "version",
            "createdAt",
            "lastModifiedAt",
            "sku",
            "quantityOnStock",
            "availableQuantity"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Inventory",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-inventory.html#inventoryentry",
      "x-annotation-updateType": "InventoryEntryUpdate",
      "x-annotation-actionType": "InventoryEntryUpdateAction"
    },
    "InventoryEntryDraft": {
      "title": "InventoryEntryDraft",
      "type": "object",
      "properties": {
        "sku": {
          "type": "string"
        },
        "supplyChannel": {
          "$ref": "#/definitions/ChannelResourceIdentifier"
        },
        "quantityOnStock": {
          "format": "int64",
          "type": "number"
        },
        "restockableInDays": {
          "format": "int64",
          "type": "number"
        },
        "expectedDelivery": {
          "type": "string",
          "format": "date-time"
        },
        "custom": {
          "description": "The custom fields.",
          "$ref": "#/definitions/CustomFieldsDraft"
        }
      },
      "required": [
        "sku",
        "quantityOnStock"
      ],
      "x-annotation-package": "Inventory",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-inventory.html#inventoryentrydraft"
    },
    "InventoryEntryReference": {
      "title": "InventoryEntryReference",
      "allOf": [
        {
          "$ref": "#/definitions/Reference"
        },
        {
          "properties": {
            "obj": {
              "$ref": "#/definitions/InventoryEntry"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Inventory"
    },
    "InventoryEntryResourceIdentifier": {
      "title": "InventoryEntryResourceIdentifier",
      "$ref": "#/definitions/ResourceIdentifier",
      "x-annotation-package": "Inventory"
    },
    "InventoryEntryUpdate": {
      "title": "InventoryEntryUpdate",
      "type": "object",
      "properties": {
        "version": {
          "format": "int64",
          "type": "number"
        },
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InventoryEntryUpdateAction"
          }
        }
      },
      "required": [
        "version",
        "actions"
      ],
      "x-annotation-package": "Inventory"
    },
    "InventoryEntryUpdateAction": {
      "title": "InventoryEntryUpdateAction",
      "discriminator": "action",
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        }
      },
      "required": [
        "action"
      ],
      "x-annotation-package": "Inventory"
    },
    "InventoryPagedQueryResponse": {
      "title": "InventoryPagedQueryResponse",
      "type": "object",
      "properties": {
        "limit": {
          "format": "int64",
          "type": "number"
        },
        "count": {
          "format": "int64",
          "type": "number"
        },
        "total": {
          "format": "int64",
          "type": "number"
        },
        "offset": {
          "format": "int64",
          "type": "number"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InventoryEntry"
          }
        }
      },
      "required": [
        "limit",
        "count",
        "offset",
        "results"
      ],
      "x-annotation-package": "Inventory"
    },
    "InventoryEntryAddQuantityAction": {
      "title": "InventoryEntryAddQuantityAction",
      "allOf": [
        {
          "$ref": "#/definitions/InventoryEntryUpdateAction"
        },
        {
          "properties": {
            "quantity": {
              "format": "int64",
              "type": "number"
            }
          },
          "required": [
            "quantity"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Inventory",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-inventory.html#add-quantity",
      "x-annotation-postman-example": null
    },
    "InventoryEntryChangeQuantityAction": {
      "title": "InventoryEntryChangeQuantityAction",
      "allOf": [
        {
          "$ref": "#/definitions/InventoryEntryUpdateAction"
        },
        {
          "properties": {
            "quantity": {
              "format": "int64",
              "type": "number"
            }
          },
          "required": [
            "quantity"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Inventory",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-inventory.html#change-quantity",
      "x-annotation-postman-example": null
    },
    "InventoryEntryRemoveQuantityAction": {
      "title": "InventoryEntryRemoveQuantityAction",
      "allOf": [
        {
          "$ref": "#/definitions/InventoryEntryUpdateAction"
        },
        {
          "properties": {
            "quantity": {
              "format": "int64",
              "type": "number"
            }
          },
          "required": [
            "quantity"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Inventory",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-inventory.html#remove-quantity",
      "x-annotation-postman-example": null
    },
    "InventoryEntrySetCustomFieldAction": {
      "title": "InventoryEntrySetCustomFieldAction",
      "allOf": [
        {
          "$ref": "#/definitions/InventoryEntryUpdateAction"
        },
        {
          "properties": {
            "name": {
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Inventory",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-inventory.html#set-customfield",
      "x-annotation-postman-example": null
    },
    "InventoryEntrySetCustomTypeAction": {
      "title": "InventoryEntrySetCustomTypeAction",
      "allOf": [
        {
          "$ref": "#/definitions/InventoryEntryUpdateAction"
        },
        {
          "properties": {
            "type": {
              "description": "If absent, the custom type and any existing CustomFields are removed.",
              "$ref": "#/definitions/TypeResourceIdentifier"
            },
            "fields": {
              "description": "A valid JSON object, based on the FieldDefinitions of the Type.\nSets the custom fields to this value.",
              "$ref": "#/definitions/FieldContainer"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Inventory",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-inventory.html#set-custom-type",
      "x-annotation-postman-example": null
    },
    "InventoryEntrySetExpectedDeliveryAction": {
      "title": "InventoryEntrySetExpectedDeliveryAction",
      "allOf": [
        {
          "$ref": "#/definitions/InventoryEntryUpdateAction"
        },
        {
          "properties": {
            "expectedDelivery": {
              "type": "string",
              "format": "date-time"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Inventory",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-inventory.html#set-expecteddelivery",
      "x-annotation-postman-example": null
    },
    "InventoryEntrySetRestockableInDaysAction": {
      "title": "InventoryEntrySetRestockableInDaysAction",
      "allOf": [
        {
          "$ref": "#/definitions/InventoryEntryUpdateAction"
        },
        {
          "properties": {
            "restockableInDays": {
              "format": "int64",
              "type": "number"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Inventory",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-inventory.html#set-restockableindays",
      "x-annotation-postman-example": null
    },
    "InventoryEntrySetSupplyChannelAction": {
      "title": "InventoryEntrySetSupplyChannelAction",
      "allOf": [
        {
          "$ref": "#/definitions/InventoryEntryUpdateAction"
        },
        {
          "properties": {
            "supplyChannel": {
              "description": "If absent, the supply channel is removed.\nThis action will fail if an entry with the combination of sku and supplyChannel already exists.",
              "$ref": "#/definitions/ChannelResourceIdentifier"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Inventory",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-inventory.html#set-supplychannel",
      "x-annotation-postman-example": null
    },
    "MyCart": {
      "title": "MyCart",
      "allOf": [
        {
          "$ref": "#/definitions/BaseResource"
        },
        {
          "properties": {
            "id": {
              "type": "string",
              "x-annotation-identifier": true
            },
            "version": {
              "format": "int64",
              "type": "number"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            },
            "lastModifiedAt": {
              "type": "string",
              "format": "date-time"
            },
            "lastModifiedBy": {
              "$ref": "#/definitions/LastModifiedBy"
            },
            "createdBy": {
              "$ref": "#/definitions/CreatedBy"
            },
            "customerId": {
              "type": "string"
            },
            "customerEmail": {
              "type": "string"
            },
            "anonymousId": {
              "type": "string"
            },
            "store": {
              "$ref": "#/definitions/StoreKeyReference"
            },
            "lineItems": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LineItem"
              }
            },
            "customLineItems": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomLineItem"
              }
            },
            "totalPrice": {
              "$ref": "#/definitions/TypedMoney"
            },
            "taxedPrice": {
              "$ref": "#/definitions/TaxedPrice"
            },
            "cartState": {
              "$ref": "#/definitions/CartState"
            },
            "shippingAddress": {
              "$ref": "#/definitions/Address"
            },
            "billingAddress": {
              "$ref": "#/definitions/Address"
            },
            "inventoryMode": {
              "$ref": "#/definitions/InventoryMode"
            },
            "taxMode": {
              "$ref": "#/definitions/TaxMode"
            },
            "taxRoundingMode": {
              "$ref": "#/definitions/RoundingMode"
            },
            "taxCalculationMode": {
              "$ref": "#/definitions/TaxCalculationMode"
            },
            "customerGroup": {
              "$ref": "#/definitions/CustomerGroupReference"
            },
            "country": {
              "$ref": "#/definitions/CountryCode"
            },
            "shippingInfo": {
              "$ref": "#/definitions/ShippingInfo"
            },
            "discountCodes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DiscountCodeInfo"
              }
            },
            "custom": {
              "$ref": "#/definitions/CustomFields"
            },
            "paymentInfo": {
              "$ref": "#/definitions/PaymentInfo"
            },
            "locale": {
              "type": "string"
            },
            "deleteDaysAfterLastModification": {
              "type": "integer"
            },
            "refusedGifts": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CartDiscountReference"
              }
            },
            "origin": {
              "$ref": "#/definitions/CartOrigin"
            },
            "shippingRateInput": {
              "$ref": "#/definitions/ShippingRateInput"
            },
            "itemShippingAddresses": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Address"
              }
            }
          },
          "required": [
            "id",
            "version",
            "createdAt",
            "lastModifiedAt",
            "lineItems",
            "customLineItems",
            "totalPrice",
            "cartState",
            "taxMode",
            "taxRoundingMode",
            "taxCalculationMode",
            "refusedGifts",
            "origin"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-me-carts#my-carts",
      "x-annotation-updateType": "MyCartUpdate",
      "x-annotation-actionType": "MyCartUpdateAction"
    },
    "MyCartDraft": {
      "title": "MyCartDraft",
      "type": "object",
      "properties": {
        "currency": {
          "description": "A three-digit currency code as per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).",
          "$ref": "#/definitions/CurrencyCode"
        },
        "customerEmail": {
          "type": "string"
        },
        "country": {
          "description": "A two-digit country code as per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).",
          "type": "string"
        },
        "inventoryMode": {
          "description": "Default inventory mode is `None`.",
          "$ref": "#/definitions/InventoryMode"
        },
        "lineItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MyLineItemDraft"
          }
        },
        "shippingAddress": {
          "$ref": "#/definitions/Address"
        },
        "billingAddress": {
          "$ref": "#/definitions/Address"
        },
        "shippingMethod": {
          "$ref": "#/definitions/ShippingMethodResourceIdentifier"
        },
        "custom": {
          "description": "The custom fields.",
          "$ref": "#/definitions/CustomFieldsDraft"
        },
        "locale": {
          "type": "string"
        },
        "taxMode": {
          "description": "The `TaxMode` `Disabled` can not be set on the My Carts endpoint.",
          "$ref": "#/definitions/TaxMode"
        },
        "deleteDaysAfterLastModification": {
          "format": "int64",
          "description": "The cart will be deleted automatically if it hasn't been modified for the specified amount of days and it is in the `Active` CartState.\nIf a ChangeSubscription for carts exists, a `ResourceDeleted` notification will be sent.",
          "type": "number"
        },
        "itemShippingAddresses": {
          "description": "Contains addresses for orders with multiple shipping addresses.\nEach address must contain a key which is unique in this cart.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Address"
          }
        }
      },
      "required": [
        "currency"
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-me-carts.html#mycartdraft"
    },
    "MyCartUpdateAction": {
      "title": "MyCartUpdateAction",
      "discriminator": "action",
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        }
      },
      "required": [
        "action"
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-me-carts#update-actions"
    },
    "MyCustomer": {
      "title": "MyCustomer",
      "allOf": [
        {
          "$ref": "#/definitions/BaseResource"
        },
        {
          "properties": {
            "id": {
              "type": "string",
              "x-annotation-identifier": true
            },
            "version": {
              "format": "int64",
              "type": "number"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            },
            "lastModifiedAt": {
              "type": "string",
              "format": "date-time"
            },
            "lastModifiedBy": {
              "$ref": "#/definitions/LastModifiedBy"
            },
            "createdBy": {
              "$ref": "#/definitions/CreatedBy"
            },
            "customerNumber": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "password": {
              "type": "string"
            },
            "firstName": {
              "type": "string"
            },
            "lastName": {
              "type": "string"
            },
            "middleName": {
              "type": "string"
            },
            "title": {
              "type": "string"
            },
            "dateOfBirth": {
              "type": "string",
              "format": "date"
            },
            "companyName": {
              "type": "string"
            },
            "vatId": {
              "type": "string"
            },
            "addresses": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Address"
              }
            },
            "defaultShippingAddressId": {
              "type": "string"
            },
            "shippingAddressIds": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "defaultBillingAddressId": {
              "type": "string"
            },
            "billingAddressIds": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "isEmailVerified": {
              "type": "boolean"
            },
            "externalId": {
              "type": "string"
            },
            "customerGroup": {
              "$ref": "#/definitions/CustomerGroupReference"
            },
            "custom": {
              "$ref": "#/definitions/CustomFields"
            },
            "locale": {
              "type": "string"
            },
            "salutation": {
              "type": "string"
            },
            "key": {
              "type": "string"
            },
            "stores": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/StoreKeyReference"
              }
            }
          },
          "required": [
            "id",
            "version",
            "createdAt",
            "lastModifiedAt",
            "email",
            "password",
            "addresses",
            "isEmailVerified"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-customers.html#customer",
      "x-annotation-updateType": "MyCustomerUpdate",
      "x-annotation-actionType": "MyCustomerUpdateAction"
    },
    "MyCustomerDraft": {
      "title": "MyCustomerDraft",
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "middleName": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "dateOfBirth": {
          "type": "string",
          "format": "date"
        },
        "companyName": {
          "type": "string"
        },
        "vatId": {
          "type": "string"
        },
        "addresses": {
          "description": "Sets the ID of each address to be unique in the addresses list.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Address"
          }
        },
        "defaultShippingAddress": {
          "format": "int64",
          "description": "The index of the address in the addresses array.\nThe `defaultShippingAddressId` of the customer will be set to the ID of that address.",
          "type": "number"
        },
        "defaultBillingAddress": {
          "format": "int64",
          "description": "The index of the address in the addresses array.\nThe `defaultBillingAddressId` of the customer will be set to the ID of that address.",
          "type": "number"
        },
        "custom": {
          "description": "The custom fields.",
          "$ref": "#/definitions/CustomFields"
        },
        "locale": {
          "type": "string"
        },
        "stores": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StoreResourceIdentifier"
          }
        }
      },
      "required": [
        "email",
        "password"
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-me-profile.html#mycustomerdraft"
    },
    "MyCustomerUpdateAction": {
      "title": "MyCustomerUpdateAction",
      "discriminator": "action",
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        }
      },
      "required": [
        "action"
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-me-profile#update-actions"
    },
    "MyLineItemDraft": {
      "title": "MyLineItemDraft",
      "type": "object",
      "properties": {
        "productId": {
          "type": "string"
        },
        "variantId": {
          "format": "int64",
          "type": "number"
        },
        "quantity": {
          "type": "number"
        },
        "supplyChannel": {
          "description": "By providing supply channel information, you can unique identify\ninventory entries that should be reserved.\nThe provided channel should have the InventorySupply role.",
          "$ref": "#/definitions/ChannelResourceIdentifier"
        },
        "distributionChannel": {
          "description": "The channel is used to select a ProductPrice.\nThe provided channel should have the ProductDistribution role.",
          "$ref": "#/definitions/ChannelResourceIdentifier"
        },
        "custom": {
          "description": "The custom fields.",
          "$ref": "#/definitions/CustomFieldsDraft"
        },
        "shippingDetails": {
          "description": "Container for line item specific address(es).",
          "$ref": "#/definitions/ItemShippingDetailsDraft"
        },
        "sku": {
          "type": "string"
        }
      },
      "required": [
        "productId",
        "variantId",
        "quantity"
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-me-carts.html#mylineitemdraft"
    },
    "MyOrder": {
      "title": "MyOrder",
      "allOf": [
        {
          "$ref": "#/definitions/BaseResource"
        },
        {
          "properties": {
            "id": {
              "type": "string",
              "x-annotation-identifier": true
            },
            "version": {
              "format": "int64",
              "type": "number"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            },
            "lastModifiedAt": {
              "type": "string",
              "format": "date-time"
            },
            "lastModifiedBy": {
              "$ref": "#/definitions/LastModifiedBy"
            },
            "createdBy": {
              "$ref": "#/definitions/CreatedBy"
            },
            "completedAt": {
              "type": "string",
              "format": "date-time"
            },
            "orderNumber": {
              "type": "string"
            },
            "customerId": {
              "type": "string"
            },
            "customerEmail": {
              "type": "string"
            },
            "anonymousId": {
              "type": "string"
            },
            "store": {
              "$ref": "#/definitions/StoreKeyReference"
            },
            "lineItems": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LineItem"
              }
            },
            "customLineItems": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomLineItem"
              }
            },
            "totalPrice": {
              "$ref": "#/definitions/TypedMoney"
            },
            "taxedPrice": {
              "$ref": "#/definitions/TaxedPrice"
            },
            "shippingAddress": {
              "$ref": "#/definitions/Address"
            },
            "billingAddress": {
              "$ref": "#/definitions/Address"
            },
            "taxMode": {
              "$ref": "#/definitions/TaxMode"
            },
            "taxRoundingMode": {
              "$ref": "#/definitions/RoundingMode"
            },
            "customerGroup": {
              "$ref": "#/definitions/CustomerGroupReference"
            },
            "country": {
              "type": "string"
            },
            "orderState": {
              "$ref": "#/definitions/OrderState"
            },
            "state": {
              "$ref": "#/definitions/StateReference"
            },
            "shipmentState": {
              "$ref": "#/definitions/ShipmentState"
            },
            "paymentState": {
              "$ref": "#/definitions/PaymentState"
            },
            "shippingInfo": {
              "$ref": "#/definitions/ShippingInfo"
            },
            "syncInfo": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SyncInfo"
              }
            },
            "returnInfo": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ReturnInfo"
              }
            },
            "discountCodes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DiscountCodeInfo"
              }
            },
            "lastMessageSequenceNumber": {
              "format": "int64",
              "type": "number"
            },
            "cart": {
              "$ref": "#/definitions/CartReference"
            },
            "custom": {
              "$ref": "#/definitions/CustomFields"
            },
            "paymentInfo": {
              "$ref": "#/definitions/PaymentInfo"
            },
            "locale": {
              "type": "string"
            },
            "inventoryMode": {
              "$ref": "#/definitions/InventoryMode"
            },
            "origin": {
              "$ref": "#/definitions/CartOrigin"
            },
            "taxCalculationMode": {
              "$ref": "#/definitions/TaxCalculationMode"
            },
            "shippingRateInput": {
              "$ref": "#/definitions/ShippingRateInput"
            },
            "itemShippingAddresses": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Address"
              }
            },
            "refusedGifts": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CartDiscountReference"
              }
            }
          },
          "required": [
            "id",
            "version",
            "createdAt",
            "lastModifiedAt",
            "lineItems",
            "customLineItems",
            "totalPrice",
            "orderState",
            "syncInfo",
            "lastMessageSequenceNumber",
            "origin",
            "refusedGifts"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-orders.html#order"
    },
    "MyOrderFromCartDraft": {
      "title": "MyOrderFromCartDraft",
      "type": "object",
      "properties": {
        "id": {
          "description": "The unique ID of the cart from which an order is created.",
          "type": "string"
        },
        "version": {
          "format": "int64",
          "type": "number"
        }
      },
      "required": [
        "id",
        "version"
      ],
      "x-annotation-package": "Me"
    },
    "MyPayment": {
      "title": "MyPayment",
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "x-annotation-identifier": true
        },
        "version": {
          "format": "int64",
          "type": "number"
        },
        "customer": {
          "description": "A reference to the customer this payment belongs to.",
          "$ref": "#/definitions/CustomerReference"
        },
        "anonymousId": {
          "description": "Identifies payments belonging to an anonymous session (the customer has not signed up/in yet).",
          "type": "string"
        },
        "amountPlanned": {
          "description": "How much money this payment intends to receive from the customer.\nThe value usually matches the cart or order gross total.",
          "$ref": "#/definitions/TypedMoney"
        },
        "paymentMethodInfo": {
          "$ref": "#/definitions/PaymentMethodInfo"
        },
        "transactions": {
          "description": "A list of financial transactions of different TransactionTypes\nwith different TransactionStates.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Transaction"
          }
        },
        "custom": {
          "$ref": "#/definitions/CustomFields"
        }
      },
      "required": [
        "id",
        "version",
        "amountPlanned",
        "paymentMethodInfo",
        "transactions"
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-me-payments#mypayment",
      "x-annotation-updateType": "MyPaymentUpdate",
      "x-annotation-actionType": "MyPaymentUpdateAction"
    },
    "MyPaymentDraft": {
      "title": "MyPaymentDraft",
      "type": "object",
      "properties": {
        "amountPlanned": {
          "description": "How much money this payment intends to receive from the customer.\nThe value usually matches the cart or order gross total.",
          "$ref": "#/definitions/Money"
        },
        "paymentMethodInfo": {
          "$ref": "#/definitions/PaymentMethodInfo"
        },
        "custom": {
          "$ref": "#/definitions/CustomFieldsDraft"
        },
        "transaction": {
          "description": "A list of financial transactions of the `Authorization` or `Charge`\nTransactionTypes.",
          "$ref": "#/definitions/MyTransactionDraft"
        }
      },
      "required": [
        "amountPlanned"
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-me-payments#mypaymentdraft"
    },
    "MyPaymentPagedQueryResponse": {
      "title": "MyPaymentPagedQueryResponse",
      "type": "object",
      "properties": {
        "limit": {
          "format": "int64",
          "type": "number"
        },
        "count": {
          "format": "int64",
          "type": "number"
        },
        "total": {
          "format": "int64",
          "type": "number"
        },
        "offset": {
          "format": "int64",
          "type": "number"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MyPayment"
          }
        }
      },
      "required": [
        "limit",
        "count",
        "offset",
        "results"
      ],
      "x-annotation-package": "Me"
    },
    "MyPaymentUpdate": {
      "title": "MyPaymentUpdate",
      "type": "object",
      "properties": {
        "version": {
          "format": "int64",
          "type": "number"
        },
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MyPaymentUpdateAction"
          }
        }
      },
      "required": [
        "version",
        "actions"
      ],
      "x-annotation-package": "Me"
    },
    "MyPaymentUpdateAction": {
      "title": "MyPaymentUpdateAction",
      "discriminator": "action",
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        }
      },
      "required": [
        "action"
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-me-payments#update-actions"
    },
    "MyShoppingList": {
      "title": "MyShoppingList",
      "allOf": [
        {
          "$ref": "#/definitions/BaseResource"
        },
        {
          "properties": {
            "id": {
              "type": "string",
              "x-annotation-identifier": true
            },
            "version": {
              "format": "int64",
              "type": "number"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            },
            "lastModifiedAt": {
              "type": "string",
              "format": "date-time"
            },
            "lastModifiedBy": {
              "$ref": "#/definitions/LastModifiedBy"
            },
            "createdBy": {
              "$ref": "#/definitions/CreatedBy"
            },
            "custom": {
              "$ref": "#/definitions/CustomFields"
            },
            "customer": {
              "$ref": "#/definitions/CustomerReference"
            },
            "deleteDaysAfterLastModification": {
              "format": "int64",
              "type": "number"
            },
            "description": {
              "$ref": "#/definitions/LocalizedString"
            },
            "key": {
              "type": "string"
            },
            "lineItems": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ShoppingListLineItem"
              }
            },
            "name": {
              "$ref": "#/definitions/LocalizedString"
            },
            "slug": {
              "$ref": "#/definitions/LocalizedString"
            },
            "textLineItems": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TextLineItem"
              }
            },
            "anonymousId": {
              "type": "string"
            }
          },
          "required": [
            "id",
            "version",
            "createdAt",
            "lastModifiedAt",
            "name"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "ShoppingList",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-me-shoppingLists#my-shopping-lists",
      "x-annotation-updateType": "MyShoppingListUpdate",
      "x-annotation-actionType": "MyShoppingListUpdateAction"
    },
    "MyShoppingListDraft": {
      "title": "MyShoppingListDraft",
      "type": "object",
      "properties": {
        "name": {
          "$ref": "#/definitions/LocalizedString"
        },
        "description": {
          "$ref": "#/definitions/LocalizedString"
        },
        "lineItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ShoppingListLineItemDraft"
          }
        },
        "textLineItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TextLineItemDraft"
          }
        },
        "custom": {
          "description": "The custom fields.",
          "$ref": "#/definitions/CustomFieldsDraft"
        },
        "deleteDaysAfterLastModification": {
          "format": "int64",
          "description": "The shopping list will be deleted automatically if it hasn't been modified for the specified amount of days.",
          "type": "number"
        }
      },
      "required": [
        "name"
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-me-shoppingLists#my-shopping-lists"
    },
    "MyShoppingListUpdate": {
      "title": "MyShoppingListUpdate",
      "type": "object",
      "properties": {
        "version": {
          "format": "int64",
          "type": "number"
        },
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MyShoppingListUpdateAction"
          }
        }
      },
      "required": [
        "version",
        "actions"
      ],
      "x-annotation-package": "Me"
    },
    "MyShoppingListUpdateAction": {
      "title": "MyShoppingListUpdateAction",
      "discriminator": "action",
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        }
      },
      "required": [
        "action"
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-me-shoppingLists#update-actions"
    },
    "MyTransactionDraft": {
      "title": "MyTransactionDraft",
      "type": "object",
      "properties": {
        "timestamp": {
          "description": "The time at which the transaction took place.",
          "type": "string",
          "format": "date-time"
        },
        "type": {
          "description": "The type of this transaction.\nOnly the `Authorization` or `Charge`\nTransactionTypes are allowed here.",
          "$ref": "#/definitions/TransactionType"
        },
        "amount": {
          "$ref": "#/definitions/Money"
        },
        "interactionId": {
          "description": "The identifier that is used by the interface that managed the transaction (usually the PSP).\nIf a matching interaction was logged in the interfaceInteractions array,\nthe corresponding interaction should be findable with this ID.\nThe `state` is set to the `Initial` TransactionState.",
          "type": "string"
        }
      },
      "required": [
        "type",
        "amount"
      ],
      "x-annotation-package": "Me"
    },
    "MyCartAddDiscountCodeAction": {
      "title": "MyCartAddDiscountCodeAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyCartUpdateAction"
        },
        {
          "properties": {
            "code": {
              "type": "string"
            }
          },
          "required": [
            "code"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-me-carts#add-discountcode"
    },
    "MyCartAddItemShippingAddressAction": {
      "title": "MyCartAddItemShippingAddressAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyCartUpdateAction"
        },
        {
          "properties": {
            "address": {
              "$ref": "#/definitions/Address"
            }
          },
          "required": [
            "address"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-me-carts#add-itemshippingaddress"
    },
    "MyCartAddLineItemAction": {
      "title": "MyCartAddLineItemAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyCartUpdateAction"
        },
        {
          "properties": {
            "custom": {
              "$ref": "#/definitions/CustomFieldsDraft"
            },
            "distributionChannel": {
              "$ref": "#/definitions/ChannelResourceIdentifier"
            },
            "externalTaxRate": {
              "$ref": "#/definitions/ExternalTaxRateDraft"
            },
            "productId": {
              "type": "string"
            },
            "variantId": {
              "format": "int64",
              "type": "number"
            },
            "sku": {
              "type": "string"
            },
            "quantity": {
              "type": "number"
            },
            "supplyChannel": {
              "$ref": "#/definitions/ChannelResourceIdentifier"
            },
            "externalPrice": {
              "$ref": "#/definitions/Money"
            },
            "externalTotalPrice": {
              "$ref": "#/definitions/ExternalLineItemTotalPrice"
            },
            "shippingDetails": {
              "$ref": "#/definitions/ItemShippingDetailsDraft"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-me-carts#add-lineitem"
    },
    "MyCartAddPaymentAction": {
      "title": "MyCartAddPaymentAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyCartUpdateAction"
        },
        {
          "properties": {
            "payment": {
              "$ref": "#/definitions/PaymentResourceIdentifier"
            }
          },
          "required": [
            "payment"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-me-carts#add-payment"
    },
    "MyCartApplyDeltaToLineItemShippingDetailsTargetsAction": {
      "title": "MyCartApplyDeltaToLineItemShippingDetailsTargetsAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyCartUpdateAction"
        },
        {
          "properties": {
            "lineItemId": {
              "type": "string"
            },
            "targetsDelta": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ItemShippingTarget"
              }
            }
          },
          "required": [
            "lineItemId",
            "targetsDelta"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-me-carts#apply-deltatolineitemshippingdetailstargets"
    },
    "MyCartChangeLineItemQuantityAction": {
      "title": "MyCartChangeLineItemQuantityAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyCartUpdateAction"
        },
        {
          "properties": {
            "lineItemId": {
              "type": "string"
            },
            "quantity": {
              "type": "number"
            },
            "externalPrice": {
              "$ref": "#/definitions/Money"
            },
            "externalTotalPrice": {
              "$ref": "#/definitions/ExternalLineItemTotalPrice"
            }
          },
          "required": [
            "lineItemId",
            "quantity"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-me-carts#change-lineitem-quantity"
    },
    "MyCartChangeTaxModeAction": {
      "title": "MyCartChangeTaxModeAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyCartUpdateAction"
        },
        {
          "properties": {
            "taxMode": {
              "$ref": "#/definitions/TaxMode"
            }
          },
          "required": [
            "taxMode"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-me-carts#change-taxmode"
    },
    "MyCartRecalculateAction": {
      "title": "MyCartRecalculateAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyCartUpdateAction"
        },
        {
          "properties": {
            "updateProductData": {
              "type": "boolean"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-me-carts#recalculate"
    },
    "MyCartRemoveDiscountCodeAction": {
      "title": "MyCartRemoveDiscountCodeAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyCartUpdateAction"
        },
        {
          "properties": {
            "discountCode": {
              "$ref": "#/definitions/DiscountCodeReference"
            }
          },
          "required": [
            "discountCode"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-me-carts#remove-discountcode"
    },
    "MyCartRemoveItemShippingAddressAction": {
      "title": "MyCartRemoveItemShippingAddressAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyCartUpdateAction"
        },
        {
          "properties": {
            "addressKey": {
              "type": "string"
            }
          },
          "required": [
            "addressKey"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-me-carts#remove-itemshippingaddress"
    },
    "MyCartRemoveLineItemAction": {
      "title": "MyCartRemoveLineItemAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyCartUpdateAction"
        },
        {
          "properties": {
            "lineItemId": {
              "type": "string"
            },
            "quantity": {
              "type": "number"
            },
            "externalPrice": {
              "$ref": "#/definitions/Money"
            },
            "externalTotalPrice": {
              "$ref": "#/definitions/ExternalLineItemTotalPrice"
            },
            "shippingDetailsToRemove": {
              "$ref": "#/definitions/ItemShippingDetailsDraft"
            }
          },
          "required": [
            "lineItemId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-me-carts#remove-lineitem"
    },
    "MyCartRemovePaymentAction": {
      "title": "MyCartRemovePaymentAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyCartUpdateAction"
        },
        {
          "properties": {
            "payment": {
              "$ref": "#/definitions/PaymentResourceIdentifier"
            }
          },
          "required": [
            "payment"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-me-carts#remove-payment"
    },
    "MyCartSetBillingAddressAction": {
      "title": "MyCartSetBillingAddressAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyCartUpdateAction"
        },
        {
          "properties": {
            "address": {
              "$ref": "#/definitions/Address"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-me-carts#set-billing-address"
    },
    "MyCartSetCountryAction": {
      "title": "MyCartSetCountryAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyCartUpdateAction"
        },
        {
          "properties": {
            "country": {
              "$ref": "#/definitions/CountryCode"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-me-carts#set-country"
    },
    "MyCartSetCustomFieldAction": {
      "title": "MyCartSetCustomFieldAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyCartUpdateAction"
        },
        {
          "properties": {
            "name": {
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-me-carts#set-customfield"
    },
    "MyCartSetCustomShippingMethodAction": {
      "title": "MyCartSetCustomShippingMethodAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyCartUpdateAction"
        },
        {
          "properties": {
            "shippingMethodName": {
              "type": "string"
            },
            "shippingRate": {
              "$ref": "#/definitions/ShippingRateDraft"
            },
            "taxCategory": {
              "$ref": "#/definitions/TaxCategoryResourceIdentifier"
            },
            "externalTaxRate": {
              "$ref": "#/definitions/ExternalTaxRateDraft"
            }
          },
          "required": [
            "shippingMethodName",
            "shippingRate"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-me-carts#set-custom-shipping-method"
    },
    "MyCartSetCustomTypeAction": {
      "title": "MyCartSetCustomTypeAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyCartUpdateAction"
        },
        {
          "properties": {
            "type": {
              "$ref": "#/definitions/TypeResourceIdentifier"
            },
            "fields": {
              "$ref": "#/definitions/FieldContainer"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-me-carts#set-custom-type"
    },
    "MyCartSetDeleteDaysAfterLastModificationAction": {
      "title": "MyCartSetDeleteDaysAfterLastModificationAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyCartUpdateAction"
        },
        {
          "properties": {
            "deleteDaysAfterLastModification": {
              "type": "integer"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-me-carts#set-deletedaysafterlastmodification-beta"
    },
    "MyCartSetLineItemCustomFieldAction": {
      "title": "MyCartSetLineItemCustomFieldAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyCartUpdateAction"
        },
        {
          "properties": {
            "lineItemId": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          },
          "required": [
            "lineItemId",
            "name"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-me-carts#set-lineitem-customfield"
    },
    "MyCartSetLineItemCustomTypeAction": {
      "title": "MyCartSetLineItemCustomTypeAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyCartUpdateAction"
        },
        {
          "properties": {
            "lineItemId": {
              "type": "string"
            },
            "type": {
              "$ref": "#/definitions/TypeResourceIdentifier"
            },
            "fields": {
              "$ref": "#/definitions/FieldContainer"
            }
          },
          "required": [
            "lineItemId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-me-carts#set-lineitem-custom-type"
    },
    "MyCartSetLineItemShippingDetailsAction": {
      "title": "MyCartSetLineItemShippingDetailsAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyCartUpdateAction"
        },
        {
          "properties": {
            "lineItemId": {
              "type": "string"
            },
            "shippingDetails": {
              "$ref": "#/definitions/ItemShippingDetailsDraft"
            }
          },
          "required": [
            "lineItemId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-me-carts#set-lineitemshippingdetails"
    },
    "MyCartSetLocaleAction": {
      "title": "MyCartSetLocaleAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyCartUpdateAction"
        },
        {
          "properties": {
            "locale": {
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-me-carts#set-locale"
    },
    "MyCartSetShippingAddressAction": {
      "title": "MyCartSetShippingAddressAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyCartUpdateAction"
        },
        {
          "properties": {
            "address": {
              "$ref": "#/definitions/Address"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-me-carts#set-shipping-address"
    },
    "MyCartSetShippingMethodAction": {
      "title": "MyCartSetShippingMethodAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyCartUpdateAction"
        },
        {
          "properties": {
            "shippingMethod": {
              "$ref": "#/definitions/ShippingMethodResourceIdentifier"
            },
            "externalTaxRate": {
              "$ref": "#/definitions/ExternalTaxRateDraft"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-me-carts#set-shipping-method"
    },
    "MyCartUpdateItemShippingAddressAction": {
      "title": "MyCartUpdateItemShippingAddressAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyCartUpdateAction"
        },
        {
          "properties": {
            "address": {
              "$ref": "#/definitions/Address"
            }
          },
          "required": [
            "address"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-me-carts#update-itemshippingaddress"
    },
    "MyCustomerAddAddressAction": {
      "title": "MyCustomerAddAddressAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyCustomerUpdateAction"
        },
        {
          "properties": {
            "address": {
              "$ref": "#/definitions/Address"
            }
          },
          "required": [
            "address"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-customers.html#add-address"
    },
    "MyCustomerAddBillingAddressIdAction": {
      "title": "MyCustomerAddBillingAddressIdAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyCustomerUpdateAction"
        },
        {
          "properties": {
            "addressId": {
              "type": "string"
            }
          },
          "required": [
            "addressId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-customers.html#add-billing-address-id"
    },
    "MyCustomerAddShippingAddressIdAction": {
      "title": "MyCustomerAddShippingAddressIdAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyCustomerUpdateAction"
        },
        {
          "properties": {
            "addressId": {
              "type": "string"
            }
          },
          "required": [
            "addressId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-customers.html#add-shipping-address-id"
    },
    "MyCustomerChangeAddressAction": {
      "title": "MyCustomerChangeAddressAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyCustomerUpdateAction"
        },
        {
          "properties": {
            "addressId": {
              "type": "string"
            },
            "address": {
              "$ref": "#/definitions/Address"
            }
          },
          "required": [
            "addressId",
            "address"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-customers.html#change-address"
    },
    "MyCustomerChangeEmailAction": {
      "title": "MyCustomerChangeEmailAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyCustomerUpdateAction"
        },
        {
          "properties": {
            "email": {
              "type": "string"
            }
          },
          "required": [
            "email"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-customers.html#change-email"
    },
    "MyCustomerRemoveAddressAction": {
      "title": "MyCustomerRemoveAddressAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyCustomerUpdateAction"
        },
        {
          "properties": {
            "addressId": {
              "type": "string"
            }
          },
          "required": [
            "addressId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-customers.html#remove-address"
    },
    "MyCustomerRemoveBillingAddressIdAction": {
      "title": "MyCustomerRemoveBillingAddressIdAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyCustomerUpdateAction"
        },
        {
          "properties": {
            "addressId": {
              "type": "string"
            }
          },
          "required": [
            "addressId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-customers.html#remove-billing-address-id"
    },
    "MyCustomerRemoveShippingAddressIdAction": {
      "title": "MyCustomerRemoveShippingAddressIdAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyCustomerUpdateAction"
        },
        {
          "properties": {
            "addressId": {
              "type": "string"
            }
          },
          "required": [
            "addressId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-customers.html#remove-shipping-address-id"
    },
    "MyCustomerSetCompanyNameAction": {
      "title": "MyCustomerSetCompanyNameAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyCustomerUpdateAction"
        },
        {
          "properties": {
            "companyName": {
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-customers.html#set-company-name"
    },
    "MyCustomerSetCustomFieldAction": {
      "title": "MyCustomerSetCustomFieldAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyCustomerUpdateAction"
        },
        {
          "properties": {
            "name": {
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-customers.html#set-customfield"
    },
    "MyCustomerSetCustomTypeAction": {
      "title": "MyCustomerSetCustomTypeAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyCustomerUpdateAction"
        },
        {
          "properties": {
            "type": {
              "$ref": "#/definitions/TypeResourceIdentifier"
            },
            "fields": {
              "$ref": "#/definitions/FieldContainer"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-customers.html#set-custom-type"
    },
    "MyCustomerSetDateOfBirthAction": {
      "title": "MyCustomerSetDateOfBirthAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyCustomerUpdateAction"
        },
        {
          "properties": {
            "dateOfBirth": {
              "type": "string",
              "format": "date"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-customers.html#set-date-of-birth"
    },
    "MyCustomerSetDefaultBillingAddressAction": {
      "title": "MyCustomerSetDefaultBillingAddressAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyCustomerUpdateAction"
        },
        {
          "properties": {
            "addressId": {
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-customers.html#set-default-billing-address"
    },
    "MyCustomerSetDefaultShippingAddressAction": {
      "title": "MyCustomerSetDefaultShippingAddressAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyCustomerUpdateAction"
        },
        {
          "properties": {
            "addressId": {
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-customers.html#set-default-shipping-address"
    },
    "MyCustomerSetFirstNameAction": {
      "title": "MyCustomerSetFirstNameAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyCustomerUpdateAction"
        },
        {
          "properties": {
            "firstName": {
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-customers.html#set-first-name"
    },
    "MyCustomerSetLastNameAction": {
      "title": "MyCustomerSetLastNameAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyCustomerUpdateAction"
        },
        {
          "properties": {
            "lastName": {
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-customers.html#set-last-name"
    },
    "MyCustomerSetLocaleAction": {
      "title": "MyCustomerSetLocaleAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyCustomerUpdateAction"
        },
        {
          "properties": {
            "locale": {
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-customers.html#set-locale"
    },
    "MyCustomerSetMiddleNameAction": {
      "title": "MyCustomerSetMiddleNameAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyCustomerUpdateAction"
        },
        {
          "properties": {
            "middleName": {
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-customers.html#set-middle-name"
    },
    "MyCustomerSetSalutationAction": {
      "title": "MyCustomerSetSalutationAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyCustomerUpdateAction"
        },
        {
          "properties": {
            "salutation": {
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-customers.html#set-salutation"
    },
    "MyCustomerSetTitleAction": {
      "title": "MyCustomerSetTitleAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyCustomerUpdateAction"
        },
        {
          "properties": {
            "title": {
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-customers.html#set-title"
    },
    "MyCustomerSetVatIdAction": {
      "title": "MyCustomerSetVatIdAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyCustomerUpdateAction"
        },
        {
          "properties": {
            "vatId": {
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-customers.html#set-vat-id"
    },
    "MyPaymentAddTransactionAction": {
      "title": "MyPaymentAddTransactionAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyPaymentUpdateAction"
        },
        {
          "properties": {
            "transaction": {
              "$ref": "#/definitions/TransactionDraft"
            }
          },
          "required": [
            "transaction"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-me-payments#add-transaction"
    },
    "MyPaymentChangeAmountPlannedAction": {
      "title": "MyPaymentChangeAmountPlannedAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyPaymentUpdateAction"
        },
        {
          "properties": {
            "amount": {
              "$ref": "#/definitions/Money"
            }
          },
          "required": [
            "amount"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-me-payments#change-amountplanned"
    },
    "MyPaymentSetCustomFieldAction": {
      "title": "MyPaymentSetCustomFieldAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyPaymentUpdateAction"
        },
        {
          "properties": {
            "name": {
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-me-payments#set-customfield"
    },
    "MyPaymentSetMethodInfoInterfaceAction": {
      "title": "MyPaymentSetMethodInfoInterfaceAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyPaymentUpdateAction"
        },
        {
          "properties": {
            "interface": {
              "type": "string"
            }
          },
          "required": [
            "interface"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-me-payments#set-methodinfointerface"
    },
    "MyPaymentSetMethodInfoMethodAction": {
      "title": "MyPaymentSetMethodInfoMethodAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyPaymentUpdateAction"
        },
        {
          "properties": {
            "method": {
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-me-payments#set-methodinfomethod"
    },
    "MyPaymentSetMethodInfoNameAction": {
      "title": "MyPaymentSetMethodInfoNameAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyPaymentUpdateAction"
        },
        {
          "properties": {
            "name": {
              "$ref": "#/definitions/LocalizedString"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-me-payments#set-methodinfoname"
    },
    "MyShoppingListAddLineItemAction": {
      "title": "MyShoppingListAddLineItemAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyShoppingListUpdateAction"
        },
        {
          "properties": {
            "sku": {
              "type": "string"
            },
            "productId": {
              "type": "string"
            },
            "variantId": {
              "format": "int64",
              "type": "number"
            },
            "quantity": {
              "format": "int64",
              "type": "number"
            },
            "addedAt": {
              "type": "string",
              "format": "date-time"
            },
            "custom": {
              "$ref": "#/definitions/CustomFieldsDraft"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-me-shoppingLists#add-lineitem"
    },
    "MyShoppingListAddTextLineItemAction": {
      "title": "MyShoppingListAddTextLineItemAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyShoppingListUpdateAction"
        },
        {
          "properties": {
            "name": {
              "$ref": "#/definitions/LocalizedString"
            },
            "description": {
              "$ref": "#/definitions/LocalizedString"
            },
            "quantity": {
              "format": "int64",
              "type": "number"
            },
            "addedAt": {
              "type": "string",
              "format": "date-time"
            },
            "custom": {
              "$ref": "#/definitions/CustomFieldsDraft"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-me-shoppingLists#add-textlineitem"
    },
    "MyShoppingListChangeLineItemQuantityAction": {
      "title": "MyShoppingListChangeLineItemQuantityAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyShoppingListUpdateAction"
        },
        {
          "properties": {
            "lineItemId": {
              "type": "string"
            },
            "quantity": {
              "format": "int64",
              "type": "number"
            }
          },
          "required": [
            "lineItemId",
            "quantity"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-me-shoppingLists#change-lineitem-quantity"
    },
    "MyShoppingListChangeLineItemsOrderAction": {
      "title": "MyShoppingListChangeLineItemsOrderAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyShoppingListUpdateAction"
        },
        {
          "properties": {
            "lineItemOrder": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "required": [
            "lineItemOrder"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-me-shoppingLists#change-lineitems-order"
    },
    "MyShoppingListChangeNameAction": {
      "title": "MyShoppingListChangeNameAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyShoppingListUpdateAction"
        },
        {
          "properties": {
            "name": {
              "$ref": "#/definitions/LocalizedString"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-me-shoppingLists#change-name"
    },
    "MyShoppingListChangeTextLineItemNameAction": {
      "title": "MyShoppingListChangeTextLineItemNameAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyShoppingListUpdateAction"
        },
        {
          "properties": {
            "textLineItemId": {
              "type": "string"
            },
            "name": {
              "$ref": "#/definitions/LocalizedString"
            }
          },
          "required": [
            "textLineItemId",
            "name"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-me-shoppingLists#change-textlineitem-name"
    },
    "MyShoppingListChangeTextLineItemQuantityAction": {
      "title": "MyShoppingListChangeTextLineItemQuantityAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyShoppingListUpdateAction"
        },
        {
          "properties": {
            "textLineItemId": {
              "type": "string"
            },
            "quantity": {
              "format": "int64",
              "type": "number"
            }
          },
          "required": [
            "textLineItemId",
            "quantity"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-me-shoppingLists#change-textlineitem-quantity"
    },
    "MyShoppingListChangeTextLineItemsOrderAction": {
      "title": "MyShoppingListChangeTextLineItemsOrderAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyShoppingListUpdateAction"
        },
        {
          "properties": {
            "textLineItemOrder": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "required": [
            "textLineItemOrder"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-me-shoppingLists#change-textlineitems-order"
    },
    "MyShoppingListRemoveLineItemAction": {
      "title": "MyShoppingListRemoveLineItemAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyShoppingListUpdateAction"
        },
        {
          "properties": {
            "lineItemId": {
              "type": "string"
            },
            "quantity": {
              "format": "int64",
              "type": "number"
            }
          },
          "required": [
            "lineItemId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-me-shoppingLists#remove-lineitem"
    },
    "MyShoppingListRemoveTextLineItemAction": {
      "title": "MyShoppingListRemoveTextLineItemAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyShoppingListUpdateAction"
        },
        {
          "properties": {
            "textLineItemId": {
              "type": "string"
            },
            "quantity": {
              "format": "int64",
              "type": "number"
            }
          },
          "required": [
            "textLineItemId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-me-shoppingLists#remove-textlineitem"
    },
    "MyShoppingListSetCustomFieldAction": {
      "title": "MyShoppingListSetCustomFieldAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyShoppingListUpdateAction"
        },
        {
          "properties": {
            "name": {
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-me-shoppingLists#set-customfield"
    },
    "MyShoppingListSetCustomTypeAction": {
      "title": "MyShoppingListSetCustomTypeAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyShoppingListUpdateAction"
        },
        {
          "properties": {
            "type": {
              "$ref": "#/definitions/TypeResourceIdentifier"
            },
            "fields": {
              "$ref": "#/definitions/FieldContainer"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-me-shoppingLists#set-custom-type"
    },
    "MyShoppingListSetDeleteDaysAfterLastModificationAction": {
      "title": "MyShoppingListSetDeleteDaysAfterLastModificationAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyShoppingListUpdateAction"
        },
        {
          "properties": {
            "deleteDaysAfterLastModification": {
              "format": "int64",
              "type": "number"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-me-shoppingLists#set-deletedaysafterlastmodification"
    },
    "MyShoppingListSetDescriptionAction": {
      "title": "MyShoppingListSetDescriptionAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyShoppingListUpdateAction"
        },
        {
          "properties": {
            "description": {
              "$ref": "#/definitions/LocalizedString"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-me-shoppingLists#set-description"
    },
    "MyShoppingListSetLineItemCustomFieldAction": {
      "title": "MyShoppingListSetLineItemCustomFieldAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyShoppingListUpdateAction"
        },
        {
          "properties": {
            "lineItemId": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          },
          "required": [
            "lineItemId",
            "name"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-me-shoppingLists#set-lineitem-customfield"
    },
    "MyShoppingListSetLineItemCustomTypeAction": {
      "title": "MyShoppingListSetLineItemCustomTypeAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyShoppingListUpdateAction"
        },
        {
          "properties": {
            "lineItemId": {
              "type": "string"
            },
            "type": {
              "$ref": "#/definitions/TypeResourceIdentifier"
            },
            "fields": {
              "$ref": "#/definitions/FieldContainer"
            }
          },
          "required": [
            "lineItemId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-me-shoppingLists#set-lineitem-custom-type"
    },
    "MyShoppingListSetTextLineItemCustomFieldAction": {
      "title": "MyShoppingListSetTextLineItemCustomFieldAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyShoppingListUpdateAction"
        },
        {
          "properties": {
            "textLineItemId": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          },
          "required": [
            "textLineItemId",
            "name"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-me-shoppingLists#set-textlineitem-customfield"
    },
    "MyShoppingListSetTextLineItemCustomTypeAction": {
      "title": "MyShoppingListSetTextLineItemCustomTypeAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyShoppingListUpdateAction"
        },
        {
          "properties": {
            "textLineItemId": {
              "type": "string"
            },
            "type": {
              "$ref": "#/definitions/TypeResourceIdentifier"
            },
            "fields": {
              "$ref": "#/definitions/FieldContainer"
            }
          },
          "required": [
            "textLineItemId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-me-shoppingLists#set-textlineitem-custom-type"
    },
    "MyShoppingListSetTextLineItemDescriptionAction": {
      "title": "MyShoppingListSetTextLineItemDescriptionAction",
      "allOf": [
        {
          "$ref": "#/definitions/MyShoppingListUpdateAction"
        },
        {
          "properties": {
            "textLineItemId": {
              "type": "string"
            },
            "description": {
              "$ref": "#/definitions/LocalizedString"
            }
          },
          "required": [
            "textLineItemId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Me",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-me-shoppingLists#set-textlineitem-description"
    },
    "CategoryCreatedMessage": {
      "title": "CategoryCreatedMessage",
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        },
        {
          "properties": {
            "category": {
              "$ref": "#/definitions/Category"
            }
          },
          "required": [
            "category"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#categorycreated-message"
    },
    "CategorySlugChangedMessage": {
      "title": "CategorySlugChangedMessage",
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        },
        {
          "properties": {
            "slug": {
              "$ref": "#/definitions/LocalizedString"
            }
          },
          "required": [
            "slug"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#categoryslugchanged-message"
    },
    "CustomLineItemStateTransitionMessage": {
      "title": "CustomLineItemStateTransitionMessage",
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        },
        {
          "properties": {
            "customLineItemId": {
              "type": "string"
            },
            "transitionDate": {
              "type": "string",
              "format": "date-time"
            },
            "quantity": {
              "format": "int64",
              "type": "number"
            },
            "fromState": {
              "$ref": "#/definitions/StateReference"
            },
            "toState": {
              "$ref": "#/definitions/StateReference"
            }
          },
          "required": [
            "customLineItemId",
            "transitionDate",
            "quantity",
            "fromState",
            "toState"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#customlineitemstatetransition-message"
    },
    "CustomerAddressAddedMessage": {
      "title": "CustomerAddressAddedMessage",
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        },
        {
          "properties": {
            "address": {
              "$ref": "#/definitions/Address"
            }
          },
          "required": [
            "address"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#customeraddressadded-message"
    },
    "CustomerAddressChangedMessage": {
      "title": "CustomerAddressChangedMessage",
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        },
        {
          "properties": {
            "address": {
              "$ref": "#/definitions/Address"
            }
          },
          "required": [
            "address"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#customeraddresschanged-message"
    },
    "CustomerAddressRemovedMessage": {
      "title": "CustomerAddressRemovedMessage",
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        },
        {
          "properties": {
            "address": {
              "$ref": "#/definitions/Address"
            }
          },
          "required": [
            "address"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#customeraddressremoved-message"
    },
    "CustomerCompanyNameSetMessage": {
      "title": "CustomerCompanyNameSetMessage",
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        },
        {
          "properties": {
            "companyName": {
              "type": "string"
            }
          },
          "required": [
            "companyName"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#customercompanynameset-message"
    },
    "CustomerCreatedMessage": {
      "title": "CustomerCreatedMessage",
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        },
        {
          "properties": {
            "customer": {
              "$ref": "#/definitions/Customer"
            }
          },
          "required": [
            "customer"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#customercreated-message"
    },
    "CustomerDateOfBirthSetMessage": {
      "title": "CustomerDateOfBirthSetMessage",
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        },
        {
          "properties": {
            "dateOfBirth": {
              "type": "string",
              "format": "date"
            }
          },
          "required": [
            "dateOfBirth"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#customerdateofbirthset-message"
    },
    "CustomerEmailChangedMessage": {
      "title": "CustomerEmailChangedMessage",
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        },
        {
          "properties": {
            "email": {
              "type": "string"
            }
          },
          "required": [
            "email"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#customeremailchanged-message"
    },
    "CustomerEmailVerifiedMessage": {
      "title": "CustomerEmailVerifiedMessage",
      "$ref": "#/definitions/Message",
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#customeremailverified-message"
    },
    "CustomerGroupSetMessage": {
      "title": "CustomerGroupSetMessage",
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        },
        {
          "properties": {
            "customerGroup": {
              "$ref": "#/definitions/CustomerGroupReference"
            }
          },
          "required": [
            "customerGroup"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#customergroupset-message"
    },
    "DeliveryAddedMessage": {
      "title": "DeliveryAddedMessage",
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        },
        {
          "properties": {
            "delivery": {
              "$ref": "#/definitions/Delivery"
            }
          },
          "required": [
            "delivery"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#deliveryadded-message"
    },
    "DeliveryAddressSetMessage": {
      "title": "DeliveryAddressSetMessage",
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        },
        {
          "properties": {
            "deliveryId": {
              "type": "string"
            },
            "address": {
              "$ref": "#/definitions/Address"
            },
            "oldAddress": {
              "$ref": "#/definitions/Address"
            }
          },
          "required": [
            "deliveryId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#deliveryaddressset-message"
    },
    "DeliveryItemsUpdatedMessage": {
      "title": "DeliveryItemsUpdatedMessage",
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        },
        {
          "properties": {
            "deliveryId": {
              "type": "string"
            },
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeliveryItem"
              }
            },
            "oldItems": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeliveryItem"
              }
            }
          },
          "required": [
            "deliveryId",
            "items",
            "oldItems"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message"
    },
    "DeliveryRemovedMessage": {
      "title": "DeliveryRemovedMessage",
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        },
        {
          "properties": {
            "delivery": {
              "$ref": "#/definitions/Delivery"
            }
          },
          "required": [
            "delivery"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message"
    },
    "InventoryEntryCreatedMessage": {
      "title": "InventoryEntryCreatedMessage",
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        },
        {
          "properties": {
            "inventoryEntry": {
              "$ref": "#/definitions/InventoryEntry"
            }
          },
          "required": [
            "inventoryEntry"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#inventoryentrycreated-message"
    },
    "InventoryEntryDeletedMessage": {
      "title": "InventoryEntryDeletedMessage",
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        },
        {
          "properties": {
            "sku": {
              "type": "string"
            },
            "supplyChannel": {
              "$ref": "#/definitions/ChannelReference"
            }
          },
          "required": [
            "sku",
            "supplyChannel"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#inventoryentrydeleted-message"
    },
    "InventoryEntryQuantitySetMessage": {
      "title": "InventoryEntryQuantitySetMessage",
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        },
        {
          "properties": {
            "oldQuantityOnStock": {
              "format": "int64",
              "type": "number"
            },
            "newQuantityOnStock": {
              "format": "int64",
              "type": "number"
            },
            "oldAvailableQuantity": {
              "format": "int64",
              "type": "number"
            },
            "newAvailableQuantity": {
              "format": "int64",
              "type": "number"
            }
          },
          "required": [
            "oldQuantityOnStock",
            "newQuantityOnStock",
            "oldAvailableQuantity",
            "newAvailableQuantity"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-message-types#inventoryentryquantityset-message"
    },
    "LineItemStateTransitionMessage": {
      "title": "LineItemStateTransitionMessage",
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        },
        {
          "properties": {
            "lineItemId": {
              "type": "string"
            },
            "transitionDate": {
              "type": "string",
              "format": "date-time"
            },
            "quantity": {
              "format": "int64",
              "type": "number"
            },
            "fromState": {
              "$ref": "#/definitions/StateReference"
            },
            "toState": {
              "$ref": "#/definitions/StateReference"
            }
          },
          "required": [
            "lineItemId",
            "transitionDate",
            "quantity",
            "fromState",
            "toState"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#lineitemstatetransition-message"
    },
    "Message": {
      "title": "Message",
      "discriminator": "type",
      "allOf": [
        {
          "$ref": "#/definitions/BaseResource"
        },
        {
          "properties": {
            "id": {
              "type": "string",
              "x-annotation-identifier": true
            },
            "version": {
              "format": "int64",
              "type": "number"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            },
            "lastModifiedAt": {
              "type": "string",
              "format": "date-time"
            },
            "lastModifiedBy": {
              "$ref": "#/definitions/LastModifiedBy"
            },
            "createdBy": {
              "$ref": "#/definitions/CreatedBy"
            },
            "sequenceNumber": {
              "format": "int64",
              "type": "number"
            },
            "resource": {
              "$ref": "#/definitions/Reference"
            },
            "resourceVersion": {
              "format": "int64",
              "type": "number"
            },
            "type": {
              "type": "string"
            },
            "resourceUserProvidedIdentifiers": {
              "$ref": "#/definitions/UserProvidedIdentifiers"
            }
          },
          "required": [
            "id",
            "version",
            "createdAt",
            "lastModifiedAt",
            "sequenceNumber",
            "resource",
            "resourceVersion",
            "type"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#message"
    },
    "MessageConfiguration": {
      "title": "MessageConfiguration",
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "deleteDaysAfterCreation": {
          "format": "int32",
          "type": "number"
        }
      },
      "required": [
        "enabled"
      ],
      "x-annotation-package": "Message"
    },
    "MessageConfigurationDraft": {
      "title": "MessageConfigurationDraft",
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "deleteDaysAfterCreation": {
          "format": "int32",
          "type": "number"
        }
      },
      "required": [
        "enabled",
        "deleteDaysAfterCreation"
      ],
      "x-annotation-package": "Message"
    },
    "MessagePagedQueryResponse": {
      "title": "MessagePagedQueryResponse",
      "type": "object",
      "properties": {
        "limit": {
          "format": "int64",
          "type": "number"
        },
        "count": {
          "format": "int64",
          "type": "number"
        },
        "total": {
          "format": "int64",
          "type": "number"
        },
        "offset": {
          "format": "int64",
          "type": "number"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Message"
          }
        }
      },
      "required": [
        "limit",
        "count",
        "offset",
        "results"
      ],
      "x-annotation-package": "Message"
    },
    "OrderBillingAddressSetMessage": {
      "title": "OrderBillingAddressSetMessage",
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        },
        {
          "properties": {
            "address": {
              "$ref": "#/definitions/Address"
            },
            "oldAddress": {
              "$ref": "#/definitions/Address"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#orderbillingaddressset-message"
    },
    "OrderCreatedMessage": {
      "title": "OrderCreatedMessage",
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        },
        {
          "properties": {
            "order": {
              "$ref": "#/definitions/Order"
            }
          },
          "required": [
            "order"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#ordercreated-message"
    },
    "OrderCustomLineItemDiscountSetMessage": {
      "title": "OrderCustomLineItemDiscountSetMessage",
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        },
        {
          "properties": {
            "customLineItemId": {
              "type": "string"
            },
            "discountedPricePerQuantity": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DiscountedLineItemPriceForQuantity"
              }
            },
            "taxedPrice": {
              "$ref": "#/definitions/TaxedItemPrice"
            }
          },
          "required": [
            "customLineItemId",
            "discountedPricePerQuantity"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-message-types.html#ordercustomlineitemdiscountset"
    },
    "OrderCustomerEmailSetMessage": {
      "title": "OrderCustomerEmailSetMessage",
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        },
        {
          "properties": {
            "email": {
              "type": "string"
            },
            "oldEmail": {
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#ordercustomeremailset-message"
    },
    "OrderCustomerGroupSetMessage": {
      "title": "OrderCustomerGroupSetMessage",
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        },
        {
          "properties": {
            "customerGroup": {
              "$ref": "#/definitions/CustomerGroupReference"
            },
            "oldCustomerGroup": {
              "$ref": "#/definitions/CustomerGroupReference"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-message-types.html#ordercustomergroupset-message"
    },
    "OrderCustomerSetMessage": {
      "title": "OrderCustomerSetMessage",
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        },
        {
          "properties": {
            "customer": {
              "$ref": "#/definitions/CustomerReference"
            },
            "customerGroup": {
              "$ref": "#/definitions/CustomerGroupReference"
            },
            "oldCustomer": {
              "$ref": "#/definitions/CustomerReference"
            },
            "oldCustomerGroup": {
              "$ref": "#/definitions/CustomerGroupReference"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-message-types.html#ordercustomeremailset-message"
    },
    "OrderDeletedMessage": {
      "title": "OrderDeletedMessage",
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        },
        {
          "properties": {
            "order": {
              "$ref": "#/definitions/Order"
            }
          },
          "required": [
            "order"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#orderdeleted-message"
    },
    "OrderDiscountCodeAddedMessage": {
      "title": "OrderDiscountCodeAddedMessage",
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        },
        {
          "properties": {
            "discountCode": {
              "$ref": "#/definitions/DiscountCodeReference"
            }
          },
          "required": [
            "discountCode"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-message-types.html#orderdiscountcodeadded"
    },
    "OrderDiscountCodeRemovedMessage": {
      "title": "OrderDiscountCodeRemovedMessage",
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        },
        {
          "properties": {
            "discountCode": {
              "$ref": "#/definitions/DiscountCodeReference"
            }
          },
          "required": [
            "discountCode"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-message-types.html#orderdiscountcoderemoved"
    },
    "OrderDiscountCodeStateSetMessage": {
      "title": "OrderDiscountCodeStateSetMessage",
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        },
        {
          "properties": {
            "discountCode": {
              "$ref": "#/definitions/DiscountCodeReference"
            },
            "state": {
              "$ref": "#/definitions/DiscountCodeState"
            },
            "oldState": {
              "$ref": "#/definitions/DiscountCodeState"
            }
          },
          "required": [
            "discountCode",
            "state"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-message-types.html#orderdiscountcodestateset"
    },
    "OrderEditAppliedMessage": {
      "title": "OrderEditAppliedMessage",
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        },
        {
          "properties": {
            "edit": {
              "$ref": "#/definitions/OrderEditReference"
            },
            "result": {
              "$ref": "#/definitions/OrderEditApplied"
            }
          },
          "required": [
            "edit",
            "result"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#ordercreated-message"
    },
    "OrderImportedMessage": {
      "title": "OrderImportedMessage",
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        },
        {
          "properties": {
            "order": {
              "$ref": "#/definitions/Order"
            }
          },
          "required": [
            "order"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#orderimported-message"
    },
    "OrderLineItemAddedMessage": {
      "title": "OrderLineItemAddedMessage",
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        },
        {
          "properties": {
            "lineItem": {
              "$ref": "#/definitions/LineItem"
            },
            "addedQuantity": {
              "format": "int64",
              "type": "number"
            }
          },
          "required": [
            "lineItem",
            "addedQuantity"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#orderlineitemadded"
    },
    "OrderLineItemDiscountSetMessage": {
      "title": "OrderLineItemDiscountSetMessage",
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        },
        {
          "properties": {
            "lineItemId": {
              "type": "string"
            },
            "discountedPricePerQuantity": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DiscountedLineItemPriceForQuantity"
              }
            },
            "totalPrice": {
              "$ref": "#/definitions/Money"
            },
            "taxedPrice": {
              "$ref": "#/definitions/TaxedItemPrice"
            }
          },
          "required": [
            "lineItemId",
            "discountedPricePerQuantity",
            "totalPrice"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-message-types.html#orderlineitemdiscountset"
    },
    "OrderPaymentStateChangedMessage": {
      "title": "OrderPaymentStateChangedMessage",
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        },
        {
          "properties": {
            "paymentState": {
              "$ref": "#/definitions/PaymentState"
            },
            "oldPaymentState": {
              "$ref": "#/definitions/PaymentState"
            }
          },
          "required": [
            "paymentState"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#orderpaymentstatechanged-message"
    },
    "OrderReturnInfoAddedMessage": {
      "title": "OrderReturnInfoAddedMessage",
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        },
        {
          "properties": {
            "returnInfo": {
              "$ref": "#/definitions/ReturnInfo"
            }
          },
          "required": [
            "returnInfo"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message"
    },
    "OrderReturnShipmentStateChangedMessage": {
      "title": "OrderReturnShipmentStateChangedMessage",
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        },
        {
          "properties": {
            "returnItemId": {
              "type": "string"
            },
            "returnShipmentState": {
              "$ref": "#/definitions/ReturnShipmentState"
            }
          },
          "required": [
            "returnItemId",
            "returnShipmentState"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message"
    },
    "OrderShipmentStateChangedMessage": {
      "title": "OrderShipmentStateChangedMessage",
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        },
        {
          "properties": {
            "shipmentState": {
              "$ref": "#/definitions/ShipmentState"
            },
            "oldShipmentState": {
              "$ref": "#/definitions/ShipmentState"
            }
          },
          "required": [
            "shipmentState"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message"
    },
    "OrderShippingAddressSetMessage": {
      "title": "OrderShippingAddressSetMessage",
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        },
        {
          "properties": {
            "address": {
              "$ref": "#/definitions/Address"
            },
            "oldAddress": {
              "$ref": "#/definitions/Address"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#ordershippingaddressset-message"
    },
    "OrderShippingInfoSetMessage": {
      "title": "OrderShippingInfoSetMessage",
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        },
        {
          "properties": {
            "shippingInfo": {
              "$ref": "#/definitions/ShippingInfo"
            },
            "oldShippingInfo": {
              "$ref": "#/definitions/ShippingInfo"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-message-types.html#ordershippinginfoset"
    },
    "OrderShippingRateInputSetMessage": {
      "title": "OrderShippingRateInputSetMessage",
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        },
        {
          "properties": {
            "shippingRateInput": {
              "$ref": "#/definitions/ShippingRateInput"
            },
            "oldShippingRateInput": {
              "$ref": "#/definitions/ShippingRateInput"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-message-types.html#ordershippingrateinputset"
    },
    "OrderStateChangedMessage": {
      "title": "OrderStateChangedMessage",
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        },
        {
          "properties": {
            "orderState": {
              "$ref": "#/definitions/OrderState"
            },
            "oldOrderState": {
              "$ref": "#/definitions/OrderState"
            }
          },
          "required": [
            "orderState",
            "oldOrderState"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#orderstatechanged-message"
    },
    "OrderStateTransitionMessage": {
      "title": "OrderStateTransitionMessage",
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        },
        {
          "properties": {
            "state": {
              "$ref": "#/definitions/StateReference"
            },
            "force": {
              "type": "boolean"
            }
          },
          "required": [
            "state",
            "force"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#orderstatetransition-message"
    },
    "OrderStoreSetMessage": {
      "title": "OrderStoreSetMessage",
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        },
        {
          "properties": {
            "store": {
              "$ref": "#/definitions/StoreKeyReference"
            }
          },
          "required": [
            "store"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-message-types.html#orderstoreset"
    },
    "ParcelAddedToDeliveryMessage": {
      "title": "ParcelAddedToDeliveryMessage",
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        },
        {
          "properties": {
            "delivery": {
              "$ref": "#/definitions/Delivery"
            },
            "parcel": {
              "$ref": "#/definitions/Parcel"
            }
          },
          "required": [
            "delivery",
            "parcel"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#parceladdedtodelivery-message"
    },
    "ParcelItemsUpdatedMessage": {
      "title": "ParcelItemsUpdatedMessage",
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        },
        {
          "properties": {
            "parcelId": {
              "type": "string"
            },
            "deliveryId": {
              "type": "string"
            },
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeliveryItem"
              }
            },
            "oldItems": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeliveryItem"
              }
            }
          },
          "required": [
            "parcelId",
            "items",
            "oldItems"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message"
    },
    "ParcelMeasurementsUpdatedMessage": {
      "title": "ParcelMeasurementsUpdatedMessage",
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        },
        {
          "properties": {
            "deliveryId": {
              "type": "string"
            },
            "parcelId": {
              "type": "string"
            },
            "measurements": {
              "$ref": "#/definitions/ParcelMeasurements"
            }
          },
          "required": [
            "deliveryId",
            "parcelId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message"
    },
    "ParcelRemovedFromDeliveryMessage": {
      "title": "ParcelRemovedFromDeliveryMessage",
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        },
        {
          "properties": {
            "deliveryId": {
              "type": "string"
            },
            "parcel": {
              "$ref": "#/definitions/Parcel"
            }
          },
          "required": [
            "deliveryId",
            "parcel"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message"
    },
    "ParcelTrackingDataUpdatedMessage": {
      "title": "ParcelTrackingDataUpdatedMessage",
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        },
        {
          "properties": {
            "deliveryId": {
              "type": "string"
            },
            "parcelId": {
              "type": "string"
            },
            "trackingData": {
              "$ref": "#/definitions/TrackingData"
            }
          },
          "required": [
            "deliveryId",
            "parcelId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message"
    },
    "PaymentCreatedMessage": {
      "title": "PaymentCreatedMessage",
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        },
        {
          "properties": {
            "payment": {
              "$ref": "#/definitions/Payment"
            }
          },
          "required": [
            "payment"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#paymentcreated-message"
    },
    "PaymentInteractionAddedMessage": {
      "title": "PaymentInteractionAddedMessage",
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        },
        {
          "properties": {
            "interaction": {
              "$ref": "#/definitions/CustomFields"
            }
          },
          "required": [
            "interaction"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#paymentinteractionadded-message"
    },
    "PaymentStatusInterfaceCodeSetMessage": {
      "title": "PaymentStatusInterfaceCodeSetMessage",
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        },
        {
          "properties": {
            "paymentId": {
              "type": "string"
            },
            "interfaceCode": {
              "type": "string"
            }
          },
          "required": [
            "paymentId",
            "interfaceCode"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#paymentstatusinterfacecodeset-message"
    },
    "PaymentStatusStateTransitionMessage": {
      "title": "PaymentStatusStateTransitionMessage",
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        },
        {
          "properties": {
            "state": {
              "$ref": "#/definitions/StateReference"
            },
            "force": {
              "type": "boolean"
            }
          },
          "required": [
            "state",
            "force"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#paymentstatusstatetransition-message"
    },
    "PaymentTransactionAddedMessage": {
      "title": "PaymentTransactionAddedMessage",
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        },
        {
          "properties": {
            "transaction": {
              "$ref": "#/definitions/Transaction"
            }
          },
          "required": [
            "transaction"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#paymenttransactionadded-message"
    },
    "PaymentTransactionStateChangedMessage": {
      "title": "PaymentTransactionStateChangedMessage",
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        },
        {
          "properties": {
            "transactionId": {
              "type": "string"
            },
            "state": {
              "$ref": "#/definitions/TransactionState"
            }
          },
          "required": [
            "transactionId",
            "state"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#paymenttransactionstatechanged-message"
    },
    "ProductAddedToCategoryMessage": {
      "title": "ProductAddedToCategoryMessage",
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        },
        {
          "properties": {
            "category": {
              "$ref": "#/definitions/CategoryReference"
            },
            "staged": {
              "type": "boolean"
            }
          },
          "required": [
            "category",
            "staged"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-message-types#productaddedtocategory-message"
    },
    "ProductCreatedMessage": {
      "title": "ProductCreatedMessage",
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        },
        {
          "properties": {
            "productProjection": {
              "$ref": "#/definitions/ProductProjection"
            }
          },
          "required": [
            "productProjection"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#productcreated-message"
    },
    "ProductDeletedMessage": {
      "title": "ProductDeletedMessage",
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        },
        {
          "properties": {
            "removedImageUrls": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "currentProjection": {
              "$ref": "#/definitions/ProductProjection"
            }
          },
          "required": [
            "removedImageUrls",
            "currentProjection"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#productdeleted-message"
    },
    "ProductImageAddedMessage": {
      "title": "ProductImageAddedMessage",
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        },
        {
          "properties": {
            "variantId": {
              "format": "int64",
              "type": "number"
            },
            "image": {
              "$ref": "#/definitions/Image"
            },
            "staged": {
              "type": "boolean"
            }
          },
          "required": [
            "variantId",
            "image",
            "staged"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#productimageadded-message"
    },
    "ProductPriceDiscountsSetMessage": {
      "title": "ProductPriceDiscountsSetMessage",
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        },
        {
          "properties": {
            "updatedPrices": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProductPriceDiscountsSetUpdatedPrice"
              }
            }
          },
          "required": [
            "updatedPrices"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-message-types.html#productpricediscountsset-message"
    },
    "ProductPriceDiscountsSetUpdatedPrice": {
      "title": "ProductPriceDiscountsSetUpdatedPrice",
      "type": "object",
      "properties": {
        "variantId": {
          "type": "integer"
        },
        "variantKey": {
          "type": "string"
        },
        "sku": {
          "type": "string"
        },
        "priceId": {
          "type": "string"
        },
        "discounted": {
          "$ref": "#/definitions/DiscountedPrice"
        },
        "staged": {
          "type": "boolean"
        }
      },
      "required": [
        "variantId",
        "priceId",
        "staged"
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-message-types.html#productpricediscountsset-message"
    },
    "ProductPriceExternalDiscountSetMessage": {
      "title": "ProductPriceExternalDiscountSetMessage",
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        },
        {
          "properties": {
            "variantId": {
              "type": "integer"
            },
            "variantKey": {
              "type": "string"
            },
            "sku": {
              "type": "string"
            },
            "priceId": {
              "type": "string"
            },
            "discounted": {
              "$ref": "#/definitions/DiscountedPrice"
            },
            "staged": {
              "type": "boolean"
            }
          },
          "required": [
            "variantId",
            "priceId",
            "staged"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-message-types.html#productpriceexternaldiscountset-message"
    },
    "ProductPublishedMessage": {
      "title": "ProductPublishedMessage",
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        },
        {
          "properties": {
            "removedImageUrls": {
              "type": "array"
            },
            "productProjection": {
              "$ref": "#/definitions/ProductProjection"
            },
            "scope": {
              "$ref": "#/definitions/ProductPublishScope"
            }
          },
          "required": [
            "removedImageUrls",
            "productProjection",
            "scope"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#productpublished-message"
    },
    "ProductRemovedFromCategoryMessage": {
      "title": "ProductRemovedFromCategoryMessage",
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        },
        {
          "properties": {
            "category": {
              "$ref": "#/definitions/CategoryReference"
            },
            "staged": {
              "type": "boolean"
            }
          },
          "required": [
            "category",
            "staged"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-message-types#productremovedfromcategory-message"
    },
    "ProductRevertedStagedChangesMessage": {
      "title": "ProductRevertedStagedChangesMessage",
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        },
        {
          "properties": {
            "removedImageUrls": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "required": [
            "removedImageUrls"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#productrevertedstagedchanges-message"
    },
    "ProductSlugChangedMessage": {
      "title": "ProductSlugChangedMessage",
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        },
        {
          "properties": {
            "slug": {
              "$ref": "#/definitions/LocalizedString"
            }
          },
          "required": [
            "slug"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#productslugchanged-message"
    },
    "ProductStateTransitionMessage": {
      "title": "ProductStateTransitionMessage",
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        },
        {
          "properties": {
            "state": {
              "$ref": "#/definitions/StateReference"
            },
            "force": {
              "type": "boolean"
            }
          },
          "required": [
            "state",
            "force"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#productstatetransition-message"
    },
    "ProductUnpublishedMessage": {
      "title": "ProductUnpublishedMessage",
      "$ref": "#/definitions/Message",
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#productunpublished-message"
    },
    "ProductVariantDeletedMessage": {
      "title": "ProductVariantDeletedMessage",
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        },
        {
          "properties": {
            "variant": {
              "$ref": "#/definitions/ProductVariant"
            },
            "removedImageUrls": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "required": [
            "variant",
            "removedImageUrls"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#productvariantdeleted-message"
    },
    "ReviewCreatedMessage": {
      "title": "ReviewCreatedMessage",
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        },
        {
          "properties": {
            "review": {
              "$ref": "#/definitions/Review"
            }
          },
          "required": [
            "review"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#reviewcreated-message"
    },
    "ReviewRatingSetMessage": {
      "title": "ReviewRatingSetMessage",
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        },
        {
          "properties": {
            "oldRating": {
              "type": "number"
            },
            "newRating": {
              "type": "number"
            },
            "includedInStatistics": {
              "type": "boolean"
            },
            "target": {
              "$ref": "#/definitions/Reference"
            }
          },
          "required": [
            "includedInStatistics"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#reviewratingset-message"
    },
    "ReviewStateTransitionMessage": {
      "title": "ReviewStateTransitionMessage",
      "allOf": [
        {
          "$ref": "#/definitions/Message"
        },
        {
          "properties": {
            "oldState": {
              "$ref": "#/definitions/StateReference"
            },
            "newState": {
              "$ref": "#/definitions/StateReference"
            },
            "oldIncludedInStatistics": {
              "type": "boolean"
            },
            "newIncludedInStatistics": {
              "type": "boolean"
            },
            "target": {
              "$ref": "#/definitions/Reference"
            },
            "force": {
              "type": "boolean"
            }
          },
          "required": [
            "oldState",
            "newState",
            "oldIncludedInStatistics",
            "newIncludedInStatistics",
            "target",
            "force"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#reviewstatetransition-message"
    },
    "UserProvidedIdentifiers": {
      "title": "UserProvidedIdentifiers",
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "externalId": {
          "type": "string"
        },
        "orderNumber": {
          "type": "string"
        },
        "customerNumber": {
          "type": "string"
        },
        "sku": {
          "type": "string"
        },
        "slug": {
          "$ref": "#/definitions/LocalizedString"
        }
      },
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-message-types#userprovidedidentifiers"
    },
    "CategoryCreatedMessagePayload": {
      "title": "CategoryCreatedMessagePayload",
      "allOf": [
        {
          "$ref": "#/definitions/MessagePayload"
        },
        {
          "properties": {
            "category": {
              "$ref": "#/definitions/Category"
            }
          },
          "required": [
            "category"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#categorycreated-message"
    },
    "CategorySlugChangedMessagePayload": {
      "title": "CategorySlugChangedMessagePayload",
      "allOf": [
        {
          "$ref": "#/definitions/MessagePayload"
        },
        {
          "properties": {
            "slug": {
              "$ref": "#/definitions/LocalizedString"
            }
          },
          "required": [
            "slug"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#categoryslugchanged-message"
    },
    "CustomLineItemStateTransitionMessagePayload": {
      "title": "CustomLineItemStateTransitionMessagePayload",
      "allOf": [
        {
          "$ref": "#/definitions/MessagePayload"
        },
        {
          "properties": {
            "customLineItemId": {
              "type": "string"
            },
            "transitionDate": {
              "type": "string",
              "format": "date-time"
            },
            "quantity": {
              "format": "int64",
              "type": "number"
            },
            "fromState": {
              "$ref": "#/definitions/StateReference"
            },
            "toState": {
              "$ref": "#/definitions/StateReference"
            }
          },
          "required": [
            "customLineItemId",
            "transitionDate",
            "quantity",
            "fromState",
            "toState"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#customlineitemstatetransition-message"
    },
    "CustomerAddressAddedMessagePayload": {
      "title": "CustomerAddressAddedMessagePayload",
      "allOf": [
        {
          "$ref": "#/definitions/MessagePayload"
        },
        {
          "properties": {
            "address": {
              "$ref": "#/definitions/Address"
            }
          },
          "required": [
            "address"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#customeraddressadded-message"
    },
    "CustomerAddressChangedMessagePayload": {
      "title": "CustomerAddressChangedMessagePayload",
      "allOf": [
        {
          "$ref": "#/definitions/MessagePayload"
        },
        {
          "properties": {
            "address": {
              "$ref": "#/definitions/Address"
            }
          },
          "required": [
            "address"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#customeraddresschanged-message"
    },
    "CustomerAddressRemovedMessagePayload": {
      "title": "CustomerAddressRemovedMessagePayload",
      "allOf": [
        {
          "$ref": "#/definitions/MessagePayload"
        },
        {
          "properties": {
            "address": {
              "$ref": "#/definitions/Address"
            }
          },
          "required": [
            "address"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#customeraddressremoved-message"
    },
    "CustomerCompanyNameSetMessagePayload": {
      "title": "CustomerCompanyNameSetMessagePayload",
      "allOf": [
        {
          "$ref": "#/definitions/MessagePayload"
        },
        {
          "properties": {
            "companyName": {
              "type": "string"
            }
          },
          "required": [
            "companyName"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#customercompanynameset-message"
    },
    "CustomerCreatedMessagePayload": {
      "title": "CustomerCreatedMessagePayload",
      "allOf": [
        {
          "$ref": "#/definitions/MessagePayload"
        },
        {
          "properties": {
            "customer": {
              "$ref": "#/definitions/Customer"
            }
          },
          "required": [
            "customer"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#customercreated-message"
    },
    "CustomerDateOfBirthSetMessagePayload": {
      "title": "CustomerDateOfBirthSetMessagePayload",
      "allOf": [
        {
          "$ref": "#/definitions/MessagePayload"
        },
        {
          "properties": {
            "dateOfBirth": {
              "type": "string",
              "format": "date"
            }
          },
          "required": [
            "dateOfBirth"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#customerdateofbirthset-message"
    },
    "CustomerEmailChangedMessagePayload": {
      "title": "CustomerEmailChangedMessagePayload",
      "allOf": [
        {
          "$ref": "#/definitions/MessagePayload"
        },
        {
          "properties": {
            "email": {
              "type": "string"
            }
          },
          "required": [
            "email"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#customeremailchanged-message"
    },
    "CustomerEmailVerifiedMessagePayload": {
      "title": "CustomerEmailVerifiedMessagePayload",
      "$ref": "#/definitions/MessagePayload",
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#customeremailverified-message"
    },
    "CustomerGroupSetMessagePayload": {
      "title": "CustomerGroupSetMessagePayload",
      "allOf": [
        {
          "$ref": "#/definitions/MessagePayload"
        },
        {
          "properties": {
            "customerGroup": {
              "$ref": "#/definitions/CustomerGroupReference"
            }
          },
          "required": [
            "customerGroup"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#customergroupset-message"
    },
    "DeliveryAddedMessagePayload": {
      "title": "DeliveryAddedMessagePayload",
      "allOf": [
        {
          "$ref": "#/definitions/MessagePayload"
        },
        {
          "properties": {
            "delivery": {
              "$ref": "#/definitions/Delivery"
            }
          },
          "required": [
            "delivery"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#deliveryadded-message"
    },
    "DeliveryAddressSetMessagePayload": {
      "title": "DeliveryAddressSetMessagePayload",
      "allOf": [
        {
          "$ref": "#/definitions/MessagePayload"
        },
        {
          "properties": {
            "deliveryId": {
              "type": "string"
            },
            "address": {
              "$ref": "#/definitions/Address"
            },
            "oldAddress": {
              "$ref": "#/definitions/Address"
            }
          },
          "required": [
            "deliveryId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#deliveryaddressset-message"
    },
    "DeliveryItemsUpdatedMessagePayload": {
      "title": "DeliveryItemsUpdatedMessagePayload",
      "allOf": [
        {
          "$ref": "#/definitions/MessagePayload"
        },
        {
          "properties": {
            "deliveryId": {
              "type": "string"
            },
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeliveryItem"
              }
            },
            "oldItems": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeliveryItem"
              }
            }
          },
          "required": [
            "deliveryId",
            "items",
            "oldItems"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message"
    },
    "DeliveryRemovedMessagePayload": {
      "title": "DeliveryRemovedMessagePayload",
      "allOf": [
        {
          "$ref": "#/definitions/MessagePayload"
        },
        {
          "properties": {
            "delivery": {
              "$ref": "#/definitions/Delivery"
            }
          },
          "required": [
            "delivery"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message"
    },
    "InventoryEntryCreatedMessagePayload": {
      "title": "InventoryEntryCreatedMessagePayload",
      "allOf": [
        {
          "$ref": "#/definitions/MessagePayload"
        },
        {
          "properties": {
            "inventoryEntry": {
              "$ref": "#/definitions/InventoryEntry"
            }
          },
          "required": [
            "inventoryEntry"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#inventoryentrycreated-message"
    },
    "InventoryEntryDeletedMessagePayload": {
      "title": "InventoryEntryDeletedMessagePayload",
      "allOf": [
        {
          "$ref": "#/definitions/MessagePayload"
        },
        {
          "properties": {
            "sku": {
              "type": "string"
            },
            "supplyChannel": {
              "$ref": "#/definitions/ChannelReference"
            }
          },
          "required": [
            "sku",
            "supplyChannel"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#inventoryentrydeleted-message"
    },
    "InventoryEntryQuantitySetMessagePayload": {
      "title": "InventoryEntryQuantitySetMessagePayload",
      "allOf": [
        {
          "$ref": "#/definitions/MessagePayload"
        },
        {
          "properties": {
            "oldQuantityOnStock": {
              "format": "int64",
              "type": "number"
            },
            "newQuantityOnStock": {
              "format": "int64",
              "type": "number"
            },
            "oldAvailableQuantity": {
              "format": "int64",
              "type": "number"
            },
            "newAvailableQuantity": {
              "format": "int64",
              "type": "number"
            }
          },
          "required": [
            "oldQuantityOnStock",
            "newQuantityOnStock",
            "oldAvailableQuantity",
            "newAvailableQuantity"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-message-types#inventoryentryquantityset-message"
    },
    "LineItemStateTransitionMessagePayload": {
      "title": "LineItemStateTransitionMessagePayload",
      "allOf": [
        {
          "$ref": "#/definitions/MessagePayload"
        },
        {
          "properties": {
            "lineItemId": {
              "type": "string"
            },
            "transitionDate": {
              "type": "string",
              "format": "date-time"
            },
            "quantity": {
              "format": "int64",
              "type": "number"
            },
            "fromState": {
              "$ref": "#/definitions/StateReference"
            },
            "toState": {
              "$ref": "#/definitions/StateReference"
            }
          },
          "required": [
            "lineItemId",
            "transitionDate",
            "quantity",
            "fromState",
            "toState"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#lineitemstatetransition-message"
    },
    "MessagePayload": {
      "title": "MessagePayload",
      "discriminator": "type",
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "x-annotation-package": "Message"
    },
    "OrderBillingAddressSetMessagePayload": {
      "title": "OrderBillingAddressSetMessagePayload",
      "allOf": [
        {
          "$ref": "#/definitions/MessagePayload"
        },
        {
          "properties": {
            "address": {
              "$ref": "#/definitions/Address"
            },
            "oldAddress": {
              "$ref": "#/definitions/Address"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#orderbillingaddressset-message"
    },
    "OrderCreatedMessagePayload": {
      "title": "OrderCreatedMessagePayload",
      "allOf": [
        {
          "$ref": "#/definitions/MessagePayload"
        },
        {
          "properties": {
            "order": {
              "$ref": "#/definitions/Order"
            }
          },
          "required": [
            "order"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#ordercreated-message"
    },
    "OrderCustomLineItemDiscountSetMessagePayload": {
      "title": "OrderCustomLineItemDiscountSetMessagePayload",
      "allOf": [
        {
          "$ref": "#/definitions/MessagePayload"
        },
        {
          "properties": {
            "customLineItemId": {
              "type": "string"
            },
            "discountedPricePerQuantity": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DiscountedLineItemPriceForQuantity"
              }
            },
            "taxedPrice": {
              "$ref": "#/definitions/TaxedItemPrice"
            }
          },
          "required": [
            "customLineItemId",
            "discountedPricePerQuantity"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-message-types.html#ordercustomlineitemdiscountset"
    },
    "OrderCustomerEmailSetMessagePayload": {
      "title": "OrderCustomerEmailSetMessagePayload",
      "allOf": [
        {
          "$ref": "#/definitions/MessagePayload"
        },
        {
          "properties": {
            "email": {
              "type": "string"
            },
            "oldEmail": {
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#ordercustomeremailset-message"
    },
    "OrderCustomerGroupSetMessagePayload": {
      "title": "OrderCustomerGroupSetMessagePayload",
      "allOf": [
        {
          "$ref": "#/definitions/MessagePayload"
        },
        {
          "properties": {
            "customerGroup": {
              "$ref": "#/definitions/CustomerGroupReference"
            },
            "oldCustomerGroup": {
              "$ref": "#/definitions/CustomerGroupReference"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-message-types.html#ordercustomergroupset-message"
    },
    "OrderCustomerSetMessagePayload": {
      "title": "OrderCustomerSetMessagePayload",
      "allOf": [
        {
          "$ref": "#/definitions/MessagePayload"
        },
        {
          "properties": {
            "customer": {
              "$ref": "#/definitions/CustomerReference"
            },
            "customerGroup": {
              "$ref": "#/definitions/CustomerGroupReference"
            },
            "oldCustomer": {
              "$ref": "#/definitions/CustomerReference"
            },
            "oldCustomerGroup": {
              "$ref": "#/definitions/CustomerGroupReference"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-message-types.html#ordercustomeremailset-message"
    },
    "OrderDeletedMessagePayload": {
      "title": "OrderDeletedMessagePayload",
      "allOf": [
        {
          "$ref": "#/definitions/MessagePayload"
        },
        {
          "properties": {
            "order": {
              "$ref": "#/definitions/Order"
            }
          },
          "required": [
            "order"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#orderdeleted-message"
    },
    "OrderDiscountCodeAddedMessagePayload": {
      "title": "OrderDiscountCodeAddedMessagePayload",
      "allOf": [
        {
          "$ref": "#/definitions/MessagePayload"
        },
        {
          "properties": {
            "discountCode": {
              "$ref": "#/definitions/DiscountCodeReference"
            }
          },
          "required": [
            "discountCode"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-message-types.html#orderdiscountcodeadded"
    },
    "OrderDiscountCodeRemovedMessagePayload": {
      "title": "OrderDiscountCodeRemovedMessagePayload",
      "allOf": [
        {
          "$ref": "#/definitions/MessagePayload"
        },
        {
          "properties": {
            "discountCode": {
              "$ref": "#/definitions/DiscountCodeReference"
            }
          },
          "required": [
            "discountCode"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-message-types.html#orderdiscountcoderemoved"
    },
    "OrderDiscountCodeStateSetMessagePayload": {
      "title": "OrderDiscountCodeStateSetMessagePayload",
      "allOf": [
        {
          "$ref": "#/definitions/MessagePayload"
        },
        {
          "properties": {
            "discountCode": {
              "$ref": "#/definitions/DiscountCodeReference"
            },
            "state": {
              "$ref": "#/definitions/DiscountCodeState"
            },
            "oldState": {
              "$ref": "#/definitions/DiscountCodeState"
            }
          },
          "required": [
            "discountCode",
            "state"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-message-types.html#orderdiscountcodestateset"
    },
    "OrderEditAppliedMessagePayload": {
      "title": "OrderEditAppliedMessagePayload",
      "allOf": [
        {
          "$ref": "#/definitions/MessagePayload"
        },
        {
          "properties": {
            "edit": {
              "$ref": "#/definitions/OrderEditReference"
            },
            "result": {
              "$ref": "#/definitions/OrderEditApplied"
            }
          },
          "required": [
            "edit",
            "result"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#ordercreated-message"
    },
    "OrderImportedMessagePayload": {
      "title": "OrderImportedMessagePayload",
      "allOf": [
        {
          "$ref": "#/definitions/MessagePayload"
        },
        {
          "properties": {
            "order": {
              "$ref": "#/definitions/Order"
            }
          },
          "required": [
            "order"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#orderimported-message"
    },
    "OrderLineItemAddedMessagePayload": {
      "title": "OrderLineItemAddedMessagePayload",
      "allOf": [
        {
          "$ref": "#/definitions/MessagePayload"
        },
        {
          "properties": {
            "lineItem": {
              "$ref": "#/definitions/LineItem"
            },
            "addedQuantity": {
              "format": "int64",
              "type": "number"
            }
          },
          "required": [
            "lineItem",
            "addedQuantity"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#orderlineitemadded"
    },
    "OrderLineItemDiscountSetMessagePayload": {
      "title": "OrderLineItemDiscountSetMessagePayload",
      "allOf": [
        {
          "$ref": "#/definitions/MessagePayload"
        },
        {
          "properties": {
            "lineItemId": {
              "type": "string"
            },
            "discountedPricePerQuantity": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DiscountedLineItemPriceForQuantity"
              }
            },
            "totalPrice": {
              "$ref": "#/definitions/Money"
            },
            "taxedPrice": {
              "$ref": "#/definitions/TaxedItemPrice"
            }
          },
          "required": [
            "lineItemId",
            "discountedPricePerQuantity",
            "totalPrice"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-message-types.html#orderlineitemdiscountset"
    },
    "OrderPaymentStateChangedMessagePayload": {
      "title": "OrderPaymentStateChangedMessagePayload",
      "allOf": [
        {
          "$ref": "#/definitions/MessagePayload"
        },
        {
          "properties": {
            "paymentState": {
              "$ref": "#/definitions/PaymentState"
            },
            "oldPaymentState": {
              "$ref": "#/definitions/PaymentState"
            }
          },
          "required": [
            "paymentState"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#orderpaymentstatechanged-message"
    },
    "OrderReturnInfoAddedMessagePayload": {
      "title": "OrderReturnInfoAddedMessagePayload",
      "allOf": [
        {
          "$ref": "#/definitions/MessagePayload"
        },
        {
          "properties": {
            "returnInfo": {
              "$ref": "#/definitions/ReturnInfo"
            }
          },
          "required": [
            "returnInfo"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message"
    },
    "OrderReturnShipmentStateChangedMessagePayload": {
      "title": "OrderReturnShipmentStateChangedMessagePayload",
      "allOf": [
        {
          "$ref": "#/definitions/MessagePayload"
        },
        {
          "properties": {
            "returnItemId": {
              "type": "string"
            },
            "returnShipmentState": {
              "$ref": "#/definitions/ReturnShipmentState"
            }
          },
          "required": [
            "returnItemId",
            "returnShipmentState"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message"
    },
    "OrderShipmentStateChangedMessagePayload": {
      "title": "OrderShipmentStateChangedMessagePayload",
      "allOf": [
        {
          "$ref": "#/definitions/MessagePayload"
        },
        {
          "properties": {
            "shipmentState": {
              "$ref": "#/definitions/ShipmentState"
            },
            "oldShipmentState": {
              "$ref": "#/definitions/ShipmentState"
            }
          },
          "required": [
            "shipmentState"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message"
    },
    "OrderShippingAddressSetMessagePayload": {
      "title": "OrderShippingAddressSetMessagePayload",
      "allOf": [
        {
          "$ref": "#/definitions/MessagePayload"
        },
        {
          "properties": {
            "address": {
              "$ref": "#/definitions/Address"
            },
            "oldAddress": {
              "$ref": "#/definitions/Address"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#ordershippingaddressset-message"
    },
    "OrderShippingInfoSetMessagePayload": {
      "title": "OrderShippingInfoSetMessagePayload",
      "allOf": [
        {
          "$ref": "#/definitions/MessagePayload"
        },
        {
          "properties": {
            "shippingInfo": {
              "$ref": "#/definitions/ShippingInfo"
            },
            "oldShippingInfo": {
              "$ref": "#/definitions/ShippingInfo"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-message-types.html#ordershippinginfoset"
    },
    "OrderShippingRateInputSetMessagePayload": {
      "title": "OrderShippingRateInputSetMessagePayload",
      "allOf": [
        {
          "$ref": "#/definitions/MessagePayload"
        },
        {
          "properties": {
            "shippingRateInput": {
              "$ref": "#/definitions/ShippingRateInput"
            },
            "oldShippingRateInput": {
              "$ref": "#/definitions/ShippingRateInput"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-message-types.html#ordershippingrateinputset"
    },
    "OrderStateChangedMessagePayload": {
      "title": "OrderStateChangedMessagePayload",
      "allOf": [
        {
          "$ref": "#/definitions/MessagePayload"
        },
        {
          "properties": {
            "orderState": {
              "$ref": "#/definitions/OrderState"
            },
            "oldOrderState": {
              "$ref": "#/definitions/OrderState"
            }
          },
          "required": [
            "orderState",
            "oldOrderState"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#orderstatechanged-message"
    },
    "OrderStateTransitionMessagePayload": {
      "title": "OrderStateTransitionMessagePayload",
      "allOf": [
        {
          "$ref": "#/definitions/MessagePayload"
        },
        {
          "properties": {
            "state": {
              "$ref": "#/definitions/StateReference"
            },
            "force": {
              "type": "boolean"
            }
          },
          "required": [
            "state",
            "force"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#orderstatetransition-message"
    },
    "OrderStoreSetMessagePayload": {
      "title": "OrderStoreSetMessagePayload",
      "allOf": [
        {
          "$ref": "#/definitions/MessagePayload"
        },
        {
          "properties": {
            "store": {
              "$ref": "#/definitions/StoreKeyReference"
            }
          },
          "required": [
            "store"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-message-types.html#orderstoreset"
    },
    "ParcelAddedToDeliveryMessagePayload": {
      "title": "ParcelAddedToDeliveryMessagePayload",
      "allOf": [
        {
          "$ref": "#/definitions/MessagePayload"
        },
        {
          "properties": {
            "delivery": {
              "$ref": "#/definitions/Delivery"
            },
            "parcel": {
              "$ref": "#/definitions/Parcel"
            }
          },
          "required": [
            "delivery",
            "parcel"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#parceladdedtodelivery-message"
    },
    "ParcelItemsUpdatedMessagePayload": {
      "title": "ParcelItemsUpdatedMessagePayload",
      "allOf": [
        {
          "$ref": "#/definitions/MessagePayload"
        },
        {
          "properties": {
            "parcelId": {
              "type": "string"
            },
            "deliveryId": {
              "type": "string"
            },
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeliveryItem"
              }
            },
            "oldItems": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeliveryItem"
              }
            }
          },
          "required": [
            "parcelId",
            "items",
            "oldItems"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message"
    },
    "ParcelMeasurementsUpdatedMessagePayload": {
      "title": "ParcelMeasurementsUpdatedMessagePayload",
      "allOf": [
        {
          "$ref": "#/definitions/MessagePayload"
        },
        {
          "properties": {
            "deliveryId": {
              "type": "string"
            },
            "parcelId": {
              "type": "string"
            },
            "measurements": {
              "$ref": "#/definitions/ParcelMeasurements"
            }
          },
          "required": [
            "deliveryId",
            "parcelId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message"
    },
    "ParcelRemovedFromDeliveryMessagePayload": {
      "title": "ParcelRemovedFromDeliveryMessagePayload",
      "allOf": [
        {
          "$ref": "#/definitions/MessagePayload"
        },
        {
          "properties": {
            "deliveryId": {
              "type": "string"
            },
            "parcel": {
              "$ref": "#/definitions/Parcel"
            }
          },
          "required": [
            "deliveryId",
            "parcel"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message"
    },
    "ParcelTrackingDataUpdatedMessagePayload": {
      "title": "ParcelTrackingDataUpdatedMessagePayload",
      "allOf": [
        {
          "$ref": "#/definitions/MessagePayload"
        },
        {
          "properties": {
            "deliveryId": {
              "type": "string"
            },
            "parcelId": {
              "type": "string"
            },
            "trackingData": {
              "$ref": "#/definitions/TrackingData"
            }
          },
          "required": [
            "deliveryId",
            "parcelId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message"
    },
    "PaymentCreatedMessagePayload": {
      "title": "PaymentCreatedMessagePayload",
      "allOf": [
        {
          "$ref": "#/definitions/MessagePayload"
        },
        {
          "properties": {
            "payment": {
              "$ref": "#/definitions/Payment"
            }
          },
          "required": [
            "payment"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#paymentcreated-message"
    },
    "PaymentInteractionAddedMessagePayload": {
      "title": "PaymentInteractionAddedMessagePayload",
      "allOf": [
        {
          "$ref": "#/definitions/MessagePayload"
        },
        {
          "properties": {
            "interaction": {
              "$ref": "#/definitions/CustomFields"
            }
          },
          "required": [
            "interaction"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#paymentinteractionadded-message"
    },
    "PaymentStatusInterfaceCodeSetMessagePayload": {
      "title": "PaymentStatusInterfaceCodeSetMessagePayload",
      "allOf": [
        {
          "$ref": "#/definitions/MessagePayload"
        },
        {
          "properties": {
            "paymentId": {
              "type": "string"
            },
            "interfaceCode": {
              "type": "string"
            }
          },
          "required": [
            "paymentId",
            "interfaceCode"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#paymentstatusinterfacecodeset-message"
    },
    "PaymentStatusStateTransitionMessagePayload": {
      "title": "PaymentStatusStateTransitionMessagePayload",
      "allOf": [
        {
          "$ref": "#/definitions/MessagePayload"
        },
        {
          "properties": {
            "state": {
              "$ref": "#/definitions/StateReference"
            },
            "force": {
              "type": "boolean"
            }
          },
          "required": [
            "state",
            "force"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#paymentstatusstatetransition-message"
    },
    "PaymentTransactionAddedMessagePayload": {
      "title": "PaymentTransactionAddedMessagePayload",
      "allOf": [
        {
          "$ref": "#/definitions/MessagePayload"
        },
        {
          "properties": {
            "transaction": {
              "$ref": "#/definitions/Transaction"
            }
          },
          "required": [
            "transaction"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#paymenttransactionadded-message"
    },
    "PaymentTransactionStateChangedMessagePayload": {
      "title": "PaymentTransactionStateChangedMessagePayload",
      "allOf": [
        {
          "$ref": "#/definitions/MessagePayload"
        },
        {
          "properties": {
            "transactionId": {
              "type": "string"
            },
            "state": {
              "$ref": "#/definitions/TransactionState"
            }
          },
          "required": [
            "transactionId",
            "state"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#paymenttransactionstatechanged-message"
    },
    "ProductAddedToCategoryMessagePayload": {
      "title": "ProductAddedToCategoryMessagePayload",
      "allOf": [
        {
          "$ref": "#/definitions/MessagePayload"
        },
        {
          "properties": {
            "category": {
              "$ref": "#/definitions/CategoryReference"
            },
            "staged": {
              "type": "boolean"
            }
          },
          "required": [
            "category",
            "staged"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-message-types#productaddedtocategory-message"
    },
    "ProductCreatedMessagePayload": {
      "title": "ProductCreatedMessagePayload",
      "allOf": [
        {
          "$ref": "#/definitions/MessagePayload"
        },
        {
          "properties": {
            "productProjection": {
              "$ref": "#/definitions/ProductProjection"
            }
          },
          "required": [
            "productProjection"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#productcreated-message"
    },
    "ProductDeletedMessagePayload": {
      "title": "ProductDeletedMessagePayload",
      "allOf": [
        {
          "$ref": "#/definitions/MessagePayload"
        },
        {
          "properties": {
            "removedImageUrls": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "currentProjection": {
              "$ref": "#/definitions/ProductProjection"
            }
          },
          "required": [
            "removedImageUrls",
            "currentProjection"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#productdeleted-message"
    },
    "ProductImageAddedMessagePayload": {
      "title": "ProductImageAddedMessagePayload",
      "allOf": [
        {
          "$ref": "#/definitions/MessagePayload"
        },
        {
          "properties": {
            "variantId": {
              "format": "int64",
              "type": "number"
            },
            "image": {
              "$ref": "#/definitions/Image"
            },
            "staged": {
              "type": "boolean"
            }
          },
          "required": [
            "variantId",
            "image",
            "staged"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#productimageadded-message"
    },
    "ProductPriceDiscountsSetMessagePayload": {
      "title": "ProductPriceDiscountsSetMessagePayload",
      "allOf": [
        {
          "$ref": "#/definitions/MessagePayload"
        },
        {
          "properties": {
            "updatedPrices": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProductPriceDiscountsSetUpdatedPrice"
              }
            }
          },
          "required": [
            "updatedPrices"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-message-types.html#productpricediscountsset-message"
    },
    "ProductPriceExternalDiscountSetMessagePayload": {
      "title": "ProductPriceExternalDiscountSetMessagePayload",
      "allOf": [
        {
          "$ref": "#/definitions/MessagePayload"
        },
        {
          "properties": {
            "variantId": {
              "type": "integer"
            },
            "variantKey": {
              "type": "string"
            },
            "sku": {
              "type": "string"
            },
            "priceId": {
              "type": "string"
            },
            "discounted": {
              "$ref": "#/definitions/DiscountedPrice"
            },
            "staged": {
              "type": "boolean"
            }
          },
          "required": [
            "variantId",
            "priceId",
            "staged"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-message-types.html#productpriceexternaldiscountset-message"
    },
    "ProductPublishedMessagePayload": {
      "title": "ProductPublishedMessagePayload",
      "allOf": [
        {
          "$ref": "#/definitions/MessagePayload"
        },
        {
          "properties": {
            "removedImageUrls": {
              "type": "array"
            },
            "productProjection": {
              "$ref": "#/definitions/ProductProjection"
            },
            "scope": {
              "$ref": "#/definitions/ProductPublishScope"
            }
          },
          "required": [
            "removedImageUrls",
            "productProjection",
            "scope"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#productpublished-message"
    },
    "ProductRemovedFromCategoryMessagePayload": {
      "title": "ProductRemovedFromCategoryMessagePayload",
      "allOf": [
        {
          "$ref": "#/definitions/MessagePayload"
        },
        {
          "properties": {
            "category": {
              "$ref": "#/definitions/CategoryReference"
            },
            "staged": {
              "type": "boolean"
            }
          },
          "required": [
            "category",
            "staged"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-message-types#productremovedfromcategory-message"
    },
    "ProductRevertedStagedChangesMessagePayload": {
      "title": "ProductRevertedStagedChangesMessagePayload",
      "allOf": [
        {
          "$ref": "#/definitions/MessagePayload"
        },
        {
          "properties": {
            "removedImageUrls": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "required": [
            "removedImageUrls"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#productrevertedstagedchanges-message"
    },
    "ProductSlugChangedMessagePayload": {
      "title": "ProductSlugChangedMessagePayload",
      "allOf": [
        {
          "$ref": "#/definitions/MessagePayload"
        },
        {
          "properties": {
            "slug": {
              "$ref": "#/definitions/LocalizedString"
            }
          },
          "required": [
            "slug"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#productslugchanged-message"
    },
    "ProductStateTransitionMessagePayload": {
      "title": "ProductStateTransitionMessagePayload",
      "allOf": [
        {
          "$ref": "#/definitions/MessagePayload"
        },
        {
          "properties": {
            "state": {
              "$ref": "#/definitions/StateReference"
            },
            "force": {
              "type": "boolean"
            }
          },
          "required": [
            "state",
            "force"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#productstatetransition-message"
    },
    "ProductUnpublishedMessagePayload": {
      "title": "ProductUnpublishedMessagePayload",
      "$ref": "#/definitions/MessagePayload",
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#productunpublished-message"
    },
    "ProductVariantDeletedMessagePayload": {
      "title": "ProductVariantDeletedMessagePayload",
      "allOf": [
        {
          "$ref": "#/definitions/MessagePayload"
        },
        {
          "properties": {
            "variant": {
              "$ref": "#/definitions/ProductVariant"
            },
            "removedImageUrls": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "required": [
            "variant",
            "removedImageUrls"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#productvariantdeleted-message"
    },
    "ReviewCreatedMessagePayload": {
      "title": "ReviewCreatedMessagePayload",
      "allOf": [
        {
          "$ref": "#/definitions/MessagePayload"
        },
        {
          "properties": {
            "review": {
              "$ref": "#/definitions/Review"
            }
          },
          "required": [
            "review"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#reviewcreated-message"
    },
    "ReviewRatingSetMessagePayload": {
      "title": "ReviewRatingSetMessagePayload",
      "allOf": [
        {
          "$ref": "#/definitions/MessagePayload"
        },
        {
          "properties": {
            "oldRating": {
              "type": "number"
            },
            "newRating": {
              "type": "number"
            },
            "includedInStatistics": {
              "type": "boolean"
            },
            "target": {
              "$ref": "#/definitions/Reference"
            }
          },
          "required": [
            "includedInStatistics"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#reviewratingset-message"
    },
    "ReviewStateTransitionMessagePayload": {
      "title": "ReviewStateTransitionMessagePayload",
      "allOf": [
        {
          "$ref": "#/definitions/MessagePayload"
        },
        {
          "properties": {
            "oldState": {
              "$ref": "#/definitions/StateReference"
            },
            "newState": {
              "$ref": "#/definitions/StateReference"
            },
            "oldIncludedInStatistics": {
              "type": "boolean"
            },
            "newIncludedInStatistics": {
              "type": "boolean"
            },
            "target": {
              "$ref": "#/definitions/Reference"
            },
            "force": {
              "type": "boolean"
            }
          },
          "required": [
            "oldState",
            "newState",
            "oldIncludedInStatistics",
            "newIncludedInStatistics",
            "target",
            "force"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Message",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-messages.html#reviewstatetransition-message"
    },
    "OrderEdit": {
      "title": "OrderEdit",
      "allOf": [
        {
          "$ref": "#/definitions/BaseResource"
        },
        {
          "properties": {
            "id": {
              "description": "The unique ID of the OrderEdit.",
              "type": "string",
              "x-annotation-identifier": true
            },
            "version": {
              "format": "int64",
              "description": "The current version of the OrderEdit.",
              "type": "number"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            },
            "lastModifiedAt": {
              "type": "string",
              "format": "date-time"
            },
            "lastModifiedBy": {
              "description": "Present on resources updated after 1/02/2019 except for events not tracked.",
              "$ref": "#/definitions/LastModifiedBy"
            },
            "createdBy": {
              "description": "Present on resources created after 1/02/2019 except for events not tracked.",
              "$ref": "#/definitions/CreatedBy"
            },
            "key": {
              "description": "Unique identifier for this edit.",
              "type": "string"
            },
            "resource": {
              "description": "The order to be updated with this edit.",
              "$ref": "#/definitions/OrderReference"
            },
            "stagedActions": {
              "description": "The actions to apply to the Order.\nCannot be updated after the edit has been applied.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/StagedOrderUpdateAction"
              }
            },
            "custom": {
              "$ref": "#/definitions/CustomFields"
            },
            "result": {
              "description": "Contains a preview of the changes in case of unapplied edit.\nFor applied edits, it contains the summary of the changes.",
              "$ref": "#/definitions/OrderEditResult"
            },
            "comment": {
              "description": "This field can be used to add textual information regarding the edit.",
              "type": "string"
            }
          },
          "required": [
            "id",
            "version",
            "createdAt",
            "lastModifiedAt",
            "resource",
            "stagedActions",
            "result"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#orderedit",
      "x-annotation-updateType": "OrderEditUpdate"
    },
    "OrderEditApplied": {
      "title": "OrderEditApplied",
      "allOf": [
        {
          "$ref": "#/definitions/OrderEditResult"
        },
        {
          "properties": {
            "appliedAt": {
              "type": "string",
              "format": "date-time"
            },
            "excerptBeforeEdit": {
              "$ref": "#/definitions/OrderExcerpt"
            },
            "excerptAfterEdit": {
              "$ref": "#/definitions/OrderExcerpt"
            }
          },
          "required": [
            "appliedAt",
            "excerptBeforeEdit",
            "excerptAfterEdit"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#ordereditapplied"
    },
    "OrderEditApply": {
      "title": "OrderEditApply",
      "type": "object",
      "properties": {
        "editVersion": {
          "type": "integer"
        },
        "resourceVersion": {
          "type": "integer"
        }
      },
      "required": [
        "editVersion",
        "resourceVersion"
      ],
      "x-annotation-package": "OrderEdit"
    },
    "OrderEditDraft": {
      "title": "OrderEditDraft",
      "type": "object",
      "properties": {
        "key": {
          "description": "Unique identifier for this edit.",
          "type": "string"
        },
        "resource": {
          "description": "The order to be updated with this edit.",
          "$ref": "#/definitions/OrderReference"
        },
        "stagedActions": {
          "description": "The actions to apply to `resource`.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/StagedOrderUpdateAction"
          }
        },
        "custom": {
          "description": "The custom fields.",
          "$ref": "#/definitions/CustomFieldsDraft"
        },
        "comment": {
          "description": "This field can be used to add additional textual information regarding the edit.",
          "type": "string"
        },
        "dryRun": {
          "description": "When set to `true` the edit is applied on the Order without persisting it.",
          "type": "boolean"
        }
      },
      "required": [
        "resource"
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#ordereditdraft"
    },
    "OrderEditNotProcessed": {
      "title": "OrderEditNotProcessed",
      "$ref": "#/definitions/OrderEditResult",
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#ordereditnotprocessed"
    },
    "OrderEditPagedQueryResponse": {
      "title": "OrderEditPagedQueryResponse",
      "type": "object",
      "properties": {
        "limit": {
          "format": "int64",
          "type": "number"
        },
        "count": {
          "format": "int64",
          "type": "number"
        },
        "total": {
          "format": "int64",
          "type": "number"
        },
        "offset": {
          "format": "int64",
          "type": "number"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderEdit"
          }
        }
      },
      "required": [
        "limit",
        "count",
        "offset",
        "results"
      ],
      "x-annotation-package": "OrderEdit"
    },
    "OrderEditPreviewFailure": {
      "title": "OrderEditPreviewFailure",
      "allOf": [
        {
          "$ref": "#/definitions/OrderEditResult"
        },
        {
          "properties": {
            "errors": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ErrorObject"
              }
            }
          },
          "required": [
            "errors"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#ordereditpreviewfailure"
    },
    "OrderEditPreviewSuccess": {
      "title": "OrderEditPreviewSuccess",
      "allOf": [
        {
          "$ref": "#/definitions/OrderEditResult"
        },
        {
          "properties": {
            "preview": {
              "$ref": "#/definitions/StagedOrder"
            },
            "messagePayloads": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MessagePayload"
              }
            }
          },
          "required": [
            "preview",
            "messagePayloads"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#ordereditpreviewsuccess"
    },
    "OrderEditReference": {
      "title": "OrderEditReference",
      "allOf": [
        {
          "$ref": "#/definitions/Reference"
        },
        {
          "properties": {
            "obj": {
              "$ref": "#/definitions/OrderEdit"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit"
    },
    "OrderEditResourceIdentifier": {
      "title": "OrderEditResourceIdentifier",
      "$ref": "#/definitions/ResourceIdentifier",
      "x-annotation-package": "OrderEdit"
    },
    "OrderEditResult": {
      "title": "OrderEditResult",
      "discriminator": "type",
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#ordereditresult"
    },
    "OrderEditUpdate": {
      "title": "OrderEditUpdate",
      "type": "object",
      "properties": {
        "version": {
          "format": "int64",
          "type": "number"
        },
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderEditUpdateAction"
          }
        },
        "dryRun": {
          "type": "boolean"
        }
      },
      "required": [
        "version",
        "actions"
      ],
      "x-annotation-package": "OrderEdit"
    },
    "OrderEditUpdateAction": {
      "title": "OrderEditUpdateAction",
      "discriminator": "action",
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        }
      },
      "required": [
        "action"
      ],
      "x-annotation-package": "OrderEdit"
    },
    "OrderExcerpt": {
      "title": "OrderExcerpt",
      "type": "object",
      "properties": {
        "totalPrice": {
          "$ref": "#/definitions/TypedMoney"
        },
        "taxedPrice": {
          "$ref": "#/definitions/TaxedPrice"
        },
        "version": {
          "type": "integer"
        }
      },
      "required": [
        "totalPrice",
        "version"
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#orderexcerpt"
    },
    "StagedOrder": {
      "title": "StagedOrder",
      "$ref": "#/definitions/Order",
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html",
      "x-annotation-actionType": "StagedOrderUpdateAction"
    },
    "StagedOrderUpdateAction": {
      "title": "StagedOrderUpdateAction",
      "discriminator": "action",
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        }
      },
      "required": [
        "action"
      ],
      "x-annotation-package": "Order",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#stagedorderupdateaction"
    },
    "OrderEditAddStagedActionAction": {
      "title": "OrderEditAddStagedActionAction",
      "allOf": [
        {
          "$ref": "#/definitions/OrderEditUpdateAction"
        },
        {
          "properties": {
            "stagedAction": {
              "$ref": "#/definitions/StagedOrderUpdateAction"
            }
          },
          "required": [
            "stagedAction"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#addstagedaction",
      "x-annotation-postman-example": null
    },
    "OrderEditSetCommentAction": {
      "title": "OrderEditSetCommentAction",
      "allOf": [
        {
          "$ref": "#/definitions/OrderEditUpdateAction"
        },
        {
          "properties": {
            "comment": {
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#set-comment",
      "x-annotation-postman-example": null
    },
    "OrderEditSetCustomFieldAction": {
      "title": "OrderEditSetCustomFieldAction",
      "allOf": [
        {
          "$ref": "#/definitions/OrderEditUpdateAction"
        },
        {
          "properties": {
            "name": {
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#setcustomfield",
      "x-annotation-postman-example": null
    },
    "OrderEditSetCustomTypeAction": {
      "title": "OrderEditSetCustomTypeAction",
      "allOf": [
        {
          "$ref": "#/definitions/OrderEditUpdateAction"
        },
        {
          "properties": {
            "type": {
              "description": "If set, the custom type is set to this new value.\nIf absent, the custom type and any existing custom fields are removed.",
              "$ref": "#/definitions/TypeResourceIdentifier"
            },
            "fields": {
              "description": "If set, the custom fields are set to this new value.",
              "type": "object"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#setcustomtype",
      "x-annotation-postman-example": null
    },
    "OrderEditSetKeyAction": {
      "title": "OrderEditSetKeyAction",
      "allOf": [
        {
          "$ref": "#/definitions/OrderEditUpdateAction"
        },
        {
          "properties": {
            "key": {
              "description": "If `key` is absent or `null`, this field will be removed if it exists.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#setkey",
      "x-annotation-postman-example": null
    },
    "OrderEditSetStagedActionsAction": {
      "title": "OrderEditSetStagedActionsAction",
      "allOf": [
        {
          "$ref": "#/definitions/OrderEditUpdateAction"
        },
        {
          "properties": {
            "stagedActions": {
              "description": "The actions to edit the `resource`.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/StagedOrderUpdateAction"
              }
            }
          },
          "required": [
            "stagedActions"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#setstagedactions",
      "x-annotation-postman-example": null
    },
    "StagedOrderAddCustomLineItemAction": {
      "title": "StagedOrderAddCustomLineItemAction",
      "allOf": [
        {
          "$ref": "#/definitions/StagedOrderUpdateAction"
        },
        {
          "properties": {
            "money": {
              "$ref": "#/definitions/Money"
            },
            "name": {
              "$ref": "#/definitions/LocalizedString"
            },
            "quantity": {
              "type": "number"
            },
            "slug": {
              "type": "string"
            },
            "taxCategory": {
              "$ref": "#/definitions/TaxCategoryResourceIdentifier"
            },
            "custom": {
              "$ref": "#/definitions/CustomFieldsDraft"
            },
            "externalTaxRate": {
              "$ref": "#/definitions/ExternalTaxRateDraft"
            }
          },
          "required": [
            "money",
            "name",
            "slug"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#add-customlineitem",
      "x-annotation-postman-example": null
    },
    "StagedOrderAddDeliveryAction": {
      "title": "StagedOrderAddDeliveryAction",
      "allOf": [
        {
          "$ref": "#/definitions/StagedOrderUpdateAction"
        },
        {
          "properties": {
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeliveryItem"
              }
            },
            "address": {
              "$ref": "#/definitions/Address"
            },
            "parcels": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ParcelDraft"
              }
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#add-delivery",
      "x-annotation-postman-example": null
    },
    "StagedOrderAddDiscountCodeAction": {
      "title": "StagedOrderAddDiscountCodeAction",
      "allOf": [
        {
          "$ref": "#/definitions/StagedOrderUpdateAction"
        },
        {
          "properties": {
            "code": {
              "type": "string"
            }
          },
          "required": [
            "code"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#add-discountcode",
      "x-annotation-postman-example": null
    },
    "StagedOrderAddItemShippingAddressAction": {
      "title": "StagedOrderAddItemShippingAddressAction",
      "allOf": [
        {
          "$ref": "#/definitions/StagedOrderUpdateAction"
        },
        {
          "properties": {
            "address": {
              "$ref": "#/definitions/Address"
            }
          },
          "required": [
            "address"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#add-itemshippingaddress",
      "x-annotation-postman-example": null
    },
    "StagedOrderAddLineItemAction": {
      "title": "StagedOrderAddLineItemAction",
      "allOf": [
        {
          "$ref": "#/definitions/StagedOrderUpdateAction"
        },
        {
          "properties": {
            "custom": {
              "$ref": "#/definitions/CustomFieldsDraft"
            },
            "distributionChannel": {
              "$ref": "#/definitions/ChannelResourceIdentifier"
            },
            "externalTaxRate": {
              "$ref": "#/definitions/ExternalTaxRateDraft"
            },
            "productId": {
              "type": "string"
            },
            "variantId": {
              "format": "int64",
              "type": "number"
            },
            "sku": {
              "type": "string"
            },
            "quantity": {
              "type": "number"
            },
            "supplyChannel": {
              "$ref": "#/definitions/ChannelResourceIdentifier"
            },
            "externalPrice": {
              "$ref": "#/definitions/Money"
            },
            "externalTotalPrice": {
              "$ref": "#/definitions/ExternalLineItemTotalPrice"
            },
            "shippingDetails": {
              "$ref": "#/definitions/ItemShippingDetailsDraft"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#add-lineitem",
      "x-annotation-postman-example": null
    },
    "StagedOrderAddParcelToDeliveryAction": {
      "title": "StagedOrderAddParcelToDeliveryAction",
      "allOf": [
        {
          "$ref": "#/definitions/StagedOrderUpdateAction"
        },
        {
          "properties": {
            "deliveryId": {
              "type": "string"
            },
            "measurements": {
              "$ref": "#/definitions/ParcelMeasurements"
            },
            "trackingData": {
              "$ref": "#/definitions/TrackingData"
            },
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeliveryItem"
              }
            }
          },
          "required": [
            "deliveryId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#add-parcel",
      "x-annotation-postman-example": null
    },
    "StagedOrderAddPaymentAction": {
      "title": "StagedOrderAddPaymentAction",
      "allOf": [
        {
          "$ref": "#/definitions/StagedOrderUpdateAction"
        },
        {
          "properties": {
            "payment": {
              "$ref": "#/definitions/PaymentResourceIdentifier"
            }
          },
          "required": [
            "payment"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#add-payment",
      "x-annotation-postman-example": null
    },
    "StagedOrderAddReturnInfoAction": {
      "title": "StagedOrderAddReturnInfoAction",
      "allOf": [
        {
          "$ref": "#/definitions/StagedOrderUpdateAction"
        },
        {
          "properties": {
            "returnTrackingId": {
              "type": "string"
            },
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ReturnItemDraft"
              }
            },
            "returnDate": {
              "type": "string",
              "format": "date-time"
            }
          },
          "required": [
            "items"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#add-returninfo",
      "x-annotation-postman-example": null
    },
    "StagedOrderAddShoppingListAction": {
      "title": "StagedOrderAddShoppingListAction",
      "allOf": [
        {
          "$ref": "#/definitions/StagedOrderUpdateAction"
        },
        {
          "properties": {
            "shoppingList": {
              "$ref": "#/definitions/ShoppingListResourceIdentifier"
            },
            "supplyChannel": {
              "$ref": "#/definitions/ChannelResourceIdentifier"
            },
            "distributionChannel": {
              "$ref": "#/definitions/ChannelResourceIdentifier"
            }
          },
          "required": [
            "shoppingList"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#add-shopping-list",
      "x-annotation-postman-example": null
    },
    "StagedOrderChangeCustomLineItemMoneyAction": {
      "title": "StagedOrderChangeCustomLineItemMoneyAction",
      "allOf": [
        {
          "$ref": "#/definitions/StagedOrderUpdateAction"
        },
        {
          "properties": {
            "customLineItemId": {
              "type": "string"
            },
            "money": {
              "$ref": "#/definitions/Money"
            }
          },
          "required": [
            "customLineItemId",
            "money"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#change-customlineitem-money",
      "x-annotation-postman-example": null
    },
    "StagedOrderChangeCustomLineItemQuantityAction": {
      "title": "StagedOrderChangeCustomLineItemQuantityAction",
      "allOf": [
        {
          "$ref": "#/definitions/StagedOrderUpdateAction"
        },
        {
          "properties": {
            "customLineItemId": {
              "type": "string"
            },
            "quantity": {
              "type": "number"
            }
          },
          "required": [
            "customLineItemId",
            "quantity"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#change-customlineitem-quantity",
      "x-annotation-postman-example": null
    },
    "StagedOrderChangeLineItemQuantityAction": {
      "title": "StagedOrderChangeLineItemQuantityAction",
      "allOf": [
        {
          "$ref": "#/definitions/StagedOrderUpdateAction"
        },
        {
          "properties": {
            "lineItemId": {
              "type": "string"
            },
            "quantity": {
              "type": "number"
            },
            "externalPrice": {
              "$ref": "#/definitions/Money"
            },
            "externalTotalPrice": {
              "$ref": "#/definitions/ExternalLineItemTotalPrice"
            }
          },
          "required": [
            "lineItemId",
            "quantity"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#change-lineitem-quantity",
      "x-annotation-postman-example": null
    },
    "StagedOrderChangeOrderStateAction": {
      "title": "StagedOrderChangeOrderStateAction",
      "allOf": [
        {
          "$ref": "#/definitions/StagedOrderUpdateAction"
        },
        {
          "properties": {
            "orderState": {
              "$ref": "#/definitions/OrderState"
            }
          },
          "required": [
            "orderState"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#change-orderstate",
      "x-annotation-postman-example": null
    },
    "StagedOrderChangePaymentStateAction": {
      "title": "StagedOrderChangePaymentStateAction",
      "allOf": [
        {
          "$ref": "#/definitions/StagedOrderUpdateAction"
        },
        {
          "properties": {
            "paymentState": {
              "$ref": "#/definitions/PaymentState"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#change-paymentstate",
      "x-annotation-postman-example": null
    },
    "StagedOrderChangeShipmentStateAction": {
      "title": "StagedOrderChangeShipmentStateAction",
      "allOf": [
        {
          "$ref": "#/definitions/StagedOrderUpdateAction"
        },
        {
          "properties": {
            "shipmentState": {
              "$ref": "#/definitions/ShipmentState"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#change-shipmentstate",
      "x-annotation-postman-example": null
    },
    "StagedOrderChangeTaxCalculationModeAction": {
      "title": "StagedOrderChangeTaxCalculationModeAction",
      "allOf": [
        {
          "$ref": "#/definitions/StagedOrderUpdateAction"
        },
        {
          "properties": {
            "taxCalculationMode": {
              "$ref": "#/definitions/TaxCalculationMode"
            }
          },
          "required": [
            "taxCalculationMode"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#change-taxcalculationmode",
      "x-annotation-postman-example": null
    },
    "StagedOrderChangeTaxModeAction": {
      "title": "StagedOrderChangeTaxModeAction",
      "allOf": [
        {
          "$ref": "#/definitions/StagedOrderUpdateAction"
        },
        {
          "properties": {
            "taxMode": {
              "$ref": "#/definitions/TaxMode"
            }
          },
          "required": [
            "taxMode"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#change-taxmode",
      "x-annotation-postman-example": null
    },
    "StagedOrderChangeTaxRoundingModeAction": {
      "title": "StagedOrderChangeTaxRoundingModeAction",
      "allOf": [
        {
          "$ref": "#/definitions/StagedOrderUpdateAction"
        },
        {
          "properties": {
            "taxRoundingMode": {
              "$ref": "#/definitions/RoundingMode"
            }
          },
          "required": [
            "taxRoundingMode"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#change-tax-roundingmode",
      "x-annotation-postman-example": null
    },
    "StagedOrderImportCustomLineItemStateAction": {
      "title": "StagedOrderImportCustomLineItemStateAction",
      "allOf": [
        {
          "$ref": "#/definitions/StagedOrderUpdateAction"
        },
        {
          "properties": {
            "customLineItemId": {
              "type": "string"
            },
            "state": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ItemState"
              }
            }
          },
          "required": [
            "customLineItemId",
            "state"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#import-state-for-customlineitems",
      "x-annotation-postman-example": null
    },
    "StagedOrderImportLineItemStateAction": {
      "title": "StagedOrderImportLineItemStateAction",
      "allOf": [
        {
          "$ref": "#/definitions/StagedOrderUpdateAction"
        },
        {
          "properties": {
            "lineItemId": {
              "type": "string"
            },
            "state": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ItemState"
              }
            }
          },
          "required": [
            "lineItemId",
            "state"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#import-state-for-lineitems",
      "x-annotation-postman-example": null
    },
    "StagedOrderRemoveCustomLineItemAction": {
      "title": "StagedOrderRemoveCustomLineItemAction",
      "allOf": [
        {
          "$ref": "#/definitions/StagedOrderUpdateAction"
        },
        {
          "properties": {
            "customLineItemId": {
              "type": "string"
            }
          },
          "required": [
            "customLineItemId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#remove-customlineitem",
      "x-annotation-postman-example": null
    },
    "StagedOrderRemoveDeliveryAction": {
      "title": "StagedOrderRemoveDeliveryAction",
      "allOf": [
        {
          "$ref": "#/definitions/StagedOrderUpdateAction"
        },
        {
          "properties": {
            "deliveryId": {
              "type": "string"
            }
          },
          "required": [
            "deliveryId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#remove-delivery",
      "x-annotation-postman-example": null
    },
    "StagedOrderRemoveDiscountCodeAction": {
      "title": "StagedOrderRemoveDiscountCodeAction",
      "allOf": [
        {
          "$ref": "#/definitions/StagedOrderUpdateAction"
        },
        {
          "properties": {
            "discountCode": {
              "$ref": "#/definitions/DiscountCodeReference"
            }
          },
          "required": [
            "discountCode"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#remove-discountcode",
      "x-annotation-postman-example": null
    },
    "StagedOrderRemoveItemShippingAddressAction": {
      "title": "StagedOrderRemoveItemShippingAddressAction",
      "allOf": [
        {
          "$ref": "#/definitions/StagedOrderUpdateAction"
        },
        {
          "properties": {
            "addressKey": {
              "type": "string"
            }
          },
          "required": [
            "addressKey"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#remove-itemshippingaddress",
      "x-annotation-postman-example": null
    },
    "StagedOrderRemoveLineItemAction": {
      "title": "StagedOrderRemoveLineItemAction",
      "allOf": [
        {
          "$ref": "#/definitions/StagedOrderUpdateAction"
        },
        {
          "properties": {
            "lineItemId": {
              "type": "string"
            },
            "quantity": {
              "type": "number"
            },
            "externalPrice": {
              "$ref": "#/definitions/Money"
            },
            "externalTotalPrice": {
              "$ref": "#/definitions/ExternalLineItemTotalPrice"
            },
            "shippingDetailsToRemove": {
              "$ref": "#/definitions/ItemShippingDetailsDraft"
            }
          },
          "required": [
            "lineItemId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#remove-lineitem",
      "x-annotation-postman-example": null
    },
    "StagedOrderRemoveParcelFromDeliveryAction": {
      "title": "StagedOrderRemoveParcelFromDeliveryAction",
      "allOf": [
        {
          "$ref": "#/definitions/StagedOrderUpdateAction"
        },
        {
          "properties": {
            "parcelId": {
              "type": "string"
            }
          },
          "required": [
            "parcelId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#remove-parcel-from-delivery",
      "x-annotation-postman-example": null
    },
    "StagedOrderRemovePaymentAction": {
      "title": "StagedOrderRemovePaymentAction",
      "allOf": [
        {
          "$ref": "#/definitions/StagedOrderUpdateAction"
        },
        {
          "properties": {
            "payment": {
              "$ref": "#/definitions/PaymentResourceIdentifier"
            }
          },
          "required": [
            "payment"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#remove-payment",
      "x-annotation-postman-example": null
    },
    "StagedOrderSetBillingAddressAction": {
      "title": "StagedOrderSetBillingAddressAction",
      "allOf": [
        {
          "$ref": "#/definitions/StagedOrderUpdateAction"
        },
        {
          "properties": {
            "address": {
              "$ref": "#/definitions/Address"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#set-billing-address",
      "x-annotation-postman-example": null
    },
    "StagedOrderSetCountryAction": {
      "title": "StagedOrderSetCountryAction",
      "allOf": [
        {
          "$ref": "#/definitions/StagedOrderUpdateAction"
        },
        {
          "properties": {
            "country": {
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#set-country",
      "x-annotation-postman-example": null
    },
    "StagedOrderSetCustomFieldAction": {
      "title": "StagedOrderSetCustomFieldAction",
      "allOf": [
        {
          "$ref": "#/definitions/StagedOrderUpdateAction"
        },
        {
          "properties": {
            "name": {
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#set-customfield",
      "x-annotation-postman-example": null
    },
    "StagedOrderSetCustomLineItemCustomFieldAction": {
      "title": "StagedOrderSetCustomLineItemCustomFieldAction",
      "allOf": [
        {
          "$ref": "#/definitions/StagedOrderUpdateAction"
        },
        {
          "properties": {
            "customLineItemId": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          },
          "required": [
            "customLineItemId",
            "name"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#set-customlineitem-customfield",
      "x-annotation-postman-example": null
    },
    "StagedOrderSetCustomLineItemCustomTypeAction": {
      "title": "StagedOrderSetCustomLineItemCustomTypeAction",
      "allOf": [
        {
          "$ref": "#/definitions/StagedOrderUpdateAction"
        },
        {
          "properties": {
            "customLineItemId": {
              "type": "string"
            },
            "type": {
              "$ref": "#/definitions/TypeResourceIdentifier"
            },
            "fields": {
              "$ref": "#/definitions/FieldContainer"
            }
          },
          "required": [
            "customLineItemId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#set-customlineitem-custom-type",
      "x-annotation-postman-example": null
    },
    "StagedOrderSetCustomLineItemShippingDetailsAction": {
      "title": "StagedOrderSetCustomLineItemShippingDetailsAction",
      "allOf": [
        {
          "$ref": "#/definitions/StagedOrderUpdateAction"
        },
        {
          "properties": {
            "customLineItemId": {
              "type": "string"
            },
            "shippingDetails": {
              "$ref": "#/definitions/ItemShippingDetailsDraft"
            }
          },
          "required": [
            "customLineItemId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#set-customlineitemshippingdetails",
      "x-annotation-postman-example": null
    },
    "StagedOrderSetCustomLineItemTaxAmountAction": {
      "title": "StagedOrderSetCustomLineItemTaxAmountAction",
      "allOf": [
        {
          "$ref": "#/definitions/StagedOrderUpdateAction"
        },
        {
          "properties": {
            "customLineItemId": {
              "type": "string"
            },
            "externalTaxAmount": {
              "$ref": "#/definitions/ExternalTaxAmountDraft"
            }
          },
          "required": [
            "customLineItemId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#set-customlineitem-taxamount",
      "x-annotation-postman-example": null
    },
    "StagedOrderSetCustomLineItemTaxRateAction": {
      "title": "StagedOrderSetCustomLineItemTaxRateAction",
      "allOf": [
        {
          "$ref": "#/definitions/StagedOrderUpdateAction"
        },
        {
          "properties": {
            "customLineItemId": {
              "type": "string"
            },
            "externalTaxRate": {
              "$ref": "#/definitions/ExternalTaxRateDraft"
            }
          },
          "required": [
            "customLineItemId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#set-customlineitem-taxrate",
      "x-annotation-postman-example": null
    },
    "StagedOrderSetCustomShippingMethodAction": {
      "title": "StagedOrderSetCustomShippingMethodAction",
      "allOf": [
        {
          "$ref": "#/definitions/StagedOrderUpdateAction"
        },
        {
          "properties": {
            "shippingMethodName": {
              "type": "string"
            },
            "shippingRate": {
              "$ref": "#/definitions/ShippingRateDraft"
            },
            "taxCategory": {
              "$ref": "#/definitions/TaxCategoryResourceIdentifier"
            },
            "externalTaxRate": {
              "$ref": "#/definitions/ExternalTaxRateDraft"
            }
          },
          "required": [
            "shippingMethodName",
            "shippingRate"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#set-custom-shipping-method",
      "x-annotation-postman-example": null
    },
    "StagedOrderSetCustomTypeAction": {
      "title": "StagedOrderSetCustomTypeAction",
      "allOf": [
        {
          "$ref": "#/definitions/StagedOrderUpdateAction"
        },
        {
          "properties": {
            "type": {
              "$ref": "#/definitions/TypeResourceIdentifier"
            },
            "fields": {
              "$ref": "#/definitions/FieldContainer"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#set-custom-type",
      "x-annotation-postman-example": null
    },
    "StagedOrderSetCustomerEmailAction": {
      "title": "StagedOrderSetCustomerEmailAction",
      "allOf": [
        {
          "$ref": "#/definitions/StagedOrderUpdateAction"
        },
        {
          "properties": {
            "email": {
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#set-customer-email",
      "x-annotation-postman-example": null
    },
    "StagedOrderSetCustomerGroupAction": {
      "title": "StagedOrderSetCustomerGroupAction",
      "allOf": [
        {
          "$ref": "#/definitions/StagedOrderUpdateAction"
        },
        {
          "properties": {
            "customerGroup": {
              "$ref": "#/definitions/CustomerGroupResourceIdentifier"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#set-customer-group",
      "x-annotation-postman-example": null
    },
    "StagedOrderSetCustomerIdAction": {
      "title": "StagedOrderSetCustomerIdAction",
      "allOf": [
        {
          "$ref": "#/definitions/StagedOrderUpdateAction"
        },
        {
          "properties": {
            "customerId": {
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#set-customer-id",
      "x-annotation-postman-example": null
    },
    "StagedOrderSetDeliveryAddressAction": {
      "title": "StagedOrderSetDeliveryAddressAction",
      "allOf": [
        {
          "$ref": "#/definitions/StagedOrderUpdateAction"
        },
        {
          "properties": {
            "deliveryId": {
              "type": "string"
            },
            "address": {
              "$ref": "#/definitions/Address"
            }
          },
          "required": [
            "deliveryId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#set-delivery-address",
      "x-annotation-postman-example": null
    },
    "StagedOrderSetDeliveryItemsAction": {
      "title": "StagedOrderSetDeliveryItemsAction",
      "allOf": [
        {
          "$ref": "#/definitions/StagedOrderUpdateAction"
        },
        {
          "properties": {
            "deliveryId": {
              "type": "string"
            },
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeliveryItem"
              }
            }
          },
          "required": [
            "deliveryId",
            "items"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#set-delivery-items",
      "x-annotation-postman-example": null
    },
    "StagedOrderSetLineItemCustomFieldAction": {
      "title": "StagedOrderSetLineItemCustomFieldAction",
      "allOf": [
        {
          "$ref": "#/definitions/StagedOrderUpdateAction"
        },
        {
          "properties": {
            "lineItemId": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          },
          "required": [
            "lineItemId",
            "name"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#set-lineitem-customfield",
      "x-annotation-postman-example": null
    },
    "StagedOrderSetLineItemCustomTypeAction": {
      "title": "StagedOrderSetLineItemCustomTypeAction",
      "allOf": [
        {
          "$ref": "#/definitions/StagedOrderUpdateAction"
        },
        {
          "properties": {
            "lineItemId": {
              "type": "string"
            },
            "type": {
              "$ref": "#/definitions/TypeResourceIdentifier"
            },
            "fields": {
              "$ref": "#/definitions/FieldContainer"
            }
          },
          "required": [
            "lineItemId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#set-lineitem-custom-type",
      "x-annotation-postman-example": null
    },
    "StagedOrderSetLineItemPriceAction": {
      "title": "StagedOrderSetLineItemPriceAction",
      "allOf": [
        {
          "$ref": "#/definitions/StagedOrderUpdateAction"
        },
        {
          "properties": {
            "lineItemId": {
              "type": "string"
            },
            "externalPrice": {
              "$ref": "#/definitions/Money"
            }
          },
          "required": [
            "lineItemId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#set-lineitem-price",
      "x-annotation-postman-example": null
    },
    "StagedOrderSetLineItemShippingDetailsAction": {
      "title": "StagedOrderSetLineItemShippingDetailsAction",
      "allOf": [
        {
          "$ref": "#/definitions/StagedOrderUpdateAction"
        },
        {
          "properties": {
            "lineItemId": {
              "type": "string"
            },
            "shippingDetails": {
              "$ref": "#/definitions/ItemShippingDetailsDraft"
            }
          },
          "required": [
            "lineItemId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#set-lineitemshippingdetails",
      "x-annotation-postman-example": null
    },
    "StagedOrderSetLineItemTaxAmountAction": {
      "title": "StagedOrderSetLineItemTaxAmountAction",
      "allOf": [
        {
          "$ref": "#/definitions/StagedOrderUpdateAction"
        },
        {
          "properties": {
            "lineItemId": {
              "type": "string"
            },
            "externalTaxAmount": {
              "$ref": "#/definitions/ExternalTaxAmountDraft"
            }
          },
          "required": [
            "lineItemId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#set-lineitem-taxamount",
      "x-annotation-postman-example": null
    },
    "StagedOrderSetLineItemTaxRateAction": {
      "title": "StagedOrderSetLineItemTaxRateAction",
      "allOf": [
        {
          "$ref": "#/definitions/StagedOrderUpdateAction"
        },
        {
          "properties": {
            "lineItemId": {
              "type": "string"
            },
            "externalTaxRate": {
              "$ref": "#/definitions/ExternalTaxRateDraft"
            }
          },
          "required": [
            "lineItemId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#set-lineitem-taxrate",
      "x-annotation-postman-example": null
    },
    "StagedOrderSetLineItemTotalPriceAction": {
      "title": "StagedOrderSetLineItemTotalPriceAction",
      "allOf": [
        {
          "$ref": "#/definitions/StagedOrderUpdateAction"
        },
        {
          "properties": {
            "lineItemId": {
              "type": "string"
            },
            "externalTotalPrice": {
              "$ref": "#/definitions/ExternalLineItemTotalPrice"
            }
          },
          "required": [
            "lineItemId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#set-lineitem-totalprice",
      "x-annotation-postman-example": null
    },
    "StagedOrderSetLocaleAction": {
      "title": "StagedOrderSetLocaleAction",
      "allOf": [
        {
          "$ref": "#/definitions/StagedOrderUpdateAction"
        },
        {
          "properties": {
            "locale": {
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#set-locale",
      "x-annotation-postman-example": null
    },
    "StagedOrderSetOrderNumberAction": {
      "title": "StagedOrderSetOrderNumberAction",
      "allOf": [
        {
          "$ref": "#/definitions/StagedOrderUpdateAction"
        },
        {
          "properties": {
            "orderNumber": {
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#set-order-number",
      "x-annotation-postman-example": null
    },
    "StagedOrderSetOrderTotalTaxAction": {
      "title": "StagedOrderSetOrderTotalTaxAction",
      "allOf": [
        {
          "$ref": "#/definitions/StagedOrderUpdateAction"
        },
        {
          "properties": {
            "externalTotalGross": {
              "$ref": "#/definitions/Money"
            },
            "externalTaxPortions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaxPortionDraft"
              }
            }
          },
          "required": [
            "externalTotalGross"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#set-order-total-tax",
      "x-annotation-postman-example": null
    },
    "StagedOrderSetParcelItemsAction": {
      "title": "StagedOrderSetParcelItemsAction",
      "allOf": [
        {
          "$ref": "#/definitions/StagedOrderUpdateAction"
        },
        {
          "properties": {
            "parcelId": {
              "type": "string"
            },
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeliveryItem"
              }
            }
          },
          "required": [
            "parcelId",
            "items"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#set-parcel-items",
      "x-annotation-postman-example": null
    },
    "StagedOrderSetParcelMeasurementsAction": {
      "title": "StagedOrderSetParcelMeasurementsAction",
      "allOf": [
        {
          "$ref": "#/definitions/StagedOrderUpdateAction"
        },
        {
          "properties": {
            "parcelId": {
              "type": "string"
            },
            "measurements": {
              "$ref": "#/definitions/ParcelMeasurements"
            }
          },
          "required": [
            "parcelId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#set-parcel-measurements",
      "x-annotation-postman-example": null
    },
    "StagedOrderSetParcelTrackingDataAction": {
      "title": "StagedOrderSetParcelTrackingDataAction",
      "allOf": [
        {
          "$ref": "#/definitions/StagedOrderUpdateAction"
        },
        {
          "properties": {
            "parcelId": {
              "type": "string"
            },
            "trackingData": {
              "$ref": "#/definitions/TrackingData"
            }
          },
          "required": [
            "parcelId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#set-parcel-tracking-data",
      "x-annotation-postman-example": null
    },
    "StagedOrderSetReturnPaymentStateAction": {
      "title": "StagedOrderSetReturnPaymentStateAction",
      "allOf": [
        {
          "$ref": "#/definitions/StagedOrderUpdateAction"
        },
        {
          "properties": {
            "returnItemId": {
              "type": "string"
            },
            "paymentState": {
              "$ref": "#/definitions/ReturnPaymentState"
            }
          },
          "required": [
            "returnItemId",
            "paymentState"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#set-returnpaymentstate",
      "x-annotation-postman-example": null
    },
    "StagedOrderSetReturnShipmentStateAction": {
      "title": "StagedOrderSetReturnShipmentStateAction",
      "allOf": [
        {
          "$ref": "#/definitions/StagedOrderUpdateAction"
        },
        {
          "properties": {
            "returnItemId": {
              "type": "string"
            },
            "shipmentState": {
              "$ref": "#/definitions/ReturnShipmentState"
            }
          },
          "required": [
            "returnItemId",
            "shipmentState"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#set-returnshipmentstate",
      "x-annotation-postman-example": null
    },
    "StagedOrderSetShippingAddressAction": {
      "title": "StagedOrderSetShippingAddressAction",
      "allOf": [
        {
          "$ref": "#/definitions/StagedOrderUpdateAction"
        },
        {
          "properties": {
            "address": {
              "$ref": "#/definitions/Address"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#set-shipping-address",
      "x-annotation-postman-example": null
    },
    "StagedOrderSetShippingAddressAndCustomShippingMethodAction": {
      "title": "StagedOrderSetShippingAddressAndCustomShippingMethodAction",
      "allOf": [
        {
          "$ref": "#/definitions/StagedOrderUpdateAction"
        },
        {
          "properties": {
            "address": {
              "$ref": "#/definitions/Address"
            },
            "shippingMethodName": {
              "type": "string"
            },
            "shippingRate": {
              "$ref": "#/definitions/ShippingRateDraft"
            },
            "taxCategory": {
              "$ref": "#/definitions/TaxCategoryResourceIdentifier"
            },
            "externalTaxRate": {
              "$ref": "#/definitions/ExternalTaxRateDraft"
            }
          },
          "required": [
            "address",
            "shippingMethodName",
            "shippingRate"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#set-shipping-address-and-custom-shipping-method",
      "x-annotation-postman-example": null
    },
    "StagedOrderSetShippingAddressAndShippingMethodAction": {
      "title": "StagedOrderSetShippingAddressAndShippingMethodAction",
      "allOf": [
        {
          "$ref": "#/definitions/StagedOrderUpdateAction"
        },
        {
          "properties": {
            "address": {
              "$ref": "#/definitions/Address"
            },
            "shippingMethod": {
              "$ref": "#/definitions/ShippingMethodResourceIdentifier"
            },
            "externalTaxRate": {
              "$ref": "#/definitions/ExternalTaxRateDraft"
            }
          },
          "required": [
            "address"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#set-shipping-address-and-shipping-method",
      "x-annotation-postman-example": null
    },
    "StagedOrderSetShippingMethodAction": {
      "title": "StagedOrderSetShippingMethodAction",
      "allOf": [
        {
          "$ref": "#/definitions/StagedOrderUpdateAction"
        },
        {
          "properties": {
            "shippingMethod": {
              "$ref": "#/definitions/ShippingMethodResourceIdentifier"
            },
            "externalTaxRate": {
              "$ref": "#/definitions/ExternalTaxRateDraft"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#set-shipping-method",
      "x-annotation-postman-example": null
    },
    "StagedOrderSetShippingMethodTaxAmountAction": {
      "title": "StagedOrderSetShippingMethodTaxAmountAction",
      "allOf": [
        {
          "$ref": "#/definitions/StagedOrderUpdateAction"
        },
        {
          "properties": {
            "externalTaxAmount": {
              "$ref": "#/definitions/ExternalTaxAmountDraft"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#set-shippingmethod-taxamount",
      "x-annotation-postman-example": null
    },
    "StagedOrderSetShippingMethodTaxRateAction": {
      "title": "StagedOrderSetShippingMethodTaxRateAction",
      "allOf": [
        {
          "$ref": "#/definitions/StagedOrderUpdateAction"
        },
        {
          "properties": {
            "externalTaxRate": {
              "$ref": "#/definitions/ExternalTaxRateDraft"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#set-shippingmethod-taxrate",
      "x-annotation-postman-example": null
    },
    "StagedOrderSetShippingRateInputAction": {
      "title": "StagedOrderSetShippingRateInputAction",
      "allOf": [
        {
          "$ref": "#/definitions/StagedOrderUpdateAction"
        },
        {
          "properties": {
            "shippingRateInput": {
              "$ref": "#/definitions/ShippingRateInputDraft"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#set-shipping-rate-input",
      "x-annotation-postman-example": null
    },
    "StagedOrderTransitionCustomLineItemStateAction": {
      "title": "StagedOrderTransitionCustomLineItemStateAction",
      "allOf": [
        {
          "$ref": "#/definitions/StagedOrderUpdateAction"
        },
        {
          "properties": {
            "customLineItemId": {
              "type": "string"
            },
            "quantity": {
              "format": "int64",
              "type": "number"
            },
            "fromState": {
              "$ref": "#/definitions/StateResourceIdentifier"
            },
            "toState": {
              "$ref": "#/definitions/StateResourceIdentifier"
            },
            "actualTransitionDate": {
              "type": "string",
              "format": "date-time"
            }
          },
          "required": [
            "customLineItemId",
            "quantity",
            "fromState",
            "toState"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#change-the-state-of-customlineitem-according-to-allowed-transitions",
      "x-annotation-postman-example": null
    },
    "StagedOrderTransitionLineItemStateAction": {
      "title": "StagedOrderTransitionLineItemStateAction",
      "allOf": [
        {
          "$ref": "#/definitions/StagedOrderUpdateAction"
        },
        {
          "properties": {
            "lineItemId": {
              "type": "string"
            },
            "quantity": {
              "format": "int64",
              "type": "number"
            },
            "fromState": {
              "$ref": "#/definitions/StateResourceIdentifier"
            },
            "toState": {
              "$ref": "#/definitions/StateResourceIdentifier"
            },
            "actualTransitionDate": {
              "type": "string",
              "format": "date-time"
            }
          },
          "required": [
            "lineItemId",
            "quantity",
            "fromState",
            "toState"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#change-the-state-of-lineitem-according-to-allowed-transitions",
      "x-annotation-postman-example": null
    },
    "StagedOrderTransitionStateAction": {
      "title": "StagedOrderTransitionStateAction",
      "allOf": [
        {
          "$ref": "#/definitions/StagedOrderUpdateAction"
        },
        {
          "properties": {
            "state": {
              "$ref": "#/definitions/StateResourceIdentifier"
            },
            "force": {
              "type": "boolean"
            }
          },
          "required": [
            "state"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#transition-state",
      "x-annotation-postman-example": null
    },
    "StagedOrderUpdateItemShippingAddressAction": {
      "title": "StagedOrderUpdateItemShippingAddressAction",
      "allOf": [
        {
          "$ref": "#/definitions/StagedOrderUpdateAction"
        },
        {
          "properties": {
            "address": {
              "$ref": "#/definitions/Address"
            }
          },
          "required": [
            "address"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#update-itemshippingaddress",
      "x-annotation-postman-example": null
    },
    "StagedOrderUpdateSyncInfoAction": {
      "title": "StagedOrderUpdateSyncInfoAction",
      "allOf": [
        {
          "$ref": "#/definitions/StagedOrderUpdateAction"
        },
        {
          "properties": {
            "channel": {
              "$ref": "#/definitions/ChannelResourceIdentifier"
            },
            "externalId": {
              "type": "string"
            },
            "syncedAt": {
              "type": "string",
              "format": "date-time"
            }
          },
          "required": [
            "channel"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "OrderEdit",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-order-edits.html#update-syncinfo",
      "x-annotation-postman-example": null
    },
    "CustomLineItemReturnItem": {
      "title": "CustomLineItemReturnItem",
      "allOf": [
        {
          "$ref": "#/definitions/ReturnItem"
        },
        {
          "properties": {
            "customLineItemId": {
              "type": "string"
            }
          },
          "required": [
            "customLineItemId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Order",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-orders.html#returnitem"
    },
    "Delivery": {
      "title": "Delivery",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "items": {
          "description": "Items which are shipped in this delivery regardless their distribution over several parcels.\nCan also be specified individually for each Parcel.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeliveryItem"
          }
        },
        "parcels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Parcel"
          }
        },
        "address": {
          "$ref": "#/definitions/Address"
        }
      },
      "required": [
        "id",
        "createdAt",
        "items",
        "parcels"
      ],
      "x-annotation-package": "Order",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-orders.html#delivery"
    },
    "DeliveryItem": {
      "title": "DeliveryItem",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "quantity": {
          "type": "number"
        }
      },
      "required": [
        "id",
        "quantity"
      ],
      "x-annotation-package": "Order",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-orders.html#deliveryitem"
    },
    "DiscountedLineItemPriceDraft": {
      "title": "DiscountedLineItemPriceDraft",
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Money"
        },
        "includedDiscounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DiscountedLineItemPortion"
          }
        }
      },
      "required": [
        "value",
        "includedDiscounts"
      ],
      "x-annotation-package": "Order",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#discountedlineitemprice"
    },
    "ItemState": {
      "title": "ItemState",
      "type": "object",
      "properties": {
        "quantity": {
          "type": "number"
        },
        "state": {
          "$ref": "#/definitions/StateReference"
        }
      },
      "required": [
        "quantity",
        "state"
      ],
      "x-annotation-package": "Order",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-orders.html#itemstate"
    },
    "LineItemImportDraft": {
      "title": "LineItemImportDraft",
      "type": "object",
      "properties": {
        "productId": {
          "description": "ID of the existing product.\nYou also need to specify the ID of the variant if this property is set or alternatively you can just specify SKU of the product variant.",
          "type": "string"
        },
        "name": {
          "description": "The product name.",
          "$ref": "#/definitions/LocalizedString"
        },
        "variant": {
          "$ref": "#/definitions/ProductVariantImportDraft"
        },
        "price": {
          "$ref": "#/definitions/PriceDraft"
        },
        "quantity": {
          "type": "number"
        },
        "state": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ItemState"
          }
        },
        "supplyChannel": {
          "description": "Optional connection to a particular supplier.\nBy providing supply channel information, you can uniquely identify\ninventory entries that should be reserved.\nThe provided channel should have the\nInventorySupply role.",
          "$ref": "#/definitions/ChannelResourceIdentifier"
        },
        "distributionChannel": {
          "description": "The channel is used to select a ProductPrice.\nThe provided channel should have the ProductDistribution role.",
          "$ref": "#/definitions/ChannelResourceIdentifier"
        },
        "taxRate": {
          "$ref": "#/definitions/TaxRate"
        },
        "custom": {
          "description": "The custom fields.",
          "$ref": "#/definitions/CustomFieldsDraft"
        },
        "shippingDetails": {
          "$ref": "#/definitions/ItemShippingDetailsDraft"
        }
      },
      "required": [
        "name",
        "variant",
        "price",
        "quantity"
      ],
      "x-annotation-package": "Order",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-orders-import.html#lineitemimportdraft"
    },
    "LineItemReturnItem": {
      "title": "LineItemReturnItem",
      "allOf": [
        {
          "$ref": "#/definitions/ReturnItem"
        },
        {
          "properties": {
            "lineItemId": {
              "type": "string"
            }
          },
          "required": [
            "lineItemId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Order",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-orders.html#returnitem"
    },
    "Order": {
      "title": "Order",
      "allOf": [
        {
          "$ref": "#/definitions/BaseResource"
        },
        {
          "properties": {
            "id": {
              "description": "The unique ID of the order.",
              "type": "string",
              "x-annotation-identifier": true
            },
            "version": {
              "format": "int64",
              "description": "The current version of the order.",
              "type": "number"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            },
            "lastModifiedAt": {
              "type": "string",
              "format": "date-time"
            },
            "lastModifiedBy": {
              "description": "Present on resources updated after 1/02/2019 except for events not tracked.",
              "$ref": "#/definitions/LastModifiedBy"
            },
            "createdBy": {
              "description": "Present on resources created after 1/02/2019 except for events not tracked.",
              "$ref": "#/definitions/CreatedBy"
            },
            "completedAt": {
              "description": "This field will only be present if it was set for Order Import",
              "type": "string",
              "format": "date-time"
            },
            "orderNumber": {
              "description": "String that uniquely identifies an order.\nIt can be used to create more human-readable (in contrast to ID) identifier for the order.\nIt should be unique across a project.\nOnce it's set it cannot be changed.",
              "type": "string"
            },
            "customerId": {
              "type": "string"
            },
            "customerEmail": {
              "type": "string"
            },
            "anonymousId": {
              "description": "Identifies carts and orders belonging to an anonymous session (the customer has not signed up/in yet).",
              "type": "string"
            },
            "store": {
              "$ref": "#/definitions/StoreKeyReference"
            },
            "lineItems": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LineItem"
              }
            },
            "customLineItems": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomLineItem"
              }
            },
            "totalPrice": {
              "$ref": "#/definitions/TypedMoney"
            },
            "taxedPrice": {
              "description": "The taxes are calculated based on the shipping address.",
              "$ref": "#/definitions/TaxedPrice"
            },
            "shippingAddress": {
              "$ref": "#/definitions/Address"
            },
            "billingAddress": {
              "$ref": "#/definitions/Address"
            },
            "taxMode": {
              "$ref": "#/definitions/TaxMode"
            },
            "taxRoundingMode": {
              "description": "When calculating taxes for `taxedPrice`, the selected mode is used for rouding.",
              "$ref": "#/definitions/RoundingMode"
            },
            "customerGroup": {
              "description": "Set when the customer is set and the customer is a member of a customer group.\nUsed for product variant price selection.",
              "$ref": "#/definitions/CustomerGroupReference"
            },
            "country": {
              "description": "A two-digit country code as per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\nUsed for product variant price selection.",
              "type": "string"
            },
            "orderState": {
              "description": "One of the four predefined OrderStates.",
              "$ref": "#/definitions/OrderState"
            },
            "state": {
              "description": "This reference can point to a state in a custom workflow.",
              "$ref": "#/definitions/StateReference"
            },
            "shipmentState": {
              "$ref": "#/definitions/ShipmentState"
            },
            "paymentState": {
              "$ref": "#/definitions/PaymentState"
            },
            "shippingInfo": {
              "description": "Set if the ShippingMethod is set.",
              "$ref": "#/definitions/ShippingInfo"
            },
            "syncInfo": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SyncInfo"
              }
            },
            "returnInfo": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ReturnInfo"
              }
            },
            "discountCodes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DiscountCodeInfo"
              }
            },
            "lastMessageSequenceNumber": {
              "format": "int64",
              "description": "The sequence number of the last order message produced by changes to this order.\n`0` means, that no messages were created yet.",
              "type": "number"
            },
            "cart": {
              "description": "Set when this order was created from a cart.\nThe cart will have the state `Ordered`.",
              "$ref": "#/definitions/CartReference"
            },
            "custom": {
              "$ref": "#/definitions/CustomFields"
            },
            "paymentInfo": {
              "$ref": "#/definitions/PaymentInfo"
            },
            "locale": {
              "type": "string"
            },
            "inventoryMode": {
              "$ref": "#/definitions/InventoryMode"
            },
            "origin": {
              "$ref": "#/definitions/CartOrigin"
            },
            "taxCalculationMode": {
              "description": "When calculating taxes for `taxedPrice`, the selected mode is used for calculating the price with LineItemLevel (horizontally) or UnitPriceLevel (vertically) calculation mode.",
              "$ref": "#/definitions/TaxCalculationMode"
            },
            "shippingRateInput": {
              "description": "The shippingRateInput is used as an input to select a ShippingRatePriceTier.",
              "$ref": "#/definitions/ShippingRateInput"
            },
            "itemShippingAddresses": {
              "description": "Contains addresses for orders with multiple shipping addresses.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Address"
              }
            },
            "refusedGifts": {
              "description": "Automatically filled when a line item with LineItemMode `GiftLineItem` is removed from this order.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CartDiscountReference"
              }
            }
          },
          "required": [
            "id",
            "version",
            "createdAt",
            "lastModifiedAt",
            "lineItems",
            "customLineItems",
            "totalPrice",
            "orderState",
            "syncInfo",
            "lastMessageSequenceNumber",
            "origin",
            "refusedGifts"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Order",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-orders.html#order",
      "x-annotation-updateType": "OrderUpdate"
    },
    "OrderFromCartDraft": {
      "title": "OrderFromCartDraft",
      "type": "object",
      "properties": {
        "id": {
          "description": "The unique id of the cart from which an order is created.",
          "type": "string"
        },
        "version": {
          "format": "int64",
          "type": "number"
        },
        "orderNumber": {
          "description": "String that uniquely identifies an order.\nIt can be used to create more human-readable (in contrast to ID) identifier for the order.\nIt should be unique across a project.\nOnce it's set it cannot be changed.\nFor easier use on Get, Update and Delete actions we suggest assigning order numbers that match the regular expression `[a-z0-9_\\-]{2,36}`.",
          "type": "string"
        },
        "paymentState": {
          "$ref": "#/definitions/PaymentState"
        },
        "shipmentState": {
          "$ref": "#/definitions/ShipmentState"
        },
        "orderState": {
          "description": "Order will be created with `Open` status by default.",
          "$ref": "#/definitions/OrderState"
        },
        "state": {
          "$ref": "#/definitions/StateResourceIdentifier"
        }
      },
      "required": [
        "id",
        "version"
      ],
      "x-annotation-package": "Order"
    },
    "OrderImportDraft": {
      "title": "OrderImportDraft",
      "type": "object",
      "properties": {
        "orderNumber": {
          "description": "String that unique identifies an order.\nIt can be used to create more human-readable (in contrast to ID) identifier for the order.\nIt should be unique within a project.",
          "type": "string"
        },
        "customerId": {
          "description": "If given the customer with that ID must exist in the project.",
          "type": "string"
        },
        "customerEmail": {
          "description": "The customer email can be used when no check against existing Customers is desired during order import.",
          "type": "string"
        },
        "lineItems": {
          "description": "If not given `customLineItems` must not be empty.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LineItemImportDraft"
          }
        },
        "customLineItems": {
          "description": "If not given `lineItems` must not be empty.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomLineItemDraft"
          }
        },
        "totalPrice": {
          "$ref": "#/definitions/Money"
        },
        "taxedPrice": {
          "description": "Order Import does not support calculation of taxes.\nWhen setting the draft the taxedPrice is to be provided.",
          "$ref": "#/definitions/TaxedPriceDraft"
        },
        "shippingAddress": {
          "$ref": "#/definitions/Address"
        },
        "billingAddress": {
          "$ref": "#/definitions/Address"
        },
        "customerGroup": {
          "description": "Set when the customer is set and the customer is a member of a customer group.\nUsed for product variant price selection.",
          "$ref": "#/definitions/CustomerGroupResourceIdentifier"
        },
        "country": {
          "description": "A two-digit country code as per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\nUsed for product variant price selection.",
          "type": "string"
        },
        "orderState": {
          "description": "If not given the `Open` state will be assigned by default.",
          "$ref": "#/definitions/OrderState"
        },
        "shipmentState": {
          "$ref": "#/definitions/ShipmentState"
        },
        "paymentState": {
          "$ref": "#/definitions/PaymentState"
        },
        "shippingInfo": {
          "description": "Set if the ShippingMethod is set.",
          "$ref": "#/definitions/ShippingInfoImportDraft"
        },
        "completedAt": {
          "type": "string",
          "format": "date-time"
        },
        "custom": {
          "description": "The custom fields.",
          "$ref": "#/definitions/CustomFieldsDraft"
        },
        "inventoryMode": {
          "description": "If not given the mode `None` will be assigned by default.",
          "$ref": "#/definitions/InventoryMode"
        },
        "taxRoundingMode": {
          "description": "If not given the tax rounding mode `HalfEven` will be assigned by default.",
          "$ref": "#/definitions/RoundingMode"
        },
        "itemShippingAddresses": {
          "description": "Contains addresses for orders with multiple shipping addresses.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Address"
          }
        },
        "store": {
          "$ref": "#/definitions/StoreResourceIdentifier"
        },
        "origin": {
          "description": "The default origin is `Customer`.",
          "$ref": "#/definitions/CartOrigin"
        }
      },
      "required": [
        "totalPrice"
      ],
      "x-annotation-package": "Order",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-orders-import.html#orderimportdraft"
    },
    "OrderPagedQueryResponse": {
      "title": "OrderPagedQueryResponse",
      "type": "object",
      "properties": {
        "limit": {
          "format": "int64",
          "type": "number"
        },
        "count": {
          "format": "int64",
          "type": "number"
        },
        "total": {
          "format": "int64",
          "type": "number"
        },
        "offset": {
          "format": "int64",
          "type": "number"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Order"
          }
        }
      },
      "required": [
        "limit",
        "count",
        "offset",
        "results"
      ],
      "x-annotation-package": "Order"
    },
    "OrderReference": {
      "title": "OrderReference",
      "allOf": [
        {
          "$ref": "#/definitions/Reference"
        },
        {
          "properties": {
            "obj": {
              "$ref": "#/definitions/Order"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Order",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-orders.html#order"
    },
    "OrderResourceIdentifier": {
      "title": "OrderResourceIdentifier",
      "$ref": "#/definitions/ResourceIdentifier",
      "x-annotation-package": "Order",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-orders.html#order"
    },
    "OrderState": {
      "enum": [
        "Open",
        "Confirmed",
        "Complete",
        "Cancelled"
      ],
      "type": "string",
      "x-annotation-package": "Order",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-orders.html#orderstate"
    },
    "OrderUpdate": {
      "title": "OrderUpdate",
      "type": "object",
      "properties": {
        "version": {
          "format": "int64",
          "type": "number"
        },
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderUpdateAction"
          }
        }
      },
      "required": [
        "version",
        "actions"
      ],
      "x-annotation-package": "Order"
    },
    "OrderUpdateAction": {
      "title": "OrderUpdateAction",
      "discriminator": "action",
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        }
      },
      "required": [
        "action"
      ],
      "x-annotation-package": "Order"
    },
    "Parcel": {
      "title": "Parcel",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "measurements": {
          "$ref": "#/definitions/ParcelMeasurements"
        },
        "trackingData": {
          "$ref": "#/definitions/TrackingData"
        },
        "items": {
          "description": "The delivery items contained in this parcel.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeliveryItem"
          }
        }
      },
      "required": [
        "id",
        "createdAt"
      ],
      "x-annotation-package": "Order",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-orders.html#parcel"
    },
    "ParcelDraft": {
      "title": "ParcelDraft",
      "type": "object",
      "properties": {
        "measurements": {
          "$ref": "#/definitions/ParcelMeasurements"
        },
        "trackingData": {
          "$ref": "#/definitions/TrackingData"
        },
        "items": {
          "description": "The delivery items contained in this parcel.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeliveryItem"
          }
        }
      },
      "x-annotation-package": "Order",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-orders.html#parceldraft"
    },
    "ParcelMeasurements": {
      "title": "ParcelMeasurements",
      "type": "object",
      "properties": {
        "heightInMillimeter": {
          "type": "number"
        },
        "lengthInMillimeter": {
          "type": "number"
        },
        "widthInMillimeter": {
          "type": "number"
        },
        "weightInGram": {
          "type": "number"
        }
      },
      "x-annotation-package": "Order",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-orders.html#parcelmeasurements"
    },
    "PaymentInfo": {
      "title": "PaymentInfo",
      "type": "object",
      "properties": {
        "payments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PaymentReference"
          }
        }
      },
      "required": [
        "payments"
      ],
      "x-annotation-package": "Order",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-orders.html#paymentinfo"
    },
    "PaymentState": {
      "enum": [
        "BalanceDue",
        "Failed",
        "Pending",
        "CreditOwed",
        "Paid"
      ],
      "type": "string",
      "x-annotation-package": "Order",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-orders.html#paymentstate"
    },
    "ProductVariantImportDraft": {
      "title": "ProductVariantImportDraft",
      "type": "object",
      "properties": {
        "id": {
          "format": "int64",
          "description": "The sequential ID of the variant within the product.\nThe variant with provided ID should exist in some existing product, so you also need to specify the productId if this property is set,\nor alternatively you can just specify SKU of the product variant.",
          "type": "number"
        },
        "sku": {
          "description": "The SKU of the existing variant.",
          "type": "string"
        },
        "prices": {
          "description": "The prices of the variant.\nThe prices should not contain two prices for the same price scope (same currency, country and customer group).\nIf this property is defined, then it will override the `prices` property from the original product variant, otherwise `prices` property from the original product variant would be copied in the resulting order.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PriceDraft"
          }
        },
        "attributes": {
          "description": "If this property is defined, then it will override the `attributes` property from the original\nproduct variant, otherwise `attributes` property from the original product variant would be copied in the resulting order.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Attribute"
          }
        },
        "images": {
          "description": "If this property is defined, then it will override the `images` property from the original\nproduct variant, otherwise `images` property from the original product variant would be copied in the resulting order.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Image"
          }
        }
      },
      "x-annotation-package": "Order",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-orders-import.html#productvariantimportdraft"
    },
    "ReturnInfo": {
      "title": "ReturnInfo",
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReturnItem"
          }
        },
        "returnTrackingId": {
          "description": "Identifies, which return tracking ID is connected to this particular return.",
          "type": "string"
        },
        "returnDate": {
          "type": "string",
          "format": "date-time"
        }
      },
      "required": [
        "items"
      ],
      "x-annotation-package": "Order",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-orders.html#returninfo"
    },
    "ReturnItem": {
      "title": "ReturnItem",
      "discriminator": "type",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "quantity": {
          "format": "int64",
          "type": "number"
        },
        "type": {
          "type": "string"
        },
        "comment": {
          "type": "string"
        },
        "shipmentState": {
          "$ref": "#/definitions/ReturnShipmentState"
        },
        "paymentState": {
          "$ref": "#/definitions/ReturnPaymentState"
        },
        "lastModifiedAt": {
          "type": "string",
          "format": "date-time"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "quantity",
        "type",
        "shipmentState",
        "paymentState",
        "lastModifiedAt",
        "createdAt"
      ],
      "x-annotation-package": "Order",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-orders.html#returnitem"
    },
    "ReturnItemDraft": {
      "title": "ReturnItemDraft",
      "type": "object",
      "properties": {
        "quantity": {
          "format": "int64",
          "type": "number"
        },
        "lineItemId": {
          "type": "string"
        },
        "customLineItemId": {
          "type": "string"
        },
        "comment": {
          "type": "string"
        },
        "shipmentState": {
          "$ref": "#/definitions/ReturnShipmentState"
        }
      },
      "required": [
        "quantity",
        "shipmentState"
      ],
      "x-annotation-package": "Order"
    },
    "ReturnPaymentState": {
      "enum": [
        "NonRefundable",
        "Initial",
        "Refunded",
        "NotRefunded"
      ],
      "type": "string",
      "x-annotation-package": "Order",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-orders.html#returnpaymentstate"
    },
    "ReturnShipmentState": {
      "enum": [
        "Advised",
        "Returned",
        "BackInStock",
        "Unusable"
      ],
      "type": "string",
      "x-annotation-package": "Order",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-orders.html#returnshipmentstate"
    },
    "ShipmentState": {
      "enum": [
        "Shipped",
        "Ready",
        "Pending",
        "Delayed",
        "Partial",
        "Backorder"
      ],
      "type": "string",
      "x-annotation-package": "Order",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-orders.html#shipmentstate"
    },
    "ShippingInfoImportDraft": {
      "title": "ShippingInfoImportDraft",
      "type": "object",
      "properties": {
        "shippingMethodName": {
          "type": "string"
        },
        "price": {
          "$ref": "#/definitions/Money"
        },
        "shippingRate": {
          "description": "The shipping rate used to determine the price.",
          "$ref": "#/definitions/ShippingRateDraft"
        },
        "taxRate": {
          "$ref": "#/definitions/TaxRate"
        },
        "taxCategory": {
          "$ref": "#/definitions/TaxCategoryResourceIdentifier"
        },
        "shippingMethod": {
          "description": "Not set if custom shipping method is used.",
          "$ref": "#/definitions/ShippingMethodResourceIdentifier"
        },
        "deliveries": {
          "description": "Deliveries are compilations of information on how the articles are being delivered to the customers.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Delivery"
          }
        },
        "discountedPrice": {
          "$ref": "#/definitions/DiscountedLineItemPriceDraft"
        },
        "shippingMethodState": {
          "description": "Indicates whether the ShippingMethod referenced is allowed for the cart or not.",
          "$ref": "#/definitions/ShippingMethodState"
        }
      },
      "required": [
        "shippingMethodName",
        "price",
        "shippingRate"
      ],
      "x-annotation-package": "Order",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-orders-import.html#shippinginfoimportdraft"
    },
    "SyncInfo": {
      "title": "SyncInfo",
      "type": "object",
      "properties": {
        "channel": {
          "description": "Connection to a particular synchronization destination.",
          "$ref": "#/definitions/ChannelReference"
        },
        "externalId": {
          "description": "Can be used to reference an external order instance, file etc.",
          "type": "string"
        },
        "syncedAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "required": [
        "channel",
        "syncedAt"
      ],
      "x-annotation-package": "Order",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-orders.html#syncinfo"
    },
    "TaxedItemPriceDraft": {
      "title": "TaxedItemPriceDraft",
      "type": "object",
      "properties": {
        "totalNet": {
          "$ref": "#/definitions/Money"
        },
        "totalGross": {
          "$ref": "#/definitions/Money"
        }
      },
      "required": [
        "totalNet",
        "totalGross"
      ],
      "x-annotation-package": "Order"
    },
    "TrackingData": {
      "title": "TrackingData",
      "type": "object",
      "properties": {
        "trackingId": {
          "description": "The ID to track one parcel.",
          "type": "string"
        },
        "carrier": {
          "description": "The carrier that delivers the parcel.",
          "type": "string"
        },
        "provider": {
          "type": "string"
        },
        "providerTransaction": {
          "type": "string"
        },
        "isReturn": {
          "description": "Flag to distinguish if the parcel is on the way to the customer (false) or on the way back (true).",
          "type": "boolean"
        }
      },
      "x-annotation-package": "Order",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-orders.html#trackingdata"
    },
    "OrderAddDeliveryAction": {
      "title": "OrderAddDeliveryAction",
      "allOf": [
        {
          "$ref": "#/definitions/OrderUpdateAction"
        },
        {
          "properties": {
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeliveryItem"
              }
            },
            "address": {
              "$ref": "#/definitions/Address"
            },
            "parcels": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ParcelDraft"
              }
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Order",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-orders.html#add-delivery",
      "x-annotation-postman-example": null
    },
    "OrderAddItemShippingAddressAction": {
      "title": "OrderAddItemShippingAddressAction",
      "allOf": [
        {
          "$ref": "#/definitions/OrderUpdateAction"
        },
        {
          "properties": {
            "address": {
              "$ref": "#/definitions/Address"
            }
          },
          "required": [
            "address"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Order",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-orders.html#add-itemshippingaddress",
      "x-annotation-postman-example": null
    },
    "OrderAddParcelToDeliveryAction": {
      "title": "OrderAddParcelToDeliveryAction",
      "allOf": [
        {
          "$ref": "#/definitions/OrderUpdateAction"
        },
        {
          "properties": {
            "deliveryId": {
              "type": "string"
            },
            "measurements": {
              "$ref": "#/definitions/ParcelMeasurements"
            },
            "trackingData": {
              "$ref": "#/definitions/TrackingData"
            },
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeliveryItem"
              }
            }
          },
          "required": [
            "deliveryId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Order",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-orders.html#add-parcel",
      "x-annotation-postman-example": null
    },
    "OrderAddPaymentAction": {
      "title": "OrderAddPaymentAction",
      "allOf": [
        {
          "$ref": "#/definitions/OrderUpdateAction"
        },
        {
          "properties": {
            "payment": {
              "$ref": "#/definitions/PaymentResourceIdentifier"
            }
          },
          "required": [
            "payment"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Order",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-orders.html#add-payment",
      "x-annotation-postman-example": null
    },
    "OrderAddReturnInfoAction": {
      "title": "OrderAddReturnInfoAction",
      "allOf": [
        {
          "$ref": "#/definitions/OrderUpdateAction"
        },
        {
          "properties": {
            "returnTrackingId": {
              "type": "string"
            },
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ReturnItemDraft"
              }
            },
            "returnDate": {
              "type": "string",
              "format": "date-time"
            }
          },
          "required": [
            "items"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Order",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-orders.html#add-returninfo",
      "x-annotation-postman-example": null
    },
    "OrderChangeOrderStateAction": {
      "title": "OrderChangeOrderStateAction",
      "allOf": [
        {
          "$ref": "#/definitions/OrderUpdateAction"
        },
        {
          "properties": {
            "orderState": {
              "$ref": "#/definitions/OrderState"
            }
          },
          "required": [
            "orderState"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Order",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-orders.html#change-orderstate",
      "x-annotation-postman-example": null
    },
    "OrderChangePaymentStateAction": {
      "title": "OrderChangePaymentStateAction",
      "allOf": [
        {
          "$ref": "#/definitions/OrderUpdateAction"
        },
        {
          "properties": {
            "paymentState": {
              "$ref": "#/definitions/PaymentState"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Order",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-orders.html#change-paymentstate",
      "x-annotation-postman-example": null
    },
    "OrderChangeShipmentStateAction": {
      "title": "OrderChangeShipmentStateAction",
      "allOf": [
        {
          "$ref": "#/definitions/OrderUpdateAction"
        },
        {
          "properties": {
            "shipmentState": {
              "$ref": "#/definitions/ShipmentState"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Order",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-orders.html#change-shipmentstate",
      "x-annotation-postman-example": null
    },
    "OrderImportCustomLineItemStateAction": {
      "title": "OrderImportCustomLineItemStateAction",
      "allOf": [
        {
          "$ref": "#/definitions/OrderUpdateAction"
        },
        {
          "properties": {
            "customLineItemId": {
              "type": "string"
            },
            "state": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ItemState"
              }
            }
          },
          "required": [
            "customLineItemId",
            "state"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Order",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-orders.html#import-state-for-customlineitems",
      "x-annotation-postman-example": null
    },
    "OrderImportLineItemStateAction": {
      "title": "OrderImportLineItemStateAction",
      "allOf": [
        {
          "$ref": "#/definitions/OrderUpdateAction"
        },
        {
          "properties": {
            "lineItemId": {
              "type": "string"
            },
            "state": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ItemState"
              }
            }
          },
          "required": [
            "lineItemId",
            "state"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Order",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-orders.html#import-state-for-lineitems",
      "x-annotation-postman-example": null
    },
    "OrderRemoveDeliveryAction": {
      "title": "OrderRemoveDeliveryAction",
      "allOf": [
        {
          "$ref": "#/definitions/OrderUpdateAction"
        },
        {
          "properties": {
            "deliveryId": {
              "type": "string"
            }
          },
          "required": [
            "deliveryId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Order",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-orders.html#remove-delivery",
      "x-annotation-postman-example": null
    },
    "OrderRemoveItemShippingAddressAction": {
      "title": "OrderRemoveItemShippingAddressAction",
      "allOf": [
        {
          "$ref": "#/definitions/OrderUpdateAction"
        },
        {
          "properties": {
            "addressKey": {
              "type": "string"
            }
          },
          "required": [
            "addressKey"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Order",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-orders.html#remove-itemshippingaddress",
      "x-annotation-postman-example": null
    },
    "OrderRemoveParcelFromDeliveryAction": {
      "title": "OrderRemoveParcelFromDeliveryAction",
      "allOf": [
        {
          "$ref": "#/definitions/OrderUpdateAction"
        },
        {
          "properties": {
            "parcelId": {
              "type": "string"
            }
          },
          "required": [
            "parcelId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Order",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-orders.html#remove-parcel-from-delivery",
      "x-annotation-postman-example": null
    },
    "OrderRemovePaymentAction": {
      "title": "OrderRemovePaymentAction",
      "allOf": [
        {
          "$ref": "#/definitions/OrderUpdateAction"
        },
        {
          "properties": {
            "payment": {
              "$ref": "#/definitions/PaymentResourceIdentifier"
            }
          },
          "required": [
            "payment"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Order",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-orders.html#remove-payment",
      "x-annotation-postman-example": null
    },
    "OrderSetBillingAddressAction": {
      "title": "OrderSetBillingAddressAction",
      "allOf": [
        {
          "$ref": "#/definitions/OrderUpdateAction"
        },
        {
          "properties": {
            "address": {
              "$ref": "#/definitions/Address"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Order",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-orders.html#set-billing-address",
      "x-annotation-postman-example": null
    },
    "OrderSetCustomFieldAction": {
      "title": "OrderSetCustomFieldAction",
      "allOf": [
        {
          "$ref": "#/definitions/OrderUpdateAction"
        },
        {
          "properties": {
            "name": {
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Order",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-orders.html#set-customfield",
      "x-annotation-postman-example": null
    },
    "OrderSetCustomLineItemCustomFieldAction": {
      "title": "OrderSetCustomLineItemCustomFieldAction",
      "allOf": [
        {
          "$ref": "#/definitions/OrderUpdateAction"
        },
        {
          "properties": {
            "customLineItemId": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          },
          "required": [
            "customLineItemId",
            "name"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Order",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-orders.html#set-customlineitem-customfield",
      "x-annotation-postman-example": null
    },
    "OrderSetCustomLineItemCustomTypeAction": {
      "title": "OrderSetCustomLineItemCustomTypeAction",
      "allOf": [
        {
          "$ref": "#/definitions/OrderUpdateAction"
        },
        {
          "properties": {
            "customLineItemId": {
              "type": "string"
            },
            "type": {
              "$ref": "#/definitions/TypeResourceIdentifier"
            },
            "fields": {
              "$ref": "#/definitions/FieldContainer"
            }
          },
          "required": [
            "customLineItemId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Order",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-orders.html#set-customlineitem-custom-type",
      "x-annotation-postman-example": null
    },
    "OrderSetCustomLineItemShippingDetailsAction": {
      "title": "OrderSetCustomLineItemShippingDetailsAction",
      "allOf": [
        {
          "$ref": "#/definitions/OrderUpdateAction"
        },
        {
          "properties": {
            "customLineItemId": {
              "type": "string"
            },
            "shippingDetails": {
              "$ref": "#/definitions/ItemShippingDetailsDraft"
            }
          },
          "required": [
            "customLineItemId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Order",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-orders.html#set-customlineitemshippingdetails",
      "x-annotation-postman-example": null
    },
    "OrderSetCustomTypeAction": {
      "title": "OrderSetCustomTypeAction",
      "allOf": [
        {
          "$ref": "#/definitions/OrderUpdateAction"
        },
        {
          "properties": {
            "type": {
              "$ref": "#/definitions/TypeResourceIdentifier"
            },
            "fields": {
              "$ref": "#/definitions/FieldContainer"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Order",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-orders.html#set-custom-type",
      "x-annotation-postman-example": null
    },
    "OrderSetCustomerEmailAction": {
      "title": "OrderSetCustomerEmailAction",
      "allOf": [
        {
          "$ref": "#/definitions/OrderUpdateAction"
        },
        {
          "properties": {
            "email": {
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Order",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-orders.html#set-customer-email",
      "x-annotation-postman-example": null
    },
    "OrderSetCustomerIdAction": {
      "title": "OrderSetCustomerIdAction",
      "allOf": [
        {
          "$ref": "#/definitions/OrderUpdateAction"
        },
        {
          "properties": {
            "customerId": {
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Order",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-orders.html#set-customer-id",
      "x-annotation-postman-example": null
    },
    "OrderSetDeliveryAddressAction": {
      "title": "OrderSetDeliveryAddressAction",
      "allOf": [
        {
          "$ref": "#/definitions/OrderUpdateAction"
        },
        {
          "properties": {
            "deliveryId": {
              "type": "string"
            },
            "address": {
              "$ref": "#/definitions/Address"
            }
          },
          "required": [
            "deliveryId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Order",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-orders.html#set-delivery-address",
      "x-annotation-postman-example": null
    },
    "OrderSetDeliveryItemsAction": {
      "title": "OrderSetDeliveryItemsAction",
      "allOf": [
        {
          "$ref": "#/definitions/OrderUpdateAction"
        },
        {
          "properties": {
            "deliveryId": {
              "type": "string"
            },
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeliveryItem"
              }
            }
          },
          "required": [
            "deliveryId",
            "items"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Order",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-orders.html#set-delivery-items",
      "x-annotation-postman-example": null
    },
    "OrderSetLineItemCustomFieldAction": {
      "title": "OrderSetLineItemCustomFieldAction",
      "allOf": [
        {
          "$ref": "#/definitions/OrderUpdateAction"
        },
        {
          "properties": {
            "lineItemId": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          },
          "required": [
            "lineItemId",
            "name"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Order",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-orders.html#set-lineitem-customfield",
      "x-annotation-postman-example": null
    },
    "OrderSetLineItemCustomTypeAction": {
      "title": "OrderSetLineItemCustomTypeAction",
      "allOf": [
        {
          "$ref": "#/definitions/OrderUpdateAction"
        },
        {
          "properties": {
            "lineItemId": {
              "type": "string"
            },
            "type": {
              "$ref": "#/definitions/TypeResourceIdentifier"
            },
            "fields": {
              "$ref": "#/definitions/FieldContainer"
            }
          },
          "required": [
            "lineItemId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Order",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-orders.html#set-lineitem-custom-type",
      "x-annotation-postman-example": null
    },
    "OrderSetLineItemShippingDetailsAction": {
      "title": "OrderSetLineItemShippingDetailsAction",
      "allOf": [
        {
          "$ref": "#/definitions/OrderUpdateAction"
        },
        {
          "properties": {
            "lineItemId": {
              "type": "string"
            },
            "shippingDetails": {
              "$ref": "#/definitions/ItemShippingDetailsDraft"
            }
          },
          "required": [
            "lineItemId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Order",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-orders.html#set-lineitemshippingdetails",
      "x-annotation-postman-example": null
    },
    "OrderSetLocaleAction": {
      "title": "OrderSetLocaleAction",
      "allOf": [
        {
          "$ref": "#/definitions/OrderUpdateAction"
        },
        {
          "properties": {
            "locale": {
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Order",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-orders.html#set-locale",
      "x-annotation-postman-example": null
    },
    "OrderSetOrderNumberAction": {
      "title": "OrderSetOrderNumberAction",
      "allOf": [
        {
          "$ref": "#/definitions/OrderUpdateAction"
        },
        {
          "properties": {
            "orderNumber": {
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Order",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-orders.html#set-order-number",
      "x-annotation-postman-example": null
    },
    "OrderSetParcelItemsAction": {
      "title": "OrderSetParcelItemsAction",
      "allOf": [
        {
          "$ref": "#/definitions/OrderUpdateAction"
        },
        {
          "properties": {
            "parcelId": {
              "type": "string"
            },
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeliveryItem"
              }
            }
          },
          "required": [
            "parcelId",
            "items"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Order",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-orders.html#set-parcel-items",
      "x-annotation-postman-example": null
    },
    "OrderSetParcelMeasurementsAction": {
      "title": "OrderSetParcelMeasurementsAction",
      "allOf": [
        {
          "$ref": "#/definitions/OrderUpdateAction"
        },
        {
          "properties": {
            "parcelId": {
              "type": "string"
            },
            "measurements": {
              "$ref": "#/definitions/ParcelMeasurements"
            }
          },
          "required": [
            "parcelId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Order",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-orders.html#set-parcel-measurements",
      "x-annotation-postman-example": null
    },
    "OrderSetParcelTrackingDataAction": {
      "title": "OrderSetParcelTrackingDataAction",
      "allOf": [
        {
          "$ref": "#/definitions/OrderUpdateAction"
        },
        {
          "properties": {
            "parcelId": {
              "type": "string"
            },
            "trackingData": {
              "$ref": "#/definitions/TrackingData"
            }
          },
          "required": [
            "parcelId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Order",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-orders.html#set-parcel-tracking-data",
      "x-annotation-postman-example": null
    },
    "OrderSetReturnPaymentStateAction": {
      "title": "OrderSetReturnPaymentStateAction",
      "allOf": [
        {
          "$ref": "#/definitions/OrderUpdateAction"
        },
        {
          "properties": {
            "returnItemId": {
              "type": "string"
            },
            "paymentState": {
              "$ref": "#/definitions/ReturnPaymentState"
            }
          },
          "required": [
            "returnItemId",
            "paymentState"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Order",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-orders.html#set-returnpaymentstate",
      "x-annotation-postman-example": null
    },
    "OrderSetReturnShipmentStateAction": {
      "title": "OrderSetReturnShipmentStateAction",
      "allOf": [
        {
          "$ref": "#/definitions/OrderUpdateAction"
        },
        {
          "properties": {
            "returnItemId": {
              "type": "string"
            },
            "shipmentState": {
              "$ref": "#/definitions/ReturnShipmentState"
            }
          },
          "required": [
            "returnItemId",
            "shipmentState"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Order",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-orders.html#set-returnshipmentstate",
      "x-annotation-postman-example": null
    },
    "OrderSetShippingAddressAction": {
      "title": "OrderSetShippingAddressAction",
      "allOf": [
        {
          "$ref": "#/definitions/OrderUpdateAction"
        },
        {
          "properties": {
            "address": {
              "$ref": "#/definitions/Address"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Order",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-orders.html#set-shipping-address",
      "x-annotation-postman-example": null
    },
    "OrderSetStoreAction": {
      "title": "OrderSetStoreAction",
      "allOf": [
        {
          "$ref": "#/definitions/OrderUpdateAction"
        },
        {
          "properties": {
            "store": {
              "$ref": "#/definitions/StoreResourceIdentifier"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Order",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-orders.html#set-store-beta",
      "x-annotation-postman-example": null
    },
    "OrderTransitionCustomLineItemStateAction": {
      "title": "OrderTransitionCustomLineItemStateAction",
      "allOf": [
        {
          "$ref": "#/definitions/OrderUpdateAction"
        },
        {
          "properties": {
            "customLineItemId": {
              "type": "string"
            },
            "quantity": {
              "format": "int64",
              "type": "number"
            },
            "fromState": {
              "$ref": "#/definitions/StateResourceIdentifier"
            },
            "toState": {
              "$ref": "#/definitions/StateResourceIdentifier"
            },
            "actualTransitionDate": {
              "type": "string",
              "format": "date-time"
            }
          },
          "required": [
            "customLineItemId",
            "quantity",
            "fromState",
            "toState"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Order",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-orders.html#change-the-state-of-customlineitem-according-to-allowed-transitions",
      "x-annotation-postman-example": null
    },
    "OrderTransitionLineItemStateAction": {
      "title": "OrderTransitionLineItemStateAction",
      "allOf": [
        {
          "$ref": "#/definitions/OrderUpdateAction"
        },
        {
          "properties": {
            "lineItemId": {
              "type": "string"
            },
            "quantity": {
              "format": "int64",
              "type": "number"
            },
            "fromState": {
              "$ref": "#/definitions/StateResourceIdentifier"
            },
            "toState": {
              "$ref": "#/definitions/StateResourceIdentifier"
            },
            "actualTransitionDate": {
              "type": "string",
              "format": "date-time"
            }
          },
          "required": [
            "lineItemId",
            "quantity",
            "fromState",
            "toState"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Order",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-orders.html#change-the-state-of-lineitem-according-to-allowed-transitions",
      "x-annotation-postman-example": null
    },
    "OrderTransitionStateAction": {
      "title": "OrderTransitionStateAction",
      "allOf": [
        {
          "$ref": "#/definitions/OrderUpdateAction"
        },
        {
          "properties": {
            "state": {
              "$ref": "#/definitions/StateResourceIdentifier"
            },
            "force": {
              "type": "boolean"
            }
          },
          "required": [
            "state"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Order",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-orders.html#transition-state",
      "x-annotation-postman-example": null
    },
    "OrderUpdateItemShippingAddressAction": {
      "title": "OrderUpdateItemShippingAddressAction",
      "allOf": [
        {
          "$ref": "#/definitions/OrderUpdateAction"
        },
        {
          "properties": {
            "address": {
              "$ref": "#/definitions/Address"
            }
          },
          "required": [
            "address"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Order",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-orders.html#update-itemshippingaddress",
      "x-annotation-postman-example": null
    },
    "OrderUpdateSyncInfoAction": {
      "title": "OrderUpdateSyncInfoAction",
      "allOf": [
        {
          "$ref": "#/definitions/OrderUpdateAction"
        },
        {
          "properties": {
            "channel": {
              "$ref": "#/definitions/ChannelResourceIdentifier"
            },
            "externalId": {
              "type": "string"
            },
            "syncedAt": {
              "type": "string",
              "format": "date-time"
            }
          },
          "required": [
            "channel"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Order",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-orders.html#update-syncinfo",
      "x-annotation-postman-example": null
    },
    "Payment": {
      "title": "Payment",
      "allOf": [
        {
          "$ref": "#/definitions/BaseResource"
        },
        {
          "properties": {
            "id": {
              "type": "string",
              "x-annotation-identifier": true
            },
            "version": {
              "format": "int64",
              "type": "number"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            },
            "lastModifiedAt": {
              "type": "string",
              "format": "date-time"
            },
            "lastModifiedBy": {
              "description": "Present on resources updated after 1/02/2019 except for events not tracked.",
              "$ref": "#/definitions/LastModifiedBy"
            },
            "createdBy": {
              "description": "Present on resources created after 1/02/2019 except for events not tracked.",
              "$ref": "#/definitions/CreatedBy"
            },
            "customer": {
              "description": "A reference to the customer this payment belongs to.",
              "$ref": "#/definitions/CustomerReference"
            },
            "anonymousId": {
              "description": "Identifies payments belonging to an anonymous session (the customer has not signed up/in yet).",
              "type": "string"
            },
            "externalId": {
              "type": "string",
              "x-annotation-deprecated": true
            },
            "interfaceId": {
              "description": "The identifier that is used by the interface that manages the payment (usually the PSP).\nCannot be changed once it has been set.\nThe combination of this ID and the PaymentMethodInfo `paymentInterface` must be unique.",
              "type": "string"
            },
            "amountPlanned": {
              "description": "How much money this payment intends to receive from the customer.\nThe value usually matches the cart or order gross total.",
              "$ref": "#/definitions/TypedMoney"
            },
            "amountAuthorized": {
              "$ref": "#/definitions/TypedMoney",
              "x-annotation-deprecated": true
            },
            "authorizedUntil": {
              "type": "string",
              "x-annotation-deprecated": true
            },
            "amountPaid": {
              "$ref": "#/definitions/TypedMoney",
              "x-annotation-deprecated": true
            },
            "amountRefunded": {
              "$ref": "#/definitions/TypedMoney",
              "x-annotation-deprecated": true
            },
            "paymentMethodInfo": {
              "$ref": "#/definitions/PaymentMethodInfo"
            },
            "paymentStatus": {
              "$ref": "#/definitions/PaymentStatus"
            },
            "transactions": {
              "description": "A list of financial transactions of different TransactionTypes with different TransactionStates.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Transaction"
              }
            },
            "interfaceInteractions": {
              "description": "Interface interactions can be requests sent to the PSP, responses received from the PSP or notifications received from the PSP.\nSome interactions may result in a transaction.\nIf so, the `interactionId` in the Transaction should be set to match the ID of the PSP for the interaction.\nInteractions are managed by the PSP integration and are usually neither written nor read by the user facing frontends or other services.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomFields"
              }
            },
            "custom": {
              "$ref": "#/definitions/CustomFields"
            },
            "key": {
              "description": "User-specific unique identifier for the payment (max.\n256 characters).",
              "type": "string"
            }
          },
          "required": [
            "id",
            "version",
            "createdAt",
            "lastModifiedAt",
            "amountPlanned",
            "paymentMethodInfo",
            "paymentStatus",
            "transactions",
            "interfaceInteractions"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Payment",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-payments.html#payment",
      "x-annotation-updateType": "PaymentUpdate"
    },
    "PaymentDraft": {
      "title": "PaymentDraft",
      "type": "object",
      "properties": {
        "customer": {
          "description": "A reference to the customer this payment belongs to.",
          "$ref": "#/definitions/CustomerResourceIdentifier"
        },
        "anonymousId": {
          "description": "Identifies payments belonging to an anonymous session (the customer has not signed up/in yet).",
          "type": "string"
        },
        "externalId": {
          "type": "string"
        },
        "interfaceId": {
          "description": "The identifier that is used by the interface that manages the payment (usually the PSP).\nCannot be changed once it has been set.\nThe combination of this ID and the PaymentMethodInfo `paymentInterface` must be unique.",
          "type": "string"
        },
        "amountPlanned": {
          "description": "How much money this payment intends to receive from the customer.\nThe value usually matches the cart or order gross total.",
          "$ref": "#/definitions/Money"
        },
        "amountAuthorized": {
          "$ref": "#/definitions/Money"
        },
        "authorizedUntil": {
          "type": "string"
        },
        "amountPaid": {
          "$ref": "#/definitions/Money"
        },
        "amountRefunded": {
          "$ref": "#/definitions/Money"
        },
        "paymentMethodInfo": {
          "$ref": "#/definitions/PaymentMethodInfo"
        },
        "paymentStatus": {
          "$ref": "#/definitions/PaymentStatusDraft"
        },
        "transactions": {
          "description": "A list of financial transactions of different TransactionTypes with different TransactionStates.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransactionDraft"
          }
        },
        "interfaceInteractions": {
          "description": "Interface interactions can be requests send to the PSP, responses received from the PSP or notifications received from the PSP.\nSome interactions may result in a transaction.\nIf so, the `interactionId` in the Transaction should be set to match the ID of the PSP for the interaction.\nInteractions are managed by the PSP integration and are usually neither written nor read by the user facing frontends or other services.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomFieldsDraft"
          }
        },
        "custom": {
          "$ref": "#/definitions/CustomFieldsDraft"
        },
        "key": {
          "description": "User-specific unique identifier for the payment (max.\n256 characters).",
          "type": "string"
        }
      },
      "required": [
        "amountPlanned"
      ],
      "x-annotation-package": "Payment",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-payments.html#paymentdraft"
    },
    "PaymentMethodInfo": {
      "title": "PaymentMethodInfo",
      "type": "object",
      "properties": {
        "paymentInterface": {
          "description": "The interface that handles the payment (usually a PSP).\nCannot be changed once it has been set.\nThe combination of Payment`interfaceId` and this field must be unique.",
          "type": "string"
        },
        "method": {
          "description": "The payment method that is used, e.g.\ne.g.\na conventional string representing Credit Card, Cash Advance etc.",
          "type": "string"
        },
        "name": {
          "description": "A human-readable, localized name for the payment method, e.g.\n'Credit Card'.",
          "$ref": "#/definitions/LocalizedString"
        }
      },
      "x-annotation-package": "Payment",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-payments.html#paymentmethodinfo"
    },
    "PaymentPagedQueryResponse": {
      "title": "PaymentPagedQueryResponse",
      "type": "object",
      "properties": {
        "limit": {
          "format": "int64",
          "type": "number"
        },
        "count": {
          "format": "int64",
          "type": "number"
        },
        "total": {
          "format": "int64",
          "type": "number"
        },
        "offset": {
          "format": "int64",
          "type": "number"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Payment"
          }
        }
      },
      "required": [
        "limit",
        "count",
        "offset",
        "results"
      ],
      "x-annotation-package": "Payment"
    },
    "PaymentReference": {
      "title": "PaymentReference",
      "allOf": [
        {
          "$ref": "#/definitions/Reference"
        },
        {
          "properties": {
            "obj": {
              "$ref": "#/definitions/Payment"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Payment",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-payments.html#payment"
    },
    "PaymentResourceIdentifier": {
      "title": "PaymentResourceIdentifier",
      "$ref": "#/definitions/ResourceIdentifier",
      "x-annotation-package": "Payment",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-payments.html#payment"
    },
    "PaymentStatus": {
      "title": "PaymentStatus",
      "type": "object",
      "properties": {
        "interfaceCode": {
          "description": "A code describing the current status returned by the interface that processes the payment.",
          "type": "string"
        },
        "interfaceText": {
          "description": "A text describing the current status returned by the interface that processes the payment.",
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/StateReference"
        }
      },
      "x-annotation-package": "Payment",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-payments.html#paymentstatus"
    },
    "PaymentStatusDraft": {
      "title": "PaymentStatusDraft",
      "type": "object",
      "properties": {
        "interfaceCode": {
          "type": "string"
        },
        "interfaceText": {
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/StateResourceIdentifier"
        }
      },
      "x-annotation-package": "Payment",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-payments.html#paymentstatus"
    },
    "PaymentUpdate": {
      "title": "PaymentUpdate",
      "type": "object",
      "properties": {
        "version": {
          "format": "int64",
          "type": "number"
        },
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PaymentUpdateAction"
          }
        }
      },
      "required": [
        "version",
        "actions"
      ],
      "x-annotation-package": "Payment"
    },
    "PaymentUpdateAction": {
      "title": "PaymentUpdateAction",
      "discriminator": "action",
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        }
      },
      "required": [
        "action"
      ],
      "x-annotation-package": "Payment"
    },
    "Transaction": {
      "title": "Transaction",
      "type": "object",
      "properties": {
        "id": {
          "description": "The unique ID of this object.",
          "type": "string"
        },
        "timestamp": {
          "description": "The time at which the transaction took place.",
          "type": "string",
          "format": "date-time"
        },
        "type": {
          "description": "The type of this transaction.",
          "$ref": "#/definitions/TransactionType"
        },
        "amount": {
          "$ref": "#/definitions/TypedMoney"
        },
        "interactionId": {
          "description": "The identifier that is used by the interface that managed the transaction (usually the PSP).\nIf a matching interaction was logged in the `interfaceInteractions` array, the corresponding interaction should be findable with this ID.",
          "type": "string"
        },
        "state": {
          "description": "The state of this transaction.",
          "$ref": "#/definitions/TransactionState"
        }
      },
      "required": [
        "id",
        "type",
        "amount"
      ],
      "x-annotation-package": "Payment",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-payments.html#transaction"
    },
    "TransactionDraft": {
      "title": "TransactionDraft",
      "type": "object",
      "properties": {
        "timestamp": {
          "description": "The time at which the transaction took place.",
          "type": "string",
          "format": "date-time"
        },
        "type": {
          "description": "The type of this transaction.",
          "$ref": "#/definitions/TransactionType"
        },
        "amount": {
          "$ref": "#/definitions/Money"
        },
        "interactionId": {
          "description": "The identifier that is used by the interface that managed the transaction (usually the PSP).\nIf a matching interaction was logged in the `interfaceInteractions` array, the corresponding interaction should be findable with this ID.",
          "type": "string"
        },
        "state": {
          "description": "The state of this transaction.\nIf not set, defaults to `Initial`.",
          "$ref": "#/definitions/TransactionState"
        }
      },
      "required": [
        "type",
        "amount"
      ],
      "x-annotation-package": "Payment"
    },
    "TransactionState": {
      "title": "TransactionState",
      "enum": [
        "Initial",
        "Pending",
        "Success",
        "Failure"
      ],
      "type": "string",
      "x-annotation-package": "Payment",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-payments.html#transactionstate"
    },
    "TransactionType": {
      "title": "TransactionType",
      "enum": [
        "Authorization",
        "CancelAuthorization",
        "Charge",
        "Refund",
        "Chargeback"
      ],
      "type": "string",
      "x-annotation-package": "Payment",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-payments.html#transactiontype"
    },
    "PaymentAddInterfaceInteractionAction": {
      "title": "PaymentAddInterfaceInteractionAction",
      "allOf": [
        {
          "$ref": "#/definitions/PaymentUpdateAction"
        },
        {
          "properties": {
            "type": {
              "$ref": "#/definitions/TypeResourceIdentifier"
            },
            "fields": {
              "$ref": "#/definitions/FieldContainer"
            }
          },
          "required": [
            "type"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Payment",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-payments.html#add-interfaceinteraction",
      "x-annotation-postman-example": null
    },
    "PaymentAddTransactionAction": {
      "title": "PaymentAddTransactionAction",
      "allOf": [
        {
          "$ref": "#/definitions/PaymentUpdateAction"
        },
        {
          "properties": {
            "transaction": {
              "$ref": "#/definitions/TransactionDraft"
            }
          },
          "required": [
            "transaction"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Payment",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-payments.html#add-transaction",
      "x-annotation-postman-example": null
    },
    "PaymentChangeAmountPlannedAction": {
      "title": "PaymentChangeAmountPlannedAction",
      "allOf": [
        {
          "$ref": "#/definitions/PaymentUpdateAction"
        },
        {
          "properties": {
            "amount": {
              "$ref": "#/definitions/Money"
            }
          },
          "required": [
            "amount"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Payment",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-payments.html#change-amountplanned",
      "x-annotation-postman-example": null
    },
    "PaymentChangeTransactionInteractionIdAction": {
      "title": "PaymentChangeTransactionInteractionIdAction",
      "allOf": [
        {
          "$ref": "#/definitions/PaymentUpdateAction"
        },
        {
          "properties": {
            "transactionId": {
              "type": "string"
            },
            "interactionId": {
              "type": "string"
            }
          },
          "required": [
            "transactionId",
            "interactionId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Payment",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-payments.html#change-transactioninteractionid",
      "x-annotation-postman-example": null
    },
    "PaymentChangeTransactionStateAction": {
      "title": "PaymentChangeTransactionStateAction",
      "allOf": [
        {
          "$ref": "#/definitions/PaymentUpdateAction"
        },
        {
          "properties": {
            "transactionId": {
              "type": "string"
            },
            "state": {
              "$ref": "#/definitions/TransactionState"
            }
          },
          "required": [
            "transactionId",
            "state"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Payment",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-payments.html#change-transactionstate",
      "x-annotation-postman-example": null
    },
    "PaymentChangeTransactionTimestampAction": {
      "title": "PaymentChangeTransactionTimestampAction",
      "allOf": [
        {
          "$ref": "#/definitions/PaymentUpdateAction"
        },
        {
          "properties": {
            "transactionId": {
              "type": "string"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          },
          "required": [
            "transactionId",
            "timestamp"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Payment",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-payments.html#change-transactiontimestamp",
      "x-annotation-postman-example": null
    },
    "PaymentSetAmountPaidAction": {
      "title": "PaymentSetAmountPaidAction",
      "allOf": [
        {
          "$ref": "#/definitions/PaymentUpdateAction"
        },
        {
          "properties": {
            "amount": {
              "$ref": "#/definitions/Money"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Payment",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-payments.html#set-amountpaid",
      "x-annotation-deprecated": true
    },
    "PaymentSetAmountRefundedAction": {
      "title": "PaymentSetAmountRefundedAction",
      "allOf": [
        {
          "$ref": "#/definitions/PaymentUpdateAction"
        },
        {
          "properties": {
            "amount": {
              "$ref": "#/definitions/Money"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Payment",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-payments.html#set-amountrefunded",
      "x-annotation-deprecated": true
    },
    "PaymentSetAnonymousIdAction": {
      "title": "PaymentSetAnonymousIdAction",
      "allOf": [
        {
          "$ref": "#/definitions/PaymentUpdateAction"
        },
        {
          "properties": {
            "anonymousId": {
              "description": "Anonymous ID of the anonymous customer that this payment belongs to.\nIf this field is not set any existing `anonymousId` is removed.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Payment",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-payments.html#set-anonymousid",
      "x-annotation-postman-example": null
    },
    "PaymentSetAuthorizationAction": {
      "title": "PaymentSetAuthorizationAction",
      "allOf": [
        {
          "$ref": "#/definitions/PaymentUpdateAction"
        },
        {
          "properties": {
            "amount": {
              "$ref": "#/definitions/Money"
            },
            "until": {
              "type": "string",
              "format": "date-time"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Payment",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-payments.html#set-authorization",
      "x-annotation-deprecated": true
    },
    "PaymentSetCustomFieldAction": {
      "title": "PaymentSetCustomFieldAction",
      "allOf": [
        {
          "$ref": "#/definitions/PaymentUpdateAction"
        },
        {
          "properties": {
            "name": {
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Payment",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-payments.html#set-customfield",
      "x-annotation-postman-example": null
    },
    "PaymentSetCustomTypeAction": {
      "title": "PaymentSetCustomTypeAction",
      "allOf": [
        {
          "$ref": "#/definitions/PaymentUpdateAction"
        },
        {
          "properties": {
            "type": {
              "description": "If set, the custom type is set to this new value.\nIf absent, the custom type and any existing custom fields are removed.",
              "$ref": "#/definitions/TypeResourceIdentifier"
            },
            "fields": {
              "description": "Sets the custom fields to this value.",
              "$ref": "#/definitions/FieldContainer"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Payment",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-payments.html#set-custom-type",
      "x-annotation-postman-example": null
    },
    "PaymentSetCustomerAction": {
      "title": "PaymentSetCustomerAction",
      "allOf": [
        {
          "$ref": "#/definitions/PaymentUpdateAction"
        },
        {
          "properties": {
            "customer": {
              "description": "A reference to the customer this payment belongs to.",
              "$ref": "#/definitions/CustomerResourceIdentifier"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Payment",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-payments.html#set-customer",
      "x-annotation-postman-example": null
    },
    "PaymentSetExternalIdAction": {
      "title": "PaymentSetExternalIdAction",
      "allOf": [
        {
          "$ref": "#/definitions/PaymentUpdateAction"
        },
        {
          "properties": {
            "externalId": {
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Payment",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-payments.html#set-externalid",
      "x-annotation-deprecated": true
    },
    "PaymentSetInterfaceIdAction": {
      "title": "PaymentSetInterfaceIdAction",
      "allOf": [
        {
          "$ref": "#/definitions/PaymentUpdateAction"
        },
        {
          "properties": {
            "interfaceId": {
              "type": "string"
            }
          },
          "required": [
            "interfaceId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Payment",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-payments.html#set-interfaceid",
      "x-annotation-postman-example": null
    },
    "PaymentSetKeyAction": {
      "title": "PaymentSetKeyAction",
      "allOf": [
        {
          "$ref": "#/definitions/PaymentUpdateAction"
        },
        {
          "properties": {
            "key": {
              "description": "User-specific unique identifier for the payment (max.\n256 characters).\nIf not provided an existing key will be removed.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Payment",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-payments.html#set-key",
      "x-annotation-postman-example": null
    },
    "PaymentSetMethodInfoInterfaceAction": {
      "title": "PaymentSetMethodInfoInterfaceAction",
      "allOf": [
        {
          "$ref": "#/definitions/PaymentUpdateAction"
        },
        {
          "properties": {
            "interface": {
              "type": "string"
            }
          },
          "required": [
            "interface"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Payment",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-payments.html#set-methodinfointerface",
      "x-annotation-postman-example": null
    },
    "PaymentSetMethodInfoMethodAction": {
      "title": "PaymentSetMethodInfoMethodAction",
      "allOf": [
        {
          "$ref": "#/definitions/PaymentUpdateAction"
        },
        {
          "properties": {
            "method": {
              "description": "If not provided, the method is unset.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Payment",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-payments.html#set-methodinfomethod",
      "x-annotation-postman-example": null
    },
    "PaymentSetMethodInfoNameAction": {
      "title": "PaymentSetMethodInfoNameAction",
      "allOf": [
        {
          "$ref": "#/definitions/PaymentUpdateAction"
        },
        {
          "properties": {
            "name": {
              "description": "If not provided, the name is unset.",
              "$ref": "#/definitions/LocalizedString"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Payment",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-payments.html#set-methodinfoname",
      "x-annotation-postman-example": null
    },
    "PaymentSetStatusInterfaceCodeAction": {
      "title": "PaymentSetStatusInterfaceCodeAction",
      "allOf": [
        {
          "$ref": "#/definitions/PaymentUpdateAction"
        },
        {
          "properties": {
            "interfaceCode": {
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Payment",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-payments.html#set-statusinterfacecode",
      "x-annotation-postman-example": null
    },
    "PaymentSetStatusInterfaceTextAction": {
      "title": "PaymentSetStatusInterfaceTextAction",
      "allOf": [
        {
          "$ref": "#/definitions/PaymentUpdateAction"
        },
        {
          "properties": {
            "interfaceText": {
              "type": "string"
            }
          },
          "required": [
            "interfaceText"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Payment",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-payments.html#set-statusinterfacetext",
      "x-annotation-postman-example": null
    },
    "PaymentTransitionStateAction": {
      "title": "PaymentTransitionStateAction",
      "allOf": [
        {
          "$ref": "#/definitions/PaymentUpdateAction"
        },
        {
          "properties": {
            "state": {
              "$ref": "#/definitions/StateResourceIdentifier"
            },
            "force": {
              "type": "boolean"
            }
          },
          "required": [
            "state"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Payment",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-payments.html#transition-state",
      "x-annotation-postman-example": null
    },
    "ProductDiscount": {
      "title": "ProductDiscount",
      "allOf": [
        {
          "$ref": "#/definitions/BaseResource"
        },
        {
          "properties": {
            "id": {
              "description": "The unique ID of the product discount",
              "type": "string",
              "x-annotation-identifier": true
            },
            "version": {
              "format": "int64",
              "description": "The current version of the product discount.",
              "type": "number"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            },
            "lastModifiedAt": {
              "type": "string",
              "format": "date-time"
            },
            "lastModifiedBy": {
              "description": "Present on resources updated after 1/02/2019 except for events not tracked.",
              "$ref": "#/definitions/LastModifiedBy"
            },
            "createdBy": {
              "description": "Present on resources created after 1/02/2019 except for events not tracked.",
              "$ref": "#/definitions/CreatedBy"
            },
            "name": {
              "$ref": "#/definitions/LocalizedString"
            },
            "key": {
              "description": "User-specific unique identifier for a product discount.\nMust be unique across a project.",
              "type": "string"
            },
            "description": {
              "$ref": "#/definitions/LocalizedString"
            },
            "value": {
              "$ref": "#/definitions/ProductDiscountValue"
            },
            "predicate": {
              "description": "A valid ProductDiscount Predicate.",
              "type": "string"
            },
            "sortOrder": {
              "description": "The string contains a number between 0 and 1.\nA discount with greater sortOrder is prioritized higher than a discount with lower sortOrder.\nA sortOrder must be unambiguous.",
              "type": "string"
            },
            "isActive": {
              "description": "Only active discount will be applied to product prices.",
              "type": "boolean"
            },
            "references": {
              "description": "The platform will generate this array from the predicate.\nIt contains the references of all the resources that are addressed in the predicate.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "validFrom": {
              "description": "The time from which the discount should be effective.\nPlease take Eventual Consistency into account for calculated product discount values.",
              "type": "string",
              "format": "date-time"
            },
            "validUntil": {
              "description": "The time from which the discount should be ineffective.\nPlease take Eventual Consistency into account for calculated undiscounted values.",
              "type": "string",
              "format": "date-time"
            }
          },
          "required": [
            "id",
            "version",
            "createdAt",
            "lastModifiedAt",
            "name",
            "value",
            "predicate",
            "sortOrder",
            "isActive",
            "references"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "ProductDiscount",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-productDiscounts.html#productdiscount",
      "x-annotation-updateType": "ProductDiscountUpdate"
    },
    "ProductDiscountDraft": {
      "title": "ProductDiscountDraft",
      "type": "object",
      "properties": {
        "name": {
          "$ref": "#/definitions/LocalizedString"
        },
        "key": {
          "description": "User-specific unique identifier for a product discount.\nMust be unique across a project.\nThe field can be reset using the Set Key UpdateAction",
          "type": "string"
        },
        "description": {
          "$ref": "#/definitions/LocalizedString"
        },
        "value": {
          "$ref": "#/definitions/ProductDiscountValueDraft"
        },
        "predicate": {
          "description": "A valid ProductDiscount Predicate.",
          "type": "string"
        },
        "sortOrder": {
          "description": "The string must contain a decimal number between 0 and 1.\nA discount with greater sortOrder is prioritized higher than a discount with lower sortOrder.",
          "type": "string"
        },
        "isActive": {
          "description": "If set to `true` the discount will be applied to product prices.",
          "type": "boolean"
        },
        "validFrom": {
          "description": "The time from which the discount should be effective.\nPlease take Eventual Consistency into account for calculated product discount values.",
          "type": "string",
          "format": "date-time"
        },
        "validUntil": {
          "description": "The time from which the discount should be effective.\nPlease take Eventual Consistency into account for calculated undiscounted values.",
          "type": "string",
          "format": "date-time"
        }
      },
      "required": [
        "name",
        "value",
        "predicate",
        "sortOrder",
        "isActive"
      ],
      "x-annotation-package": "ProductDiscount",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-productDiscounts.html#productdiscountdraft"
    },
    "ProductDiscountMatchQuery": {
      "title": "ProductDiscountMatchQuery",
      "type": "object",
      "properties": {
        "productId": {
          "type": "string"
        },
        "variantId": {
          "format": "int32",
          "type": "number"
        },
        "staged": {
          "type": "boolean"
        },
        "price": {
          "$ref": "#/definitions/QueryPrice"
        }
      },
      "required": [
        "productId",
        "variantId",
        "staged",
        "price"
      ],
      "x-annotation-package": "ProductDiscount",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-productTypes.html#get-matching-productdiscount"
    },
    "ProductDiscountPagedQueryResponse": {
      "title": "ProductDiscountPagedQueryResponse",
      "type": "object",
      "properties": {
        "limit": {
          "format": "int64",
          "type": "number"
        },
        "count": {
          "format": "int64",
          "type": "number"
        },
        "total": {
          "format": "int64",
          "type": "number"
        },
        "offset": {
          "format": "int64",
          "type": "number"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductDiscount"
          }
        }
      },
      "required": [
        "limit",
        "count",
        "offset",
        "results"
      ],
      "x-annotation-package": "ProductDiscount"
    },
    "ProductDiscountReference": {
      "title": "ProductDiscountReference",
      "allOf": [
        {
          "$ref": "#/definitions/Reference"
        },
        {
          "properties": {
            "obj": {
              "$ref": "#/definitions/ProductDiscount"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "ProductDiscount",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-productDiscounts.html#productdiscount"
    },
    "ProductDiscountResourceIdentifier": {
      "title": "ProductDiscountResourceIdentifier",
      "$ref": "#/definitions/ResourceIdentifier",
      "x-annotation-package": "ProductDiscount",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-productDiscounts.html#productdiscount"
    },
    "ProductDiscountUpdate": {
      "title": "ProductDiscountUpdate",
      "type": "object",
      "properties": {
        "version": {
          "format": "int64",
          "type": "number"
        },
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductDiscountUpdateAction"
          }
        }
      },
      "required": [
        "version",
        "actions"
      ],
      "x-annotation-package": "ProductDiscount"
    },
    "ProductDiscountUpdateAction": {
      "title": "ProductDiscountUpdateAction",
      "discriminator": "action",
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        }
      },
      "required": [
        "action"
      ],
      "x-annotation-package": "ProductDiscount"
    },
    "ProductDiscountValue": {
      "title": "ProductDiscountValue",
      "discriminator": "type",
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "x-annotation-package": "ProductDiscount",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-productDiscounts.html#productdiscountvalue"
    },
    "ProductDiscountValueAbsolute": {
      "title": "ProductDiscountValueAbsolute",
      "allOf": [
        {
          "$ref": "#/definitions/ProductDiscountValue"
        },
        {
          "properties": {
            "money": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TypedMoney"
              }
            }
          },
          "required": [
            "money"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "ProductDiscount"
    },
    "ProductDiscountValueAbsoluteDraft": {
      "title": "ProductDiscountValueAbsoluteDraft",
      "allOf": [
        {
          "$ref": "#/definitions/ProductDiscountValueDraft"
        },
        {
          "properties": {
            "money": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Money"
              }
            }
          },
          "required": [
            "money"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "ProductDiscount"
    },
    "ProductDiscountValueDraft": {
      "title": "ProductDiscountValueDraft",
      "discriminator": "type",
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "x-annotation-package": "ProductDiscount",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-productDiscounts.html#productdiscountvalue"
    },
    "ProductDiscountValueExternal": {
      "title": "ProductDiscountValueExternal",
      "$ref": "#/definitions/ProductDiscountValue",
      "x-annotation-package": "ProductDiscount"
    },
    "ProductDiscountValueExternalDraft": {
      "title": "ProductDiscountValueExternalDraft",
      "$ref": "#/definitions/ProductDiscountValueDraft",
      "x-annotation-package": "ProductDiscount"
    },
    "ProductDiscountValueRelative": {
      "title": "ProductDiscountValueRelative",
      "allOf": [
        {
          "$ref": "#/definitions/ProductDiscountValue"
        },
        {
          "properties": {
            "permyriad": {
              "format": "int64",
              "type": "number"
            }
          },
          "required": [
            "permyriad"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "ProductDiscount"
    },
    "ProductDiscountValueRelativeDraft": {
      "title": "ProductDiscountValueRelativeDraft",
      "allOf": [
        {
          "$ref": "#/definitions/ProductDiscountValueDraft"
        },
        {
          "properties": {
            "permyriad": {
              "format": "int64",
              "type": "number"
            }
          },
          "required": [
            "permyriad"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "ProductDiscount"
    },
    "ProductDiscountChangeIsActiveAction": {
      "title": "ProductDiscountChangeIsActiveAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductDiscountUpdateAction"
        },
        {
          "properties": {
            "isActive": {
              "type": "boolean"
            }
          },
          "required": [
            "isActive"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "ProductDiscount",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-productDiscounts.html#change-is-active",
      "x-annotation-postman-example": null
    },
    "ProductDiscountChangeNameAction": {
      "title": "ProductDiscountChangeNameAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductDiscountUpdateAction"
        },
        {
          "properties": {
            "name": {
              "$ref": "#/definitions/LocalizedString"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "ProductDiscount",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-productDiscounts.html#change-name",
      "x-annotation-postman-example": null
    },
    "ProductDiscountChangePredicateAction": {
      "title": "ProductDiscountChangePredicateAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductDiscountUpdateAction"
        },
        {
          "properties": {
            "predicate": {
              "description": "A valid ProductDiscount Predicate.",
              "type": "string"
            }
          },
          "required": [
            "predicate"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "ProductDiscount",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-productDiscounts.html#change-predicate",
      "x-annotation-postman-example": null
    },
    "ProductDiscountChangeSortOrderAction": {
      "title": "ProductDiscountChangeSortOrderAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductDiscountUpdateAction"
        },
        {
          "properties": {
            "sortOrder": {
              "description": "The string must contain a number between 0 and 1.\nA discount with greater sortOrder is prioritized higher than a discount with lower sortOrder.",
              "type": "string"
            }
          },
          "required": [
            "sortOrder"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "ProductDiscount",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-productDiscounts.html#change-sort-order",
      "x-annotation-postman-example": null
    },
    "ProductDiscountChangeValueAction": {
      "title": "ProductDiscountChangeValueAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductDiscountUpdateAction"
        },
        {
          "properties": {
            "value": {
              "$ref": "#/definitions/ProductDiscountValueDraft"
            }
          },
          "required": [
            "value"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "ProductDiscount",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-productDiscounts.html#change-value",
      "x-annotation-postman-example": null
    },
    "ProductDiscountSetDescriptionAction": {
      "title": "ProductDiscountSetDescriptionAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductDiscountUpdateAction"
        },
        {
          "properties": {
            "description": {
              "$ref": "#/definitions/LocalizedString"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "ProductDiscount",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-productDiscounts.html#set-description",
      "x-annotation-postman-example": null
    },
    "ProductDiscountSetKeyAction": {
      "title": "ProductDiscountSetKeyAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductDiscountUpdateAction"
        },
        {
          "properties": {
            "key": {
              "description": "The key to set.\nIf you provide a `null` value or do not set this field at all, the existing `key` field is removed.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "ProductDiscount",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-productDiscounts.html#set-key"
    },
    "ProductDiscountSetValidFromAction": {
      "title": "ProductDiscountSetValidFromAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductDiscountUpdateAction"
        },
        {
          "properties": {
            "validFrom": {
              "description": "The time from which the discount should be effective.\nPlease take Eventual Consistency into account for calculated product discount values.",
              "type": "string",
              "format": "date-time"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "ProductDiscount",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-productDiscounts.html#set-valid-from",
      "x-annotation-postman-example": null
    },
    "ProductDiscountSetValidFromAndUntilAction": {
      "title": "ProductDiscountSetValidFromAndUntilAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductDiscountUpdateAction"
        },
        {
          "properties": {
            "validFrom": {
              "type": "string",
              "format": "date-time"
            },
            "validUntil": {
              "description": "The timeframe for which the discount should be effective.\nPlease take Eventual Consistency into account for calculated undiscounted values.",
              "type": "string",
              "format": "date-time"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "ProductDiscount",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-productDiscounts.html#set-valid-from-and-until",
      "x-annotation-postman-example": null
    },
    "ProductDiscountSetValidUntilAction": {
      "title": "ProductDiscountSetValidUntilAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductDiscountUpdateAction"
        },
        {
          "properties": {
            "validUntil": {
              "description": "The time from which the discount should be ineffective.\nPlease take Eventual Consistency into account for calculated undiscounted values.",
              "type": "string",
              "format": "date-time"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "ProductDiscount",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-productDiscounts.html#set-valid-until",
      "x-annotation-postman-example": null
    },
    "AttributeBooleanType": {
      "title": "AttributeBooleanType",
      "$ref": "#/definitions/AttributeType",
      "x-annotation-package": "ProductType",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-productTypes.html#booleantype"
    },
    "AttributeConstraintEnum": {
      "title": "AttributeConstraintEnum",
      "enum": [
        "None",
        "Unique",
        "CombinationUnique",
        "SameForAll"
      ],
      "type": "string",
      "x-annotation-package": "ProductType"
    },
    "AttributeConstraintEnumDraft": {
      "title": "AttributeConstraintEnumDraft",
      "enum": [
        "None"
      ],
      "type": "string",
      "x-annotation-package": "ProductType"
    },
    "AttributeDateTimeType": {
      "title": "AttributeDateTimeType",
      "$ref": "#/definitions/AttributeType",
      "x-annotation-package": "ProductType",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-productTypes.html#datetimetype"
    },
    "AttributeDateType": {
      "title": "AttributeDateType",
      "$ref": "#/definitions/AttributeType",
      "x-annotation-package": "ProductType",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-productTypes.html#datetype"
    },
    "AttributeDefinition": {
      "title": "AttributeDefinition",
      "type": "object",
      "properties": {
        "type": {
          "description": "Describes the type of the attribute.",
          "$ref": "#/definitions/AttributeType"
        },
        "name": {
          "description": "The unique name of the attribute used in the API.\nThe name must be between two and 256 characters long and can contain the ASCII letters A to Z in lowercase or uppercase, digits, underscores (`_`) and the hyphen-minus (`-`).\nWhen using the same `name` for an attribute in two or more product types all fields of the AttributeDefinition of this attribute need to be the same across the product types, otherwise an AttributeDefinitionAlreadyExists error code will be returned.\nAn exception to this are the values of an `enum` or `lenum` type and sets thereof.",
          "type": "string"
        },
        "label": {
          "description": "A human-readable label for the attribute.",
          "$ref": "#/definitions/LocalizedString"
        },
        "isRequired": {
          "description": "Whether the attribute is required to have a value.",
          "type": "boolean"
        },
        "attributeConstraint": {
          "description": "Describes how an attribute or a set of attributes should be validated across all variants of a product.",
          "$ref": "#/definitions/AttributeConstraintEnum"
        },
        "inputTip": {
          "description": "Additional information about the attribute that aids content managers when setting product details.",
          "$ref": "#/definitions/LocalizedString"
        },
        "inputHint": {
          "description": "Provides a visual representation type for this attribute.\nonly relevant for text-based attribute types\nlike TextType and LocalizableTextType.",
          "$ref": "#/definitions/TextInputHint"
        },
        "isSearchable": {
          "description": "Whether the attribute's values should generally be enabled in product search.\nThis determines whether the value is stored in products for matching terms in the context of full-text search queries  and can be used in facets & filters as part of product search queries.\nThe exact features that are enabled/disabled with this flag depend on the concrete attribute type and are described there.\nThe max size of a searchable field is **restricted to 10922 characters**.\nThis constraint is enforced at both product creation and product update.\nIf the length of the input exceeds the maximum size an InvalidField error is returned.",
          "type": "boolean"
        }
      },
      "required": [
        "type",
        "name",
        "label",
        "isRequired",
        "attributeConstraint",
        "inputHint",
        "isSearchable"
      ],
      "x-annotation-package": "ProductType",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-productTypes.html#attributedefinition"
    },
    "AttributeDefinitionDraft": {
      "title": "AttributeDefinitionDraft",
      "type": "object",
      "properties": {
        "type": {
          "description": "Describes the type of the attribute.",
          "$ref": "#/definitions/AttributeType"
        },
        "name": {
          "description": "The unique name of the attribute used in the API.\nThe name must be between two and 256 characters long and can contain the ASCII letters A to Z in lowercase or uppercase, digits, underscores (`_`) and the hyphen-minus (`-`).\nWhen using the same `name` for an attribute in two or more product types all fields of the AttributeDefinition of this attribute need to be the same across the product types.",
          "type": "string"
        },
        "label": {
          "description": "A human-readable label for the attribute.",
          "$ref": "#/definitions/LocalizedString"
        },
        "isRequired": {
          "description": "Whether the attribute is required to have a value.",
          "type": "boolean"
        },
        "attributeConstraint": {
          "description": "Describes how an attribute or a set of attributes should be validated across all variants of a product.",
          "$ref": "#/definitions/AttributeConstraintEnum"
        },
        "inputTip": {
          "description": "Additional information about the attribute that aids content managers when setting product details.",
          "$ref": "#/definitions/LocalizedString"
        },
        "inputHint": {
          "description": "Provides a visual representation type for this attribute.\nonly relevant for text-based attribute types like TextType and LocalizableTextType.",
          "$ref": "#/definitions/TextInputHint"
        },
        "isSearchable": {
          "description": "Whether the attribute's values should generally be enabled in product search.\nThis determines whether the value is stored in products for matching terms in the context of full-text search queries and can be used in facets & filters as part of product search queries.\nThe exact features that are enabled/disabled with this flag depend on the concrete attribute type and are described there.",
          "type": "boolean"
        }
      },
      "required": [
        "type",
        "name",
        "label",
        "isRequired"
      ],
      "x-annotation-package": "ProductType"
    },
    "AttributeEnumType": {
      "title": "AttributeEnumType",
      "allOf": [
        {
          "$ref": "#/definitions/AttributeType"
        },
        {
          "properties": {
            "values": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AttributePlainEnumValue"
              }
            }
          },
          "required": [
            "values"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "ProductType",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-productTypes.html#enumtype"
    },
    "AttributeLocalizableTextType": {
      "title": "AttributeLocalizableTextType",
      "$ref": "#/definitions/AttributeType",
      "x-annotation-package": "ProductType",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-productTypes.html#localizabletexttype"
    },
    "AttributeLocalizedEnumType": {
      "title": "AttributeLocalizedEnumType",
      "allOf": [
        {
          "$ref": "#/definitions/AttributeType"
        },
        {
          "properties": {
            "values": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AttributeLocalizedEnumValue"
              }
            }
          },
          "required": [
            "values"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "ProductType",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-productTypes.html#localizableenumtype"
    },
    "AttributeLocalizedEnumValue": {
      "title": "AttributeLocalizedEnumValue",
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "label": {
          "$ref": "#/definitions/LocalizedString"
        }
      },
      "required": [
        "key",
        "label"
      ],
      "x-annotation-package": "ProductType",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-productTypes.html#localizedenumvalue"
    },
    "AttributeMoneyType": {
      "title": "AttributeMoneyType",
      "$ref": "#/definitions/AttributeType",
      "x-annotation-package": "ProductType",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-productTypes.html#moneytype"
    },
    "AttributeNestedType": {
      "title": "AttributeNestedType",
      "allOf": [
        {
          "$ref": "#/definitions/AttributeType"
        },
        {
          "properties": {
            "typeReference": {
              "$ref": "#/definitions/ProductTypeReference"
            }
          },
          "required": [
            "typeReference"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "ProductType",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-productTypes.html#nestedtype"
    },
    "AttributeNumberType": {
      "title": "AttributeNumberType",
      "$ref": "#/definitions/AttributeType",
      "x-annotation-package": "ProductType",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-productTypes.html#numbertype"
    },
    "AttributePlainEnumValue": {
      "title": "AttributePlainEnumValue",
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "label": {
          "type": "string"
        }
      },
      "required": [
        "key",
        "label"
      ],
      "x-annotation-package": "ProductType",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-productTypes.html#plainenumvalue"
    },
    "AttributeReferenceType": {
      "title": "AttributeReferenceType",
      "allOf": [
        {
          "$ref": "#/definitions/AttributeType"
        },
        {
          "properties": {
            "referenceTypeId": {
              "$ref": "#/definitions/ReferenceTypeId"
            }
          },
          "required": [
            "referenceTypeId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "ProductType",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-productTypes.html#referencetype"
    },
    "AttributeSetType": {
      "title": "AttributeSetType",
      "allOf": [
        {
          "$ref": "#/definitions/AttributeType"
        },
        {
          "properties": {
            "elementType": {
              "$ref": "#/definitions/AttributeType"
            }
          },
          "required": [
            "elementType"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "ProductType",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-productTypes.html#settype"
    },
    "AttributeTextType": {
      "title": "AttributeTextType",
      "$ref": "#/definitions/AttributeType",
      "x-annotation-package": "ProductType",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-productTypes.html#texttype"
    },
    "AttributeTimeType": {
      "title": "AttributeTimeType",
      "$ref": "#/definitions/AttributeType",
      "x-annotation-package": "ProductType",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-productTypes.html#timetype"
    },
    "AttributeType": {
      "title": "AttributeType",
      "discriminator": "name",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "x-annotation-package": "ProductType",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-productTypes.html#attributetype"
    },
    "ProductType": {
      "title": "ProductType",
      "allOf": [
        {
          "$ref": "#/definitions/BaseResource"
        },
        {
          "properties": {
            "id": {
              "description": "The unique ID of the product type.",
              "type": "string",
              "x-annotation-identifier": true
            },
            "version": {
              "format": "int64",
              "description": "The current version of the product type.",
              "type": "number"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            },
            "lastModifiedAt": {
              "type": "string",
              "format": "date-time"
            },
            "lastModifiedBy": {
              "description": "Present on resources updated after 1/02/2019 except for events not tracked.",
              "$ref": "#/definitions/LastModifiedBy"
            },
            "createdBy": {
              "description": "Present on resources created after 1/02/2019 except for events not tracked.",
              "$ref": "#/definitions/CreatedBy"
            },
            "key": {
              "description": "User-specific unique identifier for the product type (max.\n256 characters).",
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "attributes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AttributeDefinition"
              }
            }
          },
          "required": [
            "id",
            "version",
            "createdAt",
            "lastModifiedAt",
            "name",
            "description"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "ProductType",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-productTypes.html#producttype",
      "x-annotation-updateType": "ProductTypeUpdate"
    },
    "ProductTypeDraft": {
      "title": "ProductTypeDraft",
      "type": "object",
      "properties": {
        "key": {
          "description": "User-specific unique identifier for the product type (min.\n2 and max.\n256 characters).",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AttributeDefinitionDraft"
          }
        }
      },
      "required": [
        "name",
        "description"
      ],
      "x-annotation-package": "ProductType",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-productTypes.html#producttypedraft"
    },
    "ProductTypePagedQueryResponse": {
      "title": "ProductTypePagedQueryResponse",
      "type": "object",
      "properties": {
        "limit": {
          "format": "int64",
          "type": "number"
        },
        "count": {
          "format": "int64",
          "type": "number"
        },
        "total": {
          "format": "int64",
          "type": "number"
        },
        "offset": {
          "format": "int64",
          "type": "number"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductType"
          }
        }
      },
      "required": [
        "limit",
        "count",
        "offset",
        "results"
      ],
      "x-annotation-package": "ProductType"
    },
    "ProductTypeReference": {
      "title": "ProductTypeReference",
      "allOf": [
        {
          "$ref": "#/definitions/Reference"
        },
        {
          "properties": {
            "obj": {
              "$ref": "#/definitions/ProductType"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "ProductType",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-productTypes.html#producttype"
    },
    "ProductTypeResourceIdentifier": {
      "title": "ProductTypeResourceIdentifier",
      "$ref": "#/definitions/ResourceIdentifier",
      "x-annotation-package": "ProductType",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-productTypes.html#producttype"
    },
    "ProductTypeUpdate": {
      "title": "ProductTypeUpdate",
      "type": "object",
      "properties": {
        "version": {
          "format": "int64",
          "type": "number"
        },
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductTypeUpdateAction"
          }
        }
      },
      "required": [
        "version",
        "actions"
      ],
      "x-annotation-package": "ProductType"
    },
    "ProductTypeUpdateAction": {
      "title": "ProductTypeUpdateAction",
      "discriminator": "action",
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        }
      },
      "required": [
        "action"
      ],
      "x-annotation-package": "ProductType"
    },
    "TextInputHint": {
      "title": "TextInputHint",
      "enum": [
        "SingleLine",
        "MultiLine"
      ],
      "type": "string",
      "x-annotation-package": "ProductType"
    },
    "ProductTypeAddAttributeDefinitionAction": {
      "title": "ProductTypeAddAttributeDefinitionAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductTypeUpdateAction"
        },
        {
          "properties": {
            "attribute": {
              "$ref": "#/definitions/AttributeDefinitionDraft"
            }
          },
          "required": [
            "attribute"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "ProductType",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-productTypes.html#add-attributedefinition"
    },
    "ProductTypeAddLocalizedEnumValueAction": {
      "title": "ProductTypeAddLocalizedEnumValueAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductTypeUpdateAction"
        },
        {
          "properties": {
            "attributeName": {
              "type": "string"
            },
            "value": {
              "$ref": "#/definitions/AttributeLocalizedEnumValue"
            }
          },
          "required": [
            "attributeName",
            "value"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "ProductType",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-productTypes.html#add-localizableenumvalue-to-attributedefinition"
    },
    "ProductTypeAddPlainEnumValueAction": {
      "title": "ProductTypeAddPlainEnumValueAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductTypeUpdateAction"
        },
        {
          "properties": {
            "attributeName": {
              "type": "string"
            },
            "value": {
              "$ref": "#/definitions/AttributePlainEnumValue"
            }
          },
          "required": [
            "attributeName",
            "value"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "ProductType",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-productTypes.html#add-plainenumvalue-to-attributedefinition"
    },
    "ProductTypeChangeAttributeConstraintAction": {
      "title": "ProductTypeChangeAttributeConstraintAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductTypeUpdateAction"
        },
        {
          "properties": {
            "attributeName": {
              "type": "string"
            },
            "newValue": {
              "$ref": "#/definitions/AttributeConstraintEnumDraft"
            }
          },
          "required": [
            "attributeName",
            "newValue"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "ProductType",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-productTypes.html#change-attributedefinition-attributeconstraint"
    },
    "ProductTypeChangeAttributeNameAction": {
      "title": "ProductTypeChangeAttributeNameAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductTypeUpdateAction"
        },
        {
          "properties": {
            "attributeName": {
              "type": "string"
            },
            "newAttributeName": {
              "type": "string"
            }
          },
          "required": [
            "attributeName",
            "newAttributeName"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "ProductType",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-productTypes.html#change-attributedefinition-name"
    },
    "ProductTypeChangeAttributeOrderAction": {
      "title": "ProductTypeChangeAttributeOrderAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductTypeUpdateAction"
        },
        {
          "properties": {
            "attributes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AttributeDefinition"
              }
            }
          },
          "required": [
            "attributes"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "ProductType",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-productTypes.html#change-the-order-of-attributedefinitions",
      "x-annotation-deprecated": true
    },
    "ProductTypeChangeAttributeOrderByNameAction": {
      "title": "ProductTypeChangeAttributeOrderByNameAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductTypeUpdateAction"
        },
        {
          "properties": {
            "attributeNames": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "required": [
            "attributeNames"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "ProductType",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-productTypes.html#change-the-order-of-attributedefinitions"
    },
    "ProductTypeChangeDescriptionAction": {
      "title": "ProductTypeChangeDescriptionAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductTypeUpdateAction"
        },
        {
          "properties": {
            "description": {
              "type": "string"
            }
          },
          "required": [
            "description"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "ProductType",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-productTypes.html#change-description"
    },
    "ProductTypeChangeEnumKeyAction": {
      "title": "ProductTypeChangeEnumKeyAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductTypeUpdateAction"
        },
        {
          "properties": {
            "attributeName": {
              "type": "string"
            },
            "key": {
              "type": "string"
            },
            "newKey": {
              "type": "string"
            }
          },
          "required": [
            "attributeName",
            "key",
            "newKey"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "ProductType",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-productTypes.html#change-the-key-of-an-enumvalue"
    },
    "ProductTypeChangeInputHintAction": {
      "title": "ProductTypeChangeInputHintAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductTypeUpdateAction"
        },
        {
          "properties": {
            "attributeName": {
              "type": "string"
            },
            "newValue": {
              "$ref": "#/definitions/TextInputHint"
            }
          },
          "required": [
            "attributeName",
            "newValue"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "ProductType",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-productTypes.html#change-attributedefinition-inputhint"
    },
    "ProductTypeChangeIsSearchableAction": {
      "title": "ProductTypeChangeIsSearchableAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductTypeUpdateAction"
        },
        {
          "properties": {
            "attributeName": {
              "type": "string"
            },
            "isSearchable": {
              "type": "boolean"
            }
          },
          "required": [
            "attributeName",
            "isSearchable"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "ProductType",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-productTypes.html#change-attributedefinition-issearchable"
    },
    "ProductTypeChangeLabelAction": {
      "title": "ProductTypeChangeLabelAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductTypeUpdateAction"
        },
        {
          "properties": {
            "attributeName": {
              "type": "string"
            },
            "label": {
              "$ref": "#/definitions/LocalizedString"
            }
          },
          "required": [
            "attributeName",
            "label"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "ProductType",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-productTypes.html#change-attributedefinition-label"
    },
    "ProductTypeChangeLocalizedEnumValueLabelAction": {
      "title": "ProductTypeChangeLocalizedEnumValueLabelAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductTypeUpdateAction"
        },
        {
          "properties": {
            "attributeName": {
              "type": "string"
            },
            "newValue": {
              "$ref": "#/definitions/AttributeLocalizedEnumValue"
            }
          },
          "required": [
            "attributeName",
            "newValue"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "ProductType",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-productTypes.html#change-the-label-of-an-enumvalue"
    },
    "ProductTypeChangeLocalizedEnumValueOrderAction": {
      "title": "ProductTypeChangeLocalizedEnumValueOrderAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductTypeUpdateAction"
        },
        {
          "properties": {
            "attributeName": {
              "type": "string"
            },
            "values": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AttributeLocalizedEnumValue"
              }
            }
          },
          "required": [
            "attributeName",
            "values"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "ProductType",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-productTypes.html#change-the-order-of-localizedenumvalues"
    },
    "ProductTypeChangeNameAction": {
      "title": "ProductTypeChangeNameAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductTypeUpdateAction"
        },
        {
          "properties": {
            "name": {
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "ProductType",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-productTypes.html#change-name"
    },
    "ProductTypeChangePlainEnumValueLabelAction": {
      "title": "ProductTypeChangePlainEnumValueLabelAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductTypeUpdateAction"
        },
        {
          "properties": {
            "attributeName": {
              "type": "string"
            },
            "newValue": {
              "$ref": "#/definitions/AttributePlainEnumValue"
            }
          },
          "required": [
            "attributeName",
            "newValue"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "ProductType",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-productTypes.html#change-the-label-of-an-enumvalue"
    },
    "ProductTypeChangePlainEnumValueOrderAction": {
      "title": "ProductTypeChangePlainEnumValueOrderAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductTypeUpdateAction"
        },
        {
          "properties": {
            "attributeName": {
              "type": "string"
            },
            "values": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AttributePlainEnumValue"
              }
            }
          },
          "required": [
            "attributeName",
            "values"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "ProductType",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-productTypes.html#change-the-order-of-enumvalues"
    },
    "ProductTypeRemoveAttributeDefinitionAction": {
      "title": "ProductTypeRemoveAttributeDefinitionAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductTypeUpdateAction"
        },
        {
          "properties": {
            "name": {
              "description": "The name of the attribute to remove.",
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "ProductType",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-productTypes.html#remove-attributedefinition"
    },
    "ProductTypeRemoveEnumValuesAction": {
      "title": "ProductTypeRemoveEnumValuesAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductTypeUpdateAction"
        },
        {
          "properties": {
            "attributeName": {
              "type": "string"
            },
            "keys": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "required": [
            "attributeName",
            "keys"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "ProductType",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-productTypes.html#remove-enumvalues-from-attributedefinition"
    },
    "ProductTypeSetInputTipAction": {
      "title": "ProductTypeSetInputTipAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductTypeUpdateAction"
        },
        {
          "properties": {
            "attributeName": {
              "type": "string"
            },
            "inputTip": {
              "$ref": "#/definitions/LocalizedString"
            }
          },
          "required": [
            "attributeName"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "ProductType",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-productTypes.html#set-attributedefinition-inputtip"
    },
    "ProductTypeSetKeyAction": {
      "title": "ProductTypeSetKeyAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductTypeUpdateAction"
        },
        {
          "properties": {
            "key": {
              "description": "If `key` is absent or `null`, this field will be removed if it exists.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "ProductType",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-productTypes.html#set-key"
    },
    "Attribute": {
      "title": "Attribute",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "x-annotation-identifier": true,
          "x-annotation-elementIdentifier": true
        },
        "value": {
          "description": "A valid JSON value, based on an AttributeDefinition.",
          "type": "string"
        }
      },
      "required": [
        "name",
        "value"
      ],
      "x-annotation-package": "Product",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-products.html#attribute"
    },
    "AttributeValue": {
      "title": "AttributeValue",
      "oneOf": [
        {
          "type": "string"
        },
        {
          "type": "number"
        },
        {
          "type": "string",
          "format": "date-time"
        },
        {
          "type": "string",
          "format": "date"
        },
        {
          "type": "string"
        },
        {
          "type": "boolean"
        },
        {
          "$ref": "#/definitions/AttributeLocalizedEnumValue"
        },
        {
          "$ref": "#/definitions/AttributePlainEnumValue"
        },
        {
          "$ref": "#/definitions/Reference"
        },
        {
          "$ref": "#/definitions/Money"
        },
        {
          "$ref": "#/definitions/LocalizedString"
        },
        {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Attribute"
          }
        }
      ],
      "x-annotation-package": "Product"
    },
    "CategoryOrderHints": {
      "title": "CategoryOrderHints",
      "type": "object",
      "additionalProperties": {
        "type": "string"
      },
      "x-annotation-package": "Product",
      "x-annotation-asMap": {
        "key": "string",
        "value": "string"
      }
    },
    "CustomTokenizer": {
      "title": "CustomTokenizer",
      "allOf": [
        {
          "$ref": "#/definitions/SuggestTokenizer"
        },
        {
          "properties": {
            "inputs": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "required": [
            "inputs"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Product"
    },
    "FacetResult": {
      "title": "FacetResult",
      "discriminator": "type",
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/FacetTypes"
        }
      },
      "required": [
        "type"
      ],
      "x-annotation-package": "Product"
    },
    "FacetResultRange": {
      "title": "FacetResultRange",
      "type": "object",
      "properties": {
        "from": {
          "type": "number"
        },
        "fromStr": {
          "type": "string"
        },
        "to": {
          "type": "number"
        },
        "toStr": {
          "type": "string"
        },
        "count": {
          "format": "int64",
          "type": "number"
        },
        "productCount": {
          "format": "int64",
          "type": "number"
        },
        "total": {
          "format": "int64",
          "type": "number"
        },
        "min": {
          "type": "number"
        },
        "max": {
          "type": "number"
        },
        "mean": {
          "type": "number"
        }
      },
      "required": [
        "from",
        "fromStr",
        "to",
        "toStr",
        "count",
        "total",
        "min",
        "max",
        "mean"
      ],
      "x-annotation-package": "Product"
    },
    "FacetResultTerm": {
      "title": "FacetResultTerm",
      "type": "object",
      "properties": {
        "term": {
          "type": "string"
        },
        "count": {
          "format": "int64",
          "type": "number"
        },
        "productCount": {
          "format": "int64",
          "type": "number"
        }
      },
      "required": [
        "term",
        "count"
      ],
      "x-annotation-package": "Product"
    },
    "FacetResults": {
      "title": "FacetResults",
      "type": "object",
      "additionalProperties": {
        "oneOf": [
          {
            "$ref": "#/definitions/FacetResult"
          },
          {
            "$ref": "#/definitions/FilteredFacetResult"
          },
          {
            "$ref": "#/definitions/RangeFacetResult"
          },
          {
            "$ref": "#/definitions/TermFacetResult"
          }
        ]
      },
      "x-annotation-package": "Product"
    },
    "FacetTypes": {
      "title": "FacetTypes",
      "enum": [
        "terms",
        "range",
        "filter"
      ],
      "type": "string",
      "x-annotation-package": "Product"
    },
    "FilteredFacetResult": {
      "title": "FilteredFacetResult",
      "allOf": [
        {
          "$ref": "#/definitions/FacetResult"
        },
        {
          "properties": {
            "count": {
              "format": "int64",
              "type": "number"
            },
            "productCount": {
              "format": "int64",
              "type": "number"
            }
          },
          "required": [
            "count"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Product"
    },
    "Product": {
      "title": "Product",
      "allOf": [
        {
          "$ref": "#/definitions/BaseResource"
        },
        {
          "properties": {
            "id": {
              "description": "The unique ID of the product.",
              "type": "string",
              "x-annotation-identifier": true
            },
            "version": {
              "format": "int64",
              "description": "The current version of the product.",
              "type": "number"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            },
            "lastModifiedAt": {
              "type": "string",
              "format": "date-time"
            },
            "lastModifiedBy": {
              "description": "Present on resources updated after 1/02/2019 except for events not tracked.",
              "$ref": "#/definitions/LastModifiedBy"
            },
            "createdBy": {
              "description": "Present on resources created after 1/02/2019 except for events not tracked.",
              "$ref": "#/definitions/CreatedBy"
            },
            "key": {
              "description": "User-specific unique identifier for the product.\n*Product keys are different from product variant keys.*",
              "type": "string"
            },
            "productType": {
              "$ref": "#/definitions/ProductTypeReference"
            },
            "masterData": {
              "description": "The product data in the master catalog.",
              "$ref": "#/definitions/ProductCatalogData"
            },
            "taxCategory": {
              "$ref": "#/definitions/TaxCategoryReference"
            },
            "state": {
              "$ref": "#/definitions/StateReference"
            },
            "reviewRatingStatistics": {
              "description": "Statistics about the review ratings taken into account for this product.",
              "$ref": "#/definitions/ReviewRatingStatistics"
            }
          },
          "required": [
            "id",
            "version",
            "createdAt",
            "lastModifiedAt",
            "productType",
            "masterData"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Product",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-products.html#product",
      "x-annotation-updateType": "ProductUpdate"
    },
    "ProductCatalogData": {
      "title": "ProductCatalogData",
      "type": "object",
      "properties": {
        "published": {
          "type": "boolean"
        },
        "current": {
          "$ref": "#/definitions/ProductData"
        },
        "staged": {
          "$ref": "#/definitions/ProductData"
        },
        "hasStagedChanges": {
          "type": "boolean"
        }
      },
      "required": [
        "published",
        "current",
        "staged",
        "hasStagedChanges"
      ],
      "x-annotation-package": "Product",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-products.html#productcatalogdata"
    },
    "ProductData": {
      "title": "ProductData",
      "type": "object",
      "properties": {
        "name": {
          "$ref": "#/definitions/LocalizedString"
        },
        "categories": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CategoryReference"
          }
        },
        "categoryOrderHints": {
          "$ref": "#/definitions/CategoryOrderHints"
        },
        "description": {
          "$ref": "#/definitions/LocalizedString"
        },
        "slug": {
          "$ref": "#/definitions/LocalizedString"
        },
        "metaTitle": {
          "$ref": "#/definitions/LocalizedString"
        },
        "metaDescription": {
          "$ref": "#/definitions/LocalizedString"
        },
        "metaKeywords": {
          "$ref": "#/definitions/LocalizedString"
        },
        "masterVariant": {
          "$ref": "#/definitions/ProductVariant"
        },
        "variants": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductVariant"
          }
        },
        "searchKeywords": {
          "$ref": "#/definitions/SearchKeywords"
        }
      },
      "required": [
        "name",
        "categories",
        "slug",
        "masterVariant",
        "variants",
        "searchKeywords"
      ],
      "x-annotation-package": "Product",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-products.html#productdata"
    },
    "ProductDraft": {
      "title": "ProductDraft",
      "type": "object",
      "properties": {
        "productType": {
          "description": "A predefined product type assigned to the product.\nAll products must have a product type.",
          "$ref": "#/definitions/ProductTypeResourceIdentifier"
        },
        "name": {
          "$ref": "#/definitions/LocalizedString"
        },
        "slug": {
          "description": "Human-readable identifiers usually used as deep-link URLs for the product.\nA slug must be unique across a project, but a product can have the same slug for different languages.\nSlugs have a maximum size of 256.\nValid characters are: alphabetic characters (`A-Z, a-z`), numeric characters (`0-9`), underscores (`_`) and hyphens (`-`).",
          "$ref": "#/definitions/LocalizedString"
        },
        "key": {
          "description": "User-specific unique identifier for the product.",
          "type": "string"
        },
        "description": {
          "$ref": "#/definitions/LocalizedString"
        },
        "categories": {
          "description": "Categories assigned to the product.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CategoryResourceIdentifier"
          }
        },
        "categoryOrderHints": {
          "$ref": "#/definitions/CategoryOrderHints"
        },
        "metaTitle": {
          "$ref": "#/definitions/LocalizedString"
        },
        "metaDescription": {
          "$ref": "#/definitions/LocalizedString"
        },
        "metaKeywords": {
          "$ref": "#/definitions/LocalizedString"
        },
        "masterVariant": {
          "description": "The master product variant.\nRequired if the `variants` array has product variants.",
          "$ref": "#/definitions/ProductVariantDraft"
        },
        "variants": {
          "description": "An array of related product variants.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductVariantDraft"
          }
        },
        "taxCategory": {
          "$ref": "#/definitions/TaxCategoryResourceIdentifier"
        },
        "searchKeywords": {
          "$ref": "#/definitions/SearchKeywords"
        },
        "state": {
          "$ref": "#/definitions/StateResourceIdentifier"
        },
        "publish": {
          "description": "If `true`, the product is published immediately.",
          "type": "boolean"
        }
      },
      "required": [
        "productType",
        "name",
        "slug"
      ],
      "x-annotation-package": "Product",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-products.html#productdraft"
    },
    "ProductPagedQueryResponse": {
      "title": "ProductPagedQueryResponse",
      "type": "object",
      "properties": {
        "limit": {
          "format": "int64",
          "type": "number"
        },
        "count": {
          "format": "int64",
          "type": "number"
        },
        "total": {
          "format": "int64",
          "type": "number"
        },
        "offset": {
          "format": "int64",
          "type": "number"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Product"
          }
        }
      },
      "required": [
        "limit",
        "count",
        "offset",
        "results"
      ],
      "x-annotation-package": "Product"
    },
    "ProductProjection": {
      "title": "ProductProjection",
      "allOf": [
        {
          "$ref": "#/definitions/BaseResource"
        },
        {
          "properties": {
            "id": {
              "description": "The unique ID of the Product.",
              "type": "string",
              "x-annotation-identifier": true
            },
            "version": {
              "format": "int64",
              "description": "The current version of the Product.",
              "type": "number"
            },
            "key": {
              "description": "User-specific unique identifier of the Product.",
              "type": "string"
            },
            "productType": {
              "$ref": "#/definitions/ProductTypeReference"
            },
            "name": {
              "$ref": "#/definitions/LocalizedString"
            },
            "description": {
              "$ref": "#/definitions/LocalizedString"
            },
            "slug": {
              "$ref": "#/definitions/LocalizedString"
            },
            "categories": {
              "description": "References to categories the product is in.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CategoryReference"
              }
            },
            "categoryOrderHints": {
              "$ref": "#/definitions/CategoryOrderHints"
            },
            "metaTitle": {
              "$ref": "#/definitions/LocalizedString"
            },
            "metaDescription": {
              "$ref": "#/definitions/LocalizedString"
            },
            "metaKeywords": {
              "$ref": "#/definitions/LocalizedString"
            },
            "searchKeywords": {
              "$ref": "#/definitions/SearchKeywords"
            },
            "hasStagedChanges": {
              "type": "boolean"
            },
            "published": {
              "type": "boolean"
            },
            "masterVariant": {
              "$ref": "#/definitions/ProductVariant"
            },
            "variants": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProductVariant"
              }
            },
            "taxCategory": {
              "$ref": "#/definitions/TaxCategoryReference"
            },
            "state": {
              "$ref": "#/definitions/StateReference"
            },
            "reviewRatingStatistics": {
              "description": "Statistics about the review ratings taken into account for this product.",
              "$ref": "#/definitions/ReviewRatingStatistics"
            }
          },
          "required": [
            "id",
            "version",
            "productType",
            "name",
            "slug",
            "categories",
            "masterVariant",
            "variants"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Product",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-productProjections.html#productprojection"
    },
    "ProductProjectionPagedQueryResponse": {
      "title": "ProductProjectionPagedQueryResponse",
      "type": "object",
      "properties": {
        "limit": {
          "format": "int64",
          "type": "number"
        },
        "count": {
          "format": "int64",
          "type": "number"
        },
        "total": {
          "format": "int64",
          "type": "number"
        },
        "offset": {
          "format": "int64",
          "type": "number"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductProjection"
          }
        }
      },
      "required": [
        "limit",
        "count",
        "offset",
        "results"
      ],
      "x-annotation-package": "Product"
    },
    "ProductProjectionPagedSearchResponse": {
      "title": "ProductProjectionPagedSearchResponse",
      "type": "object",
      "properties": {
        "count": {
          "format": "int64",
          "type": "number"
        },
        "total": {
          "format": "int64",
          "type": "number"
        },
        "offset": {
          "format": "int64",
          "type": "number"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductProjection"
          }
        },
        "facets": {
          "$ref": "#/definitions/FacetResults"
        }
      },
      "required": [
        "count",
        "offset",
        "results",
        "facets"
      ],
      "x-annotation-package": "Product"
    },
    "ProductPublishScope": {
      "title": "ProductPublishScope",
      "enum": [
        "All",
        "Prices"
      ],
      "type": "string",
      "x-annotation-package": "Cart",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-carts.html#cartorigin"
    },
    "ProductReference": {
      "title": "ProductReference",
      "allOf": [
        {
          "$ref": "#/definitions/Reference"
        },
        {
          "properties": {
            "obj": {
              "$ref": "#/definitions/Product"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Product",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-products.html#product"
    },
    "ProductResourceIdentifier": {
      "title": "ProductResourceIdentifier",
      "$ref": "#/definitions/ResourceIdentifier",
      "x-annotation-package": "Product",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-products.html#product"
    },
    "ProductUpdate": {
      "title": "ProductUpdate",
      "type": "object",
      "properties": {
        "version": {
          "format": "int64",
          "type": "number"
        },
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductUpdateAction"
          }
        }
      },
      "required": [
        "version",
        "actions"
      ],
      "x-annotation-package": "Product"
    },
    "ProductUpdateAction": {
      "title": "ProductUpdateAction",
      "discriminator": "action",
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        }
      },
      "required": [
        "action"
      ],
      "x-annotation-package": "Product"
    },
    "ProductVariant": {
      "title": "ProductVariant",
      "type": "object",
      "properties": {
        "id": {
          "format": "int64",
          "type": "number"
        },
        "sku": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "prices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Price"
          }
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Attribute"
          }
        },
        "price": {
          "$ref": "#/definitions/Price"
        },
        "images": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Image"
          }
        },
        "assets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Asset"
          }
        },
        "availability": {
          "$ref": "#/definitions/ProductVariantAvailability"
        },
        "isMatchingVariant": {
          "type": "boolean"
        },
        "scopedPrice": {
          "$ref": "#/definitions/ScopedPrice"
        },
        "scopedPriceDiscounted": {
          "type": "boolean"
        }
      },
      "required": [
        "id"
      ],
      "x-annotation-package": "Product",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-products.html#productvariant"
    },
    "ProductVariantAvailability": {
      "title": "ProductVariantAvailability",
      "type": "object",
      "properties": {
        "isOnStock": {
          "type": "boolean"
        },
        "restockableInDays": {
          "format": "int64",
          "type": "number"
        },
        "availableQuantity": {
          "format": "int64",
          "type": "number"
        },
        "channels": {
          "$ref": "#/definitions/ProductVariantChannelAvailabilityMap"
        }
      },
      "x-annotation-package": "Product",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-products.html#productvariantavailability"
    },
    "ProductVariantChannelAvailability": {
      "title": "ProductVariantChannelAvailability",
      "type": "object",
      "properties": {
        "isOnStock": {
          "type": "boolean"
        },
        "restockableInDays": {
          "format": "int64",
          "type": "number"
        },
        "availableQuantity": {
          "format": "int64",
          "type": "number"
        }
      },
      "x-annotation-package": "Product"
    },
    "ProductVariantChannelAvailabilityMap": {
      "title": "ProductVariantChannelAvailabilityMap",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/ProductVariantChannelAvailability"
      },
      "x-annotation-package": "Product"
    },
    "ProductVariantDraft": {
      "title": "ProductVariantDraft",
      "type": "object",
      "properties": {
        "sku": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "prices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PriceDraft"
          }
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Attribute"
          }
        },
        "images": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Image"
          }
        },
        "assets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssetDraft"
          }
        }
      },
      "x-annotation-package": "Product",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-products.html#productvariantdraft"
    },
    "RangeFacetResult": {
      "title": "RangeFacetResult",
      "allOf": [
        {
          "$ref": "#/definitions/FacetResult"
        },
        {
          "properties": {
            "ranges": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FacetResultRange"
              }
            }
          },
          "required": [
            "ranges"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Product"
    },
    "SearchKeyword": {
      "title": "SearchKeyword",
      "type": "object",
      "properties": {
        "text": {
          "type": "string"
        },
        "suggestTokenizer": {
          "oneOf": [
            {
              "$ref": "#/definitions/SuggestTokenizer"
            },
            {
              "$ref": "#/definitions/WhitespaceTokenizer"
            },
            {
              "$ref": "#/definitions/CustomTokenizer"
            }
          ]
        }
      },
      "required": [
        "text"
      ],
      "x-annotation-package": "Product",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-products.html#searchkeyword"
    },
    "SearchKeywords": {
      "title": "SearchKeywords",
      "type": "object",
      "additionalProperties": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/SearchKeyword"
        }
      },
      "x-annotation-package": "Product",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-products.html#searchkeywords"
    },
    "SuggestTokenizer": {
      "title": "SuggestTokenizer",
      "discriminator": "type",
      "type": "object",
      "properties": {
        "type": {
          "enum": [
            "whitespace",
            "custom"
          ],
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "x-annotation-package": "Product",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-products.html#product-search-keywords-suggest-examples"
    },
    "Suggestion": {
      "title": "Suggestion",
      "type": "object",
      "properties": {
        "text": {
          "description": "The suggested text.",
          "type": "string"
        }
      },
      "required": [
        "text"
      ],
      "x-annotation-package": "Product",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-products-suggestions.html#suggestion"
    },
    "SuggestionResult": {
      "title": "SuggestionResult",
      "type": "object",
      "additionalProperties": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Suggestion"
        }
      },
      "x-annotation-package": "Product",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-products-suggestions.html#suggestionresult"
    },
    "TermFacetResult": {
      "title": "TermFacetResult",
      "allOf": [
        {
          "$ref": "#/definitions/FacetResult"
        },
        {
          "properties": {
            "dataType": {
              "$ref": "#/definitions/TermFacetResultType"
            },
            "missing": {
              "format": "int64",
              "type": "number"
            },
            "total": {
              "format": "int64",
              "type": "number"
            },
            "other": {
              "format": "int64",
              "type": "number"
            },
            "terms": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FacetResultTerm"
              }
            }
          },
          "required": [
            "dataType",
            "missing",
            "total",
            "other",
            "terms"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Product"
    },
    "TermFacetResultType": {
      "title": "TermFacetResultType",
      "enum": [
        "text",
        "date",
        "time",
        "datetime",
        "boolean",
        "number"
      ],
      "type": "string",
      "x-annotation-package": "Product"
    },
    "WhitespaceTokenizer": {
      "title": "WhitespaceTokenizer",
      "$ref": "#/definitions/SuggestTokenizer",
      "x-annotation-package": "Product"
    },
    "ProductAddAssetAction": {
      "title": "ProductAddAssetAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "properties": {
            "variantId": {
              "format": "int64",
              "type": "number"
            },
            "sku": {
              "type": "string"
            },
            "staged": {
              "type": "boolean"
            },
            "asset": {
              "$ref": "#/definitions/AssetDraft"
            },
            "position": {
              "format": "int32",
              "description": "Position of the new asset inside the existing list (from `0` to the size of the list)",
              "type": "number"
            }
          },
          "required": [
            "asset"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Product",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-products.html#add-asset",
      "x-annotation-postman-example": null
    },
    "ProductAddExternalImageAction": {
      "title": "ProductAddExternalImageAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "properties": {
            "variantId": {
              "format": "int64",
              "type": "number"
            },
            "sku": {
              "type": "string"
            },
            "image": {
              "$ref": "#/definitions/Image"
            },
            "staged": {
              "type": "boolean"
            }
          },
          "required": [
            "image"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Product",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-products.html#add-external-image",
      "x-annotation-postman-example": null
    },
    "ProductAddPriceAction": {
      "title": "ProductAddPriceAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "properties": {
            "variantId": {
              "format": "int64",
              "type": "number"
            },
            "sku": {
              "type": "string"
            },
            "price": {
              "$ref": "#/definitions/PriceDraft"
            },
            "staged": {
              "type": "boolean"
            }
          },
          "required": [
            "price"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Product",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-products.html#add-price",
      "x-annotation-postman-example": null
    },
    "ProductAddToCategoryAction": {
      "title": "ProductAddToCategoryAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "properties": {
            "category": {
              "$ref": "#/definitions/CategoryResourceIdentifier"
            },
            "orderHint": {
              "type": "string"
            },
            "staged": {
              "type": "boolean"
            }
          },
          "required": [
            "category"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Product",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-products.html#add-to-category",
      "x-annotation-postman-example": null
    },
    "ProductAddVariantAction": {
      "title": "ProductAddVariantAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "properties": {
            "sku": {
              "type": "string"
            },
            "key": {
              "type": "string"
            },
            "prices": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PriceDraft"
              }
            },
            "images": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Image"
              }
            },
            "attributes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Attribute"
              }
            },
            "staged": {
              "type": "boolean"
            },
            "assets": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Asset"
              }
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Product",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-products.html#add-productvariant",
      "x-annotation-postman-example": null
    },
    "ProductChangeAssetNameAction": {
      "title": "ProductChangeAssetNameAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "properties": {
            "variantId": {
              "format": "int64",
              "type": "number"
            },
            "sku": {
              "type": "string"
            },
            "staged": {
              "type": "boolean"
            },
            "assetId": {
              "type": "string"
            },
            "assetKey": {
              "type": "string"
            },
            "name": {
              "$ref": "#/definitions/LocalizedString"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Product",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-products.html#change-asset-name",
      "x-annotation-postman-example": null
    },
    "ProductChangeAssetOrderAction": {
      "title": "ProductChangeAssetOrderAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "properties": {
            "variantId": {
              "format": "int64",
              "type": "number"
            },
            "sku": {
              "type": "string"
            },
            "staged": {
              "type": "boolean"
            },
            "assetOrder": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "required": [
            "assetOrder"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Product",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-products.html#change-asset-order",
      "x-annotation-postman-example": null
    },
    "ProductChangeMasterVariantAction": {
      "title": "ProductChangeMasterVariantAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "properties": {
            "variantId": {
              "format": "int64",
              "type": "number"
            },
            "sku": {
              "type": "string"
            },
            "staged": {
              "type": "boolean"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Product",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-products.html#change-master-variant",
      "x-annotation-postman-example": null
    },
    "ProductChangeNameAction": {
      "title": "ProductChangeNameAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "properties": {
            "name": {
              "$ref": "#/definitions/LocalizedString"
            },
            "staged": {
              "type": "boolean"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Product",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-products.html#change-name",
      "x-annotation-postman-example": null
    },
    "ProductChangePriceAction": {
      "title": "ProductChangePriceAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "properties": {
            "priceId": {
              "description": "ID of the [Price](#price)",
              "type": "string"
            },
            "price": {
              "$ref": "#/definitions/PriceDraft"
            },
            "staged": {
              "type": "boolean"
            }
          },
          "required": [
            "priceId",
            "price"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Product",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-products.html#change-price",
      "x-annotation-postman-example": null
    },
    "ProductChangeSlugAction": {
      "title": "ProductChangeSlugAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "properties": {
            "slug": {
              "description": "Every slug must be unique across a project, but a product can have the same slug for different languages.\nAllowed are alphabetic, numeric, underscore (`_`) and hyphen (`-`) characters.\nMaximum size is `256`.",
              "$ref": "#/definitions/LocalizedString"
            },
            "staged": {
              "type": "boolean"
            }
          },
          "required": [
            "slug"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Product",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-products.html#change-slug",
      "x-annotation-postman-example": null
    },
    "ProductLegacySetSkuAction": {
      "title": "ProductLegacySetSkuAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "properties": {
            "sku": {
              "type": "string"
            },
            "variantId": {
              "type": "integer"
            }
          },
          "required": [
            "variantId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Product"
    },
    "ProductMoveImageToPositionAction": {
      "title": "ProductMoveImageToPositionAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "properties": {
            "variantId": {
              "format": "int64",
              "type": "number"
            },
            "sku": {
              "type": "string"
            },
            "imageUrl": {
              "description": "The URL of the image",
              "type": "string"
            },
            "position": {
              "format": "int64",
              "type": "number"
            },
            "staged": {
              "type": "boolean"
            }
          },
          "required": [
            "imageUrl",
            "position"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Product",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-products.html#move-image-to-position",
      "x-annotation-postman-example": null
    },
    "ProductPublishAction": {
      "title": "ProductPublishAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "properties": {
            "scope": {
              "$ref": "#/definitions/ProductPublishScope"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Product",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-products.html#publish",
      "x-annotation-postman-example": null
    },
    "ProductRemoveAssetAction": {
      "title": "ProductRemoveAssetAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "properties": {
            "variantId": {
              "format": "int64",
              "type": "number"
            },
            "sku": {
              "type": "string"
            },
            "staged": {
              "type": "boolean"
            },
            "assetId": {
              "type": "string"
            },
            "assetKey": {
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Product",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-products.html#remove-asset",
      "x-annotation-postman-example": null
    },
    "ProductRemoveFromCategoryAction": {
      "title": "ProductRemoveFromCategoryAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "properties": {
            "category": {
              "$ref": "#/definitions/CategoryResourceIdentifier"
            },
            "staged": {
              "type": "boolean"
            }
          },
          "required": [
            "category"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Product",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-products.html#remove-from-category",
      "x-annotation-postman-example": null
    },
    "ProductRemoveImageAction": {
      "title": "ProductRemoveImageAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "properties": {
            "variantId": {
              "format": "int64",
              "type": "number"
            },
            "sku": {
              "type": "string"
            },
            "imageUrl": {
              "description": "The URL of the image.",
              "type": "string"
            },
            "staged": {
              "type": "boolean"
            }
          },
          "required": [
            "imageUrl"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Product",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-products.html#remove-image",
      "x-annotation-postman-example": null
    },
    "ProductRemovePriceAction": {
      "title": "ProductRemovePriceAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "properties": {
            "priceId": {
              "description": "ID of the [Price](#price)",
              "type": "string"
            },
            "staged": {
              "type": "boolean"
            }
          },
          "required": [
            "priceId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Product",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-products.html#remove-price",
      "x-annotation-postman-example": null
    },
    "ProductRemoveVariantAction": {
      "title": "ProductRemoveVariantAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "properties": {
            "id": {
              "format": "int64",
              "type": "number"
            },
            "sku": {
              "type": "string"
            },
            "staged": {
              "type": "boolean"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Product",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-products.html#remove-productvariant",
      "x-annotation-postman-example": null
    },
    "ProductRevertStagedChangesAction": {
      "title": "ProductRevertStagedChangesAction",
      "$ref": "#/definitions/ProductUpdateAction",
      "x-annotation-package": "Product",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-products.html#revert-staged-changes",
      "x-annotation-postman-example": null
    },
    "ProductRevertStagedVariantChangesAction": {
      "title": "ProductRevertStagedVariantChangesAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "properties": {
            "variantId": {
              "format": "int64",
              "type": "number"
            }
          },
          "required": [
            "variantId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Product",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-products.html#revert-staged-variant-changes",
      "x-annotation-postman-example": null
    },
    "ProductSetAssetCustomFieldAction": {
      "title": "ProductSetAssetCustomFieldAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "properties": {
            "variantId": {
              "format": "int64",
              "type": "number"
            },
            "sku": {
              "type": "string"
            },
            "staged": {
              "type": "boolean"
            },
            "assetId": {
              "type": "string"
            },
            "assetKey": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Product",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-products.html#set-asset-custom-field",
      "x-annotation-postman-example": null
    },
    "ProductSetAssetCustomTypeAction": {
      "title": "ProductSetAssetCustomTypeAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "properties": {
            "variantId": {
              "format": "int64",
              "type": "number"
            },
            "sku": {
              "type": "string"
            },
            "staged": {
              "type": "boolean"
            },
            "assetId": {
              "type": "string"
            },
            "assetKey": {
              "type": "string"
            },
            "type": {
              "description": "If set, the custom type is set to this new value.\nIf absent, the custom type and any existing custom fields are removed.",
              "$ref": "#/definitions/TypeResourceIdentifier"
            },
            "fields": {
              "description": "If set, the custom fields are set to this new value.",
              "type": "object"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Product",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-products.html#set-asset-custom-type",
      "x-annotation-postman-example": null
    },
    "ProductSetAssetDescriptionAction": {
      "title": "ProductSetAssetDescriptionAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "properties": {
            "variantId": {
              "format": "int64",
              "type": "number"
            },
            "sku": {
              "type": "string"
            },
            "staged": {
              "type": "boolean"
            },
            "assetId": {
              "type": "string"
            },
            "assetKey": {
              "type": "string"
            },
            "description": {
              "$ref": "#/definitions/LocalizedString"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Product",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-products.html#set-asset-description",
      "x-annotation-postman-example": null
    },
    "ProductSetAssetKeyAction": {
      "title": "ProductSetAssetKeyAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "properties": {
            "variantId": {
              "format": "int64",
              "type": "number"
            },
            "sku": {
              "type": "string"
            },
            "staged": {
              "type": "boolean"
            },
            "assetId": {
              "type": "string"
            },
            "assetKey": {
              "description": "User-defined identifier for the asset.\nIf left blank or set to `null`, the asset key is unset/removed.",
              "type": "string"
            }
          },
          "required": [
            "assetId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Product",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-products.html#set-asset-key",
      "x-annotation-postman-example": null
    },
    "ProductSetAssetSourcesAction": {
      "title": "ProductSetAssetSourcesAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "properties": {
            "variantId": {
              "format": "int64",
              "type": "number"
            },
            "sku": {
              "type": "string"
            },
            "staged": {
              "type": "boolean"
            },
            "assetId": {
              "type": "string"
            },
            "assetKey": {
              "type": "string"
            },
            "sources": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetSource"
              }
            }
          },
          "required": [
            "sources"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Product",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-products.html#set-asset-sources",
      "x-annotation-postman-example": null
    },
    "ProductSetAssetTagsAction": {
      "title": "ProductSetAssetTagsAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "properties": {
            "variantId": {
              "format": "int64",
              "type": "number"
            },
            "sku": {
              "type": "string"
            },
            "staged": {
              "type": "boolean"
            },
            "assetId": {
              "type": "string"
            },
            "assetKey": {
              "type": "string"
            },
            "tags": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Product",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-products.html#set-asset-tags",
      "x-annotation-postman-example": null
    },
    "ProductSetAttributeAction": {
      "title": "ProductSetAttributeAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "properties": {
            "variantId": {
              "format": "int64",
              "type": "number"
            },
            "sku": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "value": {
              "description": "If the attribute exists and the value is omitted or set to `null`, the attribute is removed.\nIf the attribute exists and a value is provided, the new value is applied.\nIf the attribute does not exist and a value is provided, it is added as a new attribute.",
              "type": "string"
            },
            "staged": {
              "type": "boolean"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Product",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-products.html#set-attribute",
      "x-annotation-postman-example": null
    },
    "ProductSetAttributeInAllVariantsAction": {
      "title": "ProductSetAttributeInAllVariantsAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "properties": {
            "name": {
              "type": "string"
            },
            "value": {
              "description": "The same update behavior as for Set Attribute applies.",
              "type": "string"
            },
            "staged": {
              "type": "boolean"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Product",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-products.html#set-attribute-in-all-variants",
      "x-annotation-postman-example": null
    },
    "ProductSetCategoryOrderHintAction": {
      "title": "ProductSetCategoryOrderHintAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "properties": {
            "categoryId": {
              "type": "string"
            },
            "orderHint": {
              "type": "string"
            },
            "staged": {
              "type": "boolean"
            }
          },
          "required": [
            "categoryId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Product",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-products.html#set-category-order-hint",
      "x-annotation-postman-example": null
    },
    "ProductSetDescriptionAction": {
      "title": "ProductSetDescriptionAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "properties": {
            "description": {
              "$ref": "#/definitions/LocalizedString"
            },
            "staged": {
              "type": "boolean"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Product",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-products.html#set-description",
      "x-annotation-postman-example": null
    },
    "ProductSetDiscountedPriceAction": {
      "title": "ProductSetDiscountedPriceAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "properties": {
            "priceId": {
              "type": "string"
            },
            "staged": {
              "type": "boolean"
            },
            "discounted": {
              "$ref": "#/definitions/DiscountedPrice"
            }
          },
          "required": [
            "priceId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Product",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-products.html#set-discounted-price",
      "x-annotation-postman-example": null
    },
    "ProductSetImageLabelAction": {
      "title": "ProductSetImageLabelAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "properties": {
            "sku": {
              "type": "string"
            },
            "variantId": {
              "format": "int64",
              "type": "number"
            },
            "imageUrl": {
              "description": "The URL of the image.",
              "type": "string"
            },
            "label": {
              "description": "The new image label.\nIf left blank or set to null, the label is removed.",
              "type": "string"
            },
            "staged": {
              "type": "boolean"
            }
          },
          "required": [
            "imageUrl"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Product",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-products.html#set-image-label",
      "x-annotation-postman-example": null
    },
    "ProductSetKeyAction": {
      "title": "ProductSetKeyAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "properties": {
            "key": {
              "description": "User-specific unique identifier for the product.\nIf left blank or set to `null`, the product key is unset/removed.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Product",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-products.html#set-key",
      "x-annotation-postman-example": null
    },
    "ProductSetMetaDescriptionAction": {
      "title": "ProductSetMetaDescriptionAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "properties": {
            "metaDescription": {
              "$ref": "#/definitions/LocalizedString"
            },
            "staged": {
              "type": "boolean"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Product",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-products.html#set-meta-description",
      "x-annotation-postman-example": null
    },
    "ProductSetMetaKeywordsAction": {
      "title": "ProductSetMetaKeywordsAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "properties": {
            "metaKeywords": {
              "$ref": "#/definitions/LocalizedString"
            },
            "staged": {
              "type": "boolean"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Product",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-products.html#set-meta-keywords",
      "x-annotation-postman-example": null
    },
    "ProductSetMetaTitleAction": {
      "title": "ProductSetMetaTitleAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "properties": {
            "metaTitle": {
              "$ref": "#/definitions/LocalizedString"
            },
            "staged": {
              "type": "boolean"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Product",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-products.html#set-meta-title",
      "x-annotation-postman-example": null
    },
    "ProductSetPricesAction": {
      "title": "ProductSetPricesAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "properties": {
            "variantId": {
              "format": "int64",
              "type": "number"
            },
            "sku": {
              "type": "string"
            },
            "prices": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PriceDraft"
              }
            },
            "staged": {
              "type": "boolean"
            }
          },
          "required": [
            "prices"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Product",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-products.html#set-prices",
      "x-annotation-postman-example": null
    },
    "ProductSetProductPriceCustomFieldAction": {
      "title": "ProductSetProductPriceCustomFieldAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "properties": {
            "priceId": {
              "type": "string"
            },
            "staged": {
              "type": "boolean"
            },
            "name": {
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          },
          "required": [
            "priceId",
            "name"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Product",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-products.html#set-customfield",
      "x-annotation-postman-example": null
    },
    "ProductSetProductPriceCustomTypeAction": {
      "title": "ProductSetProductPriceCustomTypeAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "properties": {
            "priceId": {
              "type": "string"
            },
            "staged": {
              "type": "boolean"
            },
            "type": {
              "$ref": "#/definitions/TypeResourceIdentifier"
            },
            "fields": {
              "$ref": "#/definitions/FieldContainer"
            }
          },
          "required": [
            "priceId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Product",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-products.html#set-product-price-custom-type",
      "x-annotation-postman-example": null
    },
    "ProductSetProductVariantKeyAction": {
      "title": "ProductSetProductVariantKeyAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "properties": {
            "variantId": {
              "format": "int64",
              "type": "number"
            },
            "sku": {
              "type": "string"
            },
            "key": {
              "description": "If left blank or set to `null`, the key is unset/removed.",
              "type": "string"
            },
            "staged": {
              "type": "boolean"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Product",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-products.html#set-productvariant-key",
      "x-annotation-postman-example": null
    },
    "ProductSetSearchKeywordsAction": {
      "title": "ProductSetSearchKeywordsAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "properties": {
            "searchKeywords": {
              "$ref": "#/definitions/SearchKeywords"
            },
            "staged": {
              "type": "boolean"
            }
          },
          "required": [
            "searchKeywords"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Product",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-products.html#set-searchkeywords",
      "x-annotation-postman-example": null
    },
    "ProductSetSkuAction": {
      "title": "ProductSetSkuAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "properties": {
            "variantId": {
              "format": "int64",
              "type": "number"
            },
            "sku": {
              "description": "SKU must be unique.\nIf left blank or set to `null`, the sku is unset/removed.",
              "type": "string"
            },
            "staged": {
              "type": "boolean"
            }
          },
          "required": [
            "variantId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Product",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-products.html#set-sku",
      "x-annotation-postman-example": null
    },
    "ProductSetTaxCategoryAction": {
      "title": "ProductSetTaxCategoryAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "properties": {
            "taxCategory": {
              "description": "If left blank or set to `null`, the tax category is unset/removed.",
              "$ref": "#/definitions/TaxCategoryResourceIdentifier"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Product",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-products.html#set-taxcategory",
      "x-annotation-postman-example": null
    },
    "ProductTransitionStateAction": {
      "title": "ProductTransitionStateAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProductUpdateAction"
        },
        {
          "properties": {
            "state": {
              "$ref": "#/definitions/StateResourceIdentifier"
            },
            "force": {
              "type": "boolean"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Product",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-products.html#transition-state",
      "x-annotation-postman-example": null
    },
    "ProductUnpublishAction": {
      "title": "ProductUnpublishAction",
      "$ref": "#/definitions/ProductUpdateAction",
      "x-annotation-package": "Product",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-products.html#unpublish",
      "x-annotation-postman-example": null
    },
    "CartClassificationType": {
      "title": "CartClassificationType",
      "allOf": [
        {
          "$ref": "#/definitions/ShippingRateInputType"
        },
        {
          "properties": {
            "values": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomFieldLocalizedEnumValue"
              }
            }
          },
          "required": [
            "values"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Project",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-project.html#cartclassification"
    },
    "CartScoreType": {
      "title": "CartScoreType",
      "$ref": "#/definitions/ShippingRateInputType",
      "x-annotation-package": "Project",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-project.html#cartscore"
    },
    "CartValueType": {
      "title": "CartValueType",
      "$ref": "#/definitions/ShippingRateInputType",
      "x-annotation-package": "Project",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-project.html#cartvalue"
    },
    "CartsConfiguration": {
      "title": "CartsConfiguration",
      "type": "object",
      "properties": {
        "countryTaxRateFallbackEnabled": {
          "description": "if country - no state tax rate fallback should be used when a shipping address state is not explicitly covered in the rates lists of all tax categories of a cart line items. Default value 'false'",
          "type": "boolean"
        }
      },
      "x-annotation-package": "Project"
    },
    "ExternalOAuth": {
      "title": "ExternalOAuth",
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        },
        "authorizationHeader": {
          "type": "string"
        }
      },
      "required": [
        "url",
        "authorizationHeader"
      ],
      "x-annotation-package": "Project",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-project.html#externaloauth"
    },
    "Project": {
      "title": "Project",
      "type": "object",
      "properties": {
        "version": {
          "format": "int64",
          "description": "The current version of the project.",
          "type": "number"
        },
        "key": {
          "description": "The unique key of the project.",
          "type": "string"
        },
        "name": {
          "description": "The name of the project.",
          "type": "string"
        },
        "countries": {
          "description": "A two-digit country code as per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CountryCode"
          }
        },
        "currencies": {
          "description": "A three-digit currency code as per [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CurrencyCode"
          }
        },
        "languages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Locale"
          }
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "trialUntil": {
          "description": "The time is in the format Year-Month `YYYY-MM`.",
          "type": "string"
        },
        "messages": {
          "$ref": "#/definitions/MessageConfiguration"
        },
        "shippingRateInputType": {
          "$ref": "#/definitions/ShippingRateInputType"
        },
        "externalOAuth": {
          "$ref": "#/definitions/ExternalOAuth"
        },
        "carts": {
          "$ref": "#/definitions/CartsConfiguration"
        }
      },
      "required": [
        "version",
        "key",
        "name",
        "countries",
        "currencies",
        "languages",
        "createdAt",
        "messages",
        "carts"
      ],
      "x-annotation-package": "Project",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-project.html#project",
      "x-annotation-updateType": "ProjectUpdate"
    },
    "ProjectUpdate": {
      "title": "ProjectUpdate",
      "type": "object",
      "properties": {
        "version": {
          "format": "int64",
          "type": "number"
        },
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectUpdateAction"
          }
        }
      },
      "required": [
        "version",
        "actions"
      ],
      "x-annotation-package": "Project"
    },
    "ProjectUpdateAction": {
      "title": "ProjectUpdateAction",
      "discriminator": "action",
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        }
      },
      "required": [
        "action"
      ],
      "x-annotation-package": "Project"
    },
    "ShippingRateInputType": {
      "title": "ShippingRateInputType",
      "discriminator": "type",
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/ShippingRateTierType"
        }
      },
      "required": [
        "type"
      ],
      "x-annotation-package": "Project",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-project.html#shippingrateinputtype"
    },
    "ProjectChangeCountriesAction": {
      "title": "ProjectChangeCountriesAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProjectUpdateAction"
        },
        {
          "properties": {
            "countries": {
              "description": "A two-digit country code as per country code.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CountryCode"
              }
            }
          },
          "required": [
            "countries"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Project",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-project.html#change-countries",
      "x-annotation-postman-example": null
    },
    "ProjectChangeCountryTaxRateFallbackEnabledAction": {
      "title": "ProjectChangeCountryTaxRateFallbackEnabledAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProjectUpdateAction"
        },
        {
          "properties": {
            "countryTaxRateFallbackEnabled": {
              "description": "default value is `false`",
              "type": "boolean"
            }
          },
          "required": [
            "countryTaxRateFallbackEnabled"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Project",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-project.html#change-country-tax-rate-fallback-enabled",
      "x-annotation-postman-example": null
    },
    "ProjectChangeCurrenciesAction": {
      "title": "ProjectChangeCurrenciesAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProjectUpdateAction"
        },
        {
          "properties": {
            "currencies": {
              "description": "A three-digit currency code as per currency code.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CurrencyCode"
              }
            }
          },
          "required": [
            "currencies"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Project",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-project.html#change-currencies",
      "x-annotation-postman-example": null
    },
    "ProjectChangeLanguagesAction": {
      "title": "ProjectChangeLanguagesAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProjectUpdateAction"
        },
        {
          "properties": {
            "languages": {
              "description": " .",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Locale"
              }
            }
          },
          "required": [
            "languages"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Project",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-project.html#change-languages",
      "x-annotation-postman-example": null
    },
    "ProjectChangeMessagesConfigurationAction": {
      "title": "ProjectChangeMessagesConfigurationAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProjectUpdateAction"
        },
        {
          "properties": {
            "messagesConfiguration": {
              "$ref": "#/definitions/MessageConfigurationDraft"
            }
          },
          "required": [
            "messagesConfiguration"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Project",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-project.html#change-messages-configuration",
      "x-annotation-postman-example": null
    },
    "ProjectChangeMessagesEnabledAction": {
      "title": "ProjectChangeMessagesEnabledAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProjectUpdateAction"
        },
        {
          "properties": {
            "messagesEnabled": {
              "type": "boolean"
            }
          },
          "required": [
            "messagesEnabled"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Project",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-project.html#change-messages-enabled",
      "x-annotation-deprecated": true
    },
    "ProjectChangeNameAction": {
      "title": "ProjectChangeNameAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProjectUpdateAction"
        },
        {
          "properties": {
            "name": {
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Project",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-project.html#change-name",
      "x-annotation-postman-example": null
    },
    "ProjectSetExternalOAuthAction": {
      "title": "ProjectSetExternalOAuthAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProjectUpdateAction"
        },
        {
          "properties": {
            "externalOAuth": {
              "description": "If you do not provide the `externalOAuth` field or provide a value\nof `null`, the update action unsets the External OAuth provider.\n",
              "$ref": "#/definitions/ExternalOAuth"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Project",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-project.html#set-externaloauth"
    },
    "ProjectSetShippingRateInputTypeAction": {
      "title": "ProjectSetShippingRateInputTypeAction",
      "allOf": [
        {
          "$ref": "#/definitions/ProjectUpdateAction"
        },
        {
          "properties": {
            "shippingRateInputType": {
              "description": "If not set, removes existing shippingRateInputType.",
              "$ref": "#/definitions/ShippingRateInputType"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Project",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-project.html#set-shippingrateinputtype",
      "x-annotation-postman-example": null
    },
    "Review": {
      "title": "Review",
      "allOf": [
        {
          "$ref": "#/definitions/BaseResource"
        },
        {
          "properties": {
            "id": {
              "description": "The unique ID of the review.",
              "type": "string",
              "x-annotation-identifier": true
            },
            "version": {
              "format": "int64",
              "description": "The current version of the review.",
              "type": "number"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            },
            "lastModifiedAt": {
              "type": "string",
              "format": "date-time"
            },
            "lastModifiedBy": {
              "description": "Present on resources updated after 1/02/2019 except for events not tracked.",
              "$ref": "#/definitions/LastModifiedBy"
            },
            "createdBy": {
              "description": "Present on resources created after 1/02/2019 except for events not tracked.",
              "$ref": "#/definitions/CreatedBy"
            },
            "key": {
              "description": "User-specific unique identifier for the review.",
              "type": "string"
            },
            "uniquenessValue": {
              "type": "string"
            },
            "locale": {
              "type": "string"
            },
            "authorName": {
              "type": "string"
            },
            "title": {
              "type": "string"
            },
            "text": {
              "type": "string"
            },
            "target": {
              "description": "Identifies the target of the review.\nCan be a Product or a Channel",
              "oneOf": [
                {
                  "$ref": "#/definitions/ProductReference"
                },
                {
                  "$ref": "#/definitions/ChannelReference"
                }
              ]
            },
            "includedInStatistics": {
              "description": "Indicates if this review is taken into account in the ratings statistics of the target.\nA review is per default used in the statistics, unless the review is in a state that does not have the role `ReviewIncludedInStatistics`.\nIf the role of a State is modified after the calculation of this field, the calculation is not updated.",
              "type": "boolean"
            },
            "rating": {
              "minimum": -100,
              "maximum": 100,
              "format": "int8",
              "description": "Number between -100 and 100 included.",
              "type": "number"
            },
            "state": {
              "$ref": "#/definitions/StateReference"
            },
            "customer": {
              "description": "The customer who created the review.",
              "$ref": "#/definitions/CustomerReference"
            },
            "custom": {
              "$ref": "#/definitions/CustomFields"
            }
          },
          "required": [
            "id",
            "version",
            "createdAt",
            "lastModifiedAt",
            "includedInStatistics"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Review",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-reviews.html#review",
      "x-annotation-updateType": "ReviewUpdate"
    },
    "ReviewDraft": {
      "title": "ReviewDraft",
      "type": "object",
      "properties": {
        "key": {
          "description": "User-specific unique identifier for the review.",
          "type": "string"
        },
        "uniquenessValue": {
          "description": "If set, this value must be unique among reviews.\nFor example, if you want to have only one review per customer and per product, you can set the value to `customer's id` + `product's id`.",
          "type": "string"
        },
        "locale": {
          "type": "string"
        },
        "authorName": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "text": {
          "type": "string"
        },
        "target": {
          "description": "Identifies the target of the review.\nCan be a Product or a Channel",
          "oneOf": [
            {
              "$ref": "#/definitions/ProductResourceIdentifier"
            },
            {
              "$ref": "#/definitions/ChannelResourceIdentifier"
            }
          ]
        },
        "state": {
          "$ref": "#/definitions/StateResourceIdentifier"
        },
        "rating": {
          "minimum": -100,
          "maximum": 100,
          "format": "int8",
          "description": "Number between -100 and 100 included.\nRating of the targeted object, like a product.\nThis rating can represent the number of stars, or a percentage, or a like (+1)/dislike (-1)\nA rating is used in the ratings statistics of the targeted object, unless the review is in a state that does not have the role `ReviewIncludedInStatistics`.",
          "type": "number"
        },
        "customer": {
          "description": "The customer who created the review.",
          "$ref": "#/definitions/CustomerResourceIdentifier"
        },
        "custom": {
          "$ref": "#/definitions/CustomFieldsDraft"
        }
      },
      "x-annotation-package": "Review",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-reviews.html#reviewdraft"
    },
    "ReviewPagedQueryResponse": {
      "title": "ReviewPagedQueryResponse",
      "type": "object",
      "properties": {
        "limit": {
          "format": "int64",
          "type": "number"
        },
        "count": {
          "format": "int64",
          "type": "number"
        },
        "total": {
          "format": "int64",
          "type": "number"
        },
        "offset": {
          "format": "int64",
          "type": "number"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Review"
          }
        }
      },
      "required": [
        "limit",
        "count",
        "offset",
        "results"
      ],
      "x-annotation-package": "Review"
    },
    "ReviewRatingStatistics": {
      "title": "ReviewRatingStatistics",
      "type": "object",
      "properties": {
        "averageRating": {
          "description": "Average rating of one target\nThis number is rounded with 5 decimals.",
          "type": "number"
        },
        "highestRating": {
          "description": "Highest rating of one target",
          "type": "number"
        },
        "lowestRating": {
          "description": "Lowest rating of one target",
          "type": "number"
        },
        "count": {
          "description": "Number of ratings taken into account",
          "type": "integer"
        },
        "ratingsDistribution": {
          "description": "The full distribution of the ratings.\nThe keys are the different ratings and the values are the count of reviews having this rating.\nOnly the used ratings appear in this object.",
          "type": "object"
        }
      },
      "required": [
        "averageRating",
        "highestRating",
        "lowestRating",
        "count",
        "ratingsDistribution"
      ],
      "x-annotation-package": "Review",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-reviews.html#reviewratingstatistics"
    },
    "ReviewReference": {
      "title": "ReviewReference",
      "allOf": [
        {
          "$ref": "#/definitions/Reference"
        },
        {
          "properties": {
            "obj": {
              "$ref": "#/definitions/Review"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Review"
    },
    "ReviewResourceIdentifier": {
      "title": "ReviewResourceIdentifier",
      "$ref": "#/definitions/ResourceIdentifier",
      "x-annotation-package": "Review"
    },
    "ReviewUpdate": {
      "title": "ReviewUpdate",
      "type": "object",
      "properties": {
        "version": {
          "format": "int64",
          "type": "number"
        },
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReviewUpdateAction"
          }
        }
      },
      "required": [
        "version",
        "actions"
      ],
      "x-annotation-package": "Review"
    },
    "ReviewUpdateAction": {
      "title": "ReviewUpdateAction",
      "discriminator": "action",
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        }
      },
      "required": [
        "action"
      ],
      "x-annotation-package": "Review"
    },
    "ReviewSetAuthorNameAction": {
      "title": "ReviewSetAuthorNameAction",
      "allOf": [
        {
          "$ref": "#/definitions/ReviewUpdateAction"
        },
        {
          "properties": {
            "authorName": {
              "description": "If `authorName` is absent or `null`, this field will be removed if it exists.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Review",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-reviews.html#set-author-name",
      "x-annotation-postman-example": null
    },
    "ReviewSetCustomFieldAction": {
      "title": "ReviewSetCustomFieldAction",
      "allOf": [
        {
          "$ref": "#/definitions/ReviewUpdateAction"
        },
        {
          "properties": {
            "name": {
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Review",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-reviews.html#set-customfield",
      "x-annotation-postman-example": null
    },
    "ReviewSetCustomTypeAction": {
      "title": "ReviewSetCustomTypeAction",
      "allOf": [
        {
          "$ref": "#/definitions/ReviewUpdateAction"
        },
        {
          "properties": {
            "type": {
              "description": "If absent, the custom type and any existing custom fields are removed.",
              "$ref": "#/definitions/TypeResourceIdentifier"
            },
            "fields": {
              "description": "A valid JSON object, based on the FieldDefinitions of the Type.\nSets the CustomFields to this value.",
              "$ref": "#/definitions/FieldContainer"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Review",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-reviews.html#set-custom-type",
      "x-annotation-postman-example": null
    },
    "ReviewSetCustomerAction": {
      "title": "ReviewSetCustomerAction",
      "allOf": [
        {
          "$ref": "#/definitions/ReviewUpdateAction"
        },
        {
          "properties": {
            "customer": {
              "description": "The customer who created the review.\nIf `customer` is absent or `null`, this field will be removed if it exists.",
              "$ref": "#/definitions/CustomerResourceIdentifier"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Review",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-reviews.html#set-customer",
      "x-annotation-postman-example": null
    },
    "ReviewSetKeyAction": {
      "title": "ReviewSetKeyAction",
      "allOf": [
        {
          "$ref": "#/definitions/ReviewUpdateAction"
        },
        {
          "properties": {
            "key": {
              "description": "If `key` is absent or `null`, this field will be removed if it exists.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Review",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-reviews.html#set-key",
      "x-annotation-postman-example": null
    },
    "ReviewSetLocaleAction": {
      "title": "ReviewSetLocaleAction",
      "allOf": [
        {
          "$ref": "#/definitions/ReviewUpdateAction"
        },
        {
          "properties": {
            "locale": {
              "description": "If `locale` is absent or `null`, this field will be removed if it exists.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Review",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-reviews.html#set-locale",
      "x-annotation-postman-example": null
    },
    "ReviewSetRatingAction": {
      "title": "ReviewSetRatingAction",
      "allOf": [
        {
          "$ref": "#/definitions/ReviewUpdateAction"
        },
        {
          "properties": {
            "rating": {
              "format": "int8",
              "description": "Number between -100 and 100 included.\nIf `rating` is absent or `null`, this field will be removed if it exists.",
              "type": "number"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Review",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-reviews.html#set-rating",
      "x-annotation-postman-example": null
    },
    "ReviewSetTargetAction": {
      "title": "ReviewSetTargetAction",
      "allOf": [
        {
          "$ref": "#/definitions/ReviewUpdateAction"
        },
        {
          "properties": {
            "target": {
              "description": "Identifies the target of the review.\nCan be a Product or a Channel.\nIf `target` is absent or `null`, this field will be removed if it exists.",
              "oneOf": [
                {
                  "$ref": "#/definitions/ProductResourceIdentifier"
                },
                {
                  "$ref": "#/definitions/ChannelResourceIdentifier"
                }
              ]
            }
          },
          "required": [
            "target"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Review",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-reviews.html#set-target",
      "x-annotation-postman-example": null
    },
    "ReviewSetTextAction": {
      "title": "ReviewSetTextAction",
      "allOf": [
        {
          "$ref": "#/definitions/ReviewUpdateAction"
        },
        {
          "properties": {
            "text": {
              "description": "If `text` is absent or `null`, this field will be removed if it exists.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Review",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-reviews.html#set-text",
      "x-annotation-postman-example": null
    },
    "ReviewSetTitleAction": {
      "title": "ReviewSetTitleAction",
      "allOf": [
        {
          "$ref": "#/definitions/ReviewUpdateAction"
        },
        {
          "properties": {
            "title": {
              "description": "If `title` is absent or `null`, this field will be removed if it exists.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Review",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-reviews.html#set-title",
      "x-annotation-postman-example": null
    },
    "ReviewTransitionStateAction": {
      "title": "ReviewTransitionStateAction",
      "allOf": [
        {
          "$ref": "#/definitions/ReviewUpdateAction"
        },
        {
          "properties": {
            "state": {
              "$ref": "#/definitions/StateResourceIdentifier"
            },
            "force": {
              "type": "boolean"
            }
          },
          "required": [
            "state"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Review",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-reviews.html#transition-state",
      "x-annotation-postman-example": null
    },
    "CartClassificationTier": {
      "title": "CartClassificationTier",
      "allOf": [
        {
          "$ref": "#/definitions/ShippingRatePriceTier"
        },
        {
          "properties": {
            "value": {
              "type": "string"
            },
            "price": {
              "$ref": "#/definitions/Money"
            },
            "isMatching": {
              "type": "boolean"
            }
          },
          "required": [
            "value",
            "price"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "ShippingMethod",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-shippingMethods.html#cartclassification"
    },
    "CartScoreTier": {
      "title": "CartScoreTier",
      "allOf": [
        {
          "$ref": "#/definitions/ShippingRatePriceTier"
        },
        {
          "properties": {
            "score": {
              "type": "number"
            },
            "price": {
              "$ref": "#/definitions/Money"
            },
            "priceFunction": {
              "$ref": "#/definitions/PriceFunction"
            },
            "isMatching": {
              "type": "boolean"
            }
          },
          "required": [
            "score"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "ShippingMethod",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-shippingMethods.html#cartscore-with-fixed-price"
    },
    "CartValueTier": {
      "title": "CartValueTier",
      "allOf": [
        {
          "$ref": "#/definitions/ShippingRatePriceTier"
        },
        {
          "properties": {
            "minimumCentAmount": {
              "format": "int64",
              "type": "integer"
            },
            "price": {
              "$ref": "#/definitions/Money"
            },
            "isMatching": {
              "type": "boolean"
            }
          },
          "required": [
            "minimumCentAmount",
            "price"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "ShippingMethod",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-shippingMethods.html#cartvalue"
    },
    "PriceFunction": {
      "title": "PriceFunction",
      "properties": {
        "currencyCode": {
          "$ref": "#/definitions/CurrencyCode"
        },
        "function": {
          "type": "string"
        }
      },
      "required": [
        "currencyCode",
        "function"
      ],
      "x-annotation-package": "ShippingMethod",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-shippingMethods.html#pricefunction",
      "type": "object"
    },
    "ShippingMethod": {
      "title": "ShippingMethod",
      "allOf": [
        {
          "$ref": "#/definitions/BaseResource"
        },
        {
          "properties": {
            "id": {
              "description": "The unique ID of the shipping method.",
              "type": "string",
              "x-annotation-identifier": true
            },
            "version": {
              "format": "int64",
              "description": "The current version of the shipping method.",
              "type": "number"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            },
            "lastModifiedAt": {
              "type": "string",
              "format": "date-time"
            },
            "lastModifiedBy": {
              "$ref": "#/definitions/LastModifiedBy"
            },
            "createdBy": {
              "$ref": "#/definitions/CreatedBy"
            },
            "key": {
              "description": "User-specific unique identifier for the shipping method.",
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "localizedDescription": {
              "$ref": "#/definitions/LocalizedString"
            },
            "taxCategory": {
              "$ref": "#/definitions/TaxCategoryReference"
            },
            "zoneRates": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ZoneRate"
              }
            },
            "isDefault": {
              "description": "One shipping method in a project can be default.",
              "type": "boolean"
            },
            "predicate": {
              "description": "A Cart predicate which can be used to more precisely select a shipping method for a cart.",
              "type": "string"
            }
          },
          "required": [
            "id",
            "version",
            "createdAt",
            "lastModifiedAt",
            "name",
            "taxCategory",
            "zoneRates",
            "isDefault"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "ShippingMethod",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-shippingMethods.html#shippingmethod",
      "x-annotation-updateType": "ShippingMethodUpdate"
    },
    "ShippingMethodDraft": {
      "title": "ShippingMethodDraft",
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "localizedDescription": {
          "$ref": "#/definitions/LocalizedString"
        },
        "taxCategory": {
          "$ref": "#/definitions/TaxCategoryResourceIdentifier"
        },
        "zoneRates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ZoneRateDraft"
          }
        },
        "isDefault": {
          "description": "If `true` the shipping method will be the default one in a project.",
          "type": "boolean"
        },
        "predicate": {
          "description": "A Cart predicate which can be used to more precisely select a shipping method for a cart.",
          "type": "string"
        }
      },
      "required": [
        "name",
        "taxCategory",
        "zoneRates",
        "isDefault"
      ],
      "x-annotation-package": "ShippingMethod",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-shippingMethods.html#shippingmethoddraft"
    },
    "ShippingMethodPagedQueryResponse": {
      "title": "ShippingMethodPagedQueryResponse",
      "type": "object",
      "properties": {
        "limit": {
          "format": "int64",
          "type": "number"
        },
        "count": {
          "format": "int64",
          "type": "number"
        },
        "total": {
          "format": "int64",
          "type": "number"
        },
        "offset": {
          "format": "int64",
          "type": "number"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ShippingMethod"
          }
        }
      },
      "required": [
        "count",
        "results"
      ],
      "x-annotation-package": "ShippingMethod"
    },
    "ShippingMethodReference": {
      "title": "ShippingMethodReference",
      "allOf": [
        {
          "$ref": "#/definitions/Reference"
        },
        {
          "properties": {
            "obj": {
              "$ref": "#/definitions/ShippingMethod"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "ShippingMethod",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-shippingMethods.html#shippingmethod"
    },
    "ShippingMethodResourceIdentifier": {
      "title": "ShippingMethodResourceIdentifier",
      "$ref": "#/definitions/ResourceIdentifier",
      "x-annotation-package": "ShippingMethod",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-shippingMethods.html#shippingmethod"
    },
    "ShippingMethodUpdate": {
      "title": "ShippingMethodUpdate",
      "type": "object",
      "properties": {
        "version": {
          "format": "int64",
          "type": "number"
        },
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ShippingMethodUpdateAction"
          }
        }
      },
      "required": [
        "version",
        "actions"
      ],
      "x-annotation-package": "ShippingMethod"
    },
    "ShippingMethodUpdateAction": {
      "title": "ShippingMethodUpdateAction",
      "discriminator": "action",
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        }
      },
      "required": [
        "action"
      ],
      "x-annotation-package": "ShippingMethod"
    },
    "ShippingRate": {
      "title": "ShippingRate",
      "type": "object",
      "properties": {
        "price": {
          "$ref": "#/definitions/TypedMoney"
        },
        "freeAbove": {
          "description": "The shipping is free if the order total (the sum of line item prices) exceeds the `freeAbove` value.\nNote: `freeAbove` applies before any Cart or Product discounts, and can cause discounts to apply in invalid scenarios.\nUse a Cart Discount to set the shipping price to 0 to avoid providing free shipping in invalid discount scenarios.",
          "$ref": "#/definitions/TypedMoney"
        },
        "isMatching": {
          "description": "Only appears in response to requests for shipping methods by cart or location to mark this shipping rate as one that matches the cart or location.",
          "type": "boolean"
        },
        "tiers": {
          "description": "A list of shipping rate price tiers.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ShippingRatePriceTier"
          }
        }
      },
      "required": [
        "price",
        "tiers"
      ],
      "x-annotation-package": "ShippingMethod",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-shippingMethods.html#shippingrate"
    },
    "ShippingRateDraft": {
      "title": "ShippingRateDraft",
      "type": "object",
      "properties": {
        "price": {
          "$ref": "#/definitions/Money"
        },
        "freeAbove": {
          "description": "The shipping is free if the order total (the sum of line item prices) exceeds the freeAbove value.\nNote: `freeAbove` applies before any Cart or Product discounts, and can cause discounts to apply in invalid scenarios.\nUse a Cart Discount to set the shipping price to 0 to avoid providing free shipping in invalid discount scenarios.",
          "$ref": "#/definitions/Money"
        },
        "tiers": {
          "description": "A list of shipping rate price tiers.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ShippingRatePriceTier"
          }
        }
      },
      "required": [
        "price"
      ],
      "x-annotation-package": "ShippingMethod",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-shippingMethods.html#shippingratedraft"
    },
    "ShippingRatePriceTier": {
      "title": "ShippingRatePriceTier",
      "discriminator": "type",
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/ShippingRateTierType"
        }
      },
      "required": [
        "type"
      ],
      "x-annotation-package": "ShippingMethod",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-shippingMethods.html#shippingrate"
    },
    "ShippingRateTierType": {
      "title": "ShippingRateTierType",
      "enum": [
        "CartValue",
        "CartClassification",
        "CartScore"
      ],
      "type": "string",
      "x-annotation-package": "ShippingMethod",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-shippingMethods.html#shippingratepricetier"
    },
    "ZoneRate": {
      "title": "ZoneRate",
      "type": "object",
      "properties": {
        "zone": {
          "$ref": "#/definitions/ZoneReference"
        },
        "shippingRates": {
          "description": "The array does not contain two shipping rates with the same currency.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ShippingRate"
          }
        }
      },
      "required": [
        "zone",
        "shippingRates"
      ],
      "x-annotation-package": "ShippingMethod",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-shippingMethods.html#zonerate"
    },
    "ZoneRateDraft": {
      "title": "ZoneRateDraft",
      "type": "object",
      "properties": {
        "zone": {
          "$ref": "#/definitions/ZoneResourceIdentifier"
        },
        "shippingRates": {
          "description": "The array must not contain two shipping rates with the same currency.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ShippingRateDraft"
          }
        }
      },
      "required": [
        "zone",
        "shippingRates"
      ],
      "x-annotation-package": "ShippingMethod",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-shippingMethods.html#zoneratedraft"
    },
    "ShippingMethodAddShippingRateAction": {
      "title": "ShippingMethodAddShippingRateAction",
      "allOf": [
        {
          "$ref": "#/definitions/ShippingMethodUpdateAction"
        },
        {
          "properties": {
            "zone": {
              "$ref": "#/definitions/ZoneResourceIdentifier"
            },
            "shippingRate": {
              "$ref": "#/definitions/ShippingRateDraft"
            }
          },
          "required": [
            "zone",
            "shippingRate"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "ShippingMethod",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-shippingMethods.html#add-shippingrate",
      "x-annotation-postman-example": null
    },
    "ShippingMethodAddZoneAction": {
      "title": "ShippingMethodAddZoneAction",
      "allOf": [
        {
          "$ref": "#/definitions/ShippingMethodUpdateAction"
        },
        {
          "properties": {
            "zone": {
              "$ref": "#/definitions/ZoneResourceIdentifier"
            }
          },
          "required": [
            "zone"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "ShippingMethod",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-shippingMethods.html#add-zone",
      "x-annotation-postman-example": null
    },
    "ShippingMethodChangeIsDefaultAction": {
      "title": "ShippingMethodChangeIsDefaultAction",
      "allOf": [
        {
          "$ref": "#/definitions/ShippingMethodUpdateAction"
        },
        {
          "properties": {
            "isDefault": {
              "description": "Only one ShippingMethod in a project can be default.",
              "type": "boolean"
            }
          },
          "required": [
            "isDefault"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "ShippingMethod",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-shippingMethods.html#change-isdefault",
      "x-annotation-postman-example": null
    },
    "ShippingMethodChangeNameAction": {
      "title": "ShippingMethodChangeNameAction",
      "allOf": [
        {
          "$ref": "#/definitions/ShippingMethodUpdateAction"
        },
        {
          "properties": {
            "name": {
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "ShippingMethod",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-shippingMethods.html#change-name",
      "x-annotation-postman-example": null
    },
    "ShippingMethodChangeTaxCategoryAction": {
      "title": "ShippingMethodChangeTaxCategoryAction",
      "allOf": [
        {
          "$ref": "#/definitions/ShippingMethodUpdateAction"
        },
        {
          "properties": {
            "taxCategory": {
              "$ref": "#/definitions/TaxCategoryResourceIdentifier"
            }
          },
          "required": [
            "taxCategory"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "ShippingMethod",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-shippingMethods.html#change-taxcategory",
      "x-annotation-postman-example": null
    },
    "ShippingMethodRemoveShippingRateAction": {
      "title": "ShippingMethodRemoveShippingRateAction",
      "allOf": [
        {
          "$ref": "#/definitions/ShippingMethodUpdateAction"
        },
        {
          "properties": {
            "zone": {
              "$ref": "#/definitions/ZoneResourceIdentifier"
            },
            "shippingRate": {
              "$ref": "#/definitions/ShippingRateDraft"
            }
          },
          "required": [
            "zone",
            "shippingRate"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "ShippingMethod",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-shippingMethods.html#remove-shippingrate",
      "x-annotation-postman-example": null
    },
    "ShippingMethodRemoveZoneAction": {
      "title": "ShippingMethodRemoveZoneAction",
      "allOf": [
        {
          "$ref": "#/definitions/ShippingMethodUpdateAction"
        },
        {
          "properties": {
            "zone": {
              "$ref": "#/definitions/ZoneResourceIdentifier"
            }
          },
          "required": [
            "zone"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "ShippingMethod",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-shippingMethods.html#remove-zone",
      "x-annotation-postman-example": null
    },
    "ShippingMethodSetDescriptionAction": {
      "title": "ShippingMethodSetDescriptionAction",
      "allOf": [
        {
          "$ref": "#/definitions/ShippingMethodUpdateAction"
        },
        {
          "properties": {
            "description": {
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "ShippingMethod",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-shippingMethods.html#set-description",
      "x-annotation-postman-example": null
    },
    "ShippingMethodSetKeyAction": {
      "title": "ShippingMethodSetKeyAction",
      "allOf": [
        {
          "$ref": "#/definitions/ShippingMethodUpdateAction"
        },
        {
          "properties": {
            "key": {
              "description": "If `key` is absent or `null`, it is removed if it exists.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "ShippingMethod",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-shippingMethods.html#set-key",
      "x-annotation-postman-example": null
    },
    "ShippingMethodSetLocalizedDescriptionAction": {
      "title": "ShippingMethodSetLocalizedDescriptionAction",
      "allOf": [
        {
          "$ref": "#/definitions/ShippingMethodUpdateAction"
        },
        {
          "properties": {
            "localizedDescription": {
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "ShippingMethod",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-shippingMethods.html#set-localized-description",
      "x-annotation-postman-example": null
    },
    "ShippingMethodSetPredicateAction": {
      "title": "ShippingMethodSetPredicateAction",
      "allOf": [
        {
          "$ref": "#/definitions/ShippingMethodUpdateAction"
        },
        {
          "properties": {
            "predicate": {
              "description": "A valid Cart predicate.\nIf `predicate` is absent or `null`, it is removed if it exists.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "ShippingMethod",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-shippingMethods.html#set-predicate",
      "x-annotation-postman-example": null
    },
    "ShoppingList": {
      "title": "ShoppingList",
      "allOf": [
        {
          "$ref": "#/definitions/BaseResource"
        },
        {
          "properties": {
            "id": {
              "description": "The unique ID of the shopping list.",
              "type": "string",
              "x-annotation-identifier": true
            },
            "version": {
              "format": "int64",
              "description": "The current version of the shopping list.",
              "type": "number"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            },
            "lastModifiedAt": {
              "type": "string",
              "format": "date-time"
            },
            "lastModifiedBy": {
              "description": "Present on resources updated after 1/02/2019 except for events not tracked.",
              "$ref": "#/definitions/LastModifiedBy"
            },
            "createdBy": {
              "description": "Present on resources created after 1/02/2019 except for events not tracked.",
              "$ref": "#/definitions/CreatedBy"
            },
            "custom": {
              "$ref": "#/definitions/CustomFields"
            },
            "customer": {
              "$ref": "#/definitions/CustomerReference"
            },
            "deleteDaysAfterLastModification": {
              "format": "int64",
              "description": "The shopping list will be deleted automatically if it hasn't been modified for the specified amount of days.",
              "type": "number"
            },
            "description": {
              "$ref": "#/definitions/LocalizedString"
            },
            "key": {
              "description": "User-specific unique identifier for the shopping list.",
              "type": "string"
            },
            "lineItems": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ShoppingListLineItem"
              }
            },
            "name": {
              "$ref": "#/definitions/LocalizedString"
            },
            "slug": {
              "description": "Human-readable identifiers usually used as deep-link URL to the related shopping list.\nEach slug is unique across a project, but a shopping list can have the same slug for different languages.\nThe slug must match the pattern [a-zA-Z0-9_-]{2,256}.",
              "$ref": "#/definitions/LocalizedString"
            },
            "textLineItems": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TextLineItem"
              }
            },
            "anonymousId": {
              "description": "Identifies shopping lists belonging to an anonymous session (the customer has not signed up/in yet).",
              "type": "string"
            }
          },
          "required": [
            "id",
            "version",
            "createdAt",
            "lastModifiedAt",
            "name"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "ShoppingList",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-shoppingLists.html#shoppingList",
      "x-annotation-updateType": "ShoppingListUpdate"
    },
    "ShoppingListDraft": {
      "title": "ShoppingListDraft",
      "type": "object",
      "properties": {
        "custom": {
          "description": "The custom fields.",
          "$ref": "#/definitions/CustomFieldsDraft"
        },
        "customer": {
          "$ref": "#/definitions/CustomerResourceIdentifier"
        },
        "deleteDaysAfterLastModification": {
          "format": "int64",
          "description": "The shopping list will be deleted automatically if it hasn't been modified for the specified amount of days.",
          "type": "number"
        },
        "description": {
          "$ref": "#/definitions/LocalizedString"
        },
        "key": {
          "description": "User-specific unique identifier for the shopping list.",
          "type": "string"
        },
        "lineItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ShoppingListLineItemDraft"
          }
        },
        "name": {
          "$ref": "#/definitions/LocalizedString"
        },
        "slug": {
          "description": "Human-readable identifiers usually used as deep-link URL to the related shopping list.\nEach slug is unique across a project, but a shopping list can have the same slug for different languages.\nThe slug must match the pattern [a-zA-Z0-9_-]{2,256}.",
          "$ref": "#/definitions/LocalizedString"
        },
        "textLineItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TextLineItemDraft"
          }
        },
        "anonymousId": {
          "description": "Identifies shopping lists belonging to an anonymous session (the customer has not signed up/in yet).",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "x-annotation-package": "ShoppingList",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-shoppingLists.html#shoppingListDraft"
    },
    "ShoppingListLineItem": {
      "title": "ShoppingListLineItem",
      "type": "object",
      "properties": {
        "addedAt": {
          "type": "string",
          "format": "date-time"
        },
        "custom": {
          "$ref": "#/definitions/CustomFields"
        },
        "deactivatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "$ref": "#/definitions/LocalizedString"
        },
        "productId": {
          "type": "string"
        },
        "productSlug": {
          "$ref": "#/definitions/LocalizedString"
        },
        "productType": {
          "$ref": "#/definitions/ProductTypeReference"
        },
        "quantity": {
          "type": "number"
        },
        "variant": {
          "$ref": "#/definitions/ProductVariant"
        },
        "variantId": {
          "format": "int64",
          "type": "number"
        }
      },
      "required": [
        "addedAt",
        "id",
        "name",
        "productId",
        "productType",
        "quantity"
      ],
      "x-annotation-package": "ShoppingList"
    },
    "ShoppingListLineItemDraft": {
      "title": "ShoppingListLineItemDraft",
      "type": "object",
      "properties": {
        "addedAt": {
          "type": "string",
          "format": "date-time"
        },
        "custom": {
          "$ref": "#/definitions/CustomFieldsDraft"
        },
        "sku": {
          "type": "string"
        },
        "productId": {
          "type": "string"
        },
        "quantity": {
          "type": "number"
        },
        "variantId": {
          "format": "int64",
          "type": "number"
        }
      },
      "x-annotation-package": "ShoppingList"
    },
    "ShoppingListPagedQueryResponse": {
      "title": "ShoppingListPagedQueryResponse",
      "type": "object",
      "properties": {
        "limit": {
          "format": "int64",
          "type": "number"
        },
        "count": {
          "format": "int64",
          "type": "number"
        },
        "total": {
          "format": "int64",
          "type": "number"
        },
        "offset": {
          "format": "int64",
          "type": "number"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ShoppingList"
          }
        }
      },
      "required": [
        "limit",
        "count",
        "offset",
        "results"
      ],
      "x-annotation-package": "ShoppingList"
    },
    "ShoppingListReference": {
      "title": "ShoppingListReference",
      "allOf": [
        {
          "$ref": "#/definitions/Reference"
        },
        {
          "properties": {
            "obj": {
              "$ref": "#/definitions/ShoppingList"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "ShoppingList",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-shopping-lists.html#shopping-list"
    },
    "ShoppingListResourceIdentifier": {
      "title": "ShoppingListResourceIdentifier",
      "$ref": "#/definitions/ResourceIdentifier",
      "x-annotation-package": "ShoppingList",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-shopping-lists.html#shopping-list"
    },
    "ShoppingListUpdate": {
      "title": "ShoppingListUpdate",
      "type": "object",
      "properties": {
        "version": {
          "format": "int64",
          "type": "number"
        },
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ShoppingListUpdateAction"
          }
        }
      },
      "required": [
        "version",
        "actions"
      ],
      "x-annotation-package": "ShoppingList"
    },
    "ShoppingListUpdateAction": {
      "title": "ShoppingListUpdateAction",
      "discriminator": "action",
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        }
      },
      "required": [
        "action"
      ],
      "x-annotation-package": "ShoppingList"
    },
    "TextLineItem": {
      "title": "TextLineItem",
      "type": "object",
      "properties": {
        "addedAt": {
          "description": "When the text line item was added to the shopping list.",
          "type": "string",
          "format": "date-time"
        },
        "custom": {
          "$ref": "#/definitions/CustomFields"
        },
        "description": {
          "$ref": "#/definitions/LocalizedString"
        },
        "id": {
          "description": "The unique ID of this TextLineItem.",
          "type": "string"
        },
        "name": {
          "$ref": "#/definitions/LocalizedString"
        },
        "quantity": {
          "type": "number"
        }
      },
      "required": [
        "addedAt",
        "id",
        "name",
        "quantity"
      ],
      "x-annotation-package": "ShoppingList"
    },
    "TextLineItemDraft": {
      "title": "TextLineItemDraft",
      "type": "object",
      "properties": {
        "addedAt": {
          "description": "Defaults to the current date and time.",
          "type": "string",
          "format": "date-time"
        },
        "custom": {
          "description": "The custom fields.",
          "$ref": "#/definitions/CustomFieldsDraft"
        },
        "description": {
          "$ref": "#/definitions/LocalizedString"
        },
        "name": {
          "$ref": "#/definitions/LocalizedString"
        },
        "quantity": {
          "description": "Defaults to `1`.",
          "type": "number"
        }
      },
      "required": [
        "name"
      ],
      "x-annotation-package": "ShoppingList"
    },
    "ShoppingListAddLineItemAction": {
      "title": "ShoppingListAddLineItemAction",
      "allOf": [
        {
          "$ref": "#/definitions/ShoppingListUpdateAction"
        },
        {
          "properties": {
            "sku": {
              "type": "string"
            },
            "productId": {
              "type": "string"
            },
            "variantId": {
              "format": "int64",
              "type": "number"
            },
            "quantity": {
              "format": "int64",
              "type": "number"
            },
            "addedAt": {
              "type": "string",
              "format": "date-time"
            },
            "custom": {
              "$ref": "#/definitions/CustomFieldsDraft"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "ShoppingList",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-shoppingLists.html#add-lineitem",
      "x-annotation-postman-example": null
    },
    "ShoppingListAddTextLineItemAction": {
      "title": "ShoppingListAddTextLineItemAction",
      "allOf": [
        {
          "$ref": "#/definitions/ShoppingListUpdateAction"
        },
        {
          "properties": {
            "name": {
              "$ref": "#/definitions/LocalizedString"
            },
            "description": {
              "$ref": "#/definitions/LocalizedString"
            },
            "quantity": {
              "format": "int64",
              "type": "number"
            },
            "addedAt": {
              "type": "string",
              "format": "date-time"
            },
            "custom": {
              "$ref": "#/definitions/CustomFieldsDraft"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "ShoppingList",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-shoppingLists.html#add-textlineitem",
      "x-annotation-postman-example": null
    },
    "ShoppingListChangeLineItemQuantityAction": {
      "title": "ShoppingListChangeLineItemQuantityAction",
      "allOf": [
        {
          "$ref": "#/definitions/ShoppingListUpdateAction"
        },
        {
          "properties": {
            "lineItemId": {
              "type": "string"
            },
            "quantity": {
              "format": "int64",
              "type": "number"
            }
          },
          "required": [
            "lineItemId",
            "quantity"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "ShoppingList",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-shoppingLists.html#change-lineitem-quantity",
      "x-annotation-postman-example": null
    },
    "ShoppingListChangeLineItemsOrderAction": {
      "title": "ShoppingListChangeLineItemsOrderAction",
      "allOf": [
        {
          "$ref": "#/definitions/ShoppingListUpdateAction"
        },
        {
          "properties": {
            "lineItemOrder": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "required": [
            "lineItemOrder"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "ShoppingList",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-shoppingLists.html#change-lineitems-order",
      "x-annotation-postman-example": null
    },
    "ShoppingListChangeNameAction": {
      "title": "ShoppingListChangeNameAction",
      "allOf": [
        {
          "$ref": "#/definitions/ShoppingListUpdateAction"
        },
        {
          "properties": {
            "name": {
              "$ref": "#/definitions/LocalizedString"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "ShoppingList",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-shoppingLists.html#change-name",
      "x-annotation-postman-example": null
    },
    "ShoppingListChangeTextLineItemNameAction": {
      "title": "ShoppingListChangeTextLineItemNameAction",
      "allOf": [
        {
          "$ref": "#/definitions/ShoppingListUpdateAction"
        },
        {
          "properties": {
            "textLineItemId": {
              "type": "string"
            },
            "name": {
              "$ref": "#/definitions/LocalizedString"
            }
          },
          "required": [
            "textLineItemId",
            "name"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "ShoppingList",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-shoppingLists.html#change-textlineitem-name",
      "x-annotation-postman-example": null
    },
    "ShoppingListChangeTextLineItemQuantityAction": {
      "title": "ShoppingListChangeTextLineItemQuantityAction",
      "allOf": [
        {
          "$ref": "#/definitions/ShoppingListUpdateAction"
        },
        {
          "properties": {
            "textLineItemId": {
              "type": "string"
            },
            "quantity": {
              "format": "int64",
              "type": "number"
            }
          },
          "required": [
            "textLineItemId",
            "quantity"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "ShoppingList",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-shoppingLists.html#change-textlineitem-quantity",
      "x-annotation-postman-example": null
    },
    "ShoppingListChangeTextLineItemsOrderAction": {
      "title": "ShoppingListChangeTextLineItemsOrderAction",
      "allOf": [
        {
          "$ref": "#/definitions/ShoppingListUpdateAction"
        },
        {
          "properties": {
            "textLineItemOrder": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "required": [
            "textLineItemOrder"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "ShoppingList",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-shoppingLists.html#change-textlineitems-order",
      "x-annotation-postman-example": null
    },
    "ShoppingListRemoveLineItemAction": {
      "title": "ShoppingListRemoveLineItemAction",
      "allOf": [
        {
          "$ref": "#/definitions/ShoppingListUpdateAction"
        },
        {
          "properties": {
            "lineItemId": {
              "type": "string"
            },
            "quantity": {
              "format": "int64",
              "type": "number"
            }
          },
          "required": [
            "lineItemId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "ShoppingList",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-shoppingLists.html#remove-lineitem",
      "x-annotation-postman-example": null
    },
    "ShoppingListRemoveTextLineItemAction": {
      "title": "ShoppingListRemoveTextLineItemAction",
      "allOf": [
        {
          "$ref": "#/definitions/ShoppingListUpdateAction"
        },
        {
          "properties": {
            "textLineItemId": {
              "type": "string"
            },
            "quantity": {
              "format": "int64",
              "type": "number"
            }
          },
          "required": [
            "textLineItemId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "ShoppingList",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-shoppingLists.html#remove-textlineitem",
      "x-annotation-postman-example": null
    },
    "ShoppingListSetAnonymousIdAction": {
      "title": "ShoppingListSetAnonymousIdAction",
      "allOf": [
        {
          "$ref": "#/definitions/ShoppingListUpdateAction"
        },
        {
          "properties": {
            "anonymousId": {
              "description": "Anonymous ID of the anonymous customer that this shopping list belongs to.\nIf this field is not set any existing `anonymousId` is removed.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "ShoppingList",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-shoppingLists.html#set-anonymousid",
      "x-annotation-postman-example": null
    },
    "ShoppingListSetCustomFieldAction": {
      "title": "ShoppingListSetCustomFieldAction",
      "allOf": [
        {
          "$ref": "#/definitions/ShoppingListUpdateAction"
        },
        {
          "properties": {
            "name": {
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "ShoppingList",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-shoppingLists.html#set-customfield",
      "x-annotation-postman-example": null
    },
    "ShoppingListSetCustomTypeAction": {
      "title": "ShoppingListSetCustomTypeAction",
      "allOf": [
        {
          "$ref": "#/definitions/ShoppingListUpdateAction"
        },
        {
          "properties": {
            "type": {
              "description": "If set, the custom type is set to this new value.\nIf absent, the custom type and any existing custom fields are removed.",
              "$ref": "#/definitions/TypeResourceIdentifier"
            },
            "fields": {
              "description": "If set, the custom fields are set to this new value.",
              "$ref": "#/definitions/FieldContainer"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "ShoppingList",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-shoppingLists.html#set-custom-type",
      "x-annotation-postman-example": null
    },
    "ShoppingListSetCustomerAction": {
      "title": "ShoppingListSetCustomerAction",
      "allOf": [
        {
          "$ref": "#/definitions/ShoppingListUpdateAction"
        },
        {
          "properties": {
            "customer": {
              "$ref": "#/definitions/CustomerResourceIdentifier"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "ShoppingList",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-shoppingLists.html#set-customer",
      "x-annotation-postman-example": null
    },
    "ShoppingListSetDeleteDaysAfterLastModificationAction": {
      "title": "ShoppingListSetDeleteDaysAfterLastModificationAction",
      "allOf": [
        {
          "$ref": "#/definitions/ShoppingListUpdateAction"
        },
        {
          "properties": {
            "deleteDaysAfterLastModification": {
              "format": "int64",
              "type": "number"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "ShoppingList",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-shoppingLists.html#set-deletedaysafterlastmodification",
      "x-annotation-postman-example": null
    },
    "ShoppingListSetDescriptionAction": {
      "title": "ShoppingListSetDescriptionAction",
      "allOf": [
        {
          "$ref": "#/definitions/ShoppingListUpdateAction"
        },
        {
          "properties": {
            "description": {
              "$ref": "#/definitions/LocalizedString"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "ShoppingList",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-shoppingLists.html#set-description",
      "x-annotation-postman-example": null
    },
    "ShoppingListSetKeyAction": {
      "title": "ShoppingListSetKeyAction",
      "allOf": [
        {
          "$ref": "#/definitions/ShoppingListUpdateAction"
        },
        {
          "properties": {
            "key": {
              "description": "User-specific unique identifier for the shopping list.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "ShoppingList",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-shoppingLists.html#set-key",
      "x-annotation-postman-example": null
    },
    "ShoppingListSetLineItemCustomFieldAction": {
      "title": "ShoppingListSetLineItemCustomFieldAction",
      "allOf": [
        {
          "$ref": "#/definitions/ShoppingListUpdateAction"
        },
        {
          "properties": {
            "lineItemId": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          },
          "required": [
            "lineItemId",
            "name"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "ShoppingList",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-shoppingLists.html#set-lineitem-customfield",
      "x-annotation-postman-example": null
    },
    "ShoppingListSetLineItemCustomTypeAction": {
      "title": "ShoppingListSetLineItemCustomTypeAction",
      "allOf": [
        {
          "$ref": "#/definitions/ShoppingListUpdateAction"
        },
        {
          "properties": {
            "lineItemId": {
              "type": "string"
            },
            "type": {
              "$ref": "#/definitions/TypeResourceIdentifier"
            },
            "fields": {
              "$ref": "#/definitions/FieldContainer"
            }
          },
          "required": [
            "lineItemId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "ShoppingList",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-shoppingLists.html#set-lineitem-custom-type",
      "x-annotation-postman-example": null
    },
    "ShoppingListSetSlugAction": {
      "title": "ShoppingListSetSlugAction",
      "allOf": [
        {
          "$ref": "#/definitions/ShoppingListUpdateAction"
        },
        {
          "properties": {
            "slug": {
              "$ref": "#/definitions/LocalizedString"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "ShoppingList",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-shoppingLists.html#set-slug",
      "x-annotation-postman-example": null
    },
    "ShoppingListSetTextLineItemCustomFieldAction": {
      "title": "ShoppingListSetTextLineItemCustomFieldAction",
      "allOf": [
        {
          "$ref": "#/definitions/ShoppingListUpdateAction"
        },
        {
          "properties": {
            "textLineItemId": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          },
          "required": [
            "textLineItemId",
            "name"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "ShoppingList",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-shoppingLists.html#set-textlineitem-customfield",
      "x-annotation-postman-example": null
    },
    "ShoppingListSetTextLineItemCustomTypeAction": {
      "title": "ShoppingListSetTextLineItemCustomTypeAction",
      "allOf": [
        {
          "$ref": "#/definitions/ShoppingListUpdateAction"
        },
        {
          "properties": {
            "textLineItemId": {
              "type": "string"
            },
            "type": {
              "$ref": "#/definitions/TypeResourceIdentifier"
            },
            "fields": {
              "$ref": "#/definitions/FieldContainer"
            }
          },
          "required": [
            "textLineItemId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "ShoppingList",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-shoppingLists.html#set-textlineitem-custom-type",
      "x-annotation-postman-example": null
    },
    "ShoppingListSetTextLineItemDescriptionAction": {
      "title": "ShoppingListSetTextLineItemDescriptionAction",
      "allOf": [
        {
          "$ref": "#/definitions/ShoppingListUpdateAction"
        },
        {
          "properties": {
            "textLineItemId": {
              "type": "string"
            },
            "description": {
              "$ref": "#/definitions/LocalizedString"
            }
          },
          "required": [
            "textLineItemId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "ShoppingList",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-shoppingLists.html#set-textlineitem-description",
      "x-annotation-postman-example": null
    },
    "State": {
      "title": "State",
      "allOf": [
        {
          "$ref": "#/definitions/BaseResource"
        },
        {
          "properties": {
            "id": {
              "type": "string",
              "x-annotation-identifier": true
            },
            "version": {
              "format": "int64",
              "type": "number"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            },
            "lastModifiedAt": {
              "type": "string",
              "format": "date-time"
            },
            "lastModifiedBy": {
              "description": "Present on resources updated after 1/02/2019 except for events not tracked.",
              "$ref": "#/definitions/LastModifiedBy"
            },
            "createdBy": {
              "description": "Present on resources created after 1/02/2019 except for events not tracked.",
              "$ref": "#/definitions/CreatedBy"
            },
            "key": {
              "description": "A unique identifier for the state.",
              "type": "string"
            },
            "type": {
              "$ref": "#/definitions/StateTypeEnum"
            },
            "name": {
              "description": "A human-readable name of the state.",
              "$ref": "#/definitions/LocalizedString"
            },
            "description": {
              "description": "A human-readable description of the state.",
              "$ref": "#/definitions/LocalizedString"
            },
            "initial": {
              "description": "A state can be declared as an initial state for any state machine.\nWhen a workflow starts, this first state must be an `initial` state.",
              "type": "boolean"
            },
            "builtIn": {
              "description": "Builtin states are integral parts of the project that cannot be deleted nor the key can be changed.",
              "type": "boolean"
            },
            "roles": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/StateRoleEnum"
              }
            },
            "transitions": {
              "description": "Transitions are a way to describe possible transformations of the current state to other states of the same `type` (e.g.: _Initial_ -> _Shipped_).\nWhen performing a `transitionState` update action and `transitions` is set, the currently referenced state must have a transition to the new state.\nIf `transitions` is an empty list, it means the current state is a final state and no further transitions are allowed.\nIf `transitions` is not set, the validation is turned off.\nWhen performing a `transitionState` update action, any other state of the same `type` can be transitioned to.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/StateReference"
              }
            }
          },
          "required": [
            "id",
            "version",
            "createdAt",
            "lastModifiedAt",
            "key",
            "type",
            "initial",
            "builtIn"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "State",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-states.html#state",
      "x-annotation-updateType": "StateUpdate"
    },
    "StateDraft": {
      "title": "StateDraft",
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/StateTypeEnum"
        },
        "name": {
          "$ref": "#/definitions/LocalizedString"
        },
        "description": {
          "$ref": "#/definitions/LocalizedString"
        },
        "initial": {
          "type": "boolean"
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StateRoleEnum"
          }
        },
        "transitions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StateResourceIdentifier"
          }
        }
      },
      "required": [
        "key",
        "type"
      ],
      "x-annotation-package": "State",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-states.html#statedraft"
    },
    "StatePagedQueryResponse": {
      "title": "StatePagedQueryResponse",
      "type": "object",
      "properties": {
        "limit": {
          "format": "int64",
          "type": "number"
        },
        "count": {
          "format": "int64",
          "type": "number"
        },
        "total": {
          "format": "int64",
          "type": "number"
        },
        "offset": {
          "format": "int64",
          "type": "number"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/State"
          }
        }
      },
      "required": [
        "limit",
        "count",
        "offset",
        "results"
      ],
      "x-annotation-package": "State"
    },
    "StateReference": {
      "title": "StateReference",
      "allOf": [
        {
          "$ref": "#/definitions/Reference"
        },
        {
          "properties": {
            "obj": {
              "$ref": "#/definitions/State"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "State",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-states.html#state"
    },
    "StateResourceIdentifier": {
      "title": "StateResourceIdentifier",
      "$ref": "#/definitions/ResourceIdentifier",
      "x-annotation-package": "State",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-states.html#state"
    },
    "StateRoleEnum": {
      "enum": [
        "ReviewIncludedInStatistics",
        "Return"
      ],
      "type": "string",
      "x-annotation-package": "State",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-states.html#staterole"
    },
    "StateTypeEnum": {
      "enum": [
        "OrderState",
        "LineItemState",
        "ProductState",
        "ReviewState",
        "PaymentState"
      ],
      "type": "string",
      "x-annotation-package": "State"
    },
    "StateUpdate": {
      "title": "StateUpdate",
      "type": "object",
      "properties": {
        "version": {
          "format": "int64",
          "type": "number"
        },
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StateUpdateAction"
          }
        }
      },
      "required": [
        "version",
        "actions"
      ],
      "x-annotation-package": "State"
    },
    "StateUpdateAction": {
      "title": "StateUpdateAction",
      "discriminator": "action",
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        }
      },
      "required": [
        "action"
      ],
      "x-annotation-package": "State"
    },
    "StateAddRolesAction": {
      "title": "StateAddRolesAction",
      "allOf": [
        {
          "$ref": "#/definitions/StateUpdateAction"
        },
        {
          "properties": {
            "roles": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/StateRoleEnum"
              }
            }
          },
          "required": [
            "roles"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "State",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-states.html#add-state-roles",
      "x-annotation-postman-example": null
    },
    "StateChangeInitialAction": {
      "title": "StateChangeInitialAction",
      "allOf": [
        {
          "$ref": "#/definitions/StateUpdateAction"
        },
        {
          "properties": {
            "initial": {
              "type": "boolean"
            }
          },
          "required": [
            "initial"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "State",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-states.html#change-initial-state",
      "x-annotation-postman-example": null
    },
    "StateChangeKeyAction": {
      "title": "StateChangeKeyAction",
      "allOf": [
        {
          "$ref": "#/definitions/StateUpdateAction"
        },
        {
          "properties": {
            "key": {
              "type": "string"
            }
          },
          "required": [
            "key"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "State",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-states.html#change-state-key",
      "x-annotation-postman-example": null
    },
    "StateChangeTypeAction": {
      "title": "StateChangeTypeAction",
      "allOf": [
        {
          "$ref": "#/definitions/StateUpdateAction"
        },
        {
          "properties": {
            "type": {
              "$ref": "#/definitions/StateTypeEnum"
            }
          },
          "required": [
            "type"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "State",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-states.html#change-state-type",
      "x-annotation-postman-example": null
    },
    "StateRemoveRolesAction": {
      "title": "StateRemoveRolesAction",
      "allOf": [
        {
          "$ref": "#/definitions/StateUpdateAction"
        },
        {
          "properties": {
            "roles": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/StateRoleEnum"
              }
            }
          },
          "required": [
            "roles"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "State",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-states.html#remove-state-roles",
      "x-annotation-postman-example": null
    },
    "StateSetDescriptionAction": {
      "title": "StateSetDescriptionAction",
      "allOf": [
        {
          "$ref": "#/definitions/StateUpdateAction"
        },
        {
          "properties": {
            "description": {
              "$ref": "#/definitions/LocalizedString"
            }
          },
          "required": [
            "description"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "State",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-states.html#set-state-description",
      "x-annotation-postman-example": null
    },
    "StateSetNameAction": {
      "title": "StateSetNameAction",
      "allOf": [
        {
          "$ref": "#/definitions/StateUpdateAction"
        },
        {
          "properties": {
            "name": {
              "$ref": "#/definitions/LocalizedString"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "State",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-states.html#set-state-name",
      "x-annotation-postman-example": null
    },
    "StateSetRolesAction": {
      "title": "StateSetRolesAction",
      "allOf": [
        {
          "$ref": "#/definitions/StateUpdateAction"
        },
        {
          "properties": {
            "roles": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/StateRoleEnum"
              }
            }
          },
          "required": [
            "roles"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "State",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-states.html#set-state-roles",
      "x-annotation-postman-example": null
    },
    "StateSetTransitionsAction": {
      "title": "StateSetTransitionsAction",
      "allOf": [
        {
          "$ref": "#/definitions/StateUpdateAction"
        },
        {
          "properties": {
            "transitions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/StateResourceIdentifier"
              }
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "State",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-states.html#set-transitions",
      "x-annotation-postman-example": null
    },
    "Store": {
      "title": "Store",
      "allOf": [
        {
          "$ref": "#/definitions/BaseResource"
        },
        {
          "properties": {
            "id": {
              "type": "string",
              "x-annotation-identifier": true
            },
            "version": {
              "format": "int64",
              "type": "number"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            },
            "lastModifiedAt": {
              "type": "string",
              "format": "date-time"
            },
            "lastModifiedBy": {
              "$ref": "#/definitions/LastModifiedBy"
            },
            "createdBy": {
              "$ref": "#/definitions/CreatedBy"
            },
            "key": {
              "description": "User-specific unique identifier for the store.\nThe `key` is mandatory and immutable.\nIt is used to reference the store.",
              "type": "string"
            },
            "name": {
              "description": "The name of the store",
              "$ref": "#/definitions/LocalizedString"
            },
            "languages": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "distributionChannels": {
              "description": "Array of References to a Channel with `ProductDistribution` role",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ChannelReference"
              }
            }
          },
          "required": [
            "id",
            "version",
            "createdAt",
            "lastModifiedAt",
            "key",
            "distributionChannels"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Store",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-stores#stores",
      "x-annotation-updateType": "StoreUpdate"
    },
    "StoreDraft": {
      "title": "StoreDraft",
      "type": "object",
      "properties": {
        "key": {
          "description": "User-specific unique identifier for the store.\nThe `key` is mandatory and immutable.\nIt is used to reference the store.",
          "type": "string"
        },
        "name": {
          "description": "The name of the store",
          "$ref": "#/definitions/LocalizedString"
        },
        "languages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "distributionChannels": {
          "description": "Array of ResourceIdentifiers to a Channel with `ProductDistribution` role",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ChannelResourceIdentifier"
          }
        }
      },
      "required": [
        "key",
        "name"
      ],
      "x-annotation-package": "Store",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-stores#storedraft"
    },
    "StoreKeyReference": {
      "title": "StoreKeyReference",
      "$ref": "#/definitions/KeyReference",
      "x-annotation-package": "Store",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-stores#stores"
    },
    "StorePagedQueryResponse": {
      "title": "StorePagedQueryResponse",
      "type": "object",
      "properties": {
        "limit": {
          "format": "int64",
          "type": "number"
        },
        "count": {
          "format": "int64",
          "type": "number"
        },
        "total": {
          "format": "int64",
          "type": "number"
        },
        "offset": {
          "format": "int64",
          "type": "number"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Store"
          }
        }
      },
      "required": [
        "limit",
        "count",
        "offset",
        "results"
      ],
      "x-annotation-package": "Store"
    },
    "StoreReference": {
      "title": "StoreReference",
      "allOf": [
        {
          "$ref": "#/definitions/Reference"
        },
        {
          "properties": {
            "obj": {
              "$ref": "#/definitions/Store"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Store",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-stores#stores"
    },
    "StoreResourceIdentifier": {
      "title": "StoreResourceIdentifier",
      "$ref": "#/definitions/ResourceIdentifier",
      "x-annotation-package": "Store",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-stores#stores"
    },
    "StoreUpdate": {
      "title": "StoreUpdate",
      "type": "object",
      "properties": {
        "version": {
          "format": "int64",
          "type": "number"
        },
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StoreUpdateAction"
          }
        }
      },
      "required": [
        "version",
        "actions"
      ],
      "x-annotation-package": "Store"
    },
    "StoreUpdateAction": {
      "title": "StoreUpdateAction",
      "discriminator": "action",
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        }
      },
      "required": [
        "action"
      ],
      "x-annotation-package": "Store"
    },
    "StoreSetLanguagesAction": {
      "title": "StoreSetLanguagesAction",
      "allOf": [
        {
          "$ref": "#/definitions/StoreUpdateAction"
        },
        {
          "properties": {
            "languages": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Store",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-stores#set-languages",
      "x-annotation-postman-example": null
    },
    "StoreSetNameAction": {
      "title": "StoreSetNameAction",
      "allOf": [
        {
          "$ref": "#/definitions/StoreUpdateAction"
        },
        {
          "properties": {
            "name": {
              "description": "The updated name of the store",
              "$ref": "#/definitions/LocalizedString"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Store",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-stores#set-name",
      "x-annotation-postman-example": null
    },
    "StoresAddDistributionChannelsAction": {
      "title": "StoresAddDistributionChannelsAction",
      "allOf": [
        {
          "$ref": "#/definitions/StoreUpdateAction"
        },
        {
          "properties": {
            "distributionChannel": {
              "$ref": "#/definitions/ChannelResourceIdentifier"
            }
          },
          "required": [
            "distributionChannel"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Store",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-stores#add-distribution-channel",
      "x-annotation-postman-example": null
    },
    "StoresRemoveDistributionChannelsAction": {
      "title": "StoresRemoveDistributionChannelsAction",
      "allOf": [
        {
          "$ref": "#/definitions/StoreUpdateAction"
        },
        {
          "properties": {
            "distributionChannel": {
              "$ref": "#/definitions/ChannelResourceIdentifier"
            }
          },
          "required": [
            "distributionChannel"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Store",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-stores#remove-distribution-channel",
      "x-annotation-postman-example": null
    },
    "StoresSetDistributionChannelsAction": {
      "title": "StoresSetDistributionChannelsAction",
      "allOf": [
        {
          "$ref": "#/definitions/StoreUpdateAction"
        },
        {
          "properties": {
            "distributionChannels": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ChannelResourceIdentifier"
              }
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Store",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-stores#set-distribution-channels",
      "x-annotation-postman-example": null
    },
    "AzureEventGridDestination": {
      "title": "AzureEventGridDestination",
      "allOf": [
        {
          "$ref": "#/definitions/Destination"
        },
        {
          "properties": {
            "uri": {
              "type": "string"
            },
            "accessKey": {
              "type": "string"
            }
          },
          "required": [
            "uri",
            "accessKey"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Subscription"
    },
    "AzureServiceBusDestination": {
      "title": "AzureServiceBusDestination",
      "allOf": [
        {
          "$ref": "#/definitions/Destination"
        },
        {
          "properties": {
            "connectionString": {
              "type": "string"
            }
          },
          "required": [
            "connectionString"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Subscription"
    },
    "ChangeSubscription": {
      "title": "ChangeSubscription",
      "type": "object",
      "properties": {
        "resourceTypeId": {
          "type": "string"
        }
      },
      "required": [
        "resourceTypeId"
      ],
      "x-annotation-package": "Subscription"
    },
    "DeliveryCloudEventsFormat": {
      "title": "DeliveryCloudEventsFormat",
      "allOf": [
        {
          "$ref": "#/definitions/DeliveryFormat"
        },
        {
          "properties": {
            "cloudEventsVersion": {
              "enum": [
                "0.1"
              ],
              "type": "string"
            }
          },
          "required": [
            "cloudEventsVersion"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Subscription",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-subscriptions.html#cloudevents-format-preview"
    },
    "DeliveryFormat": {
      "title": "DeliveryFormat",
      "discriminator": "type",
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "x-annotation-package": "Subscription",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-subscriptions.html#format"
    },
    "DeliveryPlatformFormat": {
      "title": "DeliveryPlatformFormat",
      "$ref": "#/definitions/DeliveryFormat",
      "x-annotation-package": "Subscription",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-subscriptions.html#platform-format"
    },
    "Destination": {
      "title": "Destination",
      "discriminator": "type",
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "x-annotation-package": "Subscription"
    },
    "GoogleCloudPubSubDestination": {
      "title": "GoogleCloudPubSubDestination",
      "allOf": [
        {
          "$ref": "#/definitions/Destination"
        },
        {
          "properties": {
            "projectId": {
              "type": "string"
            },
            "topic": {
              "type": "string"
            }
          },
          "required": [
            "projectId",
            "topic"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Subscription"
    },
    "IronMqDestination": {
      "title": "IronMqDestination",
      "allOf": [
        {
          "$ref": "#/definitions/Destination"
        },
        {
          "properties": {
            "uri": {
              "type": "string"
            }
          },
          "required": [
            "uri"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Subscription"
    },
    "MessageDelivery": {
      "title": "MessageDelivery",
      "allOf": [
        {
          "$ref": "#/definitions/SubscriptionDelivery"
        },
        {
          "properties": {
            "id": {
              "type": "string"
            },
            "version": {
              "format": "int64",
              "type": "number"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            },
            "lastModifiedAt": {
              "type": "string",
              "format": "date-time"
            },
            "sequenceNumber": {
              "format": "int64",
              "type": "number"
            },
            "resourceVersion": {
              "format": "int64",
              "type": "number"
            },
            "payloadNotIncluded": {
              "$ref": "#/definitions/PayloadNotIncluded"
            }
          },
          "required": [
            "id",
            "version",
            "createdAt",
            "lastModifiedAt",
            "sequenceNumber",
            "resourceVersion",
            "payloadNotIncluded"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Subscription",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-subscriptions.html#message-subscription-payload"
    },
    "MessageSubscription": {
      "title": "MessageSubscription",
      "type": "object",
      "properties": {
        "resourceTypeId": {
          "type": "string"
        },
        "types": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "resourceTypeId"
      ],
      "x-annotation-package": "Subscription"
    },
    "PayloadNotIncluded": {
      "title": "PayloadNotIncluded",
      "type": "object",
      "properties": {
        "reason": {
          "type": "string"
        },
        "payloadType": {
          "type": "string"
        }
      },
      "required": [
        "reason",
        "payloadType"
      ],
      "x-annotation-package": "Subscription",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-subscriptions.html#payloadnotincluded"
    },
    "ResourceCreatedDelivery": {
      "title": "ResourceCreatedDelivery",
      "allOf": [
        {
          "$ref": "#/definitions/SubscriptionDelivery"
        },
        {
          "properties": {
            "version": {
              "format": "int64",
              "type": "number"
            },
            "modifiedAt": {
              "type": "string",
              "format": "date-time"
            }
          },
          "required": [
            "version",
            "modifiedAt"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Subscription",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-subscriptions.html#resourcecreated-payload"
    },
    "ResourceDeletedDelivery": {
      "title": "ResourceDeletedDelivery",
      "allOf": [
        {
          "$ref": "#/definitions/SubscriptionDelivery"
        },
        {
          "properties": {
            "version": {
              "format": "int64",
              "type": "number"
            },
            "modifiedAt": {
              "type": "string",
              "format": "date-time"
            }
          },
          "required": [
            "version",
            "modifiedAt"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Subscription",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-subscriptions.html#resourcedeleted-payload"
    },
    "ResourceUpdatedDelivery": {
      "title": "ResourceUpdatedDelivery",
      "allOf": [
        {
          "$ref": "#/definitions/SubscriptionDelivery"
        },
        {
          "properties": {
            "version": {
              "format": "int64",
              "type": "number"
            },
            "oldVersion": {
              "format": "int64",
              "type": "number"
            },
            "modifiedAt": {
              "type": "string",
              "format": "date-time"
            }
          },
          "required": [
            "version",
            "oldVersion",
            "modifiedAt"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Subscription",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-subscriptions.html#resourceupdated-payload"
    },
    "SnsDestination": {
      "title": "SnsDestination",
      "allOf": [
        {
          "$ref": "#/definitions/Destination"
        },
        {
          "properties": {
            "accessKey": {
              "type": "string"
            },
            "accessSecret": {
              "type": "string"
            },
            "topicArn": {
              "type": "string"
            }
          },
          "required": [
            "accessKey",
            "accessSecret",
            "topicArn"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Subscription"
    },
    "SqsDestination": {
      "title": "SqsDestination",
      "allOf": [
        {
          "$ref": "#/definitions/Destination"
        },
        {
          "properties": {
            "accessKey": {
              "type": "string"
            },
            "accessSecret": {
              "type": "string"
            },
            "queueUrl": {
              "type": "string"
            },
            "region": {
              "type": "string"
            }
          },
          "required": [
            "accessKey",
            "accessSecret",
            "queueUrl",
            "region"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Subscription"
    },
    "Subscription": {
      "title": "Subscription",
      "allOf": [
        {
          "$ref": "#/definitions/BaseResource"
        },
        {
          "properties": {
            "id": {
              "type": "string",
              "x-annotation-identifier": true
            },
            "version": {
              "format": "int64",
              "type": "number"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            },
            "lastModifiedAt": {
              "type": "string",
              "format": "date-time"
            },
            "lastModifiedBy": {
              "description": "Present on resources updated after 1/02/2019 except for events not tracked.",
              "$ref": "#/definitions/LastModifiedBy"
            },
            "createdBy": {
              "description": "Present on resources created after 1/02/2019 except for events not tracked.",
              "$ref": "#/definitions/CreatedBy"
            },
            "changes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ChangeSubscription"
              }
            },
            "destination": {
              "$ref": "#/definitions/Destination"
            },
            "key": {
              "type": "string"
            },
            "messages": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MessageSubscription"
              }
            },
            "format": {
              "$ref": "#/definitions/DeliveryFormat"
            },
            "status": {
              "$ref": "#/definitions/SubscriptionHealthStatus"
            }
          },
          "required": [
            "id",
            "version",
            "createdAt",
            "lastModifiedAt",
            "changes",
            "destination",
            "messages",
            "format",
            "status"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Subscription",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-subscriptions.html#subscription",
      "x-annotation-updateType": "SubscriptionUpdate"
    },
    "SubscriptionDelivery": {
      "title": "SubscriptionDelivery",
      "discriminator": "notificationType",
      "type": "object",
      "properties": {
        "projectKey": {
          "type": "string"
        },
        "notificationType": {
          "type": "string"
        },
        "resource": {
          "$ref": "#/definitions/Reference"
        },
        "resourceUserProvidedIdentifiers": {
          "$ref": "#/definitions/UserProvidedIdentifiers"
        }
      },
      "required": [
        "projectKey",
        "notificationType",
        "resource"
      ],
      "x-annotation-package": "Subscription",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-subscriptions.html#delivery"
    },
    "SubscriptionDraft": {
      "title": "SubscriptionDraft",
      "type": "object",
      "properties": {
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ChangeSubscription"
          }
        },
        "destination": {
          "$ref": "#/definitions/Destination"
        },
        "key": {
          "type": "string"
        },
        "messages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MessageSubscription"
          }
        },
        "format": {
          "$ref": "#/definitions/DeliveryFormat"
        }
      },
      "required": [
        "destination"
      ],
      "x-annotation-package": "Subscription",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-subscriptions.html#subscriptiondraft"
    },
    "SubscriptionHealthStatus": {
      "title": "SubscriptionHealthStatus",
      "enum": [
        "Healthy",
        "ConfigurationError",
        "ConfigurationErrorDeliveryStopped",
        "TemporaryError"
      ],
      "type": "string",
      "x-annotation-package": "Subscription",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-subscriptions.html#subscription-health-status"
    },
    "SubscriptionPagedQueryResponse": {
      "title": "SubscriptionPagedQueryResponse",
      "type": "object",
      "properties": {
        "limit": {
          "format": "int64",
          "type": "number"
        },
        "count": {
          "format": "int64",
          "type": "number"
        },
        "total": {
          "format": "int64",
          "type": "number"
        },
        "offset": {
          "format": "int64",
          "type": "number"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Subscription"
          }
        }
      },
      "required": [
        "limit",
        "count",
        "offset",
        "results"
      ],
      "x-annotation-package": "Subscription"
    },
    "SubscriptionUpdate": {
      "title": "SubscriptionUpdate",
      "type": "object",
      "properties": {
        "version": {
          "format": "int64",
          "type": "number"
        },
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubscriptionUpdateAction"
          }
        }
      },
      "required": [
        "version",
        "actions"
      ],
      "x-annotation-package": "Subscription"
    },
    "SubscriptionUpdateAction": {
      "title": "SubscriptionUpdateAction",
      "discriminator": "action",
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        }
      },
      "required": [
        "action"
      ],
      "x-annotation-package": "Subscription"
    },
    "SubscriptionChangeDestinationAction": {
      "title": "SubscriptionChangeDestinationAction",
      "allOf": [
        {
          "$ref": "#/definitions/SubscriptionUpdateAction"
        },
        {
          "properties": {
            "destination": {
              "$ref": "#/definitions/Destination"
            }
          },
          "required": [
            "destination"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Subscription",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-subscriptions.html#change-destination",
      "x-annotation-postman-example": null
    },
    "SubscriptionSetChangesAction": {
      "title": "SubscriptionSetChangesAction",
      "allOf": [
        {
          "$ref": "#/definitions/SubscriptionUpdateAction"
        },
        {
          "properties": {
            "changes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ChangeSubscription"
              }
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Subscription",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-subscriptions.html#set-changes",
      "x-annotation-postman-example": null
    },
    "SubscriptionSetKeyAction": {
      "title": "SubscriptionSetKeyAction",
      "allOf": [
        {
          "$ref": "#/definitions/SubscriptionUpdateAction"
        },
        {
          "properties": {
            "key": {
              "description": "If `key` is absent or `null`, this field will be removed if it exists.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Subscription",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-subscriptions.html#set-key",
      "x-annotation-postman-example": null
    },
    "SubscriptionSetMessagesAction": {
      "title": "SubscriptionSetMessagesAction",
      "allOf": [
        {
          "$ref": "#/definitions/SubscriptionUpdateAction"
        },
        {
          "properties": {
            "messages": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MessageSubscription"
              }
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Subscription",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-subscriptions.html#set-messages",
      "x-annotation-postman-example": null
    },
    "SubRate": {
      "title": "SubRate",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "amount": {
          "minimum": 0,
          "maximum": 1,
          "type": "number"
        }
      },
      "required": [
        "name",
        "amount"
      ],
      "x-annotation-package": "TaxCategory",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-taxCategories.html#subrate"
    },
    "TaxCategory": {
      "title": "TaxCategory",
      "allOf": [
        {
          "$ref": "#/definitions/BaseResource"
        },
        {
          "properties": {
            "id": {
              "description": "The unique ID of the category.",
              "type": "string",
              "x-annotation-identifier": true
            },
            "version": {
              "format": "int64",
              "description": "The current version of the category.",
              "type": "number"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            },
            "lastModifiedAt": {
              "type": "string",
              "format": "date-time"
            },
            "lastModifiedBy": {
              "description": "Present on resources updated after 1/02/2019 except for events not tracked.",
              "$ref": "#/definitions/LastModifiedBy"
            },
            "createdBy": {
              "description": "Present on resources created after 1/02/2019 except for events not tracked.",
              "$ref": "#/definitions/CreatedBy"
            },
            "name": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "rates": {
              "description": "The tax rates have unique IDs in the rates list",
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaxRate"
              }
            },
            "key": {
              "description": "User-specific unique identifier for the category.",
              "type": "string"
            }
          },
          "required": [
            "id",
            "version",
            "createdAt",
            "lastModifiedAt",
            "name",
            "rates"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "TaxCategory",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-taxCategories.html#taxcategory",
      "x-annotation-updateType": "TaxCategoryUpdate"
    },
    "TaxCategoryDraft": {
      "title": "TaxCategoryDraft",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "rates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaxRateDraft"
          }
        },
        "key": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "rates"
      ],
      "x-annotation-package": "TaxCategory",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-taxCategories.html#taxcategorydraft"
    },
    "TaxCategoryPagedQueryResponse": {
      "title": "TaxCategoryPagedQueryResponse",
      "type": "object",
      "properties": {
        "limit": {
          "format": "int64",
          "type": "number"
        },
        "count": {
          "format": "int64",
          "type": "number"
        },
        "total": {
          "format": "int64",
          "type": "number"
        },
        "offset": {
          "format": "int64",
          "type": "number"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaxCategory"
          }
        }
      },
      "required": [
        "limit",
        "count",
        "offset",
        "results"
      ],
      "x-annotation-package": "TaxCategory"
    },
    "TaxCategoryReference": {
      "title": "TaxCategoryReference",
      "allOf": [
        {
          "$ref": "#/definitions/Reference"
        },
        {
          "properties": {
            "obj": {
              "$ref": "#/definitions/TaxCategory"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "TaxCategory",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-taxCategories.html#taxcategory"
    },
    "TaxCategoryResourceIdentifier": {
      "title": "TaxCategoryResourceIdentifier",
      "$ref": "#/definitions/ResourceIdentifier",
      "x-annotation-package": "TaxCategory",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-taxCategories.html#taxcategory"
    },
    "TaxCategoryUpdate": {
      "title": "TaxCategoryUpdate",
      "type": "object",
      "properties": {
        "version": {
          "format": "int64",
          "type": "number"
        },
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaxCategoryUpdateAction"
          }
        }
      },
      "required": [
        "version",
        "actions"
      ],
      "x-annotation-package": "TaxCategory"
    },
    "TaxCategoryUpdateAction": {
      "title": "TaxCategoryUpdateAction",
      "discriminator": "action",
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        }
      },
      "required": [
        "action"
      ],
      "x-annotation-package": "TaxCategory"
    },
    "TaxRate": {
      "title": "TaxRate",
      "type": "object",
      "properties": {
        "id": {
          "description": "The ID is always set if the tax rate is part of a TaxCategory.\nThe external tax rates in a\nCart do not contain an `id`.",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "amount": {
          "minimum": 0,
          "maximum": 1,
          "description": "Percentage in the range of [0..1].\nThe sum of the amounts of all `subRates`, if there are any.",
          "type": "number"
        },
        "includedInPrice": {
          "type": "boolean"
        },
        "country": {
          "description": "A two-digit country code as per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).",
          "$ref": "#/definitions/CountryCode"
        },
        "state": {
          "description": "The state in the country",
          "type": "string"
        },
        "subRates": {
          "description": "For countries (e.g.\nthe US) where the total tax is a combination of multiple taxes (e.g.\nstate and local taxes).",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubRate"
          }
        }
      },
      "required": [
        "name",
        "amount",
        "includedInPrice",
        "country"
      ],
      "x-annotation-package": "TaxCategory",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-taxCategories.html#taxrate"
    },
    "TaxRateDraft": {
      "title": "TaxRateDraft",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "amount": {
          "minimum": 0,
          "maximum": 1,
          "description": "Percentage in the range of [0..1].\nMust be supplied if no `subRates` are specified.\nIf `subRates` are specified\nthen the `amount` can be omitted or it must be the sum of the amounts of all `subRates`.",
          "type": "number"
        },
        "includedInPrice": {
          "type": "boolean"
        },
        "country": {
          "description": "A two-digit country code as per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).",
          "$ref": "#/definitions/CountryCode"
        },
        "state": {
          "description": "The state in the country",
          "type": "string"
        },
        "subRates": {
          "description": "For countries (e.g.\nthe US) where the total tax is a combination of multiple taxes (e.g.\nstate and local taxes).",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubRate"
          }
        }
      },
      "required": [
        "name",
        "includedInPrice",
        "country"
      ],
      "x-annotation-package": "TaxCategory"
    },
    "TaxCategoryAddTaxRateAction": {
      "title": "TaxCategoryAddTaxRateAction",
      "allOf": [
        {
          "$ref": "#/definitions/TaxCategoryUpdateAction"
        },
        {
          "properties": {
            "taxRate": {
              "$ref": "#/definitions/TaxRateDraft"
            }
          },
          "required": [
            "taxRate"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "TaxCategory",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-taxCategories.html#add-tax-rate",
      "x-annotation-postman-example": null
    },
    "TaxCategoryChangeNameAction": {
      "title": "TaxCategoryChangeNameAction",
      "allOf": [
        {
          "$ref": "#/definitions/TaxCategoryUpdateAction"
        },
        {
          "properties": {
            "name": {
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "TaxCategory",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-taxCategories.html#change-name",
      "x-annotation-postman-example": null
    },
    "TaxCategoryRemoveTaxRateAction": {
      "title": "TaxCategoryRemoveTaxRateAction",
      "allOf": [
        {
          "$ref": "#/definitions/TaxCategoryUpdateAction"
        },
        {
          "properties": {
            "taxRateId": {
              "type": "string"
            }
          },
          "required": [
            "taxRateId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "TaxCategory",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-taxCategories.html#remove-tax-rate",
      "x-annotation-postman-example": null
    },
    "TaxCategoryReplaceTaxRateAction": {
      "title": "TaxCategoryReplaceTaxRateAction",
      "allOf": [
        {
          "$ref": "#/definitions/TaxCategoryUpdateAction"
        },
        {
          "properties": {
            "taxRateId": {
              "type": "string"
            },
            "taxRate": {
              "$ref": "#/definitions/TaxRateDraft"
            }
          },
          "required": [
            "taxRateId",
            "taxRate"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "TaxCategory",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-taxCategories.html#replace-tax-rate",
      "x-annotation-postman-example": null
    },
    "TaxCategorySetDescriptionAction": {
      "title": "TaxCategorySetDescriptionAction",
      "allOf": [
        {
          "$ref": "#/definitions/TaxCategoryUpdateAction"
        },
        {
          "properties": {
            "description": {
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "TaxCategory",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-taxCategories.html#set-description",
      "x-annotation-postman-example": null
    },
    "TaxCategorySetKeyAction": {
      "title": "TaxCategorySetKeyAction",
      "allOf": [
        {
          "$ref": "#/definitions/TaxCategoryUpdateAction"
        },
        {
          "properties": {
            "key": {
              "description": "If `key` is absent or `null`, it is removed if it exists.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "TaxCategory",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-taxCategories.html#set-key",
      "x-annotation-postman-example": null
    },
    "CustomFieldBooleanType": {
      "title": "CustomFieldBooleanType",
      "$ref": "#/definitions/FieldType",
      "x-annotation-package": "Type",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-types.html#booleantype"
    },
    "CustomFieldDateTimeType": {
      "title": "CustomFieldDateTimeType",
      "$ref": "#/definitions/FieldType",
      "x-annotation-package": "Type",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-types.html#datetimetype"
    },
    "CustomFieldDateType": {
      "title": "CustomFieldDateType",
      "$ref": "#/definitions/FieldType",
      "x-annotation-package": "Type",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-types.html#datetype"
    },
    "CustomFieldEnumType": {
      "title": "CustomFieldEnumType",
      "allOf": [
        {
          "$ref": "#/definitions/FieldType"
        },
        {
          "properties": {
            "values": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomFieldEnumValue"
              }
            }
          },
          "required": [
            "values"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Type",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-types.html#enumtype"
    },
    "CustomFieldEnumValue": {
      "title": "CustomFieldEnumValue",
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "label": {
          "type": "string"
        }
      },
      "required": [
        "key",
        "label"
      ],
      "x-annotation-package": "Type"
    },
    "CustomFieldLocalizedEnumType": {
      "title": "CustomFieldLocalizedEnumType",
      "allOf": [
        {
          "$ref": "#/definitions/FieldType"
        },
        {
          "properties": {
            "values": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomFieldLocalizedEnumValue"
              }
            }
          },
          "required": [
            "values"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Type",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-types.html#localizedenumtype"
    },
    "CustomFieldLocalizedEnumValue": {
      "title": "CustomFieldLocalizedEnumValue",
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "label": {
          "$ref": "#/definitions/LocalizedString"
        }
      },
      "required": [
        "key",
        "label"
      ],
      "x-annotation-package": "Type"
    },
    "CustomFieldLocalizedStringType": {
      "title": "CustomFieldLocalizedStringType",
      "$ref": "#/definitions/FieldType",
      "x-annotation-package": "Type",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-types.html#localizedstringtype"
    },
    "CustomFieldMoneyType": {
      "title": "CustomFieldMoneyType",
      "$ref": "#/definitions/FieldType",
      "x-annotation-package": "Type",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-types.html#moneytype"
    },
    "CustomFieldNumberType": {
      "title": "CustomFieldNumberType",
      "$ref": "#/definitions/FieldType",
      "x-annotation-package": "Type",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-types.html#numbertype"
    },
    "CustomFieldReferenceType": {
      "title": "CustomFieldReferenceType",
      "allOf": [
        {
          "$ref": "#/definitions/FieldType"
        },
        {
          "properties": {
            "referenceTypeId": {
              "$ref": "#/definitions/ReferenceTypeId"
            }
          },
          "required": [
            "referenceTypeId"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Type",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-types.html#referencetype"
    },
    "CustomFieldSetType": {
      "title": "CustomFieldSetType",
      "allOf": [
        {
          "$ref": "#/definitions/FieldType"
        },
        {
          "properties": {
            "elementType": {
              "$ref": "#/definitions/FieldType"
            }
          },
          "required": [
            "elementType"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Type",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-types.html#settype"
    },
    "CustomFieldStringType": {
      "title": "CustomFieldStringType",
      "$ref": "#/definitions/FieldType",
      "x-annotation-package": "Type",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-types.html#stringtype"
    },
    "CustomFieldTimeType": {
      "title": "CustomFieldTimeType",
      "$ref": "#/definitions/FieldType",
      "x-annotation-package": "Type",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-types.html#timetype"
    },
    "CustomFields": {
      "title": "CustomFields",
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/TypeReference"
        },
        "fields": {
          "description": "A valid JSON object, based on FieldDefinition.",
          "$ref": "#/definitions/FieldContainer"
        }
      },
      "required": [
        "type",
        "fields"
      ],
      "x-annotation-package": "Type",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-custom-fields.html#custom"
    },
    "CustomFieldsDraft": {
      "title": "CustomFieldsDraft",
      "type": "object",
      "properties": {
        "type": {
          "description": "The `id` or the `key` of the type to use.",
          "$ref": "#/definitions/TypeResourceIdentifier"
        },
        "fields": {
          "description": "A valid JSON object, based on the FieldDefinitions of the Type.",
          "$ref": "#/definitions/FieldContainer"
        }
      },
      "required": [
        "type"
      ],
      "x-annotation-package": "Type",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-custom-fields.html#customfieldsdraft"
    },
    "FieldContainer": {
      "title": "FieldContainer",
      "type": "object",
      "additionalProperties": {
        "type": "string"
      },
      "x-annotation-package": "Type",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-custom-fields.html#customfields",
      "x-annotation-asMap": {
        "key": "string",
        "value": "any"
      }
    },
    "FieldDefinition": {
      "title": "FieldDefinition",
      "type": "object",
      "properties": {
        "type": {
          "description": "Describes the type of the field.",
          "$ref": "#/definitions/FieldType"
        },
        "name": {
          "description": "The name of the field.\nThe name must be between two and 36 characters long and can contain the ASCII letters A to Z in lowercase or uppercase, digits, underscores (`_`) and the hyphen-minus (`-`).\nThe name must be unique for a given resource type ID.\nIn case there is a field with the same name in another type it has to have the same FieldType also.",
          "type": "string"
        },
        "label": {
          "description": "A human-readable label for the field.",
          "$ref": "#/definitions/LocalizedString"
        },
        "required": {
          "description": "Whether the field is required to have a value.",
          "type": "boolean"
        },
        "inputHint": {
          "description": "Provides a visual representation type for this field.\nIt is only relevant for string-based field types like StringType and LocalizedStringType.",
          "$ref": "#/definitions/TypeTextInputHint"
        }
      },
      "required": [
        "type",
        "name",
        "label",
        "required"
      ],
      "x-annotation-package": "Type",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-types.html#fielddefinition"
    },
    "FieldType": {
      "title": "FieldType",
      "discriminator": "name",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "x-annotation-package": "Type",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-types.html#fieldtype"
    },
    "ResourceTypeId": {
      "title": "ResourceTypeId",
      "enum": [
        "asset",
        "category",
        "channel",
        "customer",
        "order",
        "order-edit",
        "inventory-entry",
        "line-item",
        "custom-line-item",
        "product-price",
        "payment",
        "payment-interface-interaction",
        "review",
        "shopping-list",
        "shopping-list-text-line-item",
        "discount-code",
        "cart-discount",
        "customer-group"
      ],
      "type": "string",
      "x-annotation-package": "Type"
    },
    "Type": {
      "title": "Type",
      "allOf": [
        {
          "$ref": "#/definitions/BaseResource"
        },
        {
          "properties": {
            "id": {
              "description": "The unique ID of the type.",
              "type": "string",
              "x-annotation-identifier": true
            },
            "version": {
              "format": "int64",
              "description": "The current version of the type.",
              "type": "number"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            },
            "lastModifiedAt": {
              "type": "string",
              "format": "date-time"
            },
            "lastModifiedBy": {
              "description": "Present on resources updated after 1/02/2019 except for events not tracked.",
              "$ref": "#/definitions/LastModifiedBy"
            },
            "createdBy": {
              "description": "Present on resources created after 1/02/2019 except for events not tracked.",
              "$ref": "#/definitions/CreatedBy"
            },
            "key": {
              "description": "Identifier for the type (max.\n256 characters).",
              "type": "string"
            },
            "name": {
              "$ref": "#/definitions/LocalizedString"
            },
            "description": {
              "$ref": "#/definitions/LocalizedString"
            },
            "resourceTypeIds": {
              "description": "Defines for which resource(s) the type is valid.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ResourceTypeId"
              }
            },
            "fieldDefinitions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FieldDefinition"
              }
            }
          },
          "required": [
            "id",
            "version",
            "createdAt",
            "lastModifiedAt",
            "key",
            "name",
            "resourceTypeIds",
            "fieldDefinitions"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Type",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-types.html#type",
      "x-annotation-updateType": "TypeUpdate"
    },
    "TypeDraft": {
      "title": "TypeDraft",
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "name": {
          "$ref": "#/definitions/LocalizedString"
        },
        "description": {
          "$ref": "#/definitions/LocalizedString"
        },
        "resourceTypeIds": {
          "description": "The IDs of the resources that can be customized with this type.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceTypeId"
          }
        },
        "fieldDefinitions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FieldDefinition"
          }
        }
      },
      "required": [
        "key",
        "name",
        "resourceTypeIds"
      ],
      "x-annotation-package": "Type",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-types.html#typedraft"
    },
    "TypePagedQueryResponse": {
      "title": "TypePagedQueryResponse",
      "type": "object",
      "properties": {
        "limit": {
          "format": "int64",
          "type": "number"
        },
        "count": {
          "format": "int64",
          "type": "number"
        },
        "total": {
          "format": "int64",
          "type": "number"
        },
        "offset": {
          "format": "int64",
          "type": "number"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Type"
          }
        }
      },
      "required": [
        "limit",
        "count",
        "offset",
        "results"
      ],
      "x-annotation-package": "Type"
    },
    "TypeReference": {
      "title": "TypeReference",
      "allOf": [
        {
          "$ref": "#/definitions/Reference"
        },
        {
          "properties": {
            "obj": {
              "$ref": "#/definitions/Type"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Type",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-types.html#type"
    },
    "TypeResourceIdentifier": {
      "title": "TypeResourceIdentifier",
      "$ref": "#/definitions/ResourceIdentifier",
      "x-annotation-package": "Type",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-types.html#type"
    },
    "TypeTextInputHint": {
      "title": "TypeTextInputHint",
      "enum": [
        "SingleLine",
        "MultiLine"
      ],
      "type": "string",
      "x-annotation-package": "Type"
    },
    "TypeUpdate": {
      "title": "TypeUpdate",
      "type": "object",
      "properties": {
        "version": {
          "format": "int64",
          "type": "number"
        },
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TypeUpdateAction"
          }
        }
      },
      "required": [
        "version",
        "actions"
      ],
      "x-annotation-package": "Type"
    },
    "TypeUpdateAction": {
      "title": "TypeUpdateAction",
      "discriminator": "action",
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        }
      },
      "required": [
        "action"
      ],
      "x-annotation-package": "Type"
    },
    "TypeAddEnumValueAction": {
      "title": "TypeAddEnumValueAction",
      "allOf": [
        {
          "$ref": "#/definitions/TypeUpdateAction"
        },
        {
          "properties": {
            "fieldName": {
              "type": "string"
            },
            "value": {
              "$ref": "#/definitions/CustomFieldEnumValue"
            }
          },
          "required": [
            "fieldName",
            "value"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Type",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-types.html#add-enumvalue-to-fielddefinition",
      "x-annotation-postman-example": null
    },
    "TypeAddFieldDefinitionAction": {
      "title": "TypeAddFieldDefinitionAction",
      "allOf": [
        {
          "$ref": "#/definitions/TypeUpdateAction"
        },
        {
          "properties": {
            "fieldDefinition": {
              "$ref": "#/definitions/FieldDefinition"
            }
          },
          "required": [
            "fieldDefinition"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Type",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-types.html#add-fielddefinition",
      "x-annotation-postman-example": null
    },
    "TypeAddLocalizedEnumValueAction": {
      "title": "TypeAddLocalizedEnumValueAction",
      "allOf": [
        {
          "$ref": "#/definitions/TypeUpdateAction"
        },
        {
          "properties": {
            "fieldName": {
              "type": "string"
            },
            "value": {
              "$ref": "#/definitions/CustomFieldLocalizedEnumValue"
            }
          },
          "required": [
            "fieldName",
            "value"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Type",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-types.html#add-localizedenumvalue-to-fielddefinition",
      "x-annotation-postman-example": null
    },
    "TypeChangeEnumValueLabelAction": {
      "title": "TypeChangeEnumValueLabelAction",
      "allOf": [
        {
          "$ref": "#/definitions/TypeUpdateAction"
        },
        {
          "properties": {
            "fieldName": {
              "type": "string"
            },
            "value": {
              "$ref": "#/definitions/CustomFieldEnumValue"
            }
          },
          "required": [
            "fieldName",
            "value"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Type",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-types.html#change-enumvalue-label"
    },
    "TypeChangeEnumValueOrderAction": {
      "title": "TypeChangeEnumValueOrderAction",
      "allOf": [
        {
          "$ref": "#/definitions/TypeUpdateAction"
        },
        {
          "properties": {
            "fieldName": {
              "type": "string"
            },
            "keys": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "required": [
            "fieldName",
            "keys"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Type",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-types.html#change-the-order-of-enumvalues",
      "x-annotation-postman-example": null
    },
    "TypeChangeFieldDefinitionLabelAction": {
      "title": "TypeChangeFieldDefinitionLabelAction",
      "allOf": [
        {
          "$ref": "#/definitions/TypeUpdateAction"
        },
        {
          "properties": {
            "fieldName": {
              "type": "string"
            },
            "label": {
              "$ref": "#/definitions/LocalizedString"
            }
          },
          "required": [
            "fieldName",
            "label"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Type",
      "x-annotation-deprecated": true
    },
    "TypeChangeFieldDefinitionOrderAction": {
      "title": "TypeChangeFieldDefinitionOrderAction",
      "allOf": [
        {
          "$ref": "#/definitions/TypeUpdateAction"
        },
        {
          "properties": {
            "fieldNames": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "required": [
            "fieldNames"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Type",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-types.html#change-the-order-of-fielddefinitions",
      "x-annotation-postman-example": null
    },
    "TypeChangeInputHintAction": {
      "title": "TypeChangeInputHintAction",
      "allOf": [
        {
          "$ref": "#/definitions/TypeUpdateAction"
        },
        {
          "properties": {
            "fieldName": {
              "type": "string"
            },
            "inputHint": {
              "$ref": "#/definitions/TypeTextInputHint"
            }
          },
          "required": [
            "fieldName",
            "inputHint"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Type",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-types.html#change-inputhint"
    },
    "TypeChangeKeyAction": {
      "title": "TypeChangeKeyAction",
      "allOf": [
        {
          "$ref": "#/definitions/TypeUpdateAction"
        },
        {
          "properties": {
            "key": {
              "type": "string"
            }
          },
          "required": [
            "key"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Type",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-types.html#change-key",
      "x-annotation-postman-example": null
    },
    "TypeChangeLabelAction": {
      "title": "TypeChangeLabelAction",
      "allOf": [
        {
          "$ref": "#/definitions/TypeUpdateAction"
        },
        {
          "properties": {
            "fieldName": {
              "type": "string"
            },
            "label": {
              "$ref": "#/definitions/LocalizedString"
            }
          },
          "required": [
            "fieldName",
            "label"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Type",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-types.html#change-label",
      "x-annotation-postman-example": null
    },
    "TypeChangeLocalizedEnumValueLabelAction": {
      "title": "TypeChangeLocalizedEnumValueLabelAction",
      "allOf": [
        {
          "$ref": "#/definitions/TypeUpdateAction"
        },
        {
          "properties": {
            "fieldName": {
              "type": "string"
            },
            "value": {
              "$ref": "#/definitions/CustomFieldLocalizedEnumValue"
            }
          },
          "required": [
            "fieldName",
            "value"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Type",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-types.html#change-localizedenumvalue-label"
    },
    "TypeChangeLocalizedEnumValueOrderAction": {
      "title": "TypeChangeLocalizedEnumValueOrderAction",
      "allOf": [
        {
          "$ref": "#/definitions/TypeUpdateAction"
        },
        {
          "properties": {
            "fieldName": {
              "type": "string"
            },
            "keys": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "required": [
            "fieldName",
            "keys"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Type",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-types.html#change-the-order-of-localizedenumvalues",
      "x-annotation-postman-example": null
    },
    "TypeChangeNameAction": {
      "title": "TypeChangeNameAction",
      "allOf": [
        {
          "$ref": "#/definitions/TypeUpdateAction"
        },
        {
          "properties": {
            "name": {
              "$ref": "#/definitions/LocalizedString"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Type",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-types.html#change-name",
      "x-annotation-postman-example": null
    },
    "TypeRemoveFieldDefinitionAction": {
      "title": "TypeRemoveFieldDefinitionAction",
      "allOf": [
        {
          "$ref": "#/definitions/TypeUpdateAction"
        },
        {
          "properties": {
            "fieldName": {
              "type": "string"
            }
          },
          "required": [
            "fieldName"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Type",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-types.html#remove-fielddefinition",
      "x-annotation-postman-example": null
    },
    "TypeSetDescriptionAction": {
      "title": "TypeSetDescriptionAction",
      "allOf": [
        {
          "$ref": "#/definitions/TypeUpdateAction"
        },
        {
          "properties": {
            "description": {
              "$ref": "#/definitions/LocalizedString"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Type",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-types.html#set-description",
      "x-annotation-postman-example": null
    },
    "Location": {
      "title": "Location",
      "type": "object",
      "properties": {
        "country": {
          "description": "A two-digit country code as per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).",
          "$ref": "#/definitions/CountryCode"
        },
        "state": {
          "type": "string"
        }
      },
      "required": [
        "country"
      ],
      "x-annotation-package": "Zone",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-zones.html#location"
    },
    "Zone": {
      "title": "Zone",
      "allOf": [
        {
          "$ref": "#/definitions/BaseResource"
        },
        {
          "properties": {
            "id": {
              "description": "The unique ID of the zone.",
              "type": "string",
              "x-annotation-identifier": true
            },
            "version": {
              "format": "int64",
              "description": "The current version of the zone.",
              "type": "number"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            },
            "lastModifiedAt": {
              "type": "string",
              "format": "date-time"
            },
            "lastModifiedBy": {
              "$ref": "#/definitions/LastModifiedBy"
            },
            "createdBy": {
              "$ref": "#/definitions/CreatedBy"
            },
            "key": {
              "description": "User-specific unique identifier for a zone.\nMust be unique across a project.\nThe field can be reset using the Set Key UpdateAction.",
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "locations": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Location"
              }
            }
          },
          "required": [
            "id",
            "version",
            "createdAt",
            "lastModifiedAt",
            "name",
            "locations"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Zone",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-zones.html#zone",
      "x-annotation-updateType": "ZoneUpdate"
    },
    "ZoneDraft": {
      "title": "ZoneDraft",
      "type": "object",
      "properties": {
        "key": {
          "description": "User-specific unique identifier for a zone.\nMust be unique across a project.\nThe field can be reset using the Set Key UpdateAction.",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "locations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Location"
          }
        }
      },
      "required": [
        "name",
        "locations"
      ],
      "x-annotation-package": "Zone",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-zones.html#zonedraft"
    },
    "ZonePagedQueryResponse": {
      "title": "ZonePagedQueryResponse",
      "type": "object",
      "properties": {
        "limit": {
          "format": "int64",
          "type": "number"
        },
        "count": {
          "format": "int64",
          "type": "number"
        },
        "total": {
          "format": "int64",
          "type": "number"
        },
        "offset": {
          "format": "int64",
          "type": "number"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Zone"
          }
        }
      },
      "required": [
        "limit",
        "count",
        "offset",
        "results"
      ],
      "x-annotation-package": "Zone"
    },
    "ZoneReference": {
      "title": "ZoneReference",
      "allOf": [
        {
          "$ref": "#/definitions/Reference"
        },
        {
          "properties": {
            "obj": {
              "$ref": "#/definitions/Zone"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Zone",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-zones.html#zone"
    },
    "ZoneResourceIdentifier": {
      "title": "ZoneResourceIdentifier",
      "$ref": "#/definitions/ResourceIdentifier",
      "x-annotation-package": "Zone",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-zones.html#zone"
    },
    "ZoneUpdate": {
      "title": "ZoneUpdate",
      "type": "object",
      "properties": {
        "version": {
          "format": "int64",
          "type": "number"
        },
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ZoneUpdateAction"
          }
        }
      },
      "required": [
        "version",
        "actions"
      ],
      "x-annotation-package": "Zone"
    },
    "ZoneUpdateAction": {
      "title": "ZoneUpdateAction",
      "discriminator": "action",
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        }
      },
      "required": [
        "action"
      ],
      "x-annotation-package": "Zone"
    },
    "ZoneAddLocationAction": {
      "title": "ZoneAddLocationAction",
      "allOf": [
        {
          "$ref": "#/definitions/ZoneUpdateAction"
        },
        {
          "properties": {
            "location": {
              "$ref": "#/definitions/Location"
            }
          },
          "required": [
            "location"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Zone",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-zones.html#add-location",
      "x-annotation-postman-example": null
    },
    "ZoneChangeNameAction": {
      "title": "ZoneChangeNameAction",
      "allOf": [
        {
          "$ref": "#/definitions/ZoneUpdateAction"
        },
        {
          "properties": {
            "name": {
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Zone",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-zones.html#change-name",
      "x-annotation-postman-example": null
    },
    "ZoneRemoveLocationAction": {
      "title": "ZoneRemoveLocationAction",
      "allOf": [
        {
          "$ref": "#/definitions/ZoneUpdateAction"
        },
        {
          "properties": {
            "location": {
              "$ref": "#/definitions/Location"
            }
          },
          "required": [
            "location"
          ],
          "type": "object"
        }
      ],
      "x-annotation-package": "Zone",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-zones.html#remove-location",
      "x-annotation-postman-example": null
    },
    "ZoneSetDescriptionAction": {
      "title": "ZoneSetDescriptionAction",
      "allOf": [
        {
          "$ref": "#/definitions/ZoneUpdateAction"
        },
        {
          "properties": {
            "description": {
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Zone",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-zones.html#set-description",
      "x-annotation-postman-example": null
    },
    "ZoneSetKeyAction": {
      "title": "ZoneSetKeyAction",
      "allOf": [
        {
          "$ref": "#/definitions/ZoneUpdateAction"
        },
        {
          "properties": {
            "key": {
              "description": "If `key` is absent or `null`, this field will be removed if it exists.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "x-annotation-package": "Zone",
      "x-annotation-docs-uri": "https://docs.commercetools.com/http-api-projects-zones.html#set-key",
      "x-annotation-postman-example": null
    }
  },
  "parameters": {
    "trait:expandable:expand": {
      "type": "string",
      "in": "query",
      "name": "expand"
    },
    "trait:query:/^var[.][a-zA-Z0-9]+$/": {
      "description": "Predicate parameter values",
      "type": "string",
      "in": "query",
      "name": "/^var[.][a-zA-Z0-9]+$/",
      "x-annotation-placeholderParam": {
        "paramName": "predicateVar",
        "template": "var.<varName>",
        "placeholder": "varName"
      }
    },
    "trait:paging:limit": {
      "description": "Number of results returned",
      "type": "number",
      "in": "query",
      "name": "limit"
    },
    "trait:paging:offset": {
      "description": "Number of results skipped",
      "type": "number",
      "in": "query",
      "name": "offset"
    },
    "trait:paging:withTotal": {
      "description": "Calculate total number of results",
      "type": "boolean",
      "in": "query",
      "name": "withTotal"
    },
    "trait:versioned:version": {
      "format": "int64",
      "description": "Last seen version of the resource",
      "type": "number",
      "in": "query",
      "name": "version",
      "required": true
    },
    "trait:priceSelecting:priceCurrency": {
      "type": "string",
      "in": "query",
      "name": "priceCurrency"
    },
    "trait:priceSelecting:priceCountry": {
      "type": "string",
      "in": "query",
      "name": "priceCountry"
    },
    "trait:priceSelecting:priceCustomerGroup": {
      "type": "string",
      "in": "query",
      "name": "priceCustomerGroup"
    },
    "trait:priceSelecting:priceChannel": {
      "type": "string",
      "in": "query",
      "name": "priceChannel"
    },
    "trait:priceSelecting:localeProjection": {
      "type": "string",
      "in": "query",
      "name": "localeProjection"
    },
    "trait:priceSelecting:storeProjection": {
      "type": "string",
      "in": "query",
      "name": "storeProjection"
    },
    "trait:dataErasure:dataErasure": {
      "type": "boolean",
      "in": "query",
      "name": "dataErasure"
    }
  },
  "responses": {
    "trait:errorable:400": {
      "description": "## Bad Request\n\nA 400 is the most commonly expected error response and indicates that a request failed due to providing bad input.\nBad input can be a malformed request body, missing required parameters, wrongly typed or malformed parameters or\na parameter that references another resource that does not exist. Clients need to resolve the problems mentioned\nin the response before re-sending the request.\n\nThe following general error codes can appear in responses with the HTTP status code `400`:\n\n* `InvalidInput`\n  Invalid input has been sent to the service.\n  The client application should validate the input according to the constraints described in the error message\n  before sending the request.\n\n* `InvalidOperation`\n  The resource(s) involved in the request are not in a valid state for the operation. The client application\n  should validate the constraints described in the error message before sending the request.\n\n* `InvalidField`\n  A field has an invalid value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `invalidValue` - *\n    The invalid value.\n  * `allowedValues` - Array of * - Optional\n    A fixed set of allowed values for the field, if any.\n\n* `RequiredField`\n  A required field is missing a value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n\n* `DuplicateField`\n  A value for a field conflicts with an existing duplicate value.\n  Extra fields:\n  * `field` - String\n    The name of the field.\n  * `duplicateValue` - *\n    The offending duplicate value.\n",
      "examples": {
        "application/json": {
          "statusCode": 409,
          "message": "Version mismatch. Concurrent modification.",
          "errors": [
            {
              "code": "ConcurrentModification",
              "message": "Version mismatch. Concurrent modification."
            }
          ]
        }
      },
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      }
    },
    "trait:errorable:401": {
      "description": "## Unauthorized\n\nA 401 indicates that the request is not properly authenticated.\n",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      }
    },
    "trait:errorable:403": {
      "description": "## Forbidden\n\nA 403 indicates that the authenticated client is not allowed to perform the request.\n",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      }
    },
    "trait:errorable:404": {
      "description": "## Not Found\n\nA 404 indicates that the addressed resource was not found / does not exist.\n\nThe following general error codes can appear in responses with the HTTP status code `404`:\n\n* `ResourceNotFound`\n  The resource addressed by the request URL does not exist.\n"
    },
    "trait:errorable:500": {
      "description": "## Internal Server Error\n\nA 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent\nrequests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs\nto be reported and resolved.\n\nThe following general error codes can appear in responses with the HTTP status code `500`:\n\n* `General`\n  A server-side problem occurred that is not further specified.\n  These errors [should be reported](http://support.commercetools.com/).\n",
      "examples": {
        "application/json": {
          "statusCode": 409,
          "message": "Version mismatch. Concurrent modification.",
          "errors": [
            {
              "code": "ConcurrentModification",
              "message": "Version mismatch. Concurrent modification."
            }
          ]
        }
      },
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      }
    },
    "trait:errorable:503": {
      "description": "## Service Unavailable\n\nThe following general error codes can appear in responses with the HTTP status code `503`:\n\n* `OverCapacity`\n  The service is having trouble handling the load. The client application should retry the request with\n  exponential backoff up to a point where further delay is unacceptable.\n\n* `PendingOperation`\n  A previous conflicting operation is still pending and needs to finish before the request can succeed.\n  The client application should retry the request with exponential backoff up to a point where further delay\n  is unaceptable. If these errors persist, [should be reported](http://support.commercetools.com/).\n",
      "examples": {
        "application/json": {
          "statusCode": 409,
          "message": "Version mismatch. Concurrent modification.",
          "errors": [
            {
              "code": "ConcurrentModification",
              "message": "Version mismatch. Concurrent modification."
            }
          ]
        }
      },
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      }
    },
    "trait:deprecatable:200": {
      "description": "",
      "headers": {
        "X-DEPRECATION-NOTICE": {
          "description": "As the commercetools platform evolves, some features are superseded by better implementations and should not\nbe used anymore. The goal of our deprecation process is to communicate at runtime with users if they happen\nto use such deprecated feature. To achieve this in a non breaking fashion commercetools uses an additionnal\ncustom HTTP header called \"X-DEPRECATION-NOTICE\" with a specific message relative to the deprecation.\n",
          "type": "string"
        }
      }
    },
    "trait:conflicting:409": {
      "description": "## Conflict\n\nA 409 indicates that the resource targeted by the request (with the intention to modify or delete the resource),\nwas modified since the last time the client has requested it. As a reaction, the client will usually want to\nrequest the newest version of the resource to see what has changed and may then decide to apply the same or other\nchanges to the new version, or discard his changes entirely.\n\nConflicts indicate a concurrent modification and usually occur on versioned resources, for which the client has\nto include the version of the resource whenever he intends to apply modifications to it.\n\nThe following general error codes can appear in responses with the HTTP status code `409`:\n\n* `ConcurrentModification`\n  The request conflicts with the current state of the involved resource(s).\n  Typically, the request attempts to modify a resource that is out of date,\n  i.e. that has been modified by another client since the last time it was retrieved.\n  The client application should resolve the conflict (with or without involving the end-user)\n  before retrying the request.\n",
      "examples": {
        "application/json": {
          "statusCode": 409,
          "message": "Version mismatch. Concurrent modification.",
          "errors": [
            {
              "code": "ConcurrentModification",
              "message": "Version mismatch. Concurrent modification."
            }
          ]
        }
      },
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      }
    }
  },
  "paths": {
    "/{projectKey}": {
      "post": {
        "description": "Update project",
        "operationId": "Update project settings",
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "version": 1,
                "key": "test-project",
                "name": "Some project name",
                "countries": [
                  "DE",
                  "US"
                ],
                "currencies": [
                  "EUR"
                ],
                "languages": [
                  "en"
                ],
                "createdAt": "2013-11-01T15:14:34.325Z",
                "trialUntil": "2013-11-01T15:14:34.325Z",
                "messages": {
                  "enabled": false
                },
                "carts": {
                  "countryTaxRateFallbackEnabled": false
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/ProjectUpdate"
            },
            "in": "body",
            "name": "body",
            "required": true
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "The Endpoint is responding a limited set of information about settings and configuration of the project.\n",
        "operationId": "Get project settings",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-updateable": "Project",
      "x-annotation-methodName": "withProjectKey"
    },
    "/{projectKey}/carts": {
      "get": {
        "description": "Query carts",
        "operationId": "Query carts",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "type": "string",
            "in": "query",
            "name": "customerId"
          },
          {
            "description": "A query endpoint that supports sorting does so through the sort query parameter. The provided value must be\na valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on\nthe specific query endpoints.\n\nHere are some examples of sort expressions:\n\n    name desc\n    dog.age asc\n\nIf multiple sort expressions are specified via multiple sort parameters, they are combined into a composed\nsort where the results are first sorted by the first expression, followed by equal values being sorted\naccording to the second expression, and so on.\n\nNote: The sorting is case sensitive.\n",
            "type": "string",
            "in": "query",
            "name": "sort"
          },
          {
            "description": "If queries support ad-hoc filtering of resources through flexible predicates, they do so via the where query\nparameter that accepts a single (possibly compound) predicate to determine whether a specific resource\nrepresentation should be included in the result.\n\nThe structure of predicates and the names of the fields follow the structure and naming of the fields in the\ndocumented response representation of the query results.\n\nExamples of predicates:\n\n    // Compare a field's value to a given value\n    name = \"Peter\"\n    age < 42\n    age > 42\n    age <= 42\n    age >= 42\n    age <> 42\n\n    // Combine any two conditional expressions in a logical conjunction / disjunction\n    name = \"Peter\" and age < 42\n    name = \"Peter\" or age < 42\n\n    // Negate any other conditional expression\n    not (name = \"Peter\" and age < 42)\n\n    // Check whether a field's value is or is not contained in\n    // a specified set of values.\n    age in (42, 43, 44)\n    age not in (42, 43, 44)\n\n    // Check whether an array contains all or any of a set of values\n    tags contains all (\"a\", \"b\", \"c\")\n    tags contains any (\"a\", \"b\", \"c\")\n\n    // Check whether an array is empty\n    tags is empty\n\n    // Check whether a field exists & has a non-null value\n    name is defined\n    name is not defined\n\n    // Descend into nested objects\n    dog(age < 7 and name = \"Beethoven\")\n\n    // Descend into nested arrays of objects\n    cities(zip > 10000 and zip < 20000)\n\nA query endpoint usually restricts predicates to only be allowed on a specified subset of a resource\nrepresentation's fields. The documentation of the endpoint will therefore list fields that can be used\nfor constructing predicates.\n\nIf multiple predicates are specified via multiple where query parameters, the individual predicates are\ncombined in a logical conjunction, just as if they had been specified in a single where query parameter\nand combined with and.\n\nNote: The encoding of the predicates is UTF-8 and the predicate must be URL-encoded in the HTTP request.\n",
            "type": "string",
            "in": "query",
            "name": "where"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          },
          {
            "$ref": "#/parameters/trait:paging:limit"
          },
          {
            "$ref": "#/parameters/trait:paging:offset"
          },
          {
            "$ref": "#/parameters/trait:paging:withTotal"
          },
          {
            "$ref": "#/parameters/trait:query:/^var[.][a-zA-Z0-9]+$/"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_orders:{projectKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "Creating a cart can fail with an InvalidOperation if the referenced shipping method in the\nCartDraft has a predicate which does not match the cart.\n",
        "operationId": "Create Cart",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "201": {
            "description": "",
            "examples": {
              "application/json": {
                "type": "Cart",
                "id": "2a3baa00-44fa-4ab8-bec7-933c31e18dcc",
                "version": 5,
                "createdAt": "2015-09-22T15:36:17.510Z",
                "lastModifiedAt": "2015-09-22T15:41:55.816Z",
                "lineItems": [
                  {
                    "id": "b925a817-d5ad-48bb-a407-29ad8e0649b5",
                    "productId": "9f10dcfb-5cc9-4a18-843a-c07f7e22d01f",
                    "name": {
                      "en": "SAPPHIRE"
                    },
                    "productType": {
                      "typeId": "product-type",
                      "id": "2543e1d8-4915-4f72-a3c9-1df9b1b0082d",
                      "version": 8
                    },
                    "productSlug": {
                      "en": "sapphire1421832124423"
                    },
                    "variant": {
                      "id": 1,
                      "sku": "sku_SAPPHIRE_variant1_1421832124423",
                      "prices": [
                        {
                          "value": {
                            "type": "centPrecision",
                            "fractionDigits": 2,
                            "currencyCode": "EUR",
                            "centAmount": 2800
                          },
                          "id": "8da659ef-9e54-447d-9c36-84912db1848f"
                        }
                      ],
                      "images": [
                        {
                          "url": "https://www.commercetools.com/cli/data/252542005_1.jpg",
                          "dimensions": {
                            "w": 1400,
                            "h": 1400
                          }
                        }
                      ],
                      "attributes": [],
                      "assets": []
                    },
                    "price": {
                      "value": {
                        "type": "centPrecision",
                        "fractionDigits": 2,
                        "currencyCode": "EUR",
                        "centAmount": 2800
                      },
                      "id": "8da659ef-9e54-447d-9c36-84912db1848f"
                    },
                    "quantity": 2,
                    "discountedPricePerQuantity": [],
                    "state": [
                      {
                        "quantity": 2,
                        "state": {
                          "typeId": "state",
                          "id": "7c2e2694-aefe-43d7-888e-6a99514caaca"
                        }
                      }
                    ],
                    "priceMode": "Platform",
                    "lineItemMode": "Standard",
                    "totalPrice": {
                      "type": "centPrecision",
                      "fractionDigits": 2,
                      "currencyCode": "EUR",
                      "centAmount": 5600
                    }
                  }
                ],
                "store": {
                  "typeId": "store",
                  "key": "test-key"
                },
                "cartState": "Active",
                "totalPrice": {
                  "type": "centPrecision",
                  "fractionDigits": 2,
                  "currencyCode": "EUR",
                  "centAmount": 5600
                },
                "customLineItems": [],
                "discountCodes": [],
                "inventoryMode": "None",
                "taxMode": "Platform",
                "taxRoundingMode": "HalfEven",
                "taxCalculationMode": "LineItemLevel",
                "refusedGifts": [],
                "origin": "Customer"
              }
            },
            "schema": {
              "$ref": "#/definitions/Cart"
            }
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "currency": "EUR"
              },
              "$ref": "#/definitions/CartDraft"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_orders:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-updateable": "Cart",
      "x-annotation-deleteable": "Cart",
      "x-annotation-createable": "CartDraft"
    },
    "/{projectKey}/carts/{ID}": {
      "post": {
        "description": "Update Cart by ID",
        "operationId": "Update Cart by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "version": 1,
                "actions": [
                  {
                    "action": "addLineItem",
                    "productId": "9f10dcfb-5cc9-4a18-843a-c07f7e22d01f",
                    "variantId": 1,
                    "quantity": 1
                  }
                ]
              },
              "$ref": "#/definitions/CartUpdate"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_orders:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "The cart may not contain up-to-date prices, discounts etc.\nIf you want to ensure they're up-to-date, send an Update request with the Recalculate update action instead.\n",
        "operationId": "Get Cart by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_orders:{projectKey}"
            ]
          }
        ]
      },
      "delete": {
        "description": "Delete Cart by ID",
        "operationId": "Delete Cart by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:dataErasure:dataErasure"
          },
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_orders:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "ID",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-methodName": "withId"
    },
    "/{projectKey}/carts/replicate": {
      "post": {
        "operationId": "Replicate cart",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "201": {
            "description": "",
            "examples": {
              "application/json": {
                "type": "Cart",
                "id": "2a3baa00-44fa-4ab8-bec7-933c31e18dcc",
                "version": 5,
                "createdAt": "2015-09-22T15:36:17.510Z",
                "lastModifiedAt": "2015-09-22T15:41:55.816Z",
                "lineItems": [
                  {
                    "id": "b925a817-d5ad-48bb-a407-29ad8e0649b5",
                    "productId": "9f10dcfb-5cc9-4a18-843a-c07f7e22d01f",
                    "name": {
                      "en": "SAPPHIRE"
                    },
                    "productType": {
                      "typeId": "product-type",
                      "id": "2543e1d8-4915-4f72-a3c9-1df9b1b0082d",
                      "version": 8
                    },
                    "productSlug": {
                      "en": "sapphire1421832124423"
                    },
                    "variant": {
                      "id": 1,
                      "sku": "sku_SAPPHIRE_variant1_1421832124423",
                      "prices": [
                        {
                          "value": {
                            "type": "centPrecision",
                            "fractionDigits": 2,
                            "currencyCode": "EUR",
                            "centAmount": 2800
                          },
                          "id": "8da659ef-9e54-447d-9c36-84912db1848f"
                        }
                      ],
                      "images": [
                        {
                          "url": "https://www.commercetools.com/cli/data/252542005_1.jpg",
                          "dimensions": {
                            "w": 1400,
                            "h": 1400
                          }
                        }
                      ],
                      "attributes": [],
                      "assets": []
                    },
                    "price": {
                      "value": {
                        "type": "centPrecision",
                        "fractionDigits": 2,
                        "currencyCode": "EUR",
                        "centAmount": 2800
                      },
                      "id": "8da659ef-9e54-447d-9c36-84912db1848f"
                    },
                    "quantity": 2,
                    "discountedPricePerQuantity": [],
                    "state": [
                      {
                        "quantity": 2,
                        "state": {
                          "typeId": "state",
                          "id": "7c2e2694-aefe-43d7-888e-6a99514caaca"
                        }
                      }
                    ],
                    "priceMode": "Platform",
                    "lineItemMode": "Standard",
                    "totalPrice": {
                      "type": "centPrecision",
                      "fractionDigits": 2,
                      "currencyCode": "EUR",
                      "centAmount": 5600
                    }
                  }
                ],
                "store": {
                  "typeId": "store",
                  "key": "test-key"
                },
                "cartState": "Active",
                "totalPrice": {
                  "type": "centPrecision",
                  "fractionDigits": 2,
                  "currencyCode": "EUR",
                  "centAmount": 5600
                },
                "customLineItems": [],
                "discountCodes": [],
                "inventoryMode": "None",
                "taxMode": "Platform",
                "taxRoundingMode": "HalfEven",
                "taxCalculationMode": "LineItemLevel",
                "refusedGifts": [],
                "origin": "Customer"
              }
            },
            "schema": {
              "$ref": "#/definitions/Cart"
            }
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/ReplicaCartDraft"
            },
            "in": "body",
            "name": "body",
            "required": true
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_orders:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ]
    },
    "/{projectKey}/carts/customer-id={customerId}": {
      "get": {
        "description": "Retrieves the active cart of the customer that has been modified most recently.\nIt does not consider carts with CartOrigin Merchant. If no active cart exists, a 404 Not Found error is returned.\n\nThe cart may not contain up-to-date prices, discounts etc. If you want to ensure they're up-to-date,\nsend an Update request with the Recalculate update action instead.\n",
        "operationId": "Get Cart by customerId",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_orders:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "customerId",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-methodName": "withCustomerId"
    },
    "/{projectKey}/cart-discounts": {
      "get": {
        "description": "Query cart-discounts",
        "operationId": "Query cart-discounts",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "description": "A query endpoint that supports sorting does so through the sort query parameter. The provided value must be\na valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on\nthe specific query endpoints.\n\nHere are some examples of sort expressions:\n\n    name desc\n    dog.age asc\n\nIf multiple sort expressions are specified via multiple sort parameters, they are combined into a composed\nsort where the results are first sorted by the first expression, followed by equal values being sorted\naccording to the second expression, and so on.\n\nNote: The sorting is case sensitive.\n",
            "type": "string",
            "in": "query",
            "name": "sort"
          },
          {
            "description": "If queries support ad-hoc filtering of resources through flexible predicates, they do so via the where query\nparameter that accepts a single (possibly compound) predicate to determine whether a specific resource\nrepresentation should be included in the result.\n\nThe structure of predicates and the names of the fields follow the structure and naming of the fields in the\ndocumented response representation of the query results.\n\nExamples of predicates:\n\n    // Compare a field's value to a given value\n    name = \"Peter\"\n    age < 42\n    age > 42\n    age <= 42\n    age >= 42\n    age <> 42\n\n    // Combine any two conditional expressions in a logical conjunction / disjunction\n    name = \"Peter\" and age < 42\n    name = \"Peter\" or age < 42\n\n    // Negate any other conditional expression\n    not (name = \"Peter\" and age < 42)\n\n    // Check whether a field's value is or is not contained in\n    // a specified set of values.\n    age in (42, 43, 44)\n    age not in (42, 43, 44)\n\n    // Check whether an array contains all or any of a set of values\n    tags contains all (\"a\", \"b\", \"c\")\n    tags contains any (\"a\", \"b\", \"c\")\n\n    // Check whether an array is empty\n    tags is empty\n\n    // Check whether a field exists & has a non-null value\n    name is defined\n    name is not defined\n\n    // Descend into nested objects\n    dog(age < 7 and name = \"Beethoven\")\n\n    // Descend into nested arrays of objects\n    cities(zip > 10000 and zip < 20000)\n\nA query endpoint usually restricts predicates to only be allowed on a specified subset of a resource\nrepresentation's fields. The documentation of the endpoint will therefore list fields that can be used\nfor constructing predicates.\n\nIf multiple predicates are specified via multiple where query parameters, the individual predicates are\ncombined in a logical conjunction, just as if they had been specified in a single where query parameter\nand combined with and.\n\nNote: The encoding of the predicates is UTF-8 and the predicate must be URL-encoded in the HTTP request.\n",
            "type": "string",
            "in": "query",
            "name": "where"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          },
          {
            "$ref": "#/parameters/trait:paging:limit"
          },
          {
            "$ref": "#/parameters/trait:paging:offset"
          },
          {
            "$ref": "#/parameters/trait:paging:withTotal"
          },
          {
            "$ref": "#/parameters/trait:query:/^var[.][a-zA-Z0-9]+$/"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_orders:{projectKey}",
              "view_cart_discounts:{projectKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "Create CartDiscount",
        "operationId": "Create CartDiscount",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "201": {
            "description": "",
            "examples": {
              "application/json": {
                "id": "c2f93298-c967-44af-8c2a-d2220bf39eb2",
                "version": 1,
                "createdAt": "1970-01-01T00:00:00.001Z",
                "lastModifiedAt": "1970-01-01T00:00:00.001Z",
                "name": {
                  "en": "Summer Sale"
                },
                "value": {
                  "type": "relative",
                  "permyriad": 1000
                },
                "cartPredicate": "1=1",
                "target": {
                  "type": "lineItems",
                  "predicate": "1=1"
                },
                "sortOrder": "0.1",
                "isActive": true,
                "requiresDiscountCode": false,
                "references": [],
                "stackingMode": "Stacking"
              }
            },
            "schema": {
              "$ref": "#/definitions/CartDiscount"
            }
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "name": {
                  "en": "Summer Sale"
                },
                "value": {
                  "type": "relative",
                  "permyriad": 1000
                },
                "cartPredicate": "1=1",
                "target": {
                  "type": "lineItems",
                  "predicate": "1=1"
                },
                "sortOrder": "0.1",
                "isActive": true,
                "requiresDiscountCode": false
              },
              "$ref": "#/definitions/CartDiscountDraft"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_orders:{projectKey}",
              "manage_cart_discounts:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-updateable": "CartDiscount",
      "x-annotation-deleteable": "CartDiscount",
      "x-annotation-createable": "CartDiscountDraft"
    },
    "/{projectKey}/cart-discounts/key={key}": {
      "post": {
        "description": "Update CartDiscount by key",
        "operationId": "Update CartDiscount by key",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "version": 1,
                "actions": [
                  {
                    "action": "changeValue",
                    "value": {
                      "type": "relative",
                      "permyriad": 1000
                    }
                  }
                ]
              },
              "$ref": "#/definitions/CartDiscountUpdate"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_orders:{projectKey}",
              "manage_cart_discounts:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Get CartDiscount by key",
        "operationId": "Get CartDiscount by key",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_orders:{projectKey}",
              "view_cart_discounts:{projectKey}"
            ]
          }
        ]
      },
      "delete": {
        "description": "Delete CartDiscount by key",
        "operationId": "Delete CartDiscount by key",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_orders:{projectKey}",
              "manage_cart_discounts:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "key",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-methodName": "withKey"
    },
    "/{projectKey}/cart-discounts/{ID}": {
      "post": {
        "description": "Update CartDiscount by ID",
        "operationId": "Update CartDiscount by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "version": 1,
                "actions": [
                  {
                    "action": "changeValue",
                    "value": {
                      "type": "relative",
                      "permyriad": 1000
                    }
                  }
                ]
              },
              "$ref": "#/definitions/CartDiscountUpdate"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_orders:{projectKey}",
              "manage_cart_discounts:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Get CartDiscount by ID",
        "operationId": "Get CartDiscount by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_orders:{projectKey}",
              "view_cart_discounts:{projectKey}"
            ]
          }
        ]
      },
      "delete": {
        "description": "Delete CartDiscount by ID",
        "operationId": "Delete CartDiscount by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_orders:{projectKey}",
              "manage_cart_discounts:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "ID",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-methodName": "withId"
    },
    "/{projectKey}/categories": {
      "get": {
        "description": "Query categories",
        "operationId": "Query categories",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "description": "A query endpoint that supports sorting does so through the sort query parameter. The provided value must be\na valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on\nthe specific query endpoints.\n\nHere are some examples of sort expressions:\n\n    name desc\n    dog.age asc\n\nIf multiple sort expressions are specified via multiple sort parameters, they are combined into a composed\nsort where the results are first sorted by the first expression, followed by equal values being sorted\naccording to the second expression, and so on.\n\nNote: The sorting is case sensitive.\n",
            "type": "string",
            "in": "query",
            "name": "sort"
          },
          {
            "description": "If queries support ad-hoc filtering of resources through flexible predicates, they do so via the where query\nparameter that accepts a single (possibly compound) predicate to determine whether a specific resource\nrepresentation should be included in the result.\n\nThe structure of predicates and the names of the fields follow the structure and naming of the fields in the\ndocumented response representation of the query results.\n\nExamples of predicates:\n\n    // Compare a field's value to a given value\n    name = \"Peter\"\n    age < 42\n    age > 42\n    age <= 42\n    age >= 42\n    age <> 42\n\n    // Combine any two conditional expressions in a logical conjunction / disjunction\n    name = \"Peter\" and age < 42\n    name = \"Peter\" or age < 42\n\n    // Negate any other conditional expression\n    not (name = \"Peter\" and age < 42)\n\n    // Check whether a field's value is or is not contained in\n    // a specified set of values.\n    age in (42, 43, 44)\n    age not in (42, 43, 44)\n\n    // Check whether an array contains all or any of a set of values\n    tags contains all (\"a\", \"b\", \"c\")\n    tags contains any (\"a\", \"b\", \"c\")\n\n    // Check whether an array is empty\n    tags is empty\n\n    // Check whether a field exists & has a non-null value\n    name is defined\n    name is not defined\n\n    // Descend into nested objects\n    dog(age < 7 and name = \"Beethoven\")\n\n    // Descend into nested arrays of objects\n    cities(zip > 10000 and zip < 20000)\n\nA query endpoint usually restricts predicates to only be allowed on a specified subset of a resource\nrepresentation's fields. The documentation of the endpoint will therefore list fields that can be used\nfor constructing predicates.\n\nIf multiple predicates are specified via multiple where query parameters, the individual predicates are\ncombined in a logical conjunction, just as if they had been specified in a single where query parameter\nand combined with and.\n\nNote: The encoding of the predicates is UTF-8 and the predicate must be URL-encoded in the HTTP request.\n",
            "type": "string",
            "in": "query",
            "name": "where"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          },
          {
            "$ref": "#/parameters/trait:paging:limit"
          },
          {
            "$ref": "#/parameters/trait:paging:offset"
          },
          {
            "$ref": "#/parameters/trait:paging:withTotal"
          },
          {
            "$ref": "#/parameters/trait:query:/^var[.][a-zA-Z0-9]+$/"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_products:{projectKey}",
              "view_categories:{projectKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "Creating a category produces the CategoryCreated message.",
        "operationId": "Create Category",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "201": {
            "description": "",
            "examples": {
              "application/json": {
                "id": "c2f93298-c967-44af-8c2a-d2220bf39eb2",
                "version": 1,
                "name": {
                  "en": "Hats"
                },
                "slug": {
                  "en": "hats"
                },
                "parent": {
                  "typeId": "category",
                  "id": "123456"
                },
                "ancestors": [],
                "orderHint": "0.000013833188755841543727840",
                "createdAt": "1970-01-01T00:00:00.001Z",
                "lastModifiedAt": "1970-01-01T00:00:00.001Z"
              }
            },
            "schema": {
              "$ref": "#/definitions/Category"
            }
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "name": {
                  "en": "Top hat"
                },
                "slug": {
                  "en": "top-hat"
                },
                "orderHint": "0.1"
              },
              "$ref": "#/definitions/CategoryDraft"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}",
              "view_categories:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-updateable": "Category",
      "x-annotation-deleteable": "Category",
      "x-annotation-createable": "CategoryDraft"
    },
    "/{projectKey}/categories/key={key}": {
      "post": {
        "description": "Update Category by key",
        "operationId": "Update Category by key",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "version": 1,
                "actions": [
                  {
                    "action": "changeName",
                    "name": {
                      "en": "New Name"
                    }
                  }
                ]
              },
              "$ref": "#/definitions/CategoryUpdate"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}",
              "manage_categories:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Get Category by key",
        "operationId": "Get Category by key",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_products:{projectKey}",
              "view_categories:{projectKey}"
            ]
          }
        ]
      },
      "delete": {
        "description": "Delete Category by key",
        "operationId": "Delete Category by key",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}",
              "manage_categories:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "key",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-methodName": "withKey"
    },
    "/{projectKey}/categories/{ID}": {
      "post": {
        "description": "Update Category by ID",
        "operationId": "Update Category by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "version": 1,
                "actions": [
                  {
                    "action": "changeName",
                    "name": {
                      "en": "New Name"
                    }
                  }
                ]
              },
              "$ref": "#/definitions/CategoryUpdate"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}",
              "manage_categories:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Get Category by ID",
        "operationId": "Get Category by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_products:{projectKey}",
              "view_categories:{projectKey}"
            ]
          }
        ]
      },
      "delete": {
        "description": "Delete Category by ID",
        "operationId": "Delete Category by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}",
              "manage_categories:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "ID",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-methodName": "withId"
    },
    "/{projectKey}/channels": {
      "get": {
        "description": "Query channels",
        "operationId": "Query channels",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "description": "A query endpoint that supports sorting does so through the sort query parameter. The provided value must be\na valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on\nthe specific query endpoints.\n\nHere are some examples of sort expressions:\n\n    name desc\n    dog.age asc\n\nIf multiple sort expressions are specified via multiple sort parameters, they are combined into a composed\nsort where the results are first sorted by the first expression, followed by equal values being sorted\naccording to the second expression, and so on.\n\nNote: The sorting is case sensitive.\n",
            "type": "string",
            "in": "query",
            "name": "sort"
          },
          {
            "description": "If queries support ad-hoc filtering of resources through flexible predicates, they do so via the where query\nparameter that accepts a single (possibly compound) predicate to determine whether a specific resource\nrepresentation should be included in the result.\n\nThe structure of predicates and the names of the fields follow the structure and naming of the fields in the\ndocumented response representation of the query results.\n\nExamples of predicates:\n\n    // Compare a field's value to a given value\n    name = \"Peter\"\n    age < 42\n    age > 42\n    age <= 42\n    age >= 42\n    age <> 42\n\n    // Combine any two conditional expressions in a logical conjunction / disjunction\n    name = \"Peter\" and age < 42\n    name = \"Peter\" or age < 42\n\n    // Negate any other conditional expression\n    not (name = \"Peter\" and age < 42)\n\n    // Check whether a field's value is or is not contained in\n    // a specified set of values.\n    age in (42, 43, 44)\n    age not in (42, 43, 44)\n\n    // Check whether an array contains all or any of a set of values\n    tags contains all (\"a\", \"b\", \"c\")\n    tags contains any (\"a\", \"b\", \"c\")\n\n    // Check whether an array is empty\n    tags is empty\n\n    // Check whether a field exists & has a non-null value\n    name is defined\n    name is not defined\n\n    // Descend into nested objects\n    dog(age < 7 and name = \"Beethoven\")\n\n    // Descend into nested arrays of objects\n    cities(zip > 10000 and zip < 20000)\n\nA query endpoint usually restricts predicates to only be allowed on a specified subset of a resource\nrepresentation's fields. The documentation of the endpoint will therefore list fields that can be used\nfor constructing predicates.\n\nIf multiple predicates are specified via multiple where query parameters, the individual predicates are\ncombined in a logical conjunction, just as if they had been specified in a single where query parameter\nand combined with and.\n\nNote: The encoding of the predicates is UTF-8 and the predicate must be URL-encoded in the HTTP request.\n",
            "type": "string",
            "in": "query",
            "name": "where"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          },
          {
            "$ref": "#/parameters/trait:paging:limit"
          },
          {
            "$ref": "#/parameters/trait:paging:offset"
          },
          {
            "$ref": "#/parameters/trait:paging:withTotal"
          },
          {
            "$ref": "#/parameters/trait:query:/^var[.][a-zA-Z0-9]+$/"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_products:{projectKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "Create Channel",
        "operationId": "Create Channel",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "201": {
            "description": "",
            "examples": {
              "application/json": {
                "id": "ac390383-370f-43f8-a534-db1604cb96a8",
                "key": "commercetools",
                "version": 1,
                "roles": [
                  "InventorySupply"
                ],
                "createdAt": "2015-05-28T09:48:35.023Z",
                "lastModifiedAt": "2015-05-28T09:48:35.023Z"
              }
            },
            "schema": {
              "$ref": "#/definitions/Channel"
            }
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "key": "commercetools",
                "roles": [
                  "InventorySupply"
                ]
              },
              "$ref": "#/definitions/ChannelDraft"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-updateable": "Channel",
      "x-annotation-deleteable": "Channel",
      "x-annotation-createable": "ChannelDraft"
    },
    "/{projectKey}/channels/{ID}": {
      "post": {
        "description": "Update Channel by ID",
        "operationId": "Update Channel by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "version": 1,
                "actions": [
                  {
                    "action": "changeName",
                    "name": {
                      "en": "New Name"
                    }
                  }
                ]
              },
              "$ref": "#/definitions/ChannelUpdate"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Get Channel by ID",
        "operationId": "Get Channel by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_products:{projectKey}"
            ]
          }
        ]
      },
      "delete": {
        "description": "Delete Channel by ID",
        "operationId": "Delete Channel by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "ID",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-methodName": "withId"
    },
    "/{projectKey}/customers": {
      "get": {
        "description": "Query customers",
        "operationId": "Query customers",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "description": "A query endpoint that supports sorting does so through the sort query parameter. The provided value must be\na valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on\nthe specific query endpoints.\n\nHere are some examples of sort expressions:\n\n    name desc\n    dog.age asc\n\nIf multiple sort expressions are specified via multiple sort parameters, they are combined into a composed\nsort where the results are first sorted by the first expression, followed by equal values being sorted\naccording to the second expression, and so on.\n\nNote: The sorting is case sensitive.\n",
            "type": "string",
            "in": "query",
            "name": "sort"
          },
          {
            "description": "If queries support ad-hoc filtering of resources through flexible predicates, they do so via the where query\nparameter that accepts a single (possibly compound) predicate to determine whether a specific resource\nrepresentation should be included in the result.\n\nThe structure of predicates and the names of the fields follow the structure and naming of the fields in the\ndocumented response representation of the query results.\n\nExamples of predicates:\n\n    // Compare a field's value to a given value\n    name = \"Peter\"\n    age < 42\n    age > 42\n    age <= 42\n    age >= 42\n    age <> 42\n\n    // Combine any two conditional expressions in a logical conjunction / disjunction\n    name = \"Peter\" and age < 42\n    name = \"Peter\" or age < 42\n\n    // Negate any other conditional expression\n    not (name = \"Peter\" and age < 42)\n\n    // Check whether a field's value is or is not contained in\n    // a specified set of values.\n    age in (42, 43, 44)\n    age not in (42, 43, 44)\n\n    // Check whether an array contains all or any of a set of values\n    tags contains all (\"a\", \"b\", \"c\")\n    tags contains any (\"a\", \"b\", \"c\")\n\n    // Check whether an array is empty\n    tags is empty\n\n    // Check whether a field exists & has a non-null value\n    name is defined\n    name is not defined\n\n    // Descend into nested objects\n    dog(age < 7 and name = \"Beethoven\")\n\n    // Descend into nested arrays of objects\n    cities(zip > 10000 and zip < 20000)\n\nA query endpoint usually restricts predicates to only be allowed on a specified subset of a resource\nrepresentation's fields. The documentation of the endpoint will therefore list fields that can be used\nfor constructing predicates.\n\nIf multiple predicates are specified via multiple where query parameters, the individual predicates are\ncombined in a logical conjunction, just as if they had been specified in a single where query parameter\nand combined with and.\n\nNote: The encoding of the predicates is UTF-8 and the predicate must be URL-encoded in the HTTP request.\n",
            "type": "string",
            "in": "query",
            "name": "where"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          },
          {
            "$ref": "#/parameters/trait:paging:limit"
          },
          {
            "$ref": "#/parameters/trait:paging:offset"
          },
          {
            "$ref": "#/parameters/trait:paging:withTotal"
          },
          {
            "$ref": "#/parameters/trait:query:/^var[.][a-zA-Z0-9]+$/"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_customers:{projectKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "Creates a customer. If an anonymous cart is passed in,\nthen the cart is assigned to the created customer and the version number of the Cart will increase.\nIf the ID of an anonymous session is given, all carts and orders will be assigned to the created customer.\n",
        "operationId": "Create Customer",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "201": {
            "description": "",
            "examples": {
              "application/json": {
                "customer": {
                  "addresses": [],
                  "email": "<random>@example.com",
                  "firstName": "John",
                  "id": "some_123_id",
                  "isEmailVerified": false,
                  "lastName": "Doe",
                  "password": "secret123",
                  "version": 1,
                  "createdAt": "2015-07-06T13:22:33.339Z",
                  "lastModifiedAt": "2015-07-06T13:22:33.339Z"
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/CustomerSignInResult"
            }
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "email": "<random>@example.com",
                "firstName": "John",
                "lastName": "Doe",
                "password": "secret123"
              },
              "$ref": "#/definitions/CustomerDraft"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_customers:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-updateable": "Customer",
      "x-annotation-deleteable": "Customer",
      "x-annotation-createable": "CustomerDraft"
    },
    "/{projectKey}/customers/key={key}": {
      "post": {
        "description": "Update Customer by key",
        "operationId": "Update Customer by key",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "version": 3,
                "actions": [
                  {
                    "action": "addAddress",
                    "address": {
                      "streetName": "Any Street",
                      "streetNumber": "1337",
                      "postalCode": "11111",
                      "city": "Any City",
                      "country": "US"
                    }
                  }
                ]
              },
              "$ref": "#/definitions/CustomerUpdate"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_customers:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Get Customer by key",
        "operationId": "Get Customer by key",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_customers:{projectKey}"
            ]
          }
        ]
      },
      "delete": {
        "description": "Delete Customer by key",
        "operationId": "Delete Customer by key",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:dataErasure:dataErasure"
          },
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_customers:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "key",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-methodName": "withKey"
    },
    "/{projectKey}/customers/{ID}": {
      "post": {
        "description": "Update Customer by ID",
        "operationId": "Update Customer by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "version": 3,
                "actions": [
                  {
                    "action": "addAddress",
                    "address": {
                      "streetName": "Any Street",
                      "streetNumber": "1337",
                      "postalCode": "11111",
                      "city": "Any City",
                      "country": "US"
                    }
                  }
                ]
              },
              "$ref": "#/definitions/CustomerUpdate"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_customers:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Get Customer by ID",
        "operationId": "Get Customer by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_customers:{projectKey}"
            ]
          }
        ]
      },
      "delete": {
        "description": "Delete Customer by ID",
        "operationId": "Delete Customer by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:dataErasure:dataErasure"
          },
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_customers:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "ID",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-methodName": "withId"
    },
    "/{projectKey}/customers/password-token={passwordToken}": {
      "get": {
        "description": "Get Customer by passwordToken",
        "operationId": "Get customer by password verification token",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_customers:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "passwordToken",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-methodName": "withPasswordToken"
    },
    "/{projectKey}/customers/email-token={emailToken}": {
      "get": {
        "description": "Get Customer by emailToken",
        "operationId": "Get customer by email verification token",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_customers:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "emailToken",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-methodName": "withEmailToken"
    },
    "/{projectKey}/customers/email-token": {
      "post": {
        "description": "Create a Token for verifying the Customer's Email",
        "operationId": "Create a Token for verifying the Customer's Email",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/CustomerCreateEmailToken"
            },
            "in": "body",
            "name": "body",
            "required": true
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_customers:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ]
    },
    "/{projectKey}/customers/email/confirm": {
      "post": {
        "description": "Verifies customer's email using a token.",
        "operationId": "Verifies customer's email.",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/CustomerEmailVerify"
            },
            "in": "body",
            "name": "body",
            "required": true
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_customers:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ]
    },
    "/{projectKey}/customers/password": {
      "post": {
        "description": "Change a customers password",
        "operationId": "Change a customers password",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/CustomerChangePassword"
            },
            "in": "body",
            "name": "body",
            "required": true
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_customers:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ]
    },
    "/{projectKey}/customers/password/reset": {
      "post": {
        "description": "Set a new password using a token.",
        "operationId": "Reset Customer's Password",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/CustomerResetPassword"
            },
            "in": "body",
            "name": "body",
            "required": true
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_customers:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ]
    },
    "/{projectKey}/customers/password-token": {
      "post": {
        "description": "The token value is used to reset the password of the customer with the given email. The token is\nvalid only for 10 minutes.\n",
        "operationId": "Create a Token for Resetting the Customer's Password",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CustomerToken"
            }
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/CustomerCreatePasswordResetToken"
            },
            "in": "body",
            "name": "body",
            "required": true
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_customers:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ]
    },
    "/{projectKey}/customer-groups": {
      "get": {
        "description": "Query customer-groups",
        "operationId": "Query customer-groups",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "description": "A query endpoint that supports sorting does so through the sort query parameter. The provided value must be\na valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on\nthe specific query endpoints.\n\nHere are some examples of sort expressions:\n\n    name desc\n    dog.age asc\n\nIf multiple sort expressions are specified via multiple sort parameters, they are combined into a composed\nsort where the results are first sorted by the first expression, followed by equal values being sorted\naccording to the second expression, and so on.\n\nNote: The sorting is case sensitive.\n",
            "type": "string",
            "in": "query",
            "name": "sort"
          },
          {
            "description": "If queries support ad-hoc filtering of resources through flexible predicates, they do so via the where query\nparameter that accepts a single (possibly compound) predicate to determine whether a specific resource\nrepresentation should be included in the result.\n\nThe structure of predicates and the names of the fields follow the structure and naming of the fields in the\ndocumented response representation of the query results.\n\nExamples of predicates:\n\n    // Compare a field's value to a given value\n    name = \"Peter\"\n    age < 42\n    age > 42\n    age <= 42\n    age >= 42\n    age <> 42\n\n    // Combine any two conditional expressions in a logical conjunction / disjunction\n    name = \"Peter\" and age < 42\n    name = \"Peter\" or age < 42\n\n    // Negate any other conditional expression\n    not (name = \"Peter\" and age < 42)\n\n    // Check whether a field's value is or is not contained in\n    // a specified set of values.\n    age in (42, 43, 44)\n    age not in (42, 43, 44)\n\n    // Check whether an array contains all or any of a set of values\n    tags contains all (\"a\", \"b\", \"c\")\n    tags contains any (\"a\", \"b\", \"c\")\n\n    // Check whether an array is empty\n    tags is empty\n\n    // Check whether a field exists & has a non-null value\n    name is defined\n    name is not defined\n\n    // Descend into nested objects\n    dog(age < 7 and name = \"Beethoven\")\n\n    // Descend into nested arrays of objects\n    cities(zip > 10000 and zip < 20000)\n\nA query endpoint usually restricts predicates to only be allowed on a specified subset of a resource\nrepresentation's fields. The documentation of the endpoint will therefore list fields that can be used\nfor constructing predicates.\n\nIf multiple predicates are specified via multiple where query parameters, the individual predicates are\ncombined in a logical conjunction, just as if they had been specified in a single where query parameter\nand combined with and.\n\nNote: The encoding of the predicates is UTF-8 and the predicate must be URL-encoded in the HTTP request.\n",
            "type": "string",
            "in": "query",
            "name": "where"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          },
          {
            "$ref": "#/parameters/trait:paging:limit"
          },
          {
            "$ref": "#/parameters/trait:paging:offset"
          },
          {
            "$ref": "#/parameters/trait:paging:withTotal"
          },
          {
            "$ref": "#/parameters/trait:query:/^var[.][a-zA-Z0-9]+$/"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_customers:{projectKey}",
              "view_customer_groups:{projectKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "Create CustomerGroup",
        "operationId": "Create CustomerGroup",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "201": {
            "description": "",
            "examples": {
              "application/json": {
                "id": "aef9cf41-94ad-4794-8122-62d308900430",
                "version": 2,
                "name": "Webshop user",
                "createdAt": "2017-01-10T06:51:25.896Z",
                "lastModifiedAt": "2017-01-10T06:51:25.946Z"
              }
            },
            "schema": {
              "$ref": "#/definitions/CustomerGroup"
            }
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "groupName": "Webshop user"
              },
              "$ref": "#/definitions/CustomerGroupDraft"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_customers:{projectKey}",
              "manage_customer_groups:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-updateable": "CustomerGroup",
      "x-annotation-deleteable": "CustomerGroup",
      "x-annotation-createable": "CustomerGroupDraft"
    },
    "/{projectKey}/customer-groups/key={key}": {
      "post": {
        "description": "Updates a customer group by Key.",
        "operationId": "Update CustomerGroup by key",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "version": 1,
                "actions": [
                  {
                    "action": "changeName",
                    "name": "New Name"
                  }
                ]
              },
              "$ref": "#/definitions/CustomerGroupUpdate"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_customers:{projectKey}",
              "manage_customer_groups:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Gets a customer group by Key.",
        "operationId": "Get CustomerGroup by key",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_customers:{projectKey}",
              "view_customer_groups:{projectKey}"
            ]
          }
        ]
      },
      "delete": {
        "description": "Delete CustomerGroup by key",
        "operationId": "Delete CustomerGroup by key",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_customers:{projectKey}",
              "manage_customer_groups:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "key",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-methodName": "withKey"
    },
    "/{projectKey}/customer-groups/{ID}": {
      "post": {
        "description": "Update CustomerGroup by ID",
        "operationId": "Update CustomerGroup by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "version": 1,
                "actions": [
                  {
                    "action": "changeName",
                    "name": "New Name"
                  }
                ]
              },
              "$ref": "#/definitions/CustomerGroupUpdate"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_customers:{projectKey}",
              "manage_customer_groups:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Get CustomerGroup by ID",
        "operationId": "Get CustomerGroup by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_customers:{projectKey}",
              "view_customer_groups:{projectKey}"
            ]
          }
        ]
      },
      "delete": {
        "description": "Delete CustomerGroup by ID",
        "operationId": "Delete CustomerGroup by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_customers:{projectKey}",
              "manage_customer_groups:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "ID",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-methodName": "withId"
    },
    "/{projectKey}/discount-codes": {
      "get": {
        "description": "Query discount-codes",
        "operationId": "Query discount-codes",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "description": "A query endpoint that supports sorting does so through the sort query parameter. The provided value must be\na valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on\nthe specific query endpoints.\n\nHere are some examples of sort expressions:\n\n    name desc\n    dog.age asc\n\nIf multiple sort expressions are specified via multiple sort parameters, they are combined into a composed\nsort where the results are first sorted by the first expression, followed by equal values being sorted\naccording to the second expression, and so on.\n\nNote: The sorting is case sensitive.\n",
            "type": "string",
            "in": "query",
            "name": "sort"
          },
          {
            "description": "If queries support ad-hoc filtering of resources through flexible predicates, they do so via the where query\nparameter that accepts a single (possibly compound) predicate to determine whether a specific resource\nrepresentation should be included in the result.\n\nThe structure of predicates and the names of the fields follow the structure and naming of the fields in the\ndocumented response representation of the query results.\n\nExamples of predicates:\n\n    // Compare a field's value to a given value\n    name = \"Peter\"\n    age < 42\n    age > 42\n    age <= 42\n    age >= 42\n    age <> 42\n\n    // Combine any two conditional expressions in a logical conjunction / disjunction\n    name = \"Peter\" and age < 42\n    name = \"Peter\" or age < 42\n\n    // Negate any other conditional expression\n    not (name = \"Peter\" and age < 42)\n\n    // Check whether a field's value is or is not contained in\n    // a specified set of values.\n    age in (42, 43, 44)\n    age not in (42, 43, 44)\n\n    // Check whether an array contains all or any of a set of values\n    tags contains all (\"a\", \"b\", \"c\")\n    tags contains any (\"a\", \"b\", \"c\")\n\n    // Check whether an array is empty\n    tags is empty\n\n    // Check whether a field exists & has a non-null value\n    name is defined\n    name is not defined\n\n    // Descend into nested objects\n    dog(age < 7 and name = \"Beethoven\")\n\n    // Descend into nested arrays of objects\n    cities(zip > 10000 and zip < 20000)\n\nA query endpoint usually restricts predicates to only be allowed on a specified subset of a resource\nrepresentation's fields. The documentation of the endpoint will therefore list fields that can be used\nfor constructing predicates.\n\nIf multiple predicates are specified via multiple where query parameters, the individual predicates are\ncombined in a logical conjunction, just as if they had been specified in a single where query parameter\nand combined with and.\n\nNote: The encoding of the predicates is UTF-8 and the predicate must be URL-encoded in the HTTP request.\n",
            "type": "string",
            "in": "query",
            "name": "where"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          },
          {
            "$ref": "#/parameters/trait:paging:limit"
          },
          {
            "$ref": "#/parameters/trait:paging:offset"
          },
          {
            "$ref": "#/parameters/trait:paging:withTotal"
          },
          {
            "$ref": "#/parameters/trait:query:/^var[.][a-zA-Z0-9]+$/"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_orders:{projectKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "Create DiscountCode",
        "operationId": "Create DiscountCode",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "201": {
            "description": "",
            "examples": {
              "application/json": {
                "id": "3b3327a4-06c2-4129-8d87-83d5ce53e038",
                "version": 2,
                "code": "SAVE10",
                "name": {
                  "en": "Save10"
                },
                "cartDiscounts": [
                  {
                    "typeId": "cart-discount",
                    "id": "fdbaf4ea-fbc9-4fea-bac4-1d7e6c1995b3"
                  }
                ],
                "isActive": true,
                "cartPredicate": "1=1",
                "references": [],
                "groups": [],
                "createdAt": "2015-09-15T09:02:29.323Z",
                "lastModifiedAt": "2015-09-15T09:04:06.910Z"
              }
            },
            "schema": {
              "$ref": "#/definitions/DiscountCode"
            }
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "code": "SAVE10",
                "name": {
                  "en": "Save10"
                },
                "cartDiscounts": [
                  {
                    "typeId": "cart-discount",
                    "id": "fdbaf4ea-fbc9-4fea-bac4-1d7e6c1995b3"
                  }
                ],
                "isActive": true,
                "cartPredicate": "1=1"
              },
              "$ref": "#/definitions/DiscountCodeDraft"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_orders:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-updateable": "DiscountCode",
      "x-annotation-deleteable": "DiscountCode",
      "x-annotation-createable": "DiscountCodeDraft"
    },
    "/{projectKey}/discount-codes/{ID}": {
      "post": {
        "description": "Update DiscountCode by ID",
        "operationId": "Update DiscountCode by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "version": 1,
                "actions": [
                  {
                    "action": "setName",
                    "name": {
                      "en": "New Name"
                    }
                  }
                ]
              },
              "$ref": "#/definitions/DiscountCodeUpdate"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_orders:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Get DiscountCode by ID",
        "operationId": "Get DiscountCode by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_orders:{projectKey}"
            ]
          }
        ]
      },
      "delete": {
        "description": "Delete DiscountCode by ID",
        "operationId": "Delete DiscountCode by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:dataErasure:dataErasure"
          },
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_orders:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "ID",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-methodName": "withId"
    },
    "/{projectKey}/inventory": {
      "get": {
        "description": "Query inventory",
        "operationId": "Query inventory",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "description": "A query endpoint that supports sorting does so through the sort query parameter. The provided value must be\na valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on\nthe specific query endpoints.\n\nHere are some examples of sort expressions:\n\n    name desc\n    dog.age asc\n\nIf multiple sort expressions are specified via multiple sort parameters, they are combined into a composed\nsort where the results are first sorted by the first expression, followed by equal values being sorted\naccording to the second expression, and so on.\n\nNote: The sorting is case sensitive.\n",
            "type": "string",
            "in": "query",
            "name": "sort"
          },
          {
            "description": "If queries support ad-hoc filtering of resources through flexible predicates, they do so via the where query\nparameter that accepts a single (possibly compound) predicate to determine whether a specific resource\nrepresentation should be included in the result.\n\nThe structure of predicates and the names of the fields follow the structure and naming of the fields in the\ndocumented response representation of the query results.\n\nExamples of predicates:\n\n    // Compare a field's value to a given value\n    name = \"Peter\"\n    age < 42\n    age > 42\n    age <= 42\n    age >= 42\n    age <> 42\n\n    // Combine any two conditional expressions in a logical conjunction / disjunction\n    name = \"Peter\" and age < 42\n    name = \"Peter\" or age < 42\n\n    // Negate any other conditional expression\n    not (name = \"Peter\" and age < 42)\n\n    // Check whether a field's value is or is not contained in\n    // a specified set of values.\n    age in (42, 43, 44)\n    age not in (42, 43, 44)\n\n    // Check whether an array contains all or any of a set of values\n    tags contains all (\"a\", \"b\", \"c\")\n    tags contains any (\"a\", \"b\", \"c\")\n\n    // Check whether an array is empty\n    tags is empty\n\n    // Check whether a field exists & has a non-null value\n    name is defined\n    name is not defined\n\n    // Descend into nested objects\n    dog(age < 7 and name = \"Beethoven\")\n\n    // Descend into nested arrays of objects\n    cities(zip > 10000 and zip < 20000)\n\nA query endpoint usually restricts predicates to only be allowed on a specified subset of a resource\nrepresentation's fields. The documentation of the endpoint will therefore list fields that can be used\nfor constructing predicates.\n\nIf multiple predicates are specified via multiple where query parameters, the individual predicates are\ncombined in a logical conjunction, just as if they had been specified in a single where query parameter\nand combined with and.\n\nNote: The encoding of the predicates is UTF-8 and the predicate must be URL-encoded in the HTTP request.\n",
            "type": "string",
            "in": "query",
            "name": "where"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          },
          {
            "$ref": "#/parameters/trait:paging:limit"
          },
          {
            "$ref": "#/parameters/trait:paging:offset"
          },
          {
            "$ref": "#/parameters/trait:paging:withTotal"
          },
          {
            "$ref": "#/parameters/trait:query:/^var[.][a-zA-Z0-9]+$/"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_products:{projectKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "Create InventoryEntry",
        "operationId": "Create InventoryEntry",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "201": {
            "description": "",
            "examples": {
              "application/json": {
                "id": "aea4caed-accf-4667-adfe-be08ba6fdf91",
                "version": 1,
                "sku": "sku_GIRLS_HARTBREAK_CREW_variant1_1421832124541",
                "quantityOnStock": 4,
                "availableQuantity": 4,
                "createdAt": "2015-03-11T13:36:20.720Z",
                "lastModifiedAt": "2015-03-11T13:36:20.720Z"
              }
            },
            "schema": {
              "$ref": "#/definitions/InventoryEntry"
            }
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "sku": "sku_GIRLS_HARTBREAK_CREW_variant1_1421832124541",
                "quantityOnStock": 4,
                "availableQuantity": 4
              },
              "$ref": "#/definitions/InventoryEntryDraft"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-updateable": "InventoryEntry",
      "x-annotation-deleteable": "InventoryEntry",
      "x-annotation-createable": "InventoryEntryDraft"
    },
    "/{projectKey}/inventory/{ID}": {
      "post": {
        "description": "Update InventoryEntry by ID",
        "operationId": "Update InventoryEntry by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "version": 1,
                "actions": [
                  {
                    "action": "addQuantity",
                    "quantity": 4
                  }
                ]
              },
              "$ref": "#/definitions/InventoryEntryUpdate"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Get InventoryEntry by ID",
        "operationId": "Get InventoryEntry by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_products:{projectKey}"
            ]
          }
        ]
      },
      "delete": {
        "description": "Delete InventoryEntry by ID",
        "operationId": "Delete InventoryEntry by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "ID",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-methodName": "withId"
    },
    "/{projectKey}/orders": {
      "get": {
        "description": "Query orders",
        "operationId": "Query orders",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "description": "A query endpoint that supports sorting does so through the sort query parameter. The provided value must be\na valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on\nthe specific query endpoints.\n\nHere are some examples of sort expressions:\n\n    name desc\n    dog.age asc\n\nIf multiple sort expressions are specified via multiple sort parameters, they are combined into a composed\nsort where the results are first sorted by the first expression, followed by equal values being sorted\naccording to the second expression, and so on.\n\nNote: The sorting is case sensitive.\n",
            "type": "string",
            "in": "query",
            "name": "sort"
          },
          {
            "description": "If queries support ad-hoc filtering of resources through flexible predicates, they do so via the where query\nparameter that accepts a single (possibly compound) predicate to determine whether a specific resource\nrepresentation should be included in the result.\n\nThe structure of predicates and the names of the fields follow the structure and naming of the fields in the\ndocumented response representation of the query results.\n\nExamples of predicates:\n\n    // Compare a field's value to a given value\n    name = \"Peter\"\n    age < 42\n    age > 42\n    age <= 42\n    age >= 42\n    age <> 42\n\n    // Combine any two conditional expressions in a logical conjunction / disjunction\n    name = \"Peter\" and age < 42\n    name = \"Peter\" or age < 42\n\n    // Negate any other conditional expression\n    not (name = \"Peter\" and age < 42)\n\n    // Check whether a field's value is or is not contained in\n    // a specified set of values.\n    age in (42, 43, 44)\n    age not in (42, 43, 44)\n\n    // Check whether an array contains all or any of a set of values\n    tags contains all (\"a\", \"b\", \"c\")\n    tags contains any (\"a\", \"b\", \"c\")\n\n    // Check whether an array is empty\n    tags is empty\n\n    // Check whether a field exists & has a non-null value\n    name is defined\n    name is not defined\n\n    // Descend into nested objects\n    dog(age < 7 and name = \"Beethoven\")\n\n    // Descend into nested arrays of objects\n    cities(zip > 10000 and zip < 20000)\n\nA query endpoint usually restricts predicates to only be allowed on a specified subset of a resource\nrepresentation's fields. The documentation of the endpoint will therefore list fields that can be used\nfor constructing predicates.\n\nIf multiple predicates are specified via multiple where query parameters, the individual predicates are\ncombined in a logical conjunction, just as if they had been specified in a single where query parameter\nand combined with and.\n\nNote: The encoding of the predicates is UTF-8 and the predicate must be URL-encoded in the HTTP request.\n",
            "type": "string",
            "in": "query",
            "name": "where"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          },
          {
            "$ref": "#/parameters/trait:paging:limit"
          },
          {
            "$ref": "#/parameters/trait:paging:offset"
          },
          {
            "$ref": "#/parameters/trait:paging:withTotal"
          },
          {
            "$ref": "#/parameters/trait:query:/^var[.][a-zA-Z0-9]+$/"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_orders:{projectKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "Creates an order from a Cart.\nThe cart must have a shipping address set before creating an order.\nWhen using the Platform TaxMode, the shipping address is used for tax calculation.\n",
        "operationId": "Create Order",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "201": {
            "description": "",
            "examples": {
              "application/json": {
                "type": "Order",
                "id": "92f5a867-bf19-47ab-982c-6720a03a3921",
                "version": 1,
                "createdAt": "2017-01-04T19:54:49.797Z",
                "lastModifiedAt": "2017-01-04T19:54:49.797Z",
                "totalPrice": {
                  "type": "centPrecision",
                  "fractionDigits": 2,
                  "currencyCode": "EUR",
                  "centAmount": 1000
                },
                "orderState": "Open",
                "syncInfo": [],
                "returnInfo": [],
                "refusedGifts": [],
                "taxMode": "External",
                "inventoryMode": "None",
                "taxRoundingMode": "HalfEven",
                "lineItems": [
                  {
                    "id": "7297c742-d8b0-484b-aadc-1d0ba1869dc9",
                    "productId": "c5c75935-595a-4cc3-a80e-24e9a9c55094",
                    "name": {
                      "en": "MyProduct"
                    },
                    "productType": {
                      "typeId": "product-type",
                      "id": "a5c7e173-9754-4f02-9b18-a600896ae0e1",
                      "version": 21
                    },
                    "productSlug": {
                      "de": "neues-produkt-slug-1234678",
                      "en": "new-product-slug-12345678"
                    },
                    "variant": {
                      "id": 1,
                      "sku": "some-sku-123",
                      "prices": [
                        {
                          "value": {
                            "type": "centPrecision",
                            "fractionDigits": 2,
                            "currencyCode": "EUR",
                            "centAmount": 1000
                          },
                          "id": "6d36dc85-6131-495d-9f20-d00f411d4124"
                        }
                      ],
                      "images": [],
                      "attributes": [
                        {
                          "name": "text",
                          "value": "attribute-value"
                        },
                        {
                          "name": "enum",
                          "value": {
                            "key": "test",
                            "label": "test"
                          }
                        }
                      ],
                      "assets": []
                    },
                    "price": {
                      "id": "6d36dc85-6131-495d-9f20-d00f411d4124",
                      "value": {
                        "type": "centPrecision",
                        "fractionDigits": 2,
                        "currencyCode": "EUR",
                        "centAmount": 1000
                      }
                    },
                    "quantity": 1,
                    "discountedPricePerQuantity": [],
                    "taxRate": {
                      "name": "Bla",
                      "amount": 0.1,
                      "includedInPrice": false,
                      "country": "DE",
                      "subRates": []
                    },
                    "state": [
                      {
                        "quantity": 1,
                        "state": {
                          "typeId": "state",
                          "id": "7c2e2694-aefe-43d7-888e-6a99514caaca"
                        }
                      }
                    ],
                    "priceMode": "Platform",
                    "lineItemMode": "Standard",
                    "totalPrice": {
                      "type": "centPrecision",
                      "fractionDigits": 2,
                      "currencyCode": "EUR",
                      "centAmount": 1000
                    },
                    "taxedPrice": {
                      "totalNet": {
                        "type": "centPrecision",
                        "fractionDigits": 2,
                        "currencyCode": "EUR",
                        "centAmount": 1000
                      },
                      "totalGross": {
                        "type": "centPrecision",
                        "fractionDigits": 2,
                        "currencyCode": "EUR",
                        "centAmount": 1100
                      }
                    }
                  }
                ],
                "customLineItems": [],
                "discountCodes": [],
                "lastMessageSequenceNumber": 1,
                "origin": "Customer"
              }
            },
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "id": "7c2e2694-aefe-43d7-888e-6a99514caaca",
                "version": 10,
                "orderNumber": "201612010001"
              },
              "$ref": "#/definitions/OrderFromCartDraft"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_orders:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-updateable": "Order",
      "x-annotation-deleteable": "Order",
      "x-annotation-createable": "OrderFromCartDraft"
    },
    "/{projectKey}/orders/order-number={orderNumber}": {
      "post": {
        "description": "Update Order by orderNumber",
        "operationId": "Update Order by orderNumber",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "version": 1,
                "actions": [
                  {
                    "action": "changeOrderState",
                    "orderState": "Complete"
                  }
                ]
              },
              "$ref": "#/definitions/OrderUpdate"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_orders:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "In case the orderNumber does not match the regular expression [a-zA-Z0-9_\\-]+,\nit should be provided in URL-encoded format.\n",
        "operationId": "Get Order by orderNumber",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_orders:{projectKey}"
            ]
          }
        ]
      },
      "delete": {
        "description": "Delete Order by orderNumber",
        "operationId": "Delete Order by orderNumber",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:dataErasure:dataErasure"
          },
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_orders:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "orderNumber",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-methodName": "withOrderNumber"
    },
    "/{projectKey}/orders/{ID}": {
      "post": {
        "description": "Update Order by ID",
        "operationId": "Update Order by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "version": 1,
                "actions": [
                  {
                    "action": "changeOrderState",
                    "orderState": "Complete"
                  }
                ]
              },
              "$ref": "#/definitions/OrderUpdate"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_orders:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Get Order by ID",
        "operationId": "Get Order by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_orders:{projectKey}"
            ]
          }
        ]
      },
      "delete": {
        "description": "Delete Order by ID",
        "operationId": "Delete Order by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:dataErasure:dataErasure"
          },
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_orders:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "ID",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-methodName": "withId"
    },
    "/{projectKey}/orders/edits": {
      "get": {
        "description": "Query edits",
        "operationId": "Query edits",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "description": "A query endpoint that supports sorting does so through the sort query parameter. The provided value must be\na valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on\nthe specific query endpoints.\n\nHere are some examples of sort expressions:\n\n    name desc\n    dog.age asc\n\nIf multiple sort expressions are specified via multiple sort parameters, they are combined into a composed\nsort where the results are first sorted by the first expression, followed by equal values being sorted\naccording to the second expression, and so on.\n\nNote: The sorting is case sensitive.\n",
            "type": "string",
            "in": "query",
            "name": "sort"
          },
          {
            "description": "If queries support ad-hoc filtering of resources through flexible predicates, they do so via the where query\nparameter that accepts a single (possibly compound) predicate to determine whether a specific resource\nrepresentation should be included in the result.\n\nThe structure of predicates and the names of the fields follow the structure and naming of the fields in the\ndocumented response representation of the query results.\n\nExamples of predicates:\n\n    // Compare a field's value to a given value\n    name = \"Peter\"\n    age < 42\n    age > 42\n    age <= 42\n    age >= 42\n    age <> 42\n\n    // Combine any two conditional expressions in a logical conjunction / disjunction\n    name = \"Peter\" and age < 42\n    name = \"Peter\" or age < 42\n\n    // Negate any other conditional expression\n    not (name = \"Peter\" and age < 42)\n\n    // Check whether a field's value is or is not contained in\n    // a specified set of values.\n    age in (42, 43, 44)\n    age not in (42, 43, 44)\n\n    // Check whether an array contains all or any of a set of values\n    tags contains all (\"a\", \"b\", \"c\")\n    tags contains any (\"a\", \"b\", \"c\")\n\n    // Check whether an array is empty\n    tags is empty\n\n    // Check whether a field exists & has a non-null value\n    name is defined\n    name is not defined\n\n    // Descend into nested objects\n    dog(age < 7 and name = \"Beethoven\")\n\n    // Descend into nested arrays of objects\n    cities(zip > 10000 and zip < 20000)\n\nA query endpoint usually restricts predicates to only be allowed on a specified subset of a resource\nrepresentation's fields. The documentation of the endpoint will therefore list fields that can be used\nfor constructing predicates.\n\nIf multiple predicates are specified via multiple where query parameters, the individual predicates are\ncombined in a logical conjunction, just as if they had been specified in a single where query parameter\nand combined with and.\n\nNote: The encoding of the predicates is UTF-8 and the predicate must be URL-encoded in the HTTP request.\n",
            "type": "string",
            "in": "query",
            "name": "where"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          },
          {
            "$ref": "#/parameters/trait:paging:limit"
          },
          {
            "$ref": "#/parameters/trait:paging:offset"
          },
          {
            "$ref": "#/parameters/trait:paging:withTotal"
          },
          {
            "$ref": "#/parameters/trait:query:/^var[.][a-zA-Z0-9]+$/"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_order_edits:{projectKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "Create OrderEdit",
        "operationId": "Create OrderEdit",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "201": {
            "description": "",
            "examples": {
              "application/json": {
                "id": "df20c5ea-b114-4aab-b330-740b0e9f3099",
                "version": 1,
                "resource": {
                  "typeId": "order",
                  "id": "ed454f4e-c43a-485f-a86f-046c691b1363"
                },
                "key": "order-edit-key",
                "createdAt": "2018-10-04T15:22:31.639Z",
                "lastModifiedAt": "2018-10-04T15:22:31.639Z",
                "stagedActions": [
                  {
                    "action": "setCustomerEmail",
                    "email": "user@localhost"
                  }
                ],
                "result": {
                  "preview": {
                    "type": "Order",
                    "id": "ed454f4e-c43a-485f-a86f-046c691b1363",
                    "version": 3,
                    "customerId": "bf5d96ce-4704-45b2-8842-d409dd34cdfc",
                    "customerEmail": "user@localhost",
                    "createdAt": "2018-05-15T12:40:17.301Z",
                    "lastModifiedAt": "2018-05-15T12:40:17.301Z",
                    "totalPrice": {
                      "type": "centPrecision",
                      "currencyCode": "EUR",
                      "centAmount": 3970,
                      "fractionDigits": 2
                    },
                    "taxedPrice": {
                      "totalNet": {
                        "type": "centPrecision",
                        "currencyCode": "EUR",
                        "centAmount": 3336,
                        "fractionDigits": 2
                      },
                      "totalGross": {
                        "type": "centPrecision",
                        "currencyCode": "EUR",
                        "centAmount": 3970,
                        "fractionDigits": 2
                      },
                      "taxPortions": [
                        {
                          "rate": 0.19,
                          "amount": {
                            "type": "centPrecision",
                            "currencyCode": "EUR",
                            "centAmount": 634,
                            "fractionDigits": 2
                          },
                          "name": "19% MwSt"
                        }
                      ]
                    },
                    "country": "DE",
                    "orderState": "Open",
                    "syncInfo": [],
                    "returnInfo": [],
                    "refusedGifts": [],
                    "shippingInfo": {
                      "shippingMethodName": "DHL",
                      "price": {
                        "type": "centPrecision",
                        "currencyCode": "EUR",
                        "centAmount": 570,
                        "fractionDigits": 2
                      },
                      "shippingRate": {
                        "price": {
                          "type": "centPrecision",
                          "currencyCode": "EUR",
                          "centAmount": 570,
                          "fractionDigits": 2
                        },
                        "tiers": []
                      },
                      "taxRate": {
                        "name": "19% MwSt",
                        "amount": 0.19,
                        "includedInPrice": true,
                        "country": "DE",
                        "id": "rrsT1Jbw",
                        "subRates": []
                      },
                      "taxCategory": {
                        "typeId": "tax-category",
                        "id": "fdeb9625-10f8-476c-a549-5d5c6d1bd412"
                      },
                      "deliveries": [],
                      "shippingMethod": {
                        "typeId": "shipping-method",
                        "id": "d18b3f77-92de-4893-b6e3-b5c9c8c1eb96"
                      },
                      "taxedPrice": {
                        "totalNet": {
                          "type": "centPrecision",
                          "currencyCode": "EUR",
                          "centAmount": 479,
                          "fractionDigits": 2
                        },
                        "totalGross": {
                          "type": "centPrecision",
                          "currencyCode": "EUR",
                          "centAmount": 570,
                          "fractionDigits": 2
                        }
                      },
                      "shippingMethodState": "MatchesCart"
                    },
                    "taxMode": "Platform",
                    "inventoryMode": "None",
                    "taxRoundingMode": "HalfEven",
                    "taxCalculationMode": "LineItemLevel",
                    "origin": "Customer",
                    "lineItems": [
                      {
                        "id": "31099128-dba8-40a7-bb6c-d12857149ff8",
                        "productId": "d6d0c517-572e-4d26-b80e-ffce825334a4",
                        "name": {
                          "en": "GIRLS HARTBREAK CREW"
                        },
                        "productType": {
                          "typeId": "product-type",
                          "id": "6dc75271-b0e5-4ae9-9158-faa1fff65f7b",
                          "version": 2
                        },
                        "productSlug": {
                          "en": "girls-hartbreak-crew1522841378290"
                        },
                        "variant": {
                          "id": 1,
                          "sku": "sku_GIRLS_HARTBREAK_CREW_variant1_1522841378290",
                          "prices": [
                            {
                              "value": {
                                "type": "centPrecision",
                                "currencyCode": "EUR",
                                "centAmount": 3400,
                                "fractionDigits": 2
                              },
                              "id": "b5595b13-bbb8-44ab-a2e2-89c18edf1b22"
                            }
                          ],
                          "images": [
                            {
                              "url": "https://www.commercetools.com/cli/data/253234387_1.jpg",
                              "dimensions": {
                                "w": 1400,
                                "h": 1400
                              }
                            }
                          ],
                          "attributes": [],
                          "assets": []
                        },
                        "price": {
                          "value": {
                            "type": "centPrecision",
                            "currencyCode": "EUR",
                            "centAmount": 3400,
                            "fractionDigits": 2
                          },
                          "id": "b5595b13-bbb8-44ab-a2e2-89c18edf1b22"
                        },
                        "quantity": 1,
                        "discountedPricePerQuantity": [],
                        "taxRate": {
                          "name": "19% MwSt",
                          "amount": 0.19,
                          "includedInPrice": true,
                          "country": "DE",
                          "id": "rrsT1Jbw",
                          "subRates": []
                        },
                        "state": [
                          {
                            "quantity": 1,
                            "state": {
                              "typeId": "state",
                              "id": "60a64e06-b4e8-4205-a0f3-94bc203e2d6d"
                            }
                          }
                        ],
                        "priceMode": "Platform",
                        "totalPrice": {
                          "type": "centPrecision",
                          "currencyCode": "EUR",
                          "centAmount": 3400,
                          "fractionDigits": 2
                        },
                        "taxedPrice": {
                          "totalNet": {
                            "type": "centPrecision",
                            "currencyCode": "EUR",
                            "centAmount": 2857,
                            "fractionDigits": 2
                          },
                          "totalGross": {
                            "type": "centPrecision",
                            "currencyCode": "EUR",
                            "centAmount": 3400,
                            "fractionDigits": 2
                          }
                        },
                        "lineItemMode": "Standard"
                      }
                    ],
                    "customLineItems": [],
                    "transactionFee": true,
                    "discountCodes": [],
                    "lastMessageSequenceNumber": 3,
                    "cart": {
                      "typeId": "cart",
                      "id": "6c97e772-9769-4419-8adc-501c7c5b6088"
                    },
                    "shippingAddress": {
                      "id": "51RkSh-E",
                      "salutation": "Mr",
                      "firstName": "user",
                      "lastName": "lastname",
                      "streetName": "streetname",
                      "streetNumber": "2",
                      "postalCode": "101256",
                      "city": "Berlin",
                      "country": "DE",
                      "building": "34",
                      "pOBox": "12344",
                      "email": "user@example.org"
                    },
                    "billingAddress": {
                      "id": "51RkSh-E",
                      "salutation": "Mr",
                      "firstName": "user",
                      "lastName": "lastname",
                      "streetName": "streetname",
                      "streetNumber": "2",
                      "postalCode": "101256",
                      "city": "Berlin",
                      "country": "DE",
                      "building": "34",
                      "pOBox": "12344",
                      "email": "user@example.org"
                    },
                    "itemShippingAddresses": []
                  },
                  "messagePayloads": [
                    {
                      "email": "user@localhost",
                      "type": "OrderCustomerEmailSet"
                    },
                    {
                      "edit": {
                        "typeId": "order-edit",
                        "id": "df20c5ea-b114-4aab-b330-740b0e9f3099"
                      },
                      "result": {
                        "type": "Applied",
                        "appliedAt": "2018-10-04T15:29:14.091Z",
                        "excerptBeforeEdit": {
                          "totalPrice": {
                            "type": "centPrecision",
                            "currencyCode": "EUR",
                            "centAmount": 3970,
                            "fractionDigits": 2
                          },
                          "taxedPrice": {
                            "totalNet": {
                              "type": "centPrecision",
                              "currencyCode": "EUR",
                              "centAmount": 3336,
                              "fractionDigits": 2
                            },
                            "totalGross": {
                              "type": "centPrecision",
                              "currencyCode": "EUR",
                              "centAmount": 3970,
                              "fractionDigits": 2
                            },
                            "taxPortions": [
                              {
                                "rate": 0.19,
                                "amount": {
                                  "type": "centPrecision",
                                  "currencyCode": "EUR",
                                  "centAmount": 634,
                                  "fractionDigits": 2
                                },
                                "name": "19% MwSt"
                              }
                            ]
                          },
                          "version": 1
                        },
                        "excerptAfterEdit": {
                          "totalPrice": {
                            "type": "centPrecision",
                            "currencyCode": "EUR",
                            "centAmount": 3970,
                            "fractionDigits": 2
                          },
                          "taxedPrice": {
                            "totalNet": {
                              "type": "centPrecision",
                              "currencyCode": "EUR",
                              "centAmount": 3336,
                              "fractionDigits": 2
                            },
                            "totalGross": {
                              "type": "centPrecision",
                              "currencyCode": "EUR",
                              "centAmount": 3970,
                              "fractionDigits": 2
                            },
                            "taxPortions": [
                              {
                                "rate": 0.19,
                                "amount": {
                                  "type": "centPrecision",
                                  "currencyCode": "EUR",
                                  "centAmount": 634,
                                  "fractionDigits": 2
                                },
                                "name": "19% MwSt"
                              }
                            ]
                          },
                          "version": 3
                        }
                      },
                      "type": "OrderEditApplied"
                    }
                  ],
                  "type": "PreviewSuccess"
                },
                "comment": "sample-comment"
              }
            },
            "schema": {
              "$ref": "#/definitions/OrderEdit"
            }
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "key": "order-edit-key",
                "resource": {
                  "typeId": "order",
                  "id": "ed454f4e-c43a-485f-a86f-046c691b1363"
                },
                "stagedActions": [
                  {
                    "action": "setCustomerEmail",
                    "email": "user@localhost"
                  }
                ],
                "comment": "sample-comment"
              },
              "$ref": "#/definitions/OrderEditDraft"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_order_edits:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-updateable": "OrderEdit",
      "x-annotation-deleteable": "OrderEdit",
      "x-annotation-createable": "OrderEditDraft"
    },
    "/{projectKey}/orders/edits/key={key}": {
      "post": {
        "description": "Update OrderEdit by key",
        "operationId": "Update OrderEdit by key",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "version": 7,
                "actions": [
                  {
                    "action": "setKey",
                    "key": "another-key"
                  },
                  {
                    "action": "addStagedAction",
                    "stagedAction": {
                      "action": "setCountry",
                      "country": "ES"
                    }
                  }
                ]
              },
              "$ref": "#/definitions/OrderEditUpdate"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_order_edits:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Get OrderEdit by key",
        "operationId": "Get OrderEdit by key",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_order_edits:{projectKey}"
            ]
          }
        ]
      },
      "delete": {
        "description": "Delete OrderEdit by key",
        "operationId": "Delete OrderEdit by key",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_order_edits:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "key",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-methodName": "withKey"
    },
    "/{projectKey}/orders/edits/{ID}": {
      "post": {
        "description": "Update OrderEdit by ID",
        "operationId": "Update OrderEdit by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "version": 7,
                "actions": [
                  {
                    "action": "setKey",
                    "key": "another-key"
                  },
                  {
                    "action": "addStagedAction",
                    "stagedAction": {
                      "action": "setCountry",
                      "country": "ES"
                    }
                  }
                ]
              },
              "$ref": "#/definitions/OrderEditUpdate"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_order_edits:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Get OrderEdit by ID",
        "operationId": "Get OrderEdit by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_order_edits:{projectKey}"
            ]
          }
        ]
      },
      "delete": {
        "description": "Delete OrderEdit by ID",
        "operationId": "Delete OrderEdit by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_order_edits:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "ID",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-methodName": "withId"
    },
    "/{projectKey}/orders/edits/{ID}/apply": {
      "post": {
        "operationId": "Apply order edit",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/OrderEditApply"
            },
            "in": "body",
            "name": "body",
            "required": true
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_order_edits:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "ID",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ]
    },
    "/{projectKey}/orders/import": {
      "post": {
        "description": "Create an Order by Import",
        "operationId": "Create an Order by Import",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "201": {
            "description": "",
            "examples": {
              "application/json": {
                "type": "Order",
                "id": "92f5a867-bf19-47ab-982c-6720a03a3921",
                "version": 1,
                "createdAt": "2017-01-04T19:54:49.797Z",
                "lastModifiedAt": "2017-01-04T19:54:49.797Z",
                "totalPrice": {
                  "type": "centPrecision",
                  "fractionDigits": 2,
                  "currencyCode": "EUR",
                  "centAmount": 1000
                },
                "orderState": "Open",
                "syncInfo": [],
                "returnInfo": [],
                "refusedGifts": [],
                "taxMode": "External",
                "inventoryMode": "None",
                "taxRoundingMode": "HalfEven",
                "lineItems": [
                  {
                    "id": "7297c742-d8b0-484b-aadc-1d0ba1869dc9",
                    "productId": "c5c75935-595a-4cc3-a80e-24e9a9c55094",
                    "name": {
                      "en": "MyProduct"
                    },
                    "productType": {
                      "typeId": "product-type",
                      "id": "a5c7e173-9754-4f02-9b18-a600896ae0e1",
                      "version": 21
                    },
                    "productSlug": {
                      "de": "neues-produkt-slug-1234678",
                      "en": "new-product-slug-12345678"
                    },
                    "variant": {
                      "id": 1,
                      "sku": "some-sku-123",
                      "prices": [
                        {
                          "value": {
                            "type": "centPrecision",
                            "fractionDigits": 2,
                            "currencyCode": "EUR",
                            "centAmount": 1000
                          },
                          "id": "6d36dc85-6131-495d-9f20-d00f411d4124"
                        }
                      ],
                      "images": [],
                      "attributes": [
                        {
                          "name": "text",
                          "value": "attribute-value"
                        },
                        {
                          "name": "enum",
                          "value": {
                            "key": "test",
                            "label": "test"
                          }
                        }
                      ],
                      "assets": []
                    },
                    "price": {
                      "id": "6d36dc85-6131-495d-9f20-d00f411d4124",
                      "value": {
                        "type": "centPrecision",
                        "fractionDigits": 2,
                        "currencyCode": "EUR",
                        "centAmount": 1000
                      }
                    },
                    "quantity": 1,
                    "discountedPricePerQuantity": [],
                    "taxRate": {
                      "name": "Bla",
                      "amount": 0.1,
                      "includedInPrice": false,
                      "country": "DE",
                      "subRates": []
                    },
                    "state": [
                      {
                        "quantity": 1,
                        "state": {
                          "typeId": "state",
                          "id": "7c2e2694-aefe-43d7-888e-6a99514caaca"
                        }
                      }
                    ],
                    "priceMode": "Platform",
                    "lineItemMode": "Standard",
                    "totalPrice": {
                      "type": "centPrecision",
                      "fractionDigits": 2,
                      "currencyCode": "EUR",
                      "centAmount": 1000
                    },
                    "taxedPrice": {
                      "totalNet": {
                        "type": "centPrecision",
                        "fractionDigits": 2,
                        "currencyCode": "EUR",
                        "centAmount": 1000
                      },
                      "totalGross": {
                        "type": "centPrecision",
                        "fractionDigits": 2,
                        "currencyCode": "EUR",
                        "centAmount": 1100
                      }
                    }
                  }
                ],
                "customLineItems": [],
                "discountCodes": [],
                "lastMessageSequenceNumber": 1,
                "origin": "Customer"
              }
            },
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "orderNumber": "100000001",
                "totalPrice": {
                  "centAmount": 1000,
                  "currencyCode": "EUR"
                }
              },
              "$ref": "#/definitions/OrderImportDraft"
            },
            "in": "body",
            "name": "body",
            "required": true
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_orders:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-methodName": "importOrder"
    },
    "/{projectKey}/products": {
      "get": {
        "description": "You can use the query endpoint to get the full representations of products.\nREMARK: We suggest to use the performance optimized search endpoint which has a bunch functionalities,\nthe query API lacks like sorting on custom attributes, etc.\n",
        "operationId": "Query products",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "description": "A query endpoint that supports sorting does so through the sort query parameter. The provided value must be\na valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on\nthe specific query endpoints.\n\nHere are some examples of sort expressions:\n\n    name desc\n    dog.age asc\n\nIf multiple sort expressions are specified via multiple sort parameters, they are combined into a composed\nsort where the results are first sorted by the first expression, followed by equal values being sorted\naccording to the second expression, and so on.\n\nNote: The sorting is case sensitive.\n",
            "type": "string",
            "in": "query",
            "name": "sort"
          },
          {
            "description": "If queries support ad-hoc filtering of resources through flexible predicates, they do so via the where query\nparameter that accepts a single (possibly compound) predicate to determine whether a specific resource\nrepresentation should be included in the result.\n\nThe structure of predicates and the names of the fields follow the structure and naming of the fields in the\ndocumented response representation of the query results.\n\nExamples of predicates:\n\n    // Compare a field's value to a given value\n    name = \"Peter\"\n    age < 42\n    age > 42\n    age <= 42\n    age >= 42\n    age <> 42\n\n    // Combine any two conditional expressions in a logical conjunction / disjunction\n    name = \"Peter\" and age < 42\n    name = \"Peter\" or age < 42\n\n    // Negate any other conditional expression\n    not (name = \"Peter\" and age < 42)\n\n    // Check whether a field's value is or is not contained in\n    // a specified set of values.\n    age in (42, 43, 44)\n    age not in (42, 43, 44)\n\n    // Check whether an array contains all or any of a set of values\n    tags contains all (\"a\", \"b\", \"c\")\n    tags contains any (\"a\", \"b\", \"c\")\n\n    // Check whether an array is empty\n    tags is empty\n\n    // Check whether a field exists & has a non-null value\n    name is defined\n    name is not defined\n\n    // Descend into nested objects\n    dog(age < 7 and name = \"Beethoven\")\n\n    // Descend into nested arrays of objects\n    cities(zip > 10000 and zip < 20000)\n\nA query endpoint usually restricts predicates to only be allowed on a specified subset of a resource\nrepresentation's fields. The documentation of the endpoint will therefore list fields that can be used\nfor constructing predicates.\n\nIf multiple predicates are specified via multiple where query parameters, the individual predicates are\ncombined in a logical conjunction, just as if they had been specified in a single where query parameter\nand combined with and.\n\nNote: The encoding of the predicates is UTF-8 and the predicate must be URL-encoded in the HTTP request.\n",
            "type": "string",
            "in": "query",
            "name": "where"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCurrency"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCountry"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCustomerGroup"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceChannel"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:localeProjection"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:storeProjection"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          },
          {
            "$ref": "#/parameters/trait:paging:limit"
          },
          {
            "$ref": "#/parameters/trait:paging:offset"
          },
          {
            "$ref": "#/parameters/trait:paging:withTotal"
          },
          {
            "$ref": "#/parameters/trait:query:/^var[.][a-zA-Z0-9]+$/"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_products:{projectKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "To create a new product, send a representation that is going to become the initial staged representation\nof the new product in the master catalog. If price selection query parameters are provided,\nthe selected prices will be added to the response.\n",
        "operationId": "Create Product",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "201": {
            "description": "",
            "examples": {
              "application/json": {
                "id": "e7ba4c75-b1bb-483d-94d8-2c4a10f78472",
                "version": 2,
                "masterData": {
                  "current": {
                    "categories": [
                      {
                        "id": "cf6d790a-f027-4f46-9a2b-4bc9a31066fb",
                        "typeId": "category"
                      }
                    ],
                    "description": {
                      "en": "Sample description"
                    },
                    "masterVariant": {
                      "attributes": [],
                      "id": 1,
                      "images": [
                        {
                          "dimensions": {
                            "h": 1400,
                            "w": 1400
                          },
                          "url": "https://commercetools.com/cli/data/253245821_1.jpg"
                        }
                      ],
                      "prices": [
                        {
                          "value": {
                            "type": "centPrecision",
                            "fractionDigits": 2,
                            "centAmount": 10000,
                            "currencyCode": "EUR"
                          },
                          "id": "753472a3-ddff-4e0f-a93b-2eb29c90ba54"
                        }
                      ],
                      "sku": "sku_MB_PREMIUM_TECH_T_variant1_1369226795424"
                    },
                    "name": {
                      "en": "MB PREMIUM TECH T"
                    },
                    "slug": {
                      "en": "mb-premium-tech-t1369226795424"
                    },
                    "variants": [],
                    "searchKeywords": {}
                  },
                  "hasStagedChanges": false,
                  "published": true,
                  "staged": {
                    "categories": [
                      {
                        "id": "cf6d790a-f027-4f46-9a2b-4bc9a31066fb",
                        "typeId": "category"
                      }
                    ],
                    "description": {
                      "en": "Sample description"
                    },
                    "masterVariant": {
                      "attributes": [],
                      "id": 1,
                      "images": [
                        {
                          "dimensions": {
                            "h": 1400,
                            "w": 1400
                          },
                          "url": "https://commercetools.com/cli/data/253245821_1.jpg"
                        }
                      ],
                      "prices": [
                        {
                          "value": {
                            "type": "centPrecision",
                            "fractionDigits": 2,
                            "centAmount": 10000,
                            "currencyCode": "EUR"
                          },
                          "id": "753472a3-ddff-4e0f-a93b-2eb29c90ba54"
                        }
                      ],
                      "sku": "sku_MB_PREMIUM_TECH_T_variant1_1369226795424"
                    },
                    "name": {
                      "en": "MB PREMIUM TECH T"
                    },
                    "slug": {
                      "en": "mb-premium-tech-t1369226795424"
                    },
                    "variants": [],
                    "searchKeywords": {}
                  }
                },
                "productType": {
                  "id": "24f510c3-f334-4099-94e2-d6224a8eb919",
                  "typeId": "product-type"
                },
                "taxCategory": {
                  "id": "f1e10e3a-45eb-49d8-ad0b-fdf984202f59",
                  "typeId": "tax-category"
                },
                "createdAt": "1970-01-01T00:00:00.001Z",
                "lastModifiedAt": "1970-01-01T00:00:00.001Z"
              }
            },
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "productType": {
                  "id": "24f510c3-f334-4099-94e2-d6224a8eb919",
                  "typeId": "product-type"
                },
                "categories": [
                  {
                    "typeId": "category",
                    "id": "24f510c3-f334-4099-94e2-d6224a8eb919"
                  }
                ],
                "name": {
                  "en": "Some Product"
                },
                "slug": {
                  "en": "product_slug_<random-uuid>"
                },
                "masterVariant": {
                  "sku": "SKU-1",
                  "prices": [
                    {
                      "value": {
                        "currencyCode": "EUR",
                        "centAmount": 4200
                      }
                    }
                  ],
                  "images": [
                    {
                      "url": "http://my.custom.cdn.net/master.png",
                      "label": "Master Image",
                      "dimensions": {
                        "w": 303,
                        "h": 197
                      }
                    }
                  ]
                },
                "variants": [
                  {
                    "images": [
                      {
                        "url": "http://my.custom.cdn.net/variant.png",
                        "label": "Variant Image",
                        "dimensions": {
                          "w": 303,
                          "h": 197
                        }
                      }
                    ]
                  }
                ]
              },
              "$ref": "#/definitions/ProductDraft"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCurrency"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCountry"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCustomerGroup"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceChannel"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:localeProjection"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:storeProjection"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-updateable": "Product",
      "x-annotation-deleteable": "Product",
      "x-annotation-createable": "ProductDraft"
    },
    "/{projectKey}/products/key={key}": {
      "post": {
        "description": "Update Product by key",
        "operationId": "Update Product by key",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "version": 2,
                "actions": [
                  {
                    "action": "setDescription",
                    "description": {
                      "en": "The best product ever!"
                    }
                  }
                ]
              },
              "$ref": "#/definitions/ProductUpdate"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCurrency"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCountry"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCustomerGroup"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceChannel"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:localeProjection"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:storeProjection"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Gets the full representation of a product by Key.",
        "operationId": "Get Product by key",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCurrency"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCountry"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCustomerGroup"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceChannel"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:localeProjection"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:storeProjection"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_products:{projectKey}"
            ]
          }
        ]
      },
      "delete": {
        "description": "Delete Product by key",
        "operationId": "Delete Product by key",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCurrency"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCountry"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCustomerGroup"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceChannel"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:localeProjection"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:storeProjection"
          },
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "key",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-methodName": "withKey"
    },
    "/{projectKey}/products/{ID}": {
      "post": {
        "description": "Update Product by ID",
        "operationId": "Update Product by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "version": 2,
                "actions": [
                  {
                    "action": "setDescription",
                    "description": {
                      "en": "The best product ever!"
                    }
                  }
                ]
              },
              "$ref": "#/definitions/ProductUpdate"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCurrency"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCountry"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCustomerGroup"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceChannel"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:localeProjection"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:storeProjection"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Gets the full representation of a product by ID.",
        "operationId": "Get Product by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCurrency"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCountry"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCustomerGroup"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceChannel"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:localeProjection"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:storeProjection"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_products:{projectKey}"
            ]
          }
        ]
      },
      "delete": {
        "description": "Delete Product by ID",
        "operationId": "Delete Product by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCurrency"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCountry"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCustomerGroup"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceChannel"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:localeProjection"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:storeProjection"
          },
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "ID",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-methodName": "withId"
    },
    "/{projectKey}/products/{ID}/images": {
      "post": {
        "description": "Uploads a binary image file to a given product variant. The supported image formats are JPEG, PNG and GIF.\n",
        "operationId": "Upload a product image",
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "id": "e7ba4c75-b1bb-483d-94d8-2c4a10f78472",
                "version": 2,
                "masterData": {
                  "current": {
                    "categories": [
                      {
                        "id": "cf6d790a-f027-4f46-9a2b-4bc9a31066fb",
                        "typeId": "category"
                      }
                    ],
                    "description": {
                      "en": "Sample description"
                    },
                    "masterVariant": {
                      "attributes": [],
                      "id": 1,
                      "images": [
                        {
                          "dimensions": {
                            "h": 1400,
                            "w": 1400
                          },
                          "url": "https://commercetools.com/cli/data/253245821_1.jpg"
                        }
                      ],
                      "prices": [
                        {
                          "value": {
                            "type": "centPrecision",
                            "fractionDigits": 2,
                            "centAmount": 10000,
                            "currencyCode": "EUR"
                          },
                          "id": "753472a3-ddff-4e0f-a93b-2eb29c90ba54"
                        }
                      ],
                      "sku": "sku_MB_PREMIUM_TECH_T_variant1_1369226795424"
                    },
                    "name": {
                      "en": "MB PREMIUM TECH T"
                    },
                    "slug": {
                      "en": "mb-premium-tech-t1369226795424"
                    },
                    "variants": [],
                    "searchKeywords": {}
                  },
                  "hasStagedChanges": false,
                  "published": true,
                  "staged": {
                    "categories": [
                      {
                        "id": "cf6d790a-f027-4f46-9a2b-4bc9a31066fb",
                        "typeId": "category"
                      }
                    ],
                    "description": {
                      "en": "Sample description"
                    },
                    "masterVariant": {
                      "attributes": [],
                      "id": 1,
                      "images": [
                        {
                          "dimensions": {
                            "h": 1400,
                            "w": 1400
                          },
                          "url": "https://commercetools.com/cli/data/253245821_1.jpg"
                        }
                      ],
                      "prices": [
                        {
                          "value": {
                            "type": "centPrecision",
                            "fractionDigits": 2,
                            "centAmount": 10000,
                            "currencyCode": "EUR"
                          },
                          "id": "753472a3-ddff-4e0f-a93b-2eb29c90ba54"
                        }
                      ],
                      "sku": "sku_MB_PREMIUM_TECH_T_variant1_1369226795424"
                    },
                    "name": {
                      "en": "MB PREMIUM TECH T"
                    },
                    "slug": {
                      "en": "mb-premium-tech-t1369226795424"
                    },
                    "variants": [],
                    "searchKeywords": {}
                  }
                },
                "productType": {
                  "id": "24f510c3-f334-4099-94e2-d6224a8eb919",
                  "typeId": "product-type"
                },
                "taxCategory": {
                  "id": "f1e10e3a-45eb-49d8-ad0b-fdf984202f59",
                  "typeId": "tax-category"
                },
                "createdAt": "1970-01-01T00:00:00.001Z",
                "lastModifiedAt": "1970-01-01T00:00:00.001Z"
              }
            },
            "schema": {
              "$ref": "#/definitions/Product"
            }
          }
        },
        "parameters": [
          {
            "enum": [
              "image/jpeg",
              "image/png",
              "image/gif"
            ],
            "type": "string",
            "in": "header",
            "name": "Content-Type",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "type": "string",
            "in": "query",
            "name": "filename"
          },
          {
            "type": "number",
            "in": "query",
            "name": "variant"
          },
          {
            "type": "string",
            "in": "query",
            "name": "sku"
          },
          {
            "type": "boolean",
            "in": "query",
            "name": "staged"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "ID",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ]
    },
    "/{projectKey}/payments": {
      "get": {
        "description": "Query payments",
        "operationId": "Query payments",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "description": "A query endpoint that supports sorting does so through the sort query parameter. The provided value must be\na valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on\nthe specific query endpoints.\n\nHere are some examples of sort expressions:\n\n    name desc\n    dog.age asc\n\nIf multiple sort expressions are specified via multiple sort parameters, they are combined into a composed\nsort where the results are first sorted by the first expression, followed by equal values being sorted\naccording to the second expression, and so on.\n\nNote: The sorting is case sensitive.\n",
            "type": "string",
            "in": "query",
            "name": "sort"
          },
          {
            "description": "If queries support ad-hoc filtering of resources through flexible predicates, they do so via the where query\nparameter that accepts a single (possibly compound) predicate to determine whether a specific resource\nrepresentation should be included in the result.\n\nThe structure of predicates and the names of the fields follow the structure and naming of the fields in the\ndocumented response representation of the query results.\n\nExamples of predicates:\n\n    // Compare a field's value to a given value\n    name = \"Peter\"\n    age < 42\n    age > 42\n    age <= 42\n    age >= 42\n    age <> 42\n\n    // Combine any two conditional expressions in a logical conjunction / disjunction\n    name = \"Peter\" and age < 42\n    name = \"Peter\" or age < 42\n\n    // Negate any other conditional expression\n    not (name = \"Peter\" and age < 42)\n\n    // Check whether a field's value is or is not contained in\n    // a specified set of values.\n    age in (42, 43, 44)\n    age not in (42, 43, 44)\n\n    // Check whether an array contains all or any of a set of values\n    tags contains all (\"a\", \"b\", \"c\")\n    tags contains any (\"a\", \"b\", \"c\")\n\n    // Check whether an array is empty\n    tags is empty\n\n    // Check whether a field exists & has a non-null value\n    name is defined\n    name is not defined\n\n    // Descend into nested objects\n    dog(age < 7 and name = \"Beethoven\")\n\n    // Descend into nested arrays of objects\n    cities(zip > 10000 and zip < 20000)\n\nA query endpoint usually restricts predicates to only be allowed on a specified subset of a resource\nrepresentation's fields. The documentation of the endpoint will therefore list fields that can be used\nfor constructing predicates.\n\nIf multiple predicates are specified via multiple where query parameters, the individual predicates are\ncombined in a logical conjunction, just as if they had been specified in a single where query parameter\nand combined with and.\n\nNote: The encoding of the predicates is UTF-8 and the predicate must be URL-encoded in the HTTP request.\n",
            "type": "string",
            "in": "query",
            "name": "where"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          },
          {
            "$ref": "#/parameters/trait:paging:limit"
          },
          {
            "$ref": "#/parameters/trait:paging:offset"
          },
          {
            "$ref": "#/parameters/trait:paging:withTotal"
          },
          {
            "$ref": "#/parameters/trait:query:/^var[.][a-zA-Z0-9]+$/"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_payments:{projectKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "To create a payment object a payment draft object has to be given with the request.",
        "operationId": "Create Payment",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "201": {
            "description": "",
            "examples": {
              "application/json": {
                "id": "776f9240-09e1-4416-a34f-32fa80f0333f",
                "version": 1,
                "externalId": "123456",
                "interfaceId": "789011",
                "amountPlanned": {
                  "type": "centPrecision",
                  "fractionDigits": 2,
                  "currencyCode": "USD",
                  "centAmount": 1000
                },
                "paymentMethodInfo": {
                  "paymentInterface": "STRIPE",
                  "method": "CREDIT_CARD",
                  "name": {
                    "en": "Credit Card"
                  }
                },
                "paymentStatus": {},
                "transactions": [
                  {
                    "id": "14748fe6-7f77-456a-96c8-913b1e4bbc9a",
                    "timestamp": "2015-10-20T08:54:24.000Z",
                    "type": "Charge",
                    "amount": {
                      "type": "centPrecision",
                      "fractionDigits": 2,
                      "currencyCode": "USD",
                      "centAmount": 1000
                    },
                    "state": "Pending"
                  }
                ],
                "interfaceInteractions": [],
                "createdAt": "2015-10-20T08:54:11.480Z",
                "lastModifiedAt": "2015-10-20T08:54:11.480Z",
                "lastMessageSequenceNumber": 1
              }
            },
            "schema": {
              "$ref": "#/definitions/Payment"
            }
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "externalId": "123456",
                "interfaceId": "789011",
                "amountPlanned": {
                  "currencyCode": "USD",
                  "centAmount": 1000
                },
                "paymentMethodInfo": {
                  "paymentInterface": "STRIPE",
                  "method": "CREDIT_CARD",
                  "name": {
                    "en": "Credit Card"
                  }
                },
                "transactions": [
                  {
                    "timestamp": "2015-10-20T08:54:24.000Z",
                    "type": "Charge",
                    "amount": {
                      "currencyCode": "USD",
                      "centAmount": 1000
                    },
                    "state": "Pending"
                  }
                ]
              },
              "$ref": "#/definitions/PaymentDraft"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_payments:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-updateable": "Payment",
      "x-annotation-deleteable": "Payment",
      "x-annotation-createable": "PaymentDraft"
    },
    "/{projectKey}/payments/key={key}": {
      "post": {
        "description": "Update Payment by key",
        "operationId": "Update Payment by key",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "version": 1,
                "actions": [
                  {
                    "action": "setInterfaceId",
                    "interfaceId": "12334567890123456"
                  }
                ]
              },
              "$ref": "#/definitions/PaymentUpdate"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_payments:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Get Payment by key",
        "operationId": "Get Payment by key",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_payments:{projectKey}"
            ]
          }
        ]
      },
      "delete": {
        "description": "Delete Payment by key",
        "operationId": "Delete Payment by key",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:dataErasure:dataErasure"
          },
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_payments:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "key",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-methodName": "withKey"
    },
    "/{projectKey}/payments/{ID}": {
      "post": {
        "description": "Update Payment by ID",
        "operationId": "Update Payment by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "version": 1,
                "actions": [
                  {
                    "action": "setInterfaceId",
                    "interfaceId": "12334567890123456"
                  }
                ]
              },
              "$ref": "#/definitions/PaymentUpdate"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_payments:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Get Payment by ID",
        "operationId": "Get Payment by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_payments:{projectKey}"
            ]
          }
        ]
      },
      "delete": {
        "description": "Delete Payment by ID",
        "operationId": "Delete Payment by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:dataErasure:dataErasure"
          },
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_payments:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "ID",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-methodName": "withId"
    },
    "/{projectKey}/product-discounts": {
      "get": {
        "description": "Query product-discounts",
        "operationId": "Query product-discounts",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "description": "A query endpoint that supports sorting does so through the sort query parameter. The provided value must be\na valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on\nthe specific query endpoints.\n\nHere are some examples of sort expressions:\n\n    name desc\n    dog.age asc\n\nIf multiple sort expressions are specified via multiple sort parameters, they are combined into a composed\nsort where the results are first sorted by the first expression, followed by equal values being sorted\naccording to the second expression, and so on.\n\nNote: The sorting is case sensitive.\n",
            "type": "string",
            "in": "query",
            "name": "sort"
          },
          {
            "description": "If queries support ad-hoc filtering of resources through flexible predicates, they do so via the where query\nparameter that accepts a single (possibly compound) predicate to determine whether a specific resource\nrepresentation should be included in the result.\n\nThe structure of predicates and the names of the fields follow the structure and naming of the fields in the\ndocumented response representation of the query results.\n\nExamples of predicates:\n\n    // Compare a field's value to a given value\n    name = \"Peter\"\n    age < 42\n    age > 42\n    age <= 42\n    age >= 42\n    age <> 42\n\n    // Combine any two conditional expressions in a logical conjunction / disjunction\n    name = \"Peter\" and age < 42\n    name = \"Peter\" or age < 42\n\n    // Negate any other conditional expression\n    not (name = \"Peter\" and age < 42)\n\n    // Check whether a field's value is or is not contained in\n    // a specified set of values.\n    age in (42, 43, 44)\n    age not in (42, 43, 44)\n\n    // Check whether an array contains all or any of a set of values\n    tags contains all (\"a\", \"b\", \"c\")\n    tags contains any (\"a\", \"b\", \"c\")\n\n    // Check whether an array is empty\n    tags is empty\n\n    // Check whether a field exists & has a non-null value\n    name is defined\n    name is not defined\n\n    // Descend into nested objects\n    dog(age < 7 and name = \"Beethoven\")\n\n    // Descend into nested arrays of objects\n    cities(zip > 10000 and zip < 20000)\n\nA query endpoint usually restricts predicates to only be allowed on a specified subset of a resource\nrepresentation's fields. The documentation of the endpoint will therefore list fields that can be used\nfor constructing predicates.\n\nIf multiple predicates are specified via multiple where query parameters, the individual predicates are\ncombined in a logical conjunction, just as if they had been specified in a single where query parameter\nand combined with and.\n\nNote: The encoding of the predicates is UTF-8 and the predicate must be URL-encoded in the HTTP request.\n",
            "type": "string",
            "in": "query",
            "name": "where"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          },
          {
            "$ref": "#/parameters/trait:paging:limit"
          },
          {
            "$ref": "#/parameters/trait:paging:offset"
          },
          {
            "$ref": "#/parameters/trait:paging:withTotal"
          },
          {
            "$ref": "#/parameters/trait:query:/^var[.][a-zA-Z0-9]+$/"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_products:{projectKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "Create ProductDiscount",
        "operationId": "Create ProductDiscount",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "201": {
            "description": "",
            "examples": {
              "application/json": {
                "id": "d7a204f9-7746-4857-b17e-71f1235a691a",
                "version": 2,
                "value": {
                  "type": "absolute",
                  "money": [
                    {
                      "type": "centPrecision",
                      "fractionDigits": 2,
                      "currencyCode": "EUR",
                      "centAmount": 100
                    }
                  ],
                  "id": "3544d4a3-1279-443c-8699-4220753bf6f5"
                },
                "predicate": "1=1",
                "name": {
                  "en": "test-discount1"
                },
                "description": {
                  "en": "test-discount1"
                },
                "isActive": false,
                "sortOrder": "0.9534",
                "references": [],
                "createdAt": "2016-02-24T09:44:57.858Z",
                "lastModifiedAt": "2016-02-24T09:44:57.939Z"
              }
            },
            "schema": {
              "$ref": "#/definitions/ProductDiscount"
            }
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "value": {
                  "type": "absolute",
                  "money": [
                    {
                      "currencyCode": "EUR",
                      "centAmount": 100
                    }
                  ]
                },
                "predicate": "1=1",
                "name": {
                  "en": "test-discount1"
                },
                "description": {
                  "en": "test-discount1"
                },
                "isActive": false,
                "sortOrder": "0.9534"
              },
              "$ref": "#/definitions/ProductDiscountDraft"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-updateable": "ProductDiscount",
      "x-annotation-deleteable": "ProductDiscount",
      "x-annotation-createable": "ProductDiscountDraft"
    },
    "/{projectKey}/product-discounts/key={key}": {
      "post": {
        "description": "Update ProductDiscount by key",
        "operationId": "Update ProductDiscount by key",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "version": 1,
                "actions": [
                  {
                    "action": "changeValue",
                    "value": {
                      "type": "absolute",
                      "money": [
                        {
                          "currencyCode": "EUR",
                          "centAmount": 100
                        }
                      ]
                    }
                  }
                ]
              },
              "$ref": "#/definitions/ProductDiscountUpdate"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Get ProductDiscount by key",
        "operationId": "Get ProductDiscount by key",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_products:{projectKey}"
            ]
          }
        ]
      },
      "delete": {
        "description": "Delete ProductDiscount by key",
        "operationId": "Delete ProductDiscount by key",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "key",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-methodName": "withKey"
    },
    "/{projectKey}/product-discounts/{ID}": {
      "post": {
        "description": "Update ProductDiscount by ID",
        "operationId": "Update ProductDiscount by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "version": 1,
                "actions": [
                  {
                    "action": "changeValue",
                    "value": {
                      "type": "absolute",
                      "money": [
                        {
                          "currencyCode": "EUR",
                          "centAmount": 100
                        }
                      ]
                    }
                  }
                ]
              },
              "$ref": "#/definitions/ProductDiscountUpdate"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Get ProductDiscount by ID",
        "operationId": "Get ProductDiscount by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_products:{projectKey}"
            ]
          }
        ]
      },
      "delete": {
        "description": "Delete ProductDiscount by ID",
        "operationId": "Delete ProductDiscount by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "ID",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-methodName": "withId"
    },
    "/{projectKey}/product-discounts/matching": {
      "post": {
        "operationId": "Get matching product discounts",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "productId": "123456",
                "variantId": 1,
                "staged": false,
                "price": {
                  "value": {
                    "type": "centPrecision",
                    "centAmount": 100,
                    "currencyCode": "EUR",
                    "fractionDigits": 2
                  },
                  "id": "2474c2c3-d424-49af-b90a-b71bc74cf51b"
                }
              },
              "$ref": "#/definitions/ProductDiscountMatchQuery"
            },
            "in": "body",
            "name": "body",
            "required": true
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_products:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ]
    },
    "/{projectKey}/product-types": {
      "get": {
        "description": "Query product-types",
        "operationId": "Query product-types",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "description": "A query endpoint that supports sorting does so through the sort query parameter. The provided value must be\na valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on\nthe specific query endpoints.\n\nHere are some examples of sort expressions:\n\n    name desc\n    dog.age asc\n\nIf multiple sort expressions are specified via multiple sort parameters, they are combined into a composed\nsort where the results are first sorted by the first expression, followed by equal values being sorted\naccording to the second expression, and so on.\n\nNote: The sorting is case sensitive.\n",
            "type": "string",
            "in": "query",
            "name": "sort"
          },
          {
            "description": "If queries support ad-hoc filtering of resources through flexible predicates, they do so via the where query\nparameter that accepts a single (possibly compound) predicate to determine whether a specific resource\nrepresentation should be included in the result.\n\nThe structure of predicates and the names of the fields follow the structure and naming of the fields in the\ndocumented response representation of the query results.\n\nExamples of predicates:\n\n    // Compare a field's value to a given value\n    name = \"Peter\"\n    age < 42\n    age > 42\n    age <= 42\n    age >= 42\n    age <> 42\n\n    // Combine any two conditional expressions in a logical conjunction / disjunction\n    name = \"Peter\" and age < 42\n    name = \"Peter\" or age < 42\n\n    // Negate any other conditional expression\n    not (name = \"Peter\" and age < 42)\n\n    // Check whether a field's value is or is not contained in\n    // a specified set of values.\n    age in (42, 43, 44)\n    age not in (42, 43, 44)\n\n    // Check whether an array contains all or any of a set of values\n    tags contains all (\"a\", \"b\", \"c\")\n    tags contains any (\"a\", \"b\", \"c\")\n\n    // Check whether an array is empty\n    tags is empty\n\n    // Check whether a field exists & has a non-null value\n    name is defined\n    name is not defined\n\n    // Descend into nested objects\n    dog(age < 7 and name = \"Beethoven\")\n\n    // Descend into nested arrays of objects\n    cities(zip > 10000 and zip < 20000)\n\nA query endpoint usually restricts predicates to only be allowed on a specified subset of a resource\nrepresentation's fields. The documentation of the endpoint will therefore list fields that can be used\nfor constructing predicates.\n\nIf multiple predicates are specified via multiple where query parameters, the individual predicates are\ncombined in a logical conjunction, just as if they had been specified in a single where query parameter\nand combined with and.\n\nNote: The encoding of the predicates is UTF-8 and the predicate must be URL-encoded in the HTTP request.\n",
            "type": "string",
            "in": "query",
            "name": "where"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          },
          {
            "$ref": "#/parameters/trait:paging:limit"
          },
          {
            "$ref": "#/parameters/trait:paging:offset"
          },
          {
            "$ref": "#/parameters/trait:paging:withTotal"
          },
          {
            "$ref": "#/parameters/trait:query:/^var[.][a-zA-Z0-9]+$/"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_products:{projectKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "Create ProductType",
        "operationId": "Create ProductType",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "201": {
            "description": "",
            "examples": {
              "application/json": {
                "id": "c2f93298-c967-44af-8c2a-d2220bf39eb2",
                "version": 1,
                "name": "test_product_type",
                "description": "Test product type.",
                "attributes": [
                  {
                    "type": {
                      "name": "text"
                    },
                    "isSearchable": false,
                    "inputHint": "SingleLine",
                    "name": "size",
                    "label": {
                      "en": "The right size is important."
                    },
                    "isRequired": false,
                    "attributeConstraint": "CombinationUnique"
                  }
                ],
                "createdAt": "1970-01-01T00:00:00.001Z",
                "lastModifiedAt": "1970-01-01T00:00:00.001Z"
              }
            },
            "schema": {
              "$ref": "#/definitions/ProductType"
            }
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "name": "test_product_type",
                "description": "Test product type.",
                "attributes": [
                  {
                    "type": {
                      "name": "text"
                    },
                    "isSearchable": false,
                    "inputHint": "SingleLine",
                    "name": "size",
                    "label": {
                      "en": "The right size is important."
                    },
                    "isRequired": false,
                    "attributeConstraint": "CombinationUnique"
                  }
                ]
              },
              "$ref": "#/definitions/ProductTypeDraft"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-updateable": "ProductType",
      "x-annotation-deleteable": "ProductType",
      "x-annotation-createable": "ProductTypeDraft"
    },
    "/{projectKey}/product-types/key={key}": {
      "post": {
        "description": "Update ProductType by key",
        "operationId": "Update ProductType by key",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "version": 3,
                "actions": [
                  {
                    "action": "changeName",
                    "name": "new-product-type-name"
                  }
                ]
              },
              "$ref": "#/definitions/ProductTypeUpdate"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Get ProductType by key",
        "operationId": "Get ProductType by key",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_products:{projectKey}"
            ]
          }
        ]
      },
      "delete": {
        "description": "Delete ProductType by key",
        "operationId": "Delete ProductType by key",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "key",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-methodName": "withKey"
    },
    "/{projectKey}/product-types/{ID}": {
      "post": {
        "description": "Update ProductType by ID",
        "operationId": "Update ProductType by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "version": 3,
                "actions": [
                  {
                    "action": "changeName",
                    "name": "new-product-type-name"
                  }
                ]
              },
              "$ref": "#/definitions/ProductTypeUpdate"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Get ProductType by ID",
        "operationId": "Get ProductType by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_products:{projectKey}"
            ]
          }
        ]
      },
      "delete": {
        "description": "Delete ProductType by ID",
        "operationId": "Delete ProductType by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "ID",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-methodName": "withId"
    },
    "/{projectKey}/shipping-methods": {
      "get": {
        "description": "Query shipping-methods",
        "operationId": "Query shipping-methods",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "description": "A query endpoint that supports sorting does so through the sort query parameter. The provided value must be\na valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on\nthe specific query endpoints.\n\nHere are some examples of sort expressions:\n\n    name desc\n    dog.age asc\n\nIf multiple sort expressions are specified via multiple sort parameters, they are combined into a composed\nsort where the results are first sorted by the first expression, followed by equal values being sorted\naccording to the second expression, and so on.\n\nNote: The sorting is case sensitive.\n",
            "type": "string",
            "in": "query",
            "name": "sort"
          },
          {
            "description": "If queries support ad-hoc filtering of resources through flexible predicates, they do so via the where query\nparameter that accepts a single (possibly compound) predicate to determine whether a specific resource\nrepresentation should be included in the result.\n\nThe structure of predicates and the names of the fields follow the structure and naming of the fields in the\ndocumented response representation of the query results.\n\nExamples of predicates:\n\n    // Compare a field's value to a given value\n    name = \"Peter\"\n    age < 42\n    age > 42\n    age <= 42\n    age >= 42\n    age <> 42\n\n    // Combine any two conditional expressions in a logical conjunction / disjunction\n    name = \"Peter\" and age < 42\n    name = \"Peter\" or age < 42\n\n    // Negate any other conditional expression\n    not (name = \"Peter\" and age < 42)\n\n    // Check whether a field's value is or is not contained in\n    // a specified set of values.\n    age in (42, 43, 44)\n    age not in (42, 43, 44)\n\n    // Check whether an array contains all or any of a set of values\n    tags contains all (\"a\", \"b\", \"c\")\n    tags contains any (\"a\", \"b\", \"c\")\n\n    // Check whether an array is empty\n    tags is empty\n\n    // Check whether a field exists & has a non-null value\n    name is defined\n    name is not defined\n\n    // Descend into nested objects\n    dog(age < 7 and name = \"Beethoven\")\n\n    // Descend into nested arrays of objects\n    cities(zip > 10000 and zip < 20000)\n\nA query endpoint usually restricts predicates to only be allowed on a specified subset of a resource\nrepresentation's fields. The documentation of the endpoint will therefore list fields that can be used\nfor constructing predicates.\n\nIf multiple predicates are specified via multiple where query parameters, the individual predicates are\ncombined in a logical conjunction, just as if they had been specified in a single where query parameter\nand combined with and.\n\nNote: The encoding of the predicates is UTF-8 and the predicate must be URL-encoded in the HTTP request.\n",
            "type": "string",
            "in": "query",
            "name": "where"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          },
          {
            "$ref": "#/parameters/trait:paging:limit"
          },
          {
            "$ref": "#/parameters/trait:paging:offset"
          },
          {
            "$ref": "#/parameters/trait:paging:withTotal"
          },
          {
            "$ref": "#/parameters/trait:query:/^var[.][a-zA-Z0-9]+$/"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_orders:{projectKey}",
              "view_shipping_methods:{projectKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "Create ShippingMethod",
        "operationId": "Create ShippingMethod",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "201": {
            "description": "",
            "examples": {
              "application/json": {
                "id": "eb8991df-2dcd-4e24-83fe-5df46ec04422",
                "version": 3,
                "name": "DHL",
                "description": "Standard delivery",
                "taxCategory": {
                  "typeId": "tax-category",
                  "id": "5a21f15b-34f8-4b7f-9407-d1eb82a73eba"
                },
                "zoneRates": [
                  {
                    "zone": {
                      "typeId": "zone",
                      "id": "5cb532be-c680-43ab-ba14-b664bb03dc35"
                    },
                    "shippingRates": [
                      {
                        "price": {
                          "type": "centPrecision",
                          "fractionDigits": 2,
                          "currencyCode": "EUR",
                          "centAmount": 570
                        },
                        "tiers": []
                      }
                    ]
                  },
                  {
                    "zone": {
                      "typeId": "zone",
                      "id": "ebe01381-82be-4e63-9993-d1eb8f8e588b"
                    },
                    "shippingRates": [
                      {
                        "price": {
                          "type": "centPrecision",
                          "fractionDigits": 2,
                          "currencyCode": "USD",
                          "centAmount": 990
                        },
                        "tiers": []
                      }
                    ]
                  }
                ],
                "isDefault": false,
                "createdAt": "2015-01-21T09:22:04.320Z",
                "lastModifiedAt": "2016-02-24T13:36:56.748Z"
              }
            },
            "schema": {
              "$ref": "#/definitions/ShippingMethod"
            }
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "name": "DHL",
                "description": "Standard delivery",
                "taxCategory": {
                  "typeId": "tax-category",
                  "id": "5a21f15b-34f8-4b7f-9407-d1eb82a73eba"
                },
                "zoneRates": [
                  {
                    "zone": {
                      "typeId": "zone",
                      "id": "5cb532be-c680-43ab-ba14-b664bb03dc35"
                    },
                    "shippingRates": [
                      {
                        "price": {
                          "currencyCode": "EUR",
                          "centAmount": 570
                        }
                      }
                    ]
                  },
                  {
                    "zone": {
                      "typeId": "zone",
                      "id": "ebe01381-82be-4e63-9993-d1eb8f8e588b"
                    },
                    "shippingRates": [
                      {
                        "price": {
                          "currencyCode": "USD",
                          "centAmount": 990
                        }
                      }
                    ]
                  }
                ],
                "isDefault": false
              },
              "$ref": "#/definitions/ShippingMethodDraft"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_orders:{projectKey}",
              "manage_shipping_methods:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-updateable": "ShippingMethod",
      "x-annotation-deleteable": "ShippingMethod",
      "x-annotation-createable": "ShippingMethodDraft"
    },
    "/{projectKey}/shipping-methods/key={key}": {
      "post": {
        "description": "Update ShippingMethod by key",
        "operationId": "Update ShippingMethod by key",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "version": 1,
                "actions": [
                  {
                    "action": "changeName",
                    "name": "New Name"
                  }
                ]
              },
              "$ref": "#/definitions/ShippingMethodUpdate"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_orders:{projectKey}",
              "manage_shipping_methods:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Get ShippingMethod by key",
        "operationId": "Get ShippingMethod by key",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_orders:{projectKey}",
              "view_shipping_methods:{projectKey}"
            ]
          }
        ]
      },
      "delete": {
        "description": "Delete ShippingMethod by key",
        "operationId": "Delete ShippingMethod by key",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_orders:{projectKey}",
              "manage_shipping_methods:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "key",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-methodName": "withKey"
    },
    "/{projectKey}/shipping-methods/{ID}": {
      "post": {
        "description": "Update ShippingMethod by ID",
        "operationId": "Update ShippingMethod by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "version": 1,
                "actions": [
                  {
                    "action": "changeName",
                    "name": "New Name"
                  }
                ]
              },
              "$ref": "#/definitions/ShippingMethodUpdate"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_orders:{projectKey}",
              "manage_shipping_methods:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Get ShippingMethod by ID",
        "operationId": "Get ShippingMethod by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_orders:{projectKey}",
              "view_shipping_methods:{projectKey}"
            ]
          }
        ]
      },
      "delete": {
        "description": "Delete ShippingMethod by ID",
        "operationId": "Delete ShippingMethod by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_orders:{projectKey}",
              "manage_shipping_methods:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "ID",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-methodName": "withId"
    },
    "/{projectKey}/shipping-methods/matching-cart": {
      "get": {
        "operationId": "Get ShippingMethods for a cart",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "type": "string",
            "in": "query",
            "name": "cartId",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_orders:{projectKey}",
              "view_shipping_methods:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ]
    },
    "/{projectKey}/shipping-methods/matching-orderedit": {
      "get": {
        "operationId": "Get ShippingMethods for an order edit",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "type": "string",
            "in": "query",
            "name": "orderEditId",
            "required": true
          },
          {
            "type": "string",
            "in": "query",
            "name": "country",
            "required": true
          },
          {
            "type": "string",
            "in": "query",
            "name": "state"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_orders:{projectKey}",
              "view_shipping_methods:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ]
    },
    "/{projectKey}/shipping-methods/matching-location": {
      "get": {
        "operationId": "Get ShippingMethods for a location",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "type": "string",
            "in": "query",
            "name": "country",
            "required": true
          },
          {
            "type": "string",
            "in": "query",
            "name": "state"
          },
          {
            "type": "string",
            "in": "query",
            "name": "currency"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_orders:{projectKey}",
              "view_shipping_methods:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ]
    },
    "/{projectKey}/reviews": {
      "get": {
        "description": "Query reviews",
        "operationId": "Query reviews",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "description": "A query endpoint that supports sorting does so through the sort query parameter. The provided value must be\na valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on\nthe specific query endpoints.\n\nHere are some examples of sort expressions:\n\n    name desc\n    dog.age asc\n\nIf multiple sort expressions are specified via multiple sort parameters, they are combined into a composed\nsort where the results are first sorted by the first expression, followed by equal values being sorted\naccording to the second expression, and so on.\n\nNote: The sorting is case sensitive.\n",
            "type": "string",
            "in": "query",
            "name": "sort"
          },
          {
            "description": "If queries support ad-hoc filtering of resources through flexible predicates, they do so via the where query\nparameter that accepts a single (possibly compound) predicate to determine whether a specific resource\nrepresentation should be included in the result.\n\nThe structure of predicates and the names of the fields follow the structure and naming of the fields in the\ndocumented response representation of the query results.\n\nExamples of predicates:\n\n    // Compare a field's value to a given value\n    name = \"Peter\"\n    age < 42\n    age > 42\n    age <= 42\n    age >= 42\n    age <> 42\n\n    // Combine any two conditional expressions in a logical conjunction / disjunction\n    name = \"Peter\" and age < 42\n    name = \"Peter\" or age < 42\n\n    // Negate any other conditional expression\n    not (name = \"Peter\" and age < 42)\n\n    // Check whether a field's value is or is not contained in\n    // a specified set of values.\n    age in (42, 43, 44)\n    age not in (42, 43, 44)\n\n    // Check whether an array contains all or any of a set of values\n    tags contains all (\"a\", \"b\", \"c\")\n    tags contains any (\"a\", \"b\", \"c\")\n\n    // Check whether an array is empty\n    tags is empty\n\n    // Check whether a field exists & has a non-null value\n    name is defined\n    name is not defined\n\n    // Descend into nested objects\n    dog(age < 7 and name = \"Beethoven\")\n\n    // Descend into nested arrays of objects\n    cities(zip > 10000 and zip < 20000)\n\nA query endpoint usually restricts predicates to only be allowed on a specified subset of a resource\nrepresentation's fields. The documentation of the endpoint will therefore list fields that can be used\nfor constructing predicates.\n\nIf multiple predicates are specified via multiple where query parameters, the individual predicates are\ncombined in a logical conjunction, just as if they had been specified in a single where query parameter\nand combined with and.\n\nNote: The encoding of the predicates is UTF-8 and the predicate must be URL-encoded in the HTTP request.\n",
            "type": "string",
            "in": "query",
            "name": "where"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          },
          {
            "$ref": "#/parameters/trait:paging:limit"
          },
          {
            "$ref": "#/parameters/trait:paging:offset"
          },
          {
            "$ref": "#/parameters/trait:paging:withTotal"
          },
          {
            "$ref": "#/parameters/trait:query:/^var[.][a-zA-Z0-9]+$/"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_products:{projectKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "Create Review",
        "operationId": "Create Review",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "201": {
            "description": "",
            "examples": {
              "application/json": {
                "id": "919d5ab5-bf99-4bda-a6fd-ab3ee8123456",
                "version": 1,
                "includedInStatistics": true,
                "authorName": "John Doe",
                "title": "Incredible",
                "text": "Best product ever",
                "rating": 5,
                "target": {
                  "typeId": "product",
                  "id": "8fddacac-6ef5-4e66-af6e-124452123456"
                },
                "customer": {
                  "typeId": "customer",
                  "id": "8a8b3e43-b9b0-4b30-8c27-58148123456"
                },
                "custom": {
                  "type": {
                    "typeId": "type",
                    "id": "3939dd9c-0884-4bfa-99c2-40b426123456"
                  },
                  "fields": {
                    "authorMail": "john.doe@example.com"
                  }
                },
                "createdAt": "2016-10-20T06:48:53.829Z",
                "lastModifiedAt": "2016-10-20T06:48:53.829Z",
                "lastMessageSequenceNumber": 1
              }
            },
            "schema": {
              "$ref": "#/definitions/Review"
            }
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "authorName": "John Doe",
                "title": "Incredible",
                "text": "Best product ever",
                "rating": 5,
                "target": {
                  "typeId": "product",
                  "id": "8fddacac-6ef5-4e66-af6e-124452123456"
                }
              },
              "$ref": "#/definitions/ReviewDraft"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-updateable": "Review",
      "x-annotation-deleteable": "Review",
      "x-annotation-createable": "ReviewDraft"
    },
    "/{projectKey}/reviews/key={key}": {
      "post": {
        "description": "Update Review by key",
        "operationId": "Update Review by key",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "version": 1,
                "actions": [
                  {
                    "action": "setAuthorName",
                    "authorName": "John Doe"
                  }
                ]
              },
              "$ref": "#/definitions/ReviewUpdate"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Get Review by key",
        "operationId": "Get Review by key",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_products:{projectKey}"
            ]
          }
        ]
      },
      "delete": {
        "description": "Delete Review by key",
        "operationId": "Delete Review by key",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:dataErasure:dataErasure"
          },
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "key",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-methodName": "withKey"
    },
    "/{projectKey}/reviews/{ID}": {
      "post": {
        "description": "Update Review by ID",
        "operationId": "Update Review by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "version": 1,
                "actions": [
                  {
                    "action": "setAuthorName",
                    "authorName": "John Doe"
                  }
                ]
              },
              "$ref": "#/definitions/ReviewUpdate"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Get Review by ID",
        "operationId": "Get Review by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_products:{projectKey}"
            ]
          }
        ]
      },
      "delete": {
        "description": "Delete Review by ID",
        "operationId": "Delete Review by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:dataErasure:dataErasure"
          },
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "ID",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-methodName": "withId"
    },
    "/{projectKey}/shopping-lists": {
      "get": {
        "description": "Query shopping-lists",
        "operationId": "Query shopping-lists",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "description": "A query endpoint that supports sorting does so through the sort query parameter. The provided value must be\na valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on\nthe specific query endpoints.\n\nHere are some examples of sort expressions:\n\n    name desc\n    dog.age asc\n\nIf multiple sort expressions are specified via multiple sort parameters, they are combined into a composed\nsort where the results are first sorted by the first expression, followed by equal values being sorted\naccording to the second expression, and so on.\n\nNote: The sorting is case sensitive.\n",
            "type": "string",
            "in": "query",
            "name": "sort"
          },
          {
            "description": "If queries support ad-hoc filtering of resources through flexible predicates, they do so via the where query\nparameter that accepts a single (possibly compound) predicate to determine whether a specific resource\nrepresentation should be included in the result.\n\nThe structure of predicates and the names of the fields follow the structure and naming of the fields in the\ndocumented response representation of the query results.\n\nExamples of predicates:\n\n    // Compare a field's value to a given value\n    name = \"Peter\"\n    age < 42\n    age > 42\n    age <= 42\n    age >= 42\n    age <> 42\n\n    // Combine any two conditional expressions in a logical conjunction / disjunction\n    name = \"Peter\" and age < 42\n    name = \"Peter\" or age < 42\n\n    // Negate any other conditional expression\n    not (name = \"Peter\" and age < 42)\n\n    // Check whether a field's value is or is not contained in\n    // a specified set of values.\n    age in (42, 43, 44)\n    age not in (42, 43, 44)\n\n    // Check whether an array contains all or any of a set of values\n    tags contains all (\"a\", \"b\", \"c\")\n    tags contains any (\"a\", \"b\", \"c\")\n\n    // Check whether an array is empty\n    tags is empty\n\n    // Check whether a field exists & has a non-null value\n    name is defined\n    name is not defined\n\n    // Descend into nested objects\n    dog(age < 7 and name = \"Beethoven\")\n\n    // Descend into nested arrays of objects\n    cities(zip > 10000 and zip < 20000)\n\nA query endpoint usually restricts predicates to only be allowed on a specified subset of a resource\nrepresentation's fields. The documentation of the endpoint will therefore list fields that can be used\nfor constructing predicates.\n\nIf multiple predicates are specified via multiple where query parameters, the individual predicates are\ncombined in a logical conjunction, just as if they had been specified in a single where query parameter\nand combined with and.\n\nNote: The encoding of the predicates is UTF-8 and the predicate must be URL-encoded in the HTTP request.\n",
            "type": "string",
            "in": "query",
            "name": "where"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          },
          {
            "$ref": "#/parameters/trait:paging:limit"
          },
          {
            "$ref": "#/parameters/trait:paging:offset"
          },
          {
            "$ref": "#/parameters/trait:paging:withTotal"
          },
          {
            "$ref": "#/parameters/trait:query:/^var[.][a-zA-Z0-9]+$/"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_shopping_lists:{projectKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "Create ShoppingList",
        "operationId": "Create ShoppingList",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "201": {
            "description": "",
            "examples": {
              "application/json": {
                "id": "9693f04b-5aec-467f-baa1-fc74da7d0c3d",
                "version": 1,
                "name": {
                  "en": "test"
                },
                "key": "test",
                "lineItems": [],
                "textLineItems": [],
                "createdAt": "2017-03-30T11:49:40.904Z",
                "lastModifiedAt": "2017-03-30T11:49:40.904Z"
              }
            },
            "schema": {
              "$ref": "#/definitions/ShoppingList"
            }
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "name": {
                  "en": "test"
                },
                "key": "test"
              },
              "$ref": "#/definitions/ShoppingListDraft"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_shopping_lists:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-updateable": "ShoppingList",
      "x-annotation-deleteable": "ShoppingList",
      "x-annotation-createable": "ShoppingListDraft"
    },
    "/{projectKey}/shopping-lists/key={key}": {
      "post": {
        "description": "Update a shopping list found by its Key.",
        "operationId": "Update ShoppingList by key",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "version": 1,
                "actions": [
                  {
                    "action": "changeName",
                    "name": {
                      "en": "New Name"
                    }
                  }
                ]
              },
              "$ref": "#/definitions/ShoppingListUpdate"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_shopping_lists:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Gets a shopping list by Key.",
        "operationId": "Get ShoppingList by key",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_shopping_lists:{projectKey}"
            ]
          }
        ]
      },
      "delete": {
        "description": "Delete ShoppingList by key",
        "operationId": "Delete ShoppingList by key",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:dataErasure:dataErasure"
          },
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_shopping_lists:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "key",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-methodName": "withKey"
    },
    "/{projectKey}/shopping-lists/{ID}": {
      "post": {
        "description": "Update ShoppingList by ID",
        "operationId": "Update ShoppingList by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "version": 1,
                "actions": [
                  {
                    "action": "changeName",
                    "name": {
                      "en": "New Name"
                    }
                  }
                ]
              },
              "$ref": "#/definitions/ShoppingListUpdate"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_shopping_lists:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Gets a shopping list by ID.",
        "operationId": "Get ShoppingList by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_shopping_lists:{projectKey}"
            ]
          }
        ]
      },
      "delete": {
        "description": "Delete ShoppingList by ID",
        "operationId": "Delete ShoppingList by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:dataErasure:dataErasure"
          },
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_shopping_lists:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "ID",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-methodName": "withId"
    },
    "/{projectKey}/states": {
      "get": {
        "description": "Query states",
        "operationId": "Query states",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "description": "A query endpoint that supports sorting does so through the sort query parameter. The provided value must be\na valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on\nthe specific query endpoints.\n\nHere are some examples of sort expressions:\n\n    name desc\n    dog.age asc\n\nIf multiple sort expressions are specified via multiple sort parameters, they are combined into a composed\nsort where the results are first sorted by the first expression, followed by equal values being sorted\naccording to the second expression, and so on.\n\nNote: The sorting is case sensitive.\n",
            "type": "string",
            "in": "query",
            "name": "sort"
          },
          {
            "description": "If queries support ad-hoc filtering of resources through flexible predicates, they do so via the where query\nparameter that accepts a single (possibly compound) predicate to determine whether a specific resource\nrepresentation should be included in the result.\n\nThe structure of predicates and the names of the fields follow the structure and naming of the fields in the\ndocumented response representation of the query results.\n\nExamples of predicates:\n\n    // Compare a field's value to a given value\n    name = \"Peter\"\n    age < 42\n    age > 42\n    age <= 42\n    age >= 42\n    age <> 42\n\n    // Combine any two conditional expressions in a logical conjunction / disjunction\n    name = \"Peter\" and age < 42\n    name = \"Peter\" or age < 42\n\n    // Negate any other conditional expression\n    not (name = \"Peter\" and age < 42)\n\n    // Check whether a field's value is or is not contained in\n    // a specified set of values.\n    age in (42, 43, 44)\n    age not in (42, 43, 44)\n\n    // Check whether an array contains all or any of a set of values\n    tags contains all (\"a\", \"b\", \"c\")\n    tags contains any (\"a\", \"b\", \"c\")\n\n    // Check whether an array is empty\n    tags is empty\n\n    // Check whether a field exists & has a non-null value\n    name is defined\n    name is not defined\n\n    // Descend into nested objects\n    dog(age < 7 and name = \"Beethoven\")\n\n    // Descend into nested arrays of objects\n    cities(zip > 10000 and zip < 20000)\n\nA query endpoint usually restricts predicates to only be allowed on a specified subset of a resource\nrepresentation's fields. The documentation of the endpoint will therefore list fields that can be used\nfor constructing predicates.\n\nIf multiple predicates are specified via multiple where query parameters, the individual predicates are\ncombined in a logical conjunction, just as if they had been specified in a single where query parameter\nand combined with and.\n\nNote: The encoding of the predicates is UTF-8 and the predicate must be URL-encoded in the HTTP request.\n",
            "type": "string",
            "in": "query",
            "name": "where"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          },
          {
            "$ref": "#/parameters/trait:paging:limit"
          },
          {
            "$ref": "#/parameters/trait:paging:offset"
          },
          {
            "$ref": "#/parameters/trait:paging:withTotal"
          },
          {
            "$ref": "#/parameters/trait:query:/^var[.][a-zA-Z0-9]+$/"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_orders:{projectKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "Create State",
        "operationId": "Create State",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "201": {
            "description": "",
            "examples": {
              "application/json": {
                "id": "7c2e2694-aefe-43d7-888e-6a99514caaca",
                "version": 1,
                "key": "Initial",
                "type": "LineItemState",
                "roles": [],
                "name": {
                  "en": "Initial"
                },
                "description": {
                  "en": "Initial is the first that (custom) line item gets after it's creation"
                },
                "builtIn": true,
                "initial": true,
                "createdAt": "2015-01-21T09:22:03.906Z",
                "lastModifiedAt": "2015-01-21T09:22:03.906Z"
              }
            },
            "schema": {
              "$ref": "#/definitions/State"
            }
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "key": "test-state",
                "type": "ProductState",
                "roles": [],
                "initial": true
              },
              "$ref": "#/definitions/StateDraft"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_orders:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-updateable": "State",
      "x-annotation-deleteable": "State",
      "x-annotation-createable": "StateDraft"
    },
    "/{projectKey}/states/{ID}": {
      "post": {
        "description": "Update State by ID",
        "operationId": "Update State by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "version": 1,
                "actions": [
                  {
                    "action": "setName",
                    "name": {
                      "en": "New Name"
                    }
                  }
                ]
              },
              "$ref": "#/definitions/StateUpdate"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_orders:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Get State by ID",
        "operationId": "Get State by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_orders:{projectKey}"
            ]
          }
        ]
      },
      "delete": {
        "description": "Delete State by ID",
        "operationId": "Delete State by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_orders:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "ID",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-methodName": "withId"
    },
    "/{projectKey}/subscriptions": {
      "get": {
        "description": "Query subscriptions",
        "operationId": "Query subscriptions",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "description": "A query endpoint that supports sorting does so through the sort query parameter. The provided value must be\na valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on\nthe specific query endpoints.\n\nHere are some examples of sort expressions:\n\n    name desc\n    dog.age asc\n\nIf multiple sort expressions are specified via multiple sort parameters, they are combined into a composed\nsort where the results are first sorted by the first expression, followed by equal values being sorted\naccording to the second expression, and so on.\n\nNote: The sorting is case sensitive.\n",
            "type": "string",
            "in": "query",
            "name": "sort"
          },
          {
            "description": "If queries support ad-hoc filtering of resources through flexible predicates, they do so via the where query\nparameter that accepts a single (possibly compound) predicate to determine whether a specific resource\nrepresentation should be included in the result.\n\nThe structure of predicates and the names of the fields follow the structure and naming of the fields in the\ndocumented response representation of the query results.\n\nExamples of predicates:\n\n    // Compare a field's value to a given value\n    name = \"Peter\"\n    age < 42\n    age > 42\n    age <= 42\n    age >= 42\n    age <> 42\n\n    // Combine any two conditional expressions in a logical conjunction / disjunction\n    name = \"Peter\" and age < 42\n    name = \"Peter\" or age < 42\n\n    // Negate any other conditional expression\n    not (name = \"Peter\" and age < 42)\n\n    // Check whether a field's value is or is not contained in\n    // a specified set of values.\n    age in (42, 43, 44)\n    age not in (42, 43, 44)\n\n    // Check whether an array contains all or any of a set of values\n    tags contains all (\"a\", \"b\", \"c\")\n    tags contains any (\"a\", \"b\", \"c\")\n\n    // Check whether an array is empty\n    tags is empty\n\n    // Check whether a field exists & has a non-null value\n    name is defined\n    name is not defined\n\n    // Descend into nested objects\n    dog(age < 7 and name = \"Beethoven\")\n\n    // Descend into nested arrays of objects\n    cities(zip > 10000 and zip < 20000)\n\nA query endpoint usually restricts predicates to only be allowed on a specified subset of a resource\nrepresentation's fields. The documentation of the endpoint will therefore list fields that can be used\nfor constructing predicates.\n\nIf multiple predicates are specified via multiple where query parameters, the individual predicates are\ncombined in a logical conjunction, just as if they had been specified in a single where query parameter\nand combined with and.\n\nNote: The encoding of the predicates is UTF-8 and the predicate must be URL-encoded in the HTTP request.\n",
            "type": "string",
            "in": "query",
            "name": "where"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          },
          {
            "$ref": "#/parameters/trait:paging:limit"
          },
          {
            "$ref": "#/parameters/trait:paging:offset"
          },
          {
            "$ref": "#/parameters/trait:paging:withTotal"
          },
          {
            "$ref": "#/parameters/trait:query:/^var[.][a-zA-Z0-9]+$/"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_subscriptions:{projectKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "The creation of a Subscription is eventually consistent, it may take up to a minute before it becomes fully active.\nIn order to test that the destination is correctly configured, a test message will be put into the queue.\nIf the message could not be delivered, the subscription will not be created.\nThe payload of the test message is a notification of type ResourceCreated for the resourceTypeId subscription.\nCurrently, a maximum of 25 subscriptions can be created per project.\n",
        "operationId": "Create Subscription",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "201": {
            "description": "",
            "examples": {
              "application/json": {
                "id": "8062243c-46fc-40b5-88a4-75e2216aef75",
                "version": 1,
                "destination": {
                  "type": "IronMQ",
                  "uri": "https://queue-uri"
                },
                "messages": [
                  {
                    "resourceTypeId": "product",
                    "types": []
                  }
                ],
                "changes": [],
                "createdAt": "2017-01-25T14:14:22.417Z",
                "key": "test-queue",
                "format": {
                  "type": "Platform"
                },
                "lastModifiedAt": "2017-01-25T14:14:22.417Z",
                "lastMessageSequenceNumber": 0,
                "status": "Healthy"
              }
            },
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "destination": {
                  "type": "IronMQ",
                  "uri": "https://queue-uri"
                },
                "messages": [
                  {
                    "resourceTypeId": "product",
                    "types": []
                  }
                ],
                "key": "test-queue"
              },
              "$ref": "#/definitions/SubscriptionDraft"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_subscriptions:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-updateable": "Subscription",
      "x-annotation-deleteable": "Subscription",
      "x-annotation-createable": "SubscriptionDraft"
    },
    "/{projectKey}/subscriptions/key={key}": {
      "post": {
        "description": "Update Subscription by key",
        "operationId": "Update Subscription by key",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "version": 1,
                "actions": [
                  {
                    "action": "setKey",
                    "key": "queue-key"
                  }
                ]
              },
              "$ref": "#/definitions/SubscriptionUpdate"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_subscriptions:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Retrieves the representation of a subscription by its key.",
        "operationId": "Get Subscription by key",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_subscriptions:{projectKey}"
            ]
          }
        ]
      },
      "delete": {
        "description": "Delete Subscription by key",
        "operationId": "Delete Subscription by key",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_subscriptions:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "key",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-methodName": "withKey"
    },
    "/{projectKey}/subscriptions/{ID}": {
      "post": {
        "description": "Update Subscription by ID",
        "operationId": "Update Subscription by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "version": 1,
                "actions": [
                  {
                    "action": "setKey",
                    "key": "queue-key"
                  }
                ]
              },
              "$ref": "#/definitions/SubscriptionUpdate"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_subscriptions:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Retrieves the representation of a subscription by its id.",
        "operationId": "Get Subscription by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_subscriptions:{projectKey}"
            ]
          }
        ]
      },
      "delete": {
        "description": "Delete Subscription by ID",
        "operationId": "Delete Subscription by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_subscriptions:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "ID",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-methodName": "withId"
    },
    "/{projectKey}/tax-categories": {
      "get": {
        "description": "Query tax-categories",
        "operationId": "Query tax-categories",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "description": "A query endpoint that supports sorting does so through the sort query parameter. The provided value must be\na valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on\nthe specific query endpoints.\n\nHere are some examples of sort expressions:\n\n    name desc\n    dog.age asc\n\nIf multiple sort expressions are specified via multiple sort parameters, they are combined into a composed\nsort where the results are first sorted by the first expression, followed by equal values being sorted\naccording to the second expression, and so on.\n\nNote: The sorting is case sensitive.\n",
            "type": "string",
            "in": "query",
            "name": "sort"
          },
          {
            "description": "If queries support ad-hoc filtering of resources through flexible predicates, they do so via the where query\nparameter that accepts a single (possibly compound) predicate to determine whether a specific resource\nrepresentation should be included in the result.\n\nThe structure of predicates and the names of the fields follow the structure and naming of the fields in the\ndocumented response representation of the query results.\n\nExamples of predicates:\n\n    // Compare a field's value to a given value\n    name = \"Peter\"\n    age < 42\n    age > 42\n    age <= 42\n    age >= 42\n    age <> 42\n\n    // Combine any two conditional expressions in a logical conjunction / disjunction\n    name = \"Peter\" and age < 42\n    name = \"Peter\" or age < 42\n\n    // Negate any other conditional expression\n    not (name = \"Peter\" and age < 42)\n\n    // Check whether a field's value is or is not contained in\n    // a specified set of values.\n    age in (42, 43, 44)\n    age not in (42, 43, 44)\n\n    // Check whether an array contains all or any of a set of values\n    tags contains all (\"a\", \"b\", \"c\")\n    tags contains any (\"a\", \"b\", \"c\")\n\n    // Check whether an array is empty\n    tags is empty\n\n    // Check whether a field exists & has a non-null value\n    name is defined\n    name is not defined\n\n    // Descend into nested objects\n    dog(age < 7 and name = \"Beethoven\")\n\n    // Descend into nested arrays of objects\n    cities(zip > 10000 and zip < 20000)\n\nA query endpoint usually restricts predicates to only be allowed on a specified subset of a resource\nrepresentation's fields. The documentation of the endpoint will therefore list fields that can be used\nfor constructing predicates.\n\nIf multiple predicates are specified via multiple where query parameters, the individual predicates are\ncombined in a logical conjunction, just as if they had been specified in a single where query parameter\nand combined with and.\n\nNote: The encoding of the predicates is UTF-8 and the predicate must be URL-encoded in the HTTP request.\n",
            "type": "string",
            "in": "query",
            "name": "where"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          },
          {
            "$ref": "#/parameters/trait:paging:limit"
          },
          {
            "$ref": "#/parameters/trait:paging:offset"
          },
          {
            "$ref": "#/parameters/trait:paging:withTotal"
          },
          {
            "$ref": "#/parameters/trait:query:/^var[.][a-zA-Z0-9]+$/"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_products:{projectKey}",
              "view_tax_categories:{projectKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "Create TaxCategory",
        "operationId": "Create TaxCategory",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "201": {
            "description": "",
            "examples": {
              "application/json": {
                "id": "c60f7377-2643-4e99-adb5-b2909657444d",
                "version": 1,
                "name": "test-tax-category",
                "rates": [
                  {
                    "name": "test-tax-category",
                    "amount": 0.2,
                    "includedInPrice": true,
                    "country": "DE",
                    "id": "vWTk7VjT",
                    "subRates": []
                  }
                ],
                "createdAt": "2016-02-24T15:33:40.811Z",
                "lastModifiedAt": "2016-02-24T15:33:40.811Z"
              }
            },
            "schema": {
              "$ref": "#/definitions/TaxCategory"
            }
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "name": "test-tax-category",
                "rates": [
                  {
                    "name": "test-tax-category",
                    "amount": 0.2,
                    "includedInPrice": true,
                    "country": "DE"
                  }
                ]
              },
              "$ref": "#/definitions/TaxCategoryDraft"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}",
              "manage_tax_categories:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-updateable": "TaxCategory",
      "x-annotation-deleteable": "TaxCategory",
      "x-annotation-createable": "TaxCategoryDraft"
    },
    "/{projectKey}/tax-categories/key={key}": {
      "post": {
        "description": "Update TaxCategory by key",
        "operationId": "Update TaxCategory by key",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "version": 1,
                "actions": [
                  {
                    "action": "changeName",
                    "name": "New Name"
                  }
                ]
              },
              "$ref": "#/definitions/TaxCategoryUpdate"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}",
              "manage_tax_categories:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Get TaxCategory by key",
        "operationId": "Get TaxCategory by key",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_products:{projectKey}",
              "view_tax_categories:{projectKey}"
            ]
          }
        ]
      },
      "delete": {
        "description": "Delete TaxCategory by key",
        "operationId": "Delete TaxCategory by key",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}",
              "manage_tax_categories:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "key",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-methodName": "withKey"
    },
    "/{projectKey}/tax-categories/{ID}": {
      "post": {
        "description": "Update TaxCategory by ID",
        "operationId": "Update TaxCategory by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "version": 1,
                "actions": [
                  {
                    "action": "changeName",
                    "name": "New Name"
                  }
                ]
              },
              "$ref": "#/definitions/TaxCategoryUpdate"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}",
              "manage_tax_categories:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Get TaxCategory by ID",
        "operationId": "Get TaxCategory by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_products:{projectKey}",
              "view_tax_categories:{projectKey}"
            ]
          }
        ]
      },
      "delete": {
        "description": "Delete TaxCategory by ID",
        "operationId": "Delete TaxCategory by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}",
              "manage_tax_categories:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "ID",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-methodName": "withId"
    },
    "/{projectKey}/types": {
      "get": {
        "description": "Query types",
        "operationId": "Query types",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "description": "A query endpoint that supports sorting does so through the sort query parameter. The provided value must be\na valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on\nthe specific query endpoints.\n\nHere are some examples of sort expressions:\n\n    name desc\n    dog.age asc\n\nIf multiple sort expressions are specified via multiple sort parameters, they are combined into a composed\nsort where the results are first sorted by the first expression, followed by equal values being sorted\naccording to the second expression, and so on.\n\nNote: The sorting is case sensitive.\n",
            "type": "string",
            "in": "query",
            "name": "sort"
          },
          {
            "description": "If queries support ad-hoc filtering of resources through flexible predicates, they do so via the where query\nparameter that accepts a single (possibly compound) predicate to determine whether a specific resource\nrepresentation should be included in the result.\n\nThe structure of predicates and the names of the fields follow the structure and naming of the fields in the\ndocumented response representation of the query results.\n\nExamples of predicates:\n\n    // Compare a field's value to a given value\n    name = \"Peter\"\n    age < 42\n    age > 42\n    age <= 42\n    age >= 42\n    age <> 42\n\n    // Combine any two conditional expressions in a logical conjunction / disjunction\n    name = \"Peter\" and age < 42\n    name = \"Peter\" or age < 42\n\n    // Negate any other conditional expression\n    not (name = \"Peter\" and age < 42)\n\n    // Check whether a field's value is or is not contained in\n    // a specified set of values.\n    age in (42, 43, 44)\n    age not in (42, 43, 44)\n\n    // Check whether an array contains all or any of a set of values\n    tags contains all (\"a\", \"b\", \"c\")\n    tags contains any (\"a\", \"b\", \"c\")\n\n    // Check whether an array is empty\n    tags is empty\n\n    // Check whether a field exists & has a non-null value\n    name is defined\n    name is not defined\n\n    // Descend into nested objects\n    dog(age < 7 and name = \"Beethoven\")\n\n    // Descend into nested arrays of objects\n    cities(zip > 10000 and zip < 20000)\n\nA query endpoint usually restricts predicates to only be allowed on a specified subset of a resource\nrepresentation's fields. The documentation of the endpoint will therefore list fields that can be used\nfor constructing predicates.\n\nIf multiple predicates are specified via multiple where query parameters, the individual predicates are\ncombined in a logical conjunction, just as if they had been specified in a single where query parameter\nand combined with and.\n\nNote: The encoding of the predicates is UTF-8 and the predicate must be URL-encoded in the HTTP request.\n",
            "type": "string",
            "in": "query",
            "name": "where"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          },
          {
            "$ref": "#/parameters/trait:paging:limit"
          },
          {
            "$ref": "#/parameters/trait:paging:offset"
          },
          {
            "$ref": "#/parameters/trait:paging:withTotal"
          },
          {
            "$ref": "#/parameters/trait:query:/^var[.][a-zA-Z0-9]+$/"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_types:{projectKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "Create Type",
        "operationId": "Create Type",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "201": {
            "description": "",
            "examples": {
              "application/json": {
                "id": "3ae9bcca-df23-443e-bd22-0c592f9694fa",
                "version": 1,
                "key": "lineitemtype",
                "name": {
                  "en": "lineitem"
                },
                "description": {
                  "en": "description"
                },
                "resourceTypeIds": [
                  "line-item"
                ],
                "fieldDefinitions": [
                  {
                    "name": "offer_name",
                    "label": {
                      "en": "offer_name"
                    },
                    "required": false,
                    "type": {
                      "name": "String"
                    },
                    "inputHint": "SingleLine"
                  }
                ],
                "createdAt": "2015-10-07T06:56:19.217Z",
                "lastModifiedAt": "2015-10-07T06:56:19.217Z"
              }
            },
            "schema": {
              "$ref": "#/definitions/Type"
            }
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "key": "lineitemtype",
                "name": {
                  "en": "lineitem"
                },
                "description": {
                  "en": "description"
                },
                "resourceTypeIds": [
                  "line-item"
                ],
                "fieldDefinitions": [
                  {
                    "name": "offer_name",
                    "label": {
                      "en": "offer_name"
                    },
                    "required": false,
                    "type": {
                      "name": "String"
                    },
                    "inputHint": "SingleLine"
                  }
                ]
              },
              "$ref": "#/definitions/TypeDraft"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_types:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-updateable": "Type",
      "x-annotation-deleteable": "Type",
      "x-annotation-createable": "TypeDraft"
    },
    "/{projectKey}/types/key={key}": {
      "post": {
        "description": "Update Type by key",
        "operationId": "Update Type by key",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "version": 1,
                "actions": [
                  {
                    "action": "changeName",
                    "name": {
                      "en": "New Name"
                    }
                  }
                ]
              },
              "$ref": "#/definitions/TypeUpdate"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_types:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Get Type by key",
        "operationId": "Get Type by key",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_types:{projectKey}"
            ]
          }
        ]
      },
      "delete": {
        "description": "Delete Type by key",
        "operationId": "Delete Type by key",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_types:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "key",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-methodName": "withKey"
    },
    "/{projectKey}/types/{ID}": {
      "post": {
        "description": "Update Type by ID",
        "operationId": "Update Type by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "version": 1,
                "actions": [
                  {
                    "action": "changeName",
                    "name": {
                      "en": "New Name"
                    }
                  }
                ]
              },
              "$ref": "#/definitions/TypeUpdate"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_types:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Get Type by ID",
        "operationId": "Get Type by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_types:{projectKey}"
            ]
          }
        ]
      },
      "delete": {
        "description": "Delete Type by ID",
        "operationId": "Delete Type by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_types:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "ID",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-methodName": "withId"
    },
    "/{projectKey}/zones": {
      "get": {
        "description": "Query zones",
        "operationId": "Query zones",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "description": "A query endpoint that supports sorting does so through the sort query parameter. The provided value must be\na valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on\nthe specific query endpoints.\n\nHere are some examples of sort expressions:\n\n    name desc\n    dog.age asc\n\nIf multiple sort expressions are specified via multiple sort parameters, they are combined into a composed\nsort where the results are first sorted by the first expression, followed by equal values being sorted\naccording to the second expression, and so on.\n\nNote: The sorting is case sensitive.\n",
            "type": "string",
            "in": "query",
            "name": "sort"
          },
          {
            "description": "If queries support ad-hoc filtering of resources through flexible predicates, they do so via the where query\nparameter that accepts a single (possibly compound) predicate to determine whether a specific resource\nrepresentation should be included in the result.\n\nThe structure of predicates and the names of the fields follow the structure and naming of the fields in the\ndocumented response representation of the query results.\n\nExamples of predicates:\n\n    // Compare a field's value to a given value\n    name = \"Peter\"\n    age < 42\n    age > 42\n    age <= 42\n    age >= 42\n    age <> 42\n\n    // Combine any two conditional expressions in a logical conjunction / disjunction\n    name = \"Peter\" and age < 42\n    name = \"Peter\" or age < 42\n\n    // Negate any other conditional expression\n    not (name = \"Peter\" and age < 42)\n\n    // Check whether a field's value is or is not contained in\n    // a specified set of values.\n    age in (42, 43, 44)\n    age not in (42, 43, 44)\n\n    // Check whether an array contains all or any of a set of values\n    tags contains all (\"a\", \"b\", \"c\")\n    tags contains any (\"a\", \"b\", \"c\")\n\n    // Check whether an array is empty\n    tags is empty\n\n    // Check whether a field exists & has a non-null value\n    name is defined\n    name is not defined\n\n    // Descend into nested objects\n    dog(age < 7 and name = \"Beethoven\")\n\n    // Descend into nested arrays of objects\n    cities(zip > 10000 and zip < 20000)\n\nA query endpoint usually restricts predicates to only be allowed on a specified subset of a resource\nrepresentation's fields. The documentation of the endpoint will therefore list fields that can be used\nfor constructing predicates.\n\nIf multiple predicates are specified via multiple where query parameters, the individual predicates are\ncombined in a logical conjunction, just as if they had been specified in a single where query parameter\nand combined with and.\n\nNote: The encoding of the predicates is UTF-8 and the predicate must be URL-encoded in the HTTP request.\n",
            "type": "string",
            "in": "query",
            "name": "where"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          },
          {
            "$ref": "#/parameters/trait:paging:limit"
          },
          {
            "$ref": "#/parameters/trait:paging:offset"
          },
          {
            "$ref": "#/parameters/trait:paging:withTotal"
          },
          {
            "$ref": "#/parameters/trait:query:/^var[.][a-zA-Z0-9]+$/"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_orders:{projectKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "Create Zone",
        "operationId": "Create Zone",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "201": {
            "description": "",
            "examples": {
              "application/json": {
                "id": "ebe01381-82be-4e63-9993-d1eb8f8e588b",
                "version": 1,
                "name": "US",
                "key": "us-zone",
                "locations": [
                  {
                    "country": "US"
                  }
                ],
                "createdAt": "2015-01-21T09:22:04.275Z",
                "lastModifiedAt": "2015-01-21T09:22:04.275Z"
              }
            },
            "schema": {
              "$ref": "#/definitions/Zone"
            }
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "name": "US",
                "locations": [
                  {
                    "country": "US"
                  }
                ]
              },
              "$ref": "#/definitions/ZoneDraft"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_orders:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-updateable": "Zone",
      "x-annotation-deleteable": "Zone",
      "x-annotation-createable": "ZoneDraft"
    },
    "/{projectKey}/zones/key={key}": {
      "post": {
        "description": "Update Zone by key",
        "operationId": "Update Zone by key",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "version": 1,
                "actions": [
                  {
                    "action": "changeName",
                    "name": "New Name"
                  }
                ]
              },
              "$ref": "#/definitions/ZoneUpdate"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_orders:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Get Zone by key",
        "operationId": "Get Zone by key",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_orders:{projectKey}"
            ]
          }
        ]
      },
      "delete": {
        "description": "Delete Zone by key",
        "operationId": "Delete Zone by key",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_orders:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "key",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-methodName": "withKey"
    },
    "/{projectKey}/zones/{ID}": {
      "post": {
        "description": "Update Zone by ID",
        "operationId": "Update Zone by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "version": 1,
                "actions": [
                  {
                    "action": "changeName",
                    "name": "New Name"
                  }
                ]
              },
              "$ref": "#/definitions/ZoneUpdate"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_orders:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Get Zone by ID",
        "operationId": "Get Zone by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_orders:{projectKey}"
            ]
          }
        ]
      },
      "delete": {
        "description": "Delete Zone by ID",
        "operationId": "Delete Zone by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_orders:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "ID",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-methodName": "withId"
    },
    "/{projectKey}/extensions": {
      "get": {
        "description": "Query extensions",
        "operationId": "Query extensions",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "description": "A query endpoint that supports sorting does so through the sort query parameter. The provided value must be\na valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on\nthe specific query endpoints.\n\nHere are some examples of sort expressions:\n\n    name desc\n    dog.age asc\n\nIf multiple sort expressions are specified via multiple sort parameters, they are combined into a composed\nsort where the results are first sorted by the first expression, followed by equal values being sorted\naccording to the second expression, and so on.\n\nNote: The sorting is case sensitive.\n",
            "type": "string",
            "in": "query",
            "name": "sort"
          },
          {
            "description": "If queries support ad-hoc filtering of resources through flexible predicates, they do so via the where query\nparameter that accepts a single (possibly compound) predicate to determine whether a specific resource\nrepresentation should be included in the result.\n\nThe structure of predicates and the names of the fields follow the structure and naming of the fields in the\ndocumented response representation of the query results.\n\nExamples of predicates:\n\n    // Compare a field's value to a given value\n    name = \"Peter\"\n    age < 42\n    age > 42\n    age <= 42\n    age >= 42\n    age <> 42\n\n    // Combine any two conditional expressions in a logical conjunction / disjunction\n    name = \"Peter\" and age < 42\n    name = \"Peter\" or age < 42\n\n    // Negate any other conditional expression\n    not (name = \"Peter\" and age < 42)\n\n    // Check whether a field's value is or is not contained in\n    // a specified set of values.\n    age in (42, 43, 44)\n    age not in (42, 43, 44)\n\n    // Check whether an array contains all or any of a set of values\n    tags contains all (\"a\", \"b\", \"c\")\n    tags contains any (\"a\", \"b\", \"c\")\n\n    // Check whether an array is empty\n    tags is empty\n\n    // Check whether a field exists & has a non-null value\n    name is defined\n    name is not defined\n\n    // Descend into nested objects\n    dog(age < 7 and name = \"Beethoven\")\n\n    // Descend into nested arrays of objects\n    cities(zip > 10000 and zip < 20000)\n\nA query endpoint usually restricts predicates to only be allowed on a specified subset of a resource\nrepresentation's fields. The documentation of the endpoint will therefore list fields that can be used\nfor constructing predicates.\n\nIf multiple predicates are specified via multiple where query parameters, the individual predicates are\ncombined in a logical conjunction, just as if they had been specified in a single where query parameter\nand combined with and.\n\nNote: The encoding of the predicates is UTF-8 and the predicate must be URL-encoded in the HTTP request.\n",
            "type": "string",
            "in": "query",
            "name": "where"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          },
          {
            "$ref": "#/parameters/trait:paging:limit"
          },
          {
            "$ref": "#/parameters/trait:paging:offset"
          },
          {
            "$ref": "#/parameters/trait:paging:withTotal"
          },
          {
            "$ref": "#/parameters/trait:query:/^var[.][a-zA-Z0-9]+$/"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_extensions:{projectKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "Currently, a maximum of 25 extensions can be created per project.",
        "operationId": "Create Extension",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "201": {
            "description": "",
            "examples": {
              "application/json": {
                "id": "8062243c-46fc-40b5-88a4-75e2216aef75",
                "version": 1,
                "createdAt": "2017-01-25T14:14:22.417Z",
                "lastModifiedAt": "2017-01-25T14:14:22.417Z",
                "destination": {
                  "type": "HTTP",
                  "url": "https://example.azurewebsites.net/api/extension",
                  "authentication": {
                    "type": "AzureFunctions",
                    "key": "some-azure-function-code"
                  }
                },
                "triggers": [
                  {
                    "resourceTypeId": "cart",
                    "actions": [
                      "Create",
                      "Update"
                    ]
                  }
                ],
                "key": "my-extension"
              }
            },
            "schema": {
              "$ref": "#/definitions/Extension"
            }
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "destination": {
                  "type": "HTTP",
                  "url": "https://example.azurewebsites.net/api/extension",
                  "authentication": {
                    "type": "AzureFunctions",
                    "key": "some-azure-function-code"
                  }
                },
                "triggers": [
                  {
                    "resourceTypeId": "cart",
                    "actions": [
                      "Create",
                      "Update"
                    ]
                  }
                ],
                "key": "my-extension"
              },
              "$ref": "#/definitions/ExtensionDraft"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_extensions:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-updateable": "Extension",
      "x-annotation-deleteable": "Extension",
      "x-annotation-createable": "ExtensionDraft"
    },
    "/{projectKey}/extensions/key={key}": {
      "post": {
        "description": "Update Extension by key",
        "operationId": "Update Extension by key",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "version": 1,
                "actions": [
                  {
                    "action": "setKey",
                    "key": "my-new-extension-key"
                  }
                ]
              },
              "$ref": "#/definitions/ExtensionUpdate"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_extensions:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Retrieves the representation of an extension by its key.",
        "operationId": "Get Extension by key",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_extensions:{projectKey}"
            ]
          }
        ]
      },
      "delete": {
        "description": "Delete Extension by key",
        "operationId": "Delete Extension by key",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_extensions:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "key",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-methodName": "withKey"
    },
    "/{projectKey}/extensions/{ID}": {
      "post": {
        "description": "Update Extension by ID",
        "operationId": "Update Extension by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "version": 1,
                "actions": [
                  {
                    "action": "setKey",
                    "key": "my-new-extension-key"
                  }
                ]
              },
              "$ref": "#/definitions/ExtensionUpdate"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_extensions:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Retrieves the representation of an extension by its id.",
        "operationId": "Get Extension by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_extensions:{projectKey}"
            ]
          }
        ]
      },
      "delete": {
        "description": "Delete Extension by ID",
        "operationId": "Delete Extension by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_extensions:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "ID",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-methodName": "withId"
    },
    "/{projectKey}/stores": {
      "get": {
        "description": "Query stores",
        "operationId": "Query stores",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "description": "A query endpoint that supports sorting does so through the sort query parameter. The provided value must be\na valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on\nthe specific query endpoints.\n\nHere are some examples of sort expressions:\n\n    name desc\n    dog.age asc\n\nIf multiple sort expressions are specified via multiple sort parameters, they are combined into a composed\nsort where the results are first sorted by the first expression, followed by equal values being sorted\naccording to the second expression, and so on.\n\nNote: The sorting is case sensitive.\n",
            "type": "string",
            "in": "query",
            "name": "sort"
          },
          {
            "description": "If queries support ad-hoc filtering of resources through flexible predicates, they do so via the where query\nparameter that accepts a single (possibly compound) predicate to determine whether a specific resource\nrepresentation should be included in the result.\n\nThe structure of predicates and the names of the fields follow the structure and naming of the fields in the\ndocumented response representation of the query results.\n\nExamples of predicates:\n\n    // Compare a field's value to a given value\n    name = \"Peter\"\n    age < 42\n    age > 42\n    age <= 42\n    age >= 42\n    age <> 42\n\n    // Combine any two conditional expressions in a logical conjunction / disjunction\n    name = \"Peter\" and age < 42\n    name = \"Peter\" or age < 42\n\n    // Negate any other conditional expression\n    not (name = \"Peter\" and age < 42)\n\n    // Check whether a field's value is or is not contained in\n    // a specified set of values.\n    age in (42, 43, 44)\n    age not in (42, 43, 44)\n\n    // Check whether an array contains all or any of a set of values\n    tags contains all (\"a\", \"b\", \"c\")\n    tags contains any (\"a\", \"b\", \"c\")\n\n    // Check whether an array is empty\n    tags is empty\n\n    // Check whether a field exists & has a non-null value\n    name is defined\n    name is not defined\n\n    // Descend into nested objects\n    dog(age < 7 and name = \"Beethoven\")\n\n    // Descend into nested arrays of objects\n    cities(zip > 10000 and zip < 20000)\n\nA query endpoint usually restricts predicates to only be allowed on a specified subset of a resource\nrepresentation's fields. The documentation of the endpoint will therefore list fields that can be used\nfor constructing predicates.\n\nIf multiple predicates are specified via multiple where query parameters, the individual predicates are\ncombined in a logical conjunction, just as if they had been specified in a single where query parameter\nand combined with and.\n\nNote: The encoding of the predicates is UTF-8 and the predicate must be URL-encoded in the HTTP request.\n",
            "type": "string",
            "in": "query",
            "name": "where"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          },
          {
            "$ref": "#/parameters/trait:paging:limit"
          },
          {
            "$ref": "#/parameters/trait:paging:offset"
          },
          {
            "$ref": "#/parameters/trait:paging:withTotal"
          },
          {
            "$ref": "#/parameters/trait:query:/^var[.][a-zA-Z0-9]+$/"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_stores:{projectKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "Create Store",
        "operationId": "Create Store",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "201": {
            "description": "",
            "examples": {
              "application/json": {
                "id": "c2f93299-c967-44af-8c2a-d2220bf39eb2",
                "version": 1,
                "key": "random-key-12314",
                "name": {
                  "en": "big store"
                },
                "createdAt": "1971-01-01T00:00:00.001Z",
                "lastModifiedAt": "1972-01-01T00:00:00.001Z",
                "distributionChannels": []
              }
            },
            "schema": {
              "$ref": "#/definitions/Store"
            }
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "key": "random-key-123",
                "name": {
                  "en": "main store"
                }
              },
              "$ref": "#/definitions/StoreDraft"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_stores:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-updateable": "Store",
      "x-annotation-deleteable": "Store",
      "x-annotation-createable": "StoreDraft"
    },
    "/{projectKey}/stores/key={key}": {
      "post": {
        "description": "Update Store by key",
        "operationId": "Update Store by key",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "version": 1,
                "actions": [
                  {
                    "action": "setName",
                    "name": {
                      "en": "New Name"
                    }
                  }
                ]
              },
              "$ref": "#/definitions/StoreUpdate"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_stores:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Get Store by key",
        "operationId": "Get Store by key",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_stores:{projectKey}"
            ]
          }
        ]
      },
      "delete": {
        "description": "Delete Store by key",
        "operationId": "Delete Store by key",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_stores:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "key",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-methodName": "withKey"
    },
    "/{projectKey}/stores/{ID}": {
      "post": {
        "description": "Update Store by ID",
        "operationId": "Update Store by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "version": 1,
                "actions": [
                  {
                    "action": "setName",
                    "name": {
                      "en": "New Name"
                    }
                  }
                ]
              },
              "$ref": "#/definitions/StoreUpdate"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_stores:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Get Store by ID",
        "operationId": "Get Store by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_stores:{projectKey}"
            ]
          }
        ]
      },
      "delete": {
        "description": "Delete Store by ID",
        "operationId": "Delete Store by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_stores:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "ID",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-methodName": "withId"
    },
    "/{projectKey}/in-store/key={storeKey}/carts": {
      "get": {
        "description": "Queries carts in a specific Store. The {storeKey} path parameter maps to a Store's key.",
        "operationId": "Query carts",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "type": "string",
            "in": "query",
            "name": "customerId"
          },
          {
            "description": "A query endpoint that supports sorting does so through the sort query parameter. The provided value must be\na valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on\nthe specific query endpoints.\n\nHere are some examples of sort expressions:\n\n    name desc\n    dog.age asc\n\nIf multiple sort expressions are specified via multiple sort parameters, they are combined into a composed\nsort where the results are first sorted by the first expression, followed by equal values being sorted\naccording to the second expression, and so on.\n\nNote: The sorting is case sensitive.\n",
            "type": "string",
            "in": "query",
            "name": "sort"
          },
          {
            "description": "If queries support ad-hoc filtering of resources through flexible predicates, they do so via the where query\nparameter that accepts a single (possibly compound) predicate to determine whether a specific resource\nrepresentation should be included in the result.\n\nThe structure of predicates and the names of the fields follow the structure and naming of the fields in the\ndocumented response representation of the query results.\n\nExamples of predicates:\n\n    // Compare a field's value to a given value\n    name = \"Peter\"\n    age < 42\n    age > 42\n    age <= 42\n    age >= 42\n    age <> 42\n\n    // Combine any two conditional expressions in a logical conjunction / disjunction\n    name = \"Peter\" and age < 42\n    name = \"Peter\" or age < 42\n\n    // Negate any other conditional expression\n    not (name = \"Peter\" and age < 42)\n\n    // Check whether a field's value is or is not contained in\n    // a specified set of values.\n    age in (42, 43, 44)\n    age not in (42, 43, 44)\n\n    // Check whether an array contains all or any of a set of values\n    tags contains all (\"a\", \"b\", \"c\")\n    tags contains any (\"a\", \"b\", \"c\")\n\n    // Check whether an array is empty\n    tags is empty\n\n    // Check whether a field exists & has a non-null value\n    name is defined\n    name is not defined\n\n    // Descend into nested objects\n    dog(age < 7 and name = \"Beethoven\")\n\n    // Descend into nested arrays of objects\n    cities(zip > 10000 and zip < 20000)\n\nA query endpoint usually restricts predicates to only be allowed on a specified subset of a resource\nrepresentation's fields. The documentation of the endpoint will therefore list fields that can be used\nfor constructing predicates.\n\nIf multiple predicates are specified via multiple where query parameters, the individual predicates are\ncombined in a logical conjunction, just as if they had been specified in a single where query parameter\nand combined with and.\n\nNote: The encoding of the predicates is UTF-8 and the predicate must be URL-encoded in the HTTP request.\n",
            "type": "string",
            "in": "query",
            "name": "where"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          },
          {
            "$ref": "#/parameters/trait:paging:limit"
          },
          {
            "$ref": "#/parameters/trait:paging:offset"
          },
          {
            "$ref": "#/parameters/trait:paging:withTotal"
          },
          {
            "$ref": "#/parameters/trait:query:/^var[.][a-zA-Z0-9]+$/"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_orders:{projectKey}",
              "view_orders:{projectKey}:{storeKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "Creates a cart in the store specified by {storeKey}. The {storeKey} path parameter maps to a Store's key.\nWhen using this endpoint the cart's store field is always set to the store specified in the path parameter.\nCreating a cart can fail with an InvalidOperation if the referenced shipping method\nin the CartDraft has a predicate which does not match the cart.\n",
        "operationId": "Create Cart",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "201": {
            "description": "",
            "examples": {
              "application/json": {
                "type": "Cart",
                "id": "2a3baa00-44fa-4ab8-bec7-933c31e18dcc",
                "version": 5,
                "createdAt": "2015-09-22T15:36:17.510Z",
                "lastModifiedAt": "2015-09-22T15:41:55.816Z",
                "lineItems": [
                  {
                    "id": "b925a817-d5ad-48bb-a407-29ad8e0649b5",
                    "productId": "9f10dcfb-5cc9-4a18-843a-c07f7e22d01f",
                    "name": {
                      "en": "SAPPHIRE"
                    },
                    "productType": {
                      "typeId": "product-type",
                      "id": "2543e1d8-4915-4f72-a3c9-1df9b1b0082d",
                      "version": 8
                    },
                    "productSlug": {
                      "en": "sapphire1421832124423"
                    },
                    "variant": {
                      "id": 1,
                      "sku": "sku_SAPPHIRE_variant1_1421832124423",
                      "prices": [
                        {
                          "value": {
                            "type": "centPrecision",
                            "fractionDigits": 2,
                            "currencyCode": "EUR",
                            "centAmount": 2800
                          },
                          "id": "8da659ef-9e54-447d-9c36-84912db1848f"
                        }
                      ],
                      "images": [
                        {
                          "url": "https://www.commercetools.com/cli/data/252542005_1.jpg",
                          "dimensions": {
                            "w": 1400,
                            "h": 1400
                          }
                        }
                      ],
                      "attributes": [],
                      "assets": []
                    },
                    "price": {
                      "value": {
                        "type": "centPrecision",
                        "fractionDigits": 2,
                        "currencyCode": "EUR",
                        "centAmount": 2800
                      },
                      "id": "8da659ef-9e54-447d-9c36-84912db1848f"
                    },
                    "quantity": 2,
                    "discountedPricePerQuantity": [],
                    "state": [
                      {
                        "quantity": 2,
                        "state": {
                          "typeId": "state",
                          "id": "7c2e2694-aefe-43d7-888e-6a99514caaca"
                        }
                      }
                    ],
                    "priceMode": "Platform",
                    "lineItemMode": "Standard",
                    "totalPrice": {
                      "type": "centPrecision",
                      "fractionDigits": 2,
                      "currencyCode": "EUR",
                      "centAmount": 5600
                    }
                  }
                ],
                "store": {
                  "typeId": "store",
                  "key": "test-key"
                },
                "cartState": "Active",
                "totalPrice": {
                  "type": "centPrecision",
                  "fractionDigits": 2,
                  "currencyCode": "EUR",
                  "centAmount": 5600
                },
                "customLineItems": [],
                "discountCodes": [],
                "inventoryMode": "None",
                "taxMode": "Platform",
                "taxRoundingMode": "HalfEven",
                "taxCalculationMode": "LineItemLevel",
                "refusedGifts": [],
                "origin": "Customer"
              }
            },
            "schema": {
              "$ref": "#/definitions/Cart"
            }
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "currency": "EUR"
              },
              "$ref": "#/definitions/CartDraft"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_orders:{projectKey}",
              "manage_orders:{projectKey}:{storeKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "storeKey",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-updateable": "Cart",
      "x-annotation-deleteable": "Cart",
      "x-annotation-createable": "CartDraft"
    },
    "/{projectKey}/in-store/key={storeKey}/carts/{ID}": {
      "post": {
        "description": "Updates a cart in the store specified by {storeKey}. The {storeKey} path parameter maps to a Store's key.\nIf the cart exists in the commercetools project but does not have the store field,\nor the store field references a different store, this method returns a ResourceNotFound error.\n",
        "operationId": "Update Cart by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "version": 1,
                "actions": [
                  {
                    "action": "addLineItem",
                    "productId": "9f10dcfb-5cc9-4a18-843a-c07f7e22d01f",
                    "variantId": 1,
                    "quantity": 1
                  }
                ]
              },
              "$ref": "#/definitions/CartUpdate"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_orders:{projectKey}",
              "manage_orders:{projectKey}:{storeKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Returns a cart by its ID from a specific Store. The {storeKey} path parameter maps to a Store's key.\nIf the cart exists in the commercetools project but does not have the store field,\nor the store field references a different store, this method returns a ResourceNotFound error.\nThe cart may not contain up-to-date prices, discounts etc.\nIf you want to ensure they're up-to-date, send an Update request with the Recalculate update action instead.\n",
        "operationId": "Get Cart by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_orders:{projectKey}",
              "view_orders:{projectKey}:{storeKey}"
            ]
          }
        ]
      },
      "delete": {
        "description": "Delete Cart by ID",
        "operationId": "Delete Cart by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:dataErasure:dataErasure"
          },
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_orders:{projectKey}",
              "manage_orders:{projectKey}:{storeKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "ID",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "storeKey",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-methodName": "withId"
    },
    "/{projectKey}/in-store/key={storeKey}/carts/customer-id={customerId}": {
      "get": {
        "description": "Retrieves the active cart of the customer that has been modified most recently in a specific Store.\nThe {storeKey} path parameter maps to a Store's key.\n\nIf the cart exists in the commercetools project but does not have the store field, or the store field\nreferences a different store, this method returns a ResourceNotFound error.\n\nThe cart may not contain up-to-date prices, discounts etc. If you want to ensure they're up-to-date,\nsend an Update request with the Recalculate update action instead.\n",
        "operationId": "Get Cart by customerId",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_orders:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "customerId",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "storeKey",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-methodName": "withCustomerId"
    },
    "/{projectKey}/in-store/key={storeKey}/orders": {
      "get": {
        "description": "Queries orders in a specific Store. The {storeKey} path parameter maps to a Store's key.",
        "operationId": "Query orders",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "description": "A query endpoint that supports sorting does so through the sort query parameter. The provided value must be\na valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on\nthe specific query endpoints.\n\nHere are some examples of sort expressions:\n\n    name desc\n    dog.age asc\n\nIf multiple sort expressions are specified via multiple sort parameters, they are combined into a composed\nsort where the results are first sorted by the first expression, followed by equal values being sorted\naccording to the second expression, and so on.\n\nNote: The sorting is case sensitive.\n",
            "type": "string",
            "in": "query",
            "name": "sort"
          },
          {
            "description": "If queries support ad-hoc filtering of resources through flexible predicates, they do so via the where query\nparameter that accepts a single (possibly compound) predicate to determine whether a specific resource\nrepresentation should be included in the result.\n\nThe structure of predicates and the names of the fields follow the structure and naming of the fields in the\ndocumented response representation of the query results.\n\nExamples of predicates:\n\n    // Compare a field's value to a given value\n    name = \"Peter\"\n    age < 42\n    age > 42\n    age <= 42\n    age >= 42\n    age <> 42\n\n    // Combine any two conditional expressions in a logical conjunction / disjunction\n    name = \"Peter\" and age < 42\n    name = \"Peter\" or age < 42\n\n    // Negate any other conditional expression\n    not (name = \"Peter\" and age < 42)\n\n    // Check whether a field's value is or is not contained in\n    // a specified set of values.\n    age in (42, 43, 44)\n    age not in (42, 43, 44)\n\n    // Check whether an array contains all or any of a set of values\n    tags contains all (\"a\", \"b\", \"c\")\n    tags contains any (\"a\", \"b\", \"c\")\n\n    // Check whether an array is empty\n    tags is empty\n\n    // Check whether a field exists & has a non-null value\n    name is defined\n    name is not defined\n\n    // Descend into nested objects\n    dog(age < 7 and name = \"Beethoven\")\n\n    // Descend into nested arrays of objects\n    cities(zip > 10000 and zip < 20000)\n\nA query endpoint usually restricts predicates to only be allowed on a specified subset of a resource\nrepresentation's fields. The documentation of the endpoint will therefore list fields that can be used\nfor constructing predicates.\n\nIf multiple predicates are specified via multiple where query parameters, the individual predicates are\ncombined in a logical conjunction, just as if they had been specified in a single where query parameter\nand combined with and.\n\nNote: The encoding of the predicates is UTF-8 and the predicate must be URL-encoded in the HTTP request.\n",
            "type": "string",
            "in": "query",
            "name": "where"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          },
          {
            "$ref": "#/parameters/trait:paging:limit"
          },
          {
            "$ref": "#/parameters/trait:paging:offset"
          },
          {
            "$ref": "#/parameters/trait:paging:withTotal"
          },
          {
            "$ref": "#/parameters/trait:query:/^var[.][a-zA-Z0-9]+$/"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_orders:{projectKey}",
              "view_orders:{projectKey}:{storeKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "Creates an order from a Cart from a specific Store. The {storeKey} path parameter maps to a Store's key.\nWhen using this endpoint the orders's store field is always set to the store specified in the path parameter.\nThe cart must have a shipping address set before creating an order. When using the Platform TaxMode,\nthe shipping address is used for tax calculation.\n",
        "operationId": "Create Order",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "201": {
            "description": "",
            "examples": {
              "application/json": {
                "type": "Order",
                "id": "92f5a867-bf19-47ab-982c-6720a03a3921",
                "version": 1,
                "createdAt": "2017-01-04T19:54:49.797Z",
                "lastModifiedAt": "2017-01-04T19:54:49.797Z",
                "totalPrice": {
                  "type": "centPrecision",
                  "fractionDigits": 2,
                  "currencyCode": "EUR",
                  "centAmount": 1000
                },
                "orderState": "Open",
                "syncInfo": [],
                "returnInfo": [],
                "refusedGifts": [],
                "taxMode": "External",
                "inventoryMode": "None",
                "taxRoundingMode": "HalfEven",
                "lineItems": [
                  {
                    "id": "7297c742-d8b0-484b-aadc-1d0ba1869dc9",
                    "productId": "c5c75935-595a-4cc3-a80e-24e9a9c55094",
                    "name": {
                      "en": "MyProduct"
                    },
                    "productType": {
                      "typeId": "product-type",
                      "id": "a5c7e173-9754-4f02-9b18-a600896ae0e1",
                      "version": 21
                    },
                    "productSlug": {
                      "de": "neues-produkt-slug-1234678",
                      "en": "new-product-slug-12345678"
                    },
                    "variant": {
                      "id": 1,
                      "sku": "some-sku-123",
                      "prices": [
                        {
                          "value": {
                            "type": "centPrecision",
                            "fractionDigits": 2,
                            "currencyCode": "EUR",
                            "centAmount": 1000
                          },
                          "id": "6d36dc85-6131-495d-9f20-d00f411d4124"
                        }
                      ],
                      "images": [],
                      "attributes": [
                        {
                          "name": "text",
                          "value": "attribute-value"
                        },
                        {
                          "name": "enum",
                          "value": {
                            "key": "test",
                            "label": "test"
                          }
                        }
                      ],
                      "assets": []
                    },
                    "price": {
                      "id": "6d36dc85-6131-495d-9f20-d00f411d4124",
                      "value": {
                        "type": "centPrecision",
                        "fractionDigits": 2,
                        "currencyCode": "EUR",
                        "centAmount": 1000
                      }
                    },
                    "quantity": 1,
                    "discountedPricePerQuantity": [],
                    "taxRate": {
                      "name": "Bla",
                      "amount": 0.1,
                      "includedInPrice": false,
                      "country": "DE",
                      "subRates": []
                    },
                    "state": [
                      {
                        "quantity": 1,
                        "state": {
                          "typeId": "state",
                          "id": "7c2e2694-aefe-43d7-888e-6a99514caaca"
                        }
                      }
                    ],
                    "priceMode": "Platform",
                    "lineItemMode": "Standard",
                    "totalPrice": {
                      "type": "centPrecision",
                      "fractionDigits": 2,
                      "currencyCode": "EUR",
                      "centAmount": 1000
                    },
                    "taxedPrice": {
                      "totalNet": {
                        "type": "centPrecision",
                        "fractionDigits": 2,
                        "currencyCode": "EUR",
                        "centAmount": 1000
                      },
                      "totalGross": {
                        "type": "centPrecision",
                        "fractionDigits": 2,
                        "currencyCode": "EUR",
                        "centAmount": 1100
                      }
                    }
                  }
                ],
                "customLineItems": [],
                "discountCodes": [],
                "lastMessageSequenceNumber": 1,
                "origin": "Customer"
              }
            },
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "id": "7c2e2694-aefe-43d7-888e-6a99514caaca",
                "version": 10,
                "orderNumber": "201612010001"
              },
              "$ref": "#/definitions/OrderFromCartDraft"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_orders:{projectKey}",
              "manage_orders:{projectKey}:{storeKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "storeKey",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-updateable": "Order",
      "x-annotation-deleteable": "Order",
      "x-annotation-createable": "OrderFromCartDraft"
    },
    "/{projectKey}/in-store/key={storeKey}/orders/order-number={orderNumber}": {
      "post": {
        "description": "Updates an order in the store specified by {storeKey}. The {storeKey} path parameter maps to a Store's key.\nIf the order exists in the commercetools project but does not have the store field,\nor the store field references a different store, this method returns a ResourceNotFound error.\nIn case the orderNumber does not match the regular expression [a-zA-Z0-9_\\-]+,\nit should be provided in URL-encoded format.\n",
        "operationId": "Update Order by orderNumber",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "version": 1,
                "actions": [
                  {
                    "action": "changeOrderState",
                    "orderState": "Complete"
                  }
                ]
              },
              "$ref": "#/definitions/OrderUpdate"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_orders:{projectKey}",
              "manage_orders:{projectKey}:{storeKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Returns an order by its order number from a specific Store.\nThe {storeKey} path parameter maps to a Store's key.\nIf the order exists in the commercetools project but does not have the store field,\nor the store field references a different store, this method returns a ResourceNotFound error.\nIn case the orderNumber does not match the regular expression [a-zA-Z0-9_\\-]+,\nit should be provided in URL-encoded format.\n",
        "operationId": "Get Order by orderNumber",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_orders:{projectKey}",
              "view_orders:{projectKey}:{storeKey}"
            ]
          }
        ]
      },
      "delete": {
        "description": "Delete Order by orderNumber",
        "operationId": "Delete Order by orderNumber",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:dataErasure:dataErasure"
          },
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_orders:{projectKey}",
              "manage_orders:{projectKey}:{storeKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "orderNumber",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "storeKey",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-methodName": "withOrderNumber"
    },
    "/{projectKey}/in-store/key={storeKey}/orders/{ID}": {
      "post": {
        "description": "Updates an order in the store specified by {storeKey}. The {storeKey} path parameter maps to a Store's key.\nIf the order exists in the commercetools project but does not have the store field,\nor the store field references a different store, this method returns a ResourceNotFound error.\n",
        "operationId": "Update Order by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "version": 1,
                "actions": [
                  {
                    "action": "changeOrderState",
                    "orderState": "Complete"
                  }
                ]
              },
              "$ref": "#/definitions/OrderUpdate"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_orders:{projectKey}",
              "manage_orders:{projectKey}:{storeKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Returns an order by its ID from a specific Store. The {storeKey} path parameter maps to a Store's key.\nIf the order exists in the commercetools project but does not have the store field,\nor the store field references a different store, this method returns a ResourceNotFound error.\n",
        "operationId": "Get Order by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_orders:{projectKey}",
              "view_orders:{projectKey}:{storeKey}"
            ]
          }
        ]
      },
      "delete": {
        "description": "Delete Order by ID",
        "operationId": "Delete Order by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:dataErasure:dataErasure"
          },
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_orders:{projectKey}",
              "manage_orders:{projectKey}:{storeKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "ID",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "storeKey",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-methodName": "withId"
    },
    "/{projectKey}/in-store/key={storeKey}/me/carts": {
      "get": {
        "description": "Query carts",
        "operationId": "Query carts",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "description": "A query endpoint that supports sorting does so through the sort query parameter. The provided value must be\na valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on\nthe specific query endpoints.\n\nHere are some examples of sort expressions:\n\n    name desc\n    dog.age asc\n\nIf multiple sort expressions are specified via multiple sort parameters, they are combined into a composed\nsort where the results are first sorted by the first expression, followed by equal values being sorted\naccording to the second expression, and so on.\n\nNote: The sorting is case sensitive.\n",
            "type": "string",
            "in": "query",
            "name": "sort"
          },
          {
            "description": "If queries support ad-hoc filtering of resources through flexible predicates, they do so via the where query\nparameter that accepts a single (possibly compound) predicate to determine whether a specific resource\nrepresentation should be included in the result.\n\nThe structure of predicates and the names of the fields follow the structure and naming of the fields in the\ndocumented response representation of the query results.\n\nExamples of predicates:\n\n    // Compare a field's value to a given value\n    name = \"Peter\"\n    age < 42\n    age > 42\n    age <= 42\n    age >= 42\n    age <> 42\n\n    // Combine any two conditional expressions in a logical conjunction / disjunction\n    name = \"Peter\" and age < 42\n    name = \"Peter\" or age < 42\n\n    // Negate any other conditional expression\n    not (name = \"Peter\" and age < 42)\n\n    // Check whether a field's value is or is not contained in\n    // a specified set of values.\n    age in (42, 43, 44)\n    age not in (42, 43, 44)\n\n    // Check whether an array contains all or any of a set of values\n    tags contains all (\"a\", \"b\", \"c\")\n    tags contains any (\"a\", \"b\", \"c\")\n\n    // Check whether an array is empty\n    tags is empty\n\n    // Check whether a field exists & has a non-null value\n    name is defined\n    name is not defined\n\n    // Descend into nested objects\n    dog(age < 7 and name = \"Beethoven\")\n\n    // Descend into nested arrays of objects\n    cities(zip > 10000 and zip < 20000)\n\nA query endpoint usually restricts predicates to only be allowed on a specified subset of a resource\nrepresentation's fields. The documentation of the endpoint will therefore list fields that can be used\nfor constructing predicates.\n\nIf multiple predicates are specified via multiple where query parameters, the individual predicates are\ncombined in a logical conjunction, just as if they had been specified in a single where query parameter\nand combined with and.\n\nNote: The encoding of the predicates is UTF-8 and the predicate must be URL-encoded in the HTTP request.\n",
            "type": "string",
            "in": "query",
            "name": "where"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          },
          {
            "$ref": "#/parameters/trait:paging:limit"
          },
          {
            "$ref": "#/parameters/trait:paging:offset"
          },
          {
            "$ref": "#/parameters/trait:paging:withTotal"
          },
          {
            "$ref": "#/parameters/trait:query:/^var[.][a-zA-Z0-9]+$/"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_my_orders:{projectKey}",
              "manage_my_orders:{projectKey}:{storeKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "Create Cart",
        "operationId": "Create Cart",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "201": {
            "description": "",
            "examples": {
              "application/json": {
                "type": "Cart",
                "id": "2a3baa00-44fa-4ab8-bec7-933c31e18dcc",
                "version": 5,
                "createdAt": "2015-09-22T15:36:17.510Z",
                "lastModifiedAt": "2015-09-22T15:41:55.816Z",
                "lineItems": [
                  {
                    "id": "b925a817-d5ad-48bb-a407-29ad8e0649b5",
                    "productId": "9f10dcfb-5cc9-4a18-843a-c07f7e22d01f",
                    "name": {
                      "en": "SAPPHIRE"
                    },
                    "productType": {
                      "typeId": "product-type",
                      "id": "2543e1d8-4915-4f72-a3c9-1df9b1b0082d",
                      "version": 8
                    },
                    "productSlug": {
                      "en": "sapphire1421832124423"
                    },
                    "variant": {
                      "id": 1,
                      "sku": "sku_SAPPHIRE_variant1_1421832124423",
                      "prices": [
                        {
                          "value": {
                            "type": "centPrecision",
                            "fractionDigits": 2,
                            "currencyCode": "EUR",
                            "centAmount": 2800
                          },
                          "id": "8da659ef-9e54-447d-9c36-84912db1848f"
                        }
                      ],
                      "images": [
                        {
                          "url": "https://www.commercetools.com/cli/data/252542005_1.jpg",
                          "dimensions": {
                            "w": 1400,
                            "h": 1400
                          }
                        }
                      ],
                      "attributes": [],
                      "assets": []
                    },
                    "price": {
                      "value": {
                        "type": "centPrecision",
                        "fractionDigits": 2,
                        "currencyCode": "EUR",
                        "centAmount": 2800
                      },
                      "id": "8da659ef-9e54-447d-9c36-84912db1848f"
                    },
                    "quantity": 2,
                    "discountedPricePerQuantity": [],
                    "state": [
                      {
                        "quantity": 2,
                        "state": {
                          "typeId": "state",
                          "id": "7c2e2694-aefe-43d7-888e-6a99514caaca"
                        }
                      }
                    ],
                    "priceMode": "Platform",
                    "lineItemMode": "Standard",
                    "totalPrice": {
                      "type": "centPrecision",
                      "fractionDigits": 2,
                      "currencyCode": "EUR",
                      "centAmount": 5600
                    }
                  }
                ],
                "store": {
                  "typeId": "store",
                  "key": "test-key"
                },
                "cartState": "Active",
                "totalPrice": {
                  "type": "centPrecision",
                  "fractionDigits": 2,
                  "currencyCode": "EUR",
                  "centAmount": 5600
                },
                "customLineItems": [],
                "discountCodes": [],
                "inventoryMode": "None",
                "taxMode": "Platform",
                "taxRoundingMode": "HalfEven",
                "taxCalculationMode": "LineItemLevel",
                "refusedGifts": [],
                "origin": "Customer"
              }
            },
            "schema": {
              "$ref": "#/definitions/Cart"
            }
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "currency": "EUR"
              },
              "$ref": "#/definitions/MyCartDraft"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_my_orders:{projectKey}",
              "manage_my_orders:{projectKey}:{storeKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "storeKey",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ]
    },
    "/{projectKey}/in-store/key={storeKey}/me/carts/{ID}": {
      "get": {
        "description": "Get Cart by ID",
        "operationId": "Get Cart by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_my_orders:{projectKey}",
              "manage_my_orders:{projectKey}:{storeKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "Update Cart by ID",
        "operationId": "Update Cart by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "version": 1,
                "actions": [
                  {
                    "action": "addLineItem",
                    "productId": "9f10dcfb-5cc9-4a18-843a-c07f7e22d01f",
                    "variantId": 1,
                    "quantity": 1
                  }
                ]
              },
              "$ref": "#/definitions/Update"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_my_orders:{projectKey}",
              "manage_my_orders:{projectKey}:{storeKey}"
            ]
          }
        ]
      },
      "delete": {
        "description": "Delete Cart by ID",
        "operationId": "Delete Cart by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_my_orders:{projectKey}",
              "manage_my_orders:{projectKey}:{storeKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "ID",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "storeKey",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-methodName": "withId"
    },
    "/{projectKey}/in-store/key={storeKey}/me/orders": {
      "get": {
        "description": "Query orders",
        "operationId": "Query orders",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "description": "A query endpoint that supports sorting does so through the sort query parameter. The provided value must be\na valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on\nthe specific query endpoints.\n\nHere are some examples of sort expressions:\n\n    name desc\n    dog.age asc\n\nIf multiple sort expressions are specified via multiple sort parameters, they are combined into a composed\nsort where the results are first sorted by the first expression, followed by equal values being sorted\naccording to the second expression, and so on.\n\nNote: The sorting is case sensitive.\n",
            "type": "string",
            "in": "query",
            "name": "sort"
          },
          {
            "description": "If queries support ad-hoc filtering of resources through flexible predicates, they do so via the where query\nparameter that accepts a single (possibly compound) predicate to determine whether a specific resource\nrepresentation should be included in the result.\n\nThe structure of predicates and the names of the fields follow the structure and naming of the fields in the\ndocumented response representation of the query results.\n\nExamples of predicates:\n\n    // Compare a field's value to a given value\n    name = \"Peter\"\n    age < 42\n    age > 42\n    age <= 42\n    age >= 42\n    age <> 42\n\n    // Combine any two conditional expressions in a logical conjunction / disjunction\n    name = \"Peter\" and age < 42\n    name = \"Peter\" or age < 42\n\n    // Negate any other conditional expression\n    not (name = \"Peter\" and age < 42)\n\n    // Check whether a field's value is or is not contained in\n    // a specified set of values.\n    age in (42, 43, 44)\n    age not in (42, 43, 44)\n\n    // Check whether an array contains all or any of a set of values\n    tags contains all (\"a\", \"b\", \"c\")\n    tags contains any (\"a\", \"b\", \"c\")\n\n    // Check whether an array is empty\n    tags is empty\n\n    // Check whether a field exists & has a non-null value\n    name is defined\n    name is not defined\n\n    // Descend into nested objects\n    dog(age < 7 and name = \"Beethoven\")\n\n    // Descend into nested arrays of objects\n    cities(zip > 10000 and zip < 20000)\n\nA query endpoint usually restricts predicates to only be allowed on a specified subset of a resource\nrepresentation's fields. The documentation of the endpoint will therefore list fields that can be used\nfor constructing predicates.\n\nIf multiple predicates are specified via multiple where query parameters, the individual predicates are\ncombined in a logical conjunction, just as if they had been specified in a single where query parameter\nand combined with and.\n\nNote: The encoding of the predicates is UTF-8 and the predicate must be URL-encoded in the HTTP request.\n",
            "type": "string",
            "in": "query",
            "name": "where"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          },
          {
            "$ref": "#/parameters/trait:paging:limit"
          },
          {
            "$ref": "#/parameters/trait:paging:offset"
          },
          {
            "$ref": "#/parameters/trait:paging:withTotal"
          },
          {
            "$ref": "#/parameters/trait:query:/^var[.][a-zA-Z0-9]+$/"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_my_orders:{projectKey}",
              "manage_my_orders:{projectKey}:{storeKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "Create Order",
        "operationId": "Create Order",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "201": {
            "description": "",
            "examples": {
              "application/json": {
                "type": "Order",
                "id": "92f5a867-bf19-47ab-982c-6720a03a3921",
                "version": 1,
                "createdAt": "2017-01-04T19:54:49.797Z",
                "lastModifiedAt": "2017-01-04T19:54:49.797Z",
                "totalPrice": {
                  "type": "centPrecision",
                  "fractionDigits": 2,
                  "currencyCode": "EUR",
                  "centAmount": 1000
                },
                "orderState": "Open",
                "syncInfo": [],
                "returnInfo": [],
                "refusedGifts": [],
                "taxMode": "External",
                "inventoryMode": "None",
                "taxRoundingMode": "HalfEven",
                "lineItems": [
                  {
                    "id": "7297c742-d8b0-484b-aadc-1d0ba1869dc9",
                    "productId": "c5c75935-595a-4cc3-a80e-24e9a9c55094",
                    "name": {
                      "en": "MyProduct"
                    },
                    "productType": {
                      "typeId": "product-type",
                      "id": "a5c7e173-9754-4f02-9b18-a600896ae0e1",
                      "version": 21
                    },
                    "productSlug": {
                      "de": "neues-produkt-slug-1234678",
                      "en": "new-product-slug-12345678"
                    },
                    "variant": {
                      "id": 1,
                      "sku": "some-sku-123",
                      "prices": [
                        {
                          "value": {
                            "type": "centPrecision",
                            "fractionDigits": 2,
                            "currencyCode": "EUR",
                            "centAmount": 1000
                          },
                          "id": "6d36dc85-6131-495d-9f20-d00f411d4124"
                        }
                      ],
                      "images": [],
                      "attributes": [
                        {
                          "name": "text",
                          "value": "attribute-value"
                        },
                        {
                          "name": "enum",
                          "value": {
                            "key": "test",
                            "label": "test"
                          }
                        }
                      ],
                      "assets": []
                    },
                    "price": {
                      "id": "6d36dc85-6131-495d-9f20-d00f411d4124",
                      "value": {
                        "type": "centPrecision",
                        "fractionDigits": 2,
                        "currencyCode": "EUR",
                        "centAmount": 1000
                      }
                    },
                    "quantity": 1,
                    "discountedPricePerQuantity": [],
                    "taxRate": {
                      "name": "Bla",
                      "amount": 0.1,
                      "includedInPrice": false,
                      "country": "DE",
                      "subRates": []
                    },
                    "state": [
                      {
                        "quantity": 1,
                        "state": {
                          "typeId": "state",
                          "id": "7c2e2694-aefe-43d7-888e-6a99514caaca"
                        }
                      }
                    ],
                    "priceMode": "Platform",
                    "lineItemMode": "Standard",
                    "totalPrice": {
                      "type": "centPrecision",
                      "fractionDigits": 2,
                      "currencyCode": "EUR",
                      "centAmount": 1000
                    },
                    "taxedPrice": {
                      "totalNet": {
                        "type": "centPrecision",
                        "fractionDigits": 2,
                        "currencyCode": "EUR",
                        "centAmount": 1000
                      },
                      "totalGross": {
                        "type": "centPrecision",
                        "fractionDigits": 2,
                        "currencyCode": "EUR",
                        "centAmount": 1100
                      }
                    }
                  }
                ],
                "customLineItems": [],
                "discountCodes": [],
                "lastMessageSequenceNumber": 1,
                "origin": "Customer"
              }
            },
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "id": "7c2e2694-aefe-43d7-888e-6a99514caaca",
                "version": 10,
                "orderNumber": "201612010001"
              },
              "$ref": "#/definitions/MyOrderFromCartDraft"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_my_orders:{projectKey}",
              "manage_my_orders:{projectKey}:{storeKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "storeKey",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ]
    },
    "/{projectKey}/in-store/key={storeKey}/me/orders/{ID}": {
      "get": {
        "description": "Get Order by ID",
        "operationId": "Get Order by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_my_orders:{projectKey}",
              "manage_my_orders:{projectKey}:{storeKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "ID",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "storeKey",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-methodName": "withId"
    },
    "/{projectKey}/in-store/key={storeKey}/me/active-cart": {
      "get": {
        "operationId": "Get active cart",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_my_orders:{projectKey}",
              "manage_my_orders:{projectKey}:{storeKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "storeKey",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ]
    },
    "/{projectKey}/in-store/key={storeKey}/customers": {
      "get": {
        "description": "Query customers",
        "operationId": "Query customers",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "description": "A query endpoint that supports sorting does so through the sort query parameter. The provided value must be\na valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on\nthe specific query endpoints.\n\nHere are some examples of sort expressions:\n\n    name desc\n    dog.age asc\n\nIf multiple sort expressions are specified via multiple sort parameters, they are combined into a composed\nsort where the results are first sorted by the first expression, followed by equal values being sorted\naccording to the second expression, and so on.\n\nNote: The sorting is case sensitive.\n",
            "type": "string",
            "in": "query",
            "name": "sort"
          },
          {
            "description": "If queries support ad-hoc filtering of resources through flexible predicates, they do so via the where query\nparameter that accepts a single (possibly compound) predicate to determine whether a specific resource\nrepresentation should be included in the result.\n\nThe structure of predicates and the names of the fields follow the structure and naming of the fields in the\ndocumented response representation of the query results.\n\nExamples of predicates:\n\n    // Compare a field's value to a given value\n    name = \"Peter\"\n    age < 42\n    age > 42\n    age <= 42\n    age >= 42\n    age <> 42\n\n    // Combine any two conditional expressions in a logical conjunction / disjunction\n    name = \"Peter\" and age < 42\n    name = \"Peter\" or age < 42\n\n    // Negate any other conditional expression\n    not (name = \"Peter\" and age < 42)\n\n    // Check whether a field's value is or is not contained in\n    // a specified set of values.\n    age in (42, 43, 44)\n    age not in (42, 43, 44)\n\n    // Check whether an array contains all or any of a set of values\n    tags contains all (\"a\", \"b\", \"c\")\n    tags contains any (\"a\", \"b\", \"c\")\n\n    // Check whether an array is empty\n    tags is empty\n\n    // Check whether a field exists & has a non-null value\n    name is defined\n    name is not defined\n\n    // Descend into nested objects\n    dog(age < 7 and name = \"Beethoven\")\n\n    // Descend into nested arrays of objects\n    cities(zip > 10000 and zip < 20000)\n\nA query endpoint usually restricts predicates to only be allowed on a specified subset of a resource\nrepresentation's fields. The documentation of the endpoint will therefore list fields that can be used\nfor constructing predicates.\n\nIf multiple predicates are specified via multiple where query parameters, the individual predicates are\ncombined in a logical conjunction, just as if they had been specified in a single where query parameter\nand combined with and.\n\nNote: The encoding of the predicates is UTF-8 and the predicate must be URL-encoded in the HTTP request.\n",
            "type": "string",
            "in": "query",
            "name": "where"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          },
          {
            "$ref": "#/parameters/trait:paging:limit"
          },
          {
            "$ref": "#/parameters/trait:paging:offset"
          },
          {
            "$ref": "#/parameters/trait:paging:withTotal"
          },
          {
            "$ref": "#/parameters/trait:query:/^var[.][a-zA-Z0-9]+$/"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_customers:{projectKey}",
              "view_customers:{projectKey}:{storeKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "Creates a customer in a specific Store. The {storeKey} path parameter maps to a Store's key.\nWhen using this endpoint, if omitted,\nthe customer's stores field is set to the store specified in the path parameter.\nIf an anonymous cart is passed in as when using this method,\nthen the cart is assigned to the created customer and the version number of the Cart increases.\nIf the ID of an anonymous session is given, all carts and orders will be assigned to the created customer and\nthe store specified. If you pass in a cart with a store field specified,\nthe store field must reference the same store specified in the {storeKey} path parameter.\n",
        "operationId": "Create Customer",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "201": {
            "description": "",
            "examples": {
              "application/json": {
                "customer": {
                  "addresses": [],
                  "email": "<random>@example.com",
                  "firstName": "John",
                  "id": "some_123_id",
                  "isEmailVerified": false,
                  "lastName": "Doe",
                  "password": "secret123",
                  "version": 1,
                  "createdAt": "2015-07-06T13:22:33.339Z",
                  "lastModifiedAt": "2015-07-06T13:22:33.339Z"
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/CustomerSignInResult"
            }
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "email": "<random>@example.com",
                "firstName": "John",
                "lastName": "Doe",
                "password": "secret123"
              },
              "$ref": "#/definitions/CustomerDraft"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_customers:{projectKey}",
              "manage_customers:{projectKey}:{storeKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "storeKey",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ]
    },
    "/{projectKey}/in-store/key={storeKey}/customers/password-token={passwordToken}": {
      "get": {
        "description": "Get Customer by passwordToken",
        "operationId": "Get customer by password verification token",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_customers:{projectKey}",
              "view_customers:{projectKey}:{storeKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "passwordToken",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "storeKey",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-methodName": "withPasswordToken"
    },
    "/{projectKey}/in-store/key={storeKey}/customers/email-token={emailToken}": {
      "get": {
        "description": "Get Customer by emailToken",
        "operationId": "Get customer by email verification token",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_customers:{projectKey}",
              "view_customers:{projectKey}:{storeKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "emailToken",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "storeKey",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-methodName": "withEmailToken"
    },
    "/{projectKey}/in-store/key={storeKey}/customers/email-token": {
      "post": {
        "description": "Create a Token for verifying the Customer's Email",
        "operationId": "Create a Token for verifying the Customer's Email",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/CustomerCreateEmailToken"
            },
            "in": "body",
            "name": "body",
            "required": true
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_customers:{projectKey}",
              "manage_customers:{projectKey}:{storeKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "storeKey",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ]
    },
    "/{projectKey}/in-store/key={storeKey}/customers/email/confirm": {
      "post": {
        "description": "Verifies customer's email using a token.",
        "operationId": "Verify Customer's Email",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/CustomerEmailVerify"
            },
            "in": "body",
            "name": "body",
            "required": true
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_customers:{projectKey}",
              "manage_customers:{projectKey}:{storeKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "storeKey",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ]
    },
    "/{projectKey}/in-store/key={storeKey}/customers/password": {
      "post": {
        "description": "Change a customers password",
        "operationId": "Change a customers password",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/CustomerChangePassword"
            },
            "in": "body",
            "name": "body",
            "required": true
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_customers:{projectKey}",
              "manage_customers:{projectKey}:{storeKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "storeKey",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ]
    },
    "/{projectKey}/in-store/key={storeKey}/customers/password/reset": {
      "post": {
        "description": "Set a new password using a token.",
        "operationId": "Reset Customer's Password",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/CustomerResetPassword"
            },
            "in": "body",
            "name": "body",
            "required": true
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_customers:{projectKey}",
              "manage_customers:{projectKey}:{storeKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "storeKey",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ]
    },
    "/{projectKey}/in-store/key={storeKey}/customers/password-token": {
      "post": {
        "description": "The token value is used to reset the password of the customer with the given email. The token is\nvalid only for 10 minutes.\n",
        "operationId": "Create a Token for Resetting the Customer's Password",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CustomerToken"
            }
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/CustomerCreatePasswordResetToken"
            },
            "in": "body",
            "name": "body",
            "required": true
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_customers:{projectKey}",
              "manage_customers:{projectKey}:{storeKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "storeKey",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ]
    },
    "/{projectKey}/in-store/key={storeKey}/customers/key={key}": {
      "get": {
        "description": "Returns a customer by its Key from a specific Store. The {storeKey} path parameter maps to a Store's key.\nIt also considers customers that do not have the stores field.\nIf the customer exists in the commercetools project but the stores field references different stores,\nthis method returns a ResourceNotFound error.\n",
        "operationId": "Get Customer by key",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_customers:{projectKey}",
              "view_customers:{projectKey}:{storeKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "If the customer exists in the commercetools project but the stores field references a different store,\nthis method returns a ResourceNotFound error.\n",
        "operationId": "Update Customer by key",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "version": 3,
                "actions": [
                  {
                    "action": "addAddress",
                    "address": {
                      "streetName": "Any Street",
                      "streetNumber": "1337",
                      "postalCode": "11111",
                      "city": "Any City",
                      "country": "US"
                    }
                  }
                ]
              },
              "$ref": "#/definitions/Update"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_customers:{projectKey}",
              "manage_customers:{projectKey}:{storeKey}"
            ]
          }
        ]
      },
      "delete": {
        "description": "Delete Customer by key",
        "operationId": "Delete Customer by key",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:dataErasure:dataErasure"
          },
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_customers:{projectKey}",
              "manage_customers:{projectKey}:{storeKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "key",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "storeKey",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-methodName": "withKey"
    },
    "/{projectKey}/in-store/key={storeKey}/customers/{ID}": {
      "get": {
        "description": "Returns a customer by its ID from a specific Store. The {storeKey} path parameter maps to a Store's key.\nIt also considers customers that do not have the stores field.\nIf the customer exists in the commercetools project but the stores field references different stores,\nthis method returns a ResourceNotFound error.\n",
        "operationId": "Get Customer by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_customers:{projectKey}",
              "view_customers:{projectKey}:{storeKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "Updates a customer in the store specified by {storeKey}. The {storeKey} path parameter maps to a Store's key.\nIf the customer exists in the commercetools project but the stores field references a different store,\nthis method returns a ResourceNotFound error.\n",
        "operationId": "Update Customer by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "version": 3,
                "actions": [
                  {
                    "action": "addAddress",
                    "address": {
                      "streetName": "Any Street",
                      "streetNumber": "1337",
                      "postalCode": "11111",
                      "city": "Any City",
                      "country": "US"
                    }
                  }
                ]
              },
              "$ref": "#/definitions/Update"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_customers:{projectKey}",
              "manage_customers:{projectKey}:{storeKey}"
            ]
          }
        ]
      },
      "delete": {
        "description": "Delete Customer by ID",
        "operationId": "Delete Customer by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:dataErasure:dataErasure"
          },
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_customers:{projectKey}",
              "manage_customers:{projectKey}:{storeKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "ID",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "storeKey",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-methodName": "withId"
    },
    "/{projectKey}/in-store/key={storeKey}/login": {
      "post": {
        "description": "Authenticate Customer (Sign In)",
        "operationId": "Authenticate Customer (Sign In)",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "201": {
            "description": "",
            "examples": {
              "application/json": {
                "customer": {
                  "addresses": [],
                  "email": "<random>@example.com",
                  "firstName": "John",
                  "id": "some_123_id",
                  "isEmailVerified": false,
                  "lastName": "Doe",
                  "password": "secret123",
                  "version": 1,
                  "createdAt": "2015-07-06T13:22:33.339Z",
                  "lastModifiedAt": "2015-07-06T13:22:33.339Z"
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/CustomerSignInResult"
            }
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/CustomerSignin"
            },
            "in": "body",
            "name": "body",
            "required": true
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_customers:{projectKey}",
              "manage_customers:{projectKey}:{storeKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "storeKey",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ]
    },
    "/{projectKey}/in-store/key={storeKey}/shipping-methods/matching-cart": {
      "get": {
        "operationId": "Get ShippingMethods for a cart in a store",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "type": "string",
            "in": "query",
            "name": "cartId",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_orders:{projectKey}",
              "manage_customers:{projectKey}:{storeKey}",
              "view_shipping_methods:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "storeKey",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ]
    },
    "/{projectKey}/me": {
      "get": {
        "operationId": "Get customer",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "description": "A query endpoint that supports sorting does so through the sort query parameter. The provided value must be\na valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on\nthe specific query endpoints.\n\nHere are some examples of sort expressions:\n\n    name desc\n    dog.age asc\n\nIf multiple sort expressions are specified via multiple sort parameters, they are combined into a composed\nsort where the results are first sorted by the first expression, followed by equal values being sorted\naccording to the second expression, and so on.\n\nNote: The sorting is case sensitive.\n",
            "type": "string",
            "in": "query",
            "name": "sort"
          },
          {
            "description": "If queries support ad-hoc filtering of resources through flexible predicates, they do so via the where query\nparameter that accepts a single (possibly compound) predicate to determine whether a specific resource\nrepresentation should be included in the result.\n\nThe structure of predicates and the names of the fields follow the structure and naming of the fields in the\ndocumented response representation of the query results.\n\nExamples of predicates:\n\n    // Compare a field's value to a given value\n    name = \"Peter\"\n    age < 42\n    age > 42\n    age <= 42\n    age >= 42\n    age <> 42\n\n    // Combine any two conditional expressions in a logical conjunction / disjunction\n    name = \"Peter\" and age < 42\n    name = \"Peter\" or age < 42\n\n    // Negate any other conditional expression\n    not (name = \"Peter\" and age < 42)\n\n    // Check whether a field's value is or is not contained in\n    // a specified set of values.\n    age in (42, 43, 44)\n    age not in (42, 43, 44)\n\n    // Check whether an array contains all or any of a set of values\n    tags contains all (\"a\", \"b\", \"c\")\n    tags contains any (\"a\", \"b\", \"c\")\n\n    // Check whether an array is empty\n    tags is empty\n\n    // Check whether a field exists & has a non-null value\n    name is defined\n    name is not defined\n\n    // Descend into nested objects\n    dog(age < 7 and name = \"Beethoven\")\n\n    // Descend into nested arrays of objects\n    cities(zip > 10000 and zip < 20000)\n\nA query endpoint usually restricts predicates to only be allowed on a specified subset of a resource\nrepresentation's fields. The documentation of the endpoint will therefore list fields that can be used\nfor constructing predicates.\n\nIf multiple predicates are specified via multiple where query parameters, the individual predicates are\ncombined in a logical conjunction, just as if they had been specified in a single where query parameter\nand combined with and.\n\nNote: The encoding of the predicates is UTF-8 and the predicate must be URL-encoded in the HTTP request.\n",
            "type": "string",
            "in": "query",
            "name": "where"
          },
          {
            "$ref": "#/parameters/trait:paging:limit"
          },
          {
            "$ref": "#/parameters/trait:paging:offset"
          },
          {
            "$ref": "#/parameters/trait:paging:withTotal"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          },
          {
            "$ref": "#/parameters/trait:query:/^var[.][a-zA-Z0-9]+$/"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_my_profile:{projectKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "Create a customer",
        "operationId": "Create a customer",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "version": 3,
                "actions": [
                  {
                    "action": "addAddress",
                    "address": {
                      "streetName": "Any Street",
                      "streetNumber": "1337",
                      "postalCode": "11111",
                      "city": "Any City",
                      "country": "US"
                    }
                  }
                ]
              },
              "$ref": "#/definitions/Update"
            },
            "in": "body",
            "name": "body",
            "required": true
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_my_profile:{projectKey}"
            ]
          }
        ]
      },
      "delete": {
        "description": "Delete a Customer",
        "operationId": "Delete a Customer",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:versioned:version"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_my_profile:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ]
    },
    "/{projectKey}/me/shopping-lists": {
      "get": {
        "description": "Query shopping-lists",
        "operationId": "Query shopping-lists",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "description": "A query endpoint that supports sorting does so through the sort query parameter. The provided value must be\na valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on\nthe specific query endpoints.\n\nHere are some examples of sort expressions:\n\n    name desc\n    dog.age asc\n\nIf multiple sort expressions are specified via multiple sort parameters, they are combined into a composed\nsort where the results are first sorted by the first expression, followed by equal values being sorted\naccording to the second expression, and so on.\n\nNote: The sorting is case sensitive.\n",
            "type": "string",
            "in": "query",
            "name": "sort"
          },
          {
            "description": "If queries support ad-hoc filtering of resources through flexible predicates, they do so via the where query\nparameter that accepts a single (possibly compound) predicate to determine whether a specific resource\nrepresentation should be included in the result.\n\nThe structure of predicates and the names of the fields follow the structure and naming of the fields in the\ndocumented response representation of the query results.\n\nExamples of predicates:\n\n    // Compare a field's value to a given value\n    name = \"Peter\"\n    age < 42\n    age > 42\n    age <= 42\n    age >= 42\n    age <> 42\n\n    // Combine any two conditional expressions in a logical conjunction / disjunction\n    name = \"Peter\" and age < 42\n    name = \"Peter\" or age < 42\n\n    // Negate any other conditional expression\n    not (name = \"Peter\" and age < 42)\n\n    // Check whether a field's value is or is not contained in\n    // a specified set of values.\n    age in (42, 43, 44)\n    age not in (42, 43, 44)\n\n    // Check whether an array contains all or any of a set of values\n    tags contains all (\"a\", \"b\", \"c\")\n    tags contains any (\"a\", \"b\", \"c\")\n\n    // Check whether an array is empty\n    tags is empty\n\n    // Check whether a field exists & has a non-null value\n    name is defined\n    name is not defined\n\n    // Descend into nested objects\n    dog(age < 7 and name = \"Beethoven\")\n\n    // Descend into nested arrays of objects\n    cities(zip > 10000 and zip < 20000)\n\nA query endpoint usually restricts predicates to only be allowed on a specified subset of a resource\nrepresentation's fields. The documentation of the endpoint will therefore list fields that can be used\nfor constructing predicates.\n\nIf multiple predicates are specified via multiple where query parameters, the individual predicates are\ncombined in a logical conjunction, just as if they had been specified in a single where query parameter\nand combined with and.\n\nNote: The encoding of the predicates is UTF-8 and the predicate must be URL-encoded in the HTTP request.\n",
            "type": "string",
            "in": "query",
            "name": "where"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          },
          {
            "$ref": "#/parameters/trait:paging:limit"
          },
          {
            "$ref": "#/parameters/trait:paging:offset"
          },
          {
            "$ref": "#/parameters/trait:paging:withTotal"
          },
          {
            "$ref": "#/parameters/trait:query:/^var[.][a-zA-Z0-9]+$/"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_my_shopping_lists:{projectKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "Create MyShoppingList",
        "operationId": "Create MyShoppingList",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "201": {
            "description": "",
            "examples": {
              "application/json": {
                "id": "9693f04b-5aec-467f-baa1-fc74da7d0c3d",
                "version": 1,
                "name": {
                  "en": "test"
                },
                "key": "test",
                "lineItems": [],
                "textLineItems": [],
                "createdAt": "2017-03-30T11:49:40.904Z",
                "lastModifiedAt": "2017-03-30T11:49:40.904Z"
              }
            },
            "schema": {
              "$ref": "#/definitions/MyShoppingList"
            }
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "name": {
                  "en": "test"
                }
              },
              "$ref": "#/definitions/MyShoppingListDraft"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_my_shopping_lists:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-updateable": "MyShoppingList",
      "x-annotation-deleteable": "MyShoppingList",
      "x-annotation-createable": "MyShoppingListDraft"
    },
    "/{projectKey}/me/shopping-lists/key={key}": {
      "post": {
        "description": "Update MyShoppingList by key",
        "operationId": "Update MyShoppingList by key",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "version": 1,
                "actions": [
                  {
                    "action": "changeName",
                    "name": {
                      "en": "New Name"
                    }
                  }
                ]
              },
              "$ref": "#/definitions/MyShoppingListUpdate"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_my_shopping_lists:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Get MyShoppingList by key",
        "operationId": "Get MyShoppingList by key",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_my_shopping_lists:{projectKey}"
            ]
          }
        ]
      },
      "delete": {
        "description": "Delete MyShoppingList by key",
        "operationId": "Delete MyShoppingList by key",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_my_shopping_lists:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "key",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-methodName": "withKey"
    },
    "/{projectKey}/me/shopping-lists/{ID}": {
      "post": {
        "description": "Update MyShoppingList by ID",
        "operationId": "Update MyShoppingList by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "version": 1,
                "actions": [
                  {
                    "action": "changeName",
                    "name": {
                      "en": "New Name"
                    }
                  }
                ]
              },
              "$ref": "#/definitions/MyShoppingListUpdate"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_my_shopping_lists:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Get MyShoppingList by ID",
        "operationId": "Get MyShoppingList by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_my_shopping_lists:{projectKey}"
            ]
          }
        ]
      },
      "delete": {
        "description": "Delete MyShoppingList by ID",
        "operationId": "Delete MyShoppingList by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_my_shopping_lists:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "ID",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-methodName": "withId"
    },
    "/{projectKey}/me/payments": {
      "get": {
        "description": "Query payments",
        "operationId": "Query payments",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "description": "A query endpoint that supports sorting does so through the sort query parameter. The provided value must be\na valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on\nthe specific query endpoints.\n\nHere are some examples of sort expressions:\n\n    name desc\n    dog.age asc\n\nIf multiple sort expressions are specified via multiple sort parameters, they are combined into a composed\nsort where the results are first sorted by the first expression, followed by equal values being sorted\naccording to the second expression, and so on.\n\nNote: The sorting is case sensitive.\n",
            "type": "string",
            "in": "query",
            "name": "sort"
          },
          {
            "description": "If queries support ad-hoc filtering of resources through flexible predicates, they do so via the where query\nparameter that accepts a single (possibly compound) predicate to determine whether a specific resource\nrepresentation should be included in the result.\n\nThe structure of predicates and the names of the fields follow the structure and naming of the fields in the\ndocumented response representation of the query results.\n\nExamples of predicates:\n\n    // Compare a field's value to a given value\n    name = \"Peter\"\n    age < 42\n    age > 42\n    age <= 42\n    age >= 42\n    age <> 42\n\n    // Combine any two conditional expressions in a logical conjunction / disjunction\n    name = \"Peter\" and age < 42\n    name = \"Peter\" or age < 42\n\n    // Negate any other conditional expression\n    not (name = \"Peter\" and age < 42)\n\n    // Check whether a field's value is or is not contained in\n    // a specified set of values.\n    age in (42, 43, 44)\n    age not in (42, 43, 44)\n\n    // Check whether an array contains all or any of a set of values\n    tags contains all (\"a\", \"b\", \"c\")\n    tags contains any (\"a\", \"b\", \"c\")\n\n    // Check whether an array is empty\n    tags is empty\n\n    // Check whether a field exists & has a non-null value\n    name is defined\n    name is not defined\n\n    // Descend into nested objects\n    dog(age < 7 and name = \"Beethoven\")\n\n    // Descend into nested arrays of objects\n    cities(zip > 10000 and zip < 20000)\n\nA query endpoint usually restricts predicates to only be allowed on a specified subset of a resource\nrepresentation's fields. The documentation of the endpoint will therefore list fields that can be used\nfor constructing predicates.\n\nIf multiple predicates are specified via multiple where query parameters, the individual predicates are\ncombined in a logical conjunction, just as if they had been specified in a single where query parameter\nand combined with and.\n\nNote: The encoding of the predicates is UTF-8 and the predicate must be URL-encoded in the HTTP request.\n",
            "type": "string",
            "in": "query",
            "name": "where"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          },
          {
            "$ref": "#/parameters/trait:paging:limit"
          },
          {
            "$ref": "#/parameters/trait:paging:offset"
          },
          {
            "$ref": "#/parameters/trait:paging:withTotal"
          },
          {
            "$ref": "#/parameters/trait:query:/^var[.][a-zA-Z0-9]+$/"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_my_payments:{projectKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "Create MyPayment",
        "operationId": "Create MyPayment",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "201": {
            "description": "",
            "examples": {
              "application/json": {
                "id": "776f9240-09e1-4416-a34f-32fa80f0333f",
                "version": 1,
                "amountPlanned": {
                  "type": "centPrecision",
                  "fractionDigits": 2,
                  "currencyCode": "USD",
                  "centAmount": 1000
                },
                "paymentMethodInfo": {
                  "paymentInterface": "STRIPE",
                  "method": "CREDIT_CARD",
                  "name": {
                    "en": "Credit Card"
                  }
                },
                "transactions": [
                  {
                    "id": "14748fe6-7f77-456a-96c8-913b1e4bbc9a",
                    "timestamp": "2015-10-20T08:54:24.000Z",
                    "type": "Charge",
                    "amount": {
                      "type": "centPrecision",
                      "fractionDigits": 2,
                      "currencyCode": "USD",
                      "centAmount": 1000
                    },
                    "state": "Pending"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/MyPayment"
            }
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "amountPlanned": {
                  "currencyCode": "USD",
                  "centAmount": 1000
                },
                "paymentMethodInfo": {
                  "paymentInterface": "STRIPE",
                  "method": "CREDIT_CARD",
                  "name": {
                    "en": "Credit Card"
                  }
                },
                "transaction": {
                  "timestamp": "2015-10-20T08:54:24.000Z",
                  "type": "Charge",
                  "amount": {
                    "currencyCode": "USD",
                    "centAmount": 1000
                  }
                }
              },
              "$ref": "#/definitions/MyPaymentDraft"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_my_payments:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-updateable": "MyPayment",
      "x-annotation-deleteable": "MyPayment",
      "x-annotation-createable": "MyPaymentDraft"
    },
    "/{projectKey}/me/payments/key={key}": {
      "post": {
        "description": "Update MyPayment by key",
        "operationId": "Update MyPayment by key",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "version": 1,
                "actions": [
                  {
                    "action": "setMethodInfoMethod",
                    "method": "12334567890123456"
                  }
                ]
              },
              "$ref": "#/definitions/MyPaymentUpdate"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_my_payments:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Get MyPayment by key",
        "operationId": "Get MyPayment by key",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_my_payments:{projectKey}"
            ]
          }
        ]
      },
      "delete": {
        "description": "Delete MyPayment by key",
        "operationId": "Delete MyPayment by key",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_my_payments:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "key",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-methodName": "withKey"
    },
    "/{projectKey}/me/payments/{ID}": {
      "post": {
        "description": "Update MyPayment by ID",
        "operationId": "Update MyPayment by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "version": 1,
                "actions": [
                  {
                    "action": "setMethodInfoMethod",
                    "method": "12334567890123456"
                  }
                ]
              },
              "$ref": "#/definitions/MyPaymentUpdate"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_my_payments:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Get MyPayment by ID",
        "operationId": "Get MyPayment by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_my_payments:{projectKey}"
            ]
          }
        ]
      },
      "delete": {
        "description": "Delete MyPayment by ID",
        "operationId": "Delete MyPayment by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_my_payments:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "ID",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-methodName": "withId"
    },
    "/{projectKey}/me/email/confirm": {
      "post": {
        "operationId": "Verify Customer's Email",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_my_profile:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ]
    },
    "/{projectKey}/me/password": {
      "post": {
        "operationId": "Change a customers password",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "body",
            "name": "body",
            "required": true
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_my_profile:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ]
    },
    "/{projectKey}/me/password/reset": {
      "post": {
        "operationId": "Reset Customer's Password",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_my_profile:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ]
    },
    "/{projectKey}/me/signup": {
      "post": {
        "operationId": "Signup a customer",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CustomerSignInResult"
            }
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/MyCustomerDraft"
            },
            "in": "body",
            "name": "body",
            "required": true
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_my_profile:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ]
    },
    "/{projectKey}/me/login": {
      "post": {
        "operationId": "Authenticate Customer (Sign In)",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "body",
            "name": "body",
            "required": true
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_my_profile:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ]
    },
    "/{projectKey}/me/active-cart": {
      "get": {
        "operationId": "Get active cart",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_my_orders:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ]
    },
    "/{projectKey}/me/carts": {
      "get": {
        "description": "Query carts",
        "operationId": "Query carts",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "description": "A query endpoint that supports sorting does so through the sort query parameter. The provided value must be\na valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on\nthe specific query endpoints.\n\nHere are some examples of sort expressions:\n\n    name desc\n    dog.age asc\n\nIf multiple sort expressions are specified via multiple sort parameters, they are combined into a composed\nsort where the results are first sorted by the first expression, followed by equal values being sorted\naccording to the second expression, and so on.\n\nNote: The sorting is case sensitive.\n",
            "type": "string",
            "in": "query",
            "name": "sort"
          },
          {
            "description": "If queries support ad-hoc filtering of resources through flexible predicates, they do so via the where query\nparameter that accepts a single (possibly compound) predicate to determine whether a specific resource\nrepresentation should be included in the result.\n\nThe structure of predicates and the names of the fields follow the structure and naming of the fields in the\ndocumented response representation of the query results.\n\nExamples of predicates:\n\n    // Compare a field's value to a given value\n    name = \"Peter\"\n    age < 42\n    age > 42\n    age <= 42\n    age >= 42\n    age <> 42\n\n    // Combine any two conditional expressions in a logical conjunction / disjunction\n    name = \"Peter\" and age < 42\n    name = \"Peter\" or age < 42\n\n    // Negate any other conditional expression\n    not (name = \"Peter\" and age < 42)\n\n    // Check whether a field's value is or is not contained in\n    // a specified set of values.\n    age in (42, 43, 44)\n    age not in (42, 43, 44)\n\n    // Check whether an array contains all or any of a set of values\n    tags contains all (\"a\", \"b\", \"c\")\n    tags contains any (\"a\", \"b\", \"c\")\n\n    // Check whether an array is empty\n    tags is empty\n\n    // Check whether a field exists & has a non-null value\n    name is defined\n    name is not defined\n\n    // Descend into nested objects\n    dog(age < 7 and name = \"Beethoven\")\n\n    // Descend into nested arrays of objects\n    cities(zip > 10000 and zip < 20000)\n\nA query endpoint usually restricts predicates to only be allowed on a specified subset of a resource\nrepresentation's fields. The documentation of the endpoint will therefore list fields that can be used\nfor constructing predicates.\n\nIf multiple predicates are specified via multiple where query parameters, the individual predicates are\ncombined in a logical conjunction, just as if they had been specified in a single where query parameter\nand combined with and.\n\nNote: The encoding of the predicates is UTF-8 and the predicate must be URL-encoded in the HTTP request.\n",
            "type": "string",
            "in": "query",
            "name": "where"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          },
          {
            "$ref": "#/parameters/trait:paging:limit"
          },
          {
            "$ref": "#/parameters/trait:paging:offset"
          },
          {
            "$ref": "#/parameters/trait:paging:withTotal"
          },
          {
            "$ref": "#/parameters/trait:query:/^var[.][a-zA-Z0-9]+$/"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_my_orders:{projectKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "Create MyCart",
        "operationId": "Create MyCart",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "201": {
            "description": "",
            "examples": {
              "application/json": {
                "type": "Cart",
                "id": "2a3baa00-44fa-4ab8-bec7-933c31e18dcc",
                "version": 5,
                "createdAt": "2015-09-22T15:36:17.510Z",
                "lastModifiedAt": "2015-09-22T15:41:55.816Z",
                "lineItems": [
                  {
                    "id": "b925a817-d5ad-48bb-a407-29ad8e0649b5",
                    "productId": "9f10dcfb-5cc9-4a18-843a-c07f7e22d01f",
                    "name": {
                      "en": "SAPPHIRE"
                    },
                    "productType": {
                      "typeId": "product-type",
                      "id": "2543e1d8-4915-4f72-a3c9-1df9b1b0082d",
                      "version": 8
                    },
                    "productSlug": {
                      "en": "sapphire1421832124423"
                    },
                    "variant": {
                      "id": 1,
                      "sku": "sku_SAPPHIRE_variant1_1421832124423",
                      "prices": [
                        {
                          "value": {
                            "type": "centPrecision",
                            "fractionDigits": 2,
                            "currencyCode": "EUR",
                            "centAmount": 2800
                          },
                          "id": "8da659ef-9e54-447d-9c36-84912db1848f"
                        }
                      ],
                      "images": [
                        {
                          "url": "https://www.commercetools.com/cli/data/252542005_1.jpg",
                          "dimensions": {
                            "w": 1400,
                            "h": 1400
                          }
                        }
                      ],
                      "attributes": [],
                      "assets": []
                    },
                    "price": {
                      "value": {
                        "type": "centPrecision",
                        "fractionDigits": 2,
                        "currencyCode": "EUR",
                        "centAmount": 2800
                      },
                      "id": "8da659ef-9e54-447d-9c36-84912db1848f"
                    },
                    "quantity": 2,
                    "discountedPricePerQuantity": [],
                    "state": [
                      {
                        "quantity": 2,
                        "state": {
                          "typeId": "state",
                          "id": "7c2e2694-aefe-43d7-888e-6a99514caaca"
                        }
                      }
                    ],
                    "priceMode": "Platform",
                    "lineItemMode": "Standard",
                    "totalPrice": {
                      "type": "centPrecision",
                      "fractionDigits": 2,
                      "currencyCode": "EUR",
                      "centAmount": 5600
                    }
                  }
                ],
                "store": {
                  "typeId": "store",
                  "key": "test-key"
                },
                "cartState": "Active",
                "totalPrice": {
                  "type": "centPrecision",
                  "fractionDigits": 2,
                  "currencyCode": "EUR",
                  "centAmount": 5600
                },
                "customLineItems": [],
                "discountCodes": [],
                "inventoryMode": "None",
                "taxMode": "Platform",
                "taxRoundingMode": "HalfEven",
                "taxCalculationMode": "LineItemLevel",
                "refusedGifts": [],
                "origin": "Customer"
              }
            },
            "schema": {
              "$ref": "#/definitions/MyCart"
            }
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "currency": "EUR"
              },
              "$ref": "#/definitions/MyCartDraft"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_my_orders:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ]
    },
    "/{projectKey}/me/carts/{ID}": {
      "get": {
        "description": "Get MyCart by ID",
        "operationId": "Get MyCart by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_my_orders:{projectKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "Update MyCart by ID",
        "operationId": "Update MyCart by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "version": 1,
                "actions": [
                  {
                    "action": "addLineItem",
                    "productId": "9f10dcfb-5cc9-4a18-843a-c07f7e22d01f",
                    "variantId": 1,
                    "quantity": 1
                  }
                ]
              },
              "$ref": "#/definitions/Update"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_my_orders:{projectKey}"
            ]
          }
        ]
      },
      "delete": {
        "description": "Delete MyCart by ID",
        "operationId": "Delete MyCart by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_my_orders:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "ID",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-methodName": "withId"
    },
    "/{projectKey}/me/orders": {
      "get": {
        "description": "Query orders",
        "operationId": "Query orders",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "description": "A query endpoint that supports sorting does so through the sort query parameter. The provided value must be\na valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on\nthe specific query endpoints.\n\nHere are some examples of sort expressions:\n\n    name desc\n    dog.age asc\n\nIf multiple sort expressions are specified via multiple sort parameters, they are combined into a composed\nsort where the results are first sorted by the first expression, followed by equal values being sorted\naccording to the second expression, and so on.\n\nNote: The sorting is case sensitive.\n",
            "type": "string",
            "in": "query",
            "name": "sort"
          },
          {
            "description": "If queries support ad-hoc filtering of resources through flexible predicates, they do so via the where query\nparameter that accepts a single (possibly compound) predicate to determine whether a specific resource\nrepresentation should be included in the result.\n\nThe structure of predicates and the names of the fields follow the structure and naming of the fields in the\ndocumented response representation of the query results.\n\nExamples of predicates:\n\n    // Compare a field's value to a given value\n    name = \"Peter\"\n    age < 42\n    age > 42\n    age <= 42\n    age >= 42\n    age <> 42\n\n    // Combine any two conditional expressions in a logical conjunction / disjunction\n    name = \"Peter\" and age < 42\n    name = \"Peter\" or age < 42\n\n    // Negate any other conditional expression\n    not (name = \"Peter\" and age < 42)\n\n    // Check whether a field's value is or is not contained in\n    // a specified set of values.\n    age in (42, 43, 44)\n    age not in (42, 43, 44)\n\n    // Check whether an array contains all or any of a set of values\n    tags contains all (\"a\", \"b\", \"c\")\n    tags contains any (\"a\", \"b\", \"c\")\n\n    // Check whether an array is empty\n    tags is empty\n\n    // Check whether a field exists & has a non-null value\n    name is defined\n    name is not defined\n\n    // Descend into nested objects\n    dog(age < 7 and name = \"Beethoven\")\n\n    // Descend into nested arrays of objects\n    cities(zip > 10000 and zip < 20000)\n\nA query endpoint usually restricts predicates to only be allowed on a specified subset of a resource\nrepresentation's fields. The documentation of the endpoint will therefore list fields that can be used\nfor constructing predicates.\n\nIf multiple predicates are specified via multiple where query parameters, the individual predicates are\ncombined in a logical conjunction, just as if they had been specified in a single where query parameter\nand combined with and.\n\nNote: The encoding of the predicates is UTF-8 and the predicate must be URL-encoded in the HTTP request.\n",
            "type": "string",
            "in": "query",
            "name": "where"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          },
          {
            "$ref": "#/parameters/trait:paging:limit"
          },
          {
            "$ref": "#/parameters/trait:paging:offset"
          },
          {
            "$ref": "#/parameters/trait:paging:withTotal"
          },
          {
            "$ref": "#/parameters/trait:query:/^var[.][a-zA-Z0-9]+$/"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_my_orders:{projectKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "Create MyOrder",
        "operationId": "Create MyOrder",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "201": {
            "description": "",
            "examples": {
              "application/json": {
                "type": "Order",
                "id": "92f5a867-bf19-47ab-982c-6720a03a3921",
                "version": 1,
                "createdAt": "2017-01-04T19:54:49.797Z",
                "lastModifiedAt": "2017-01-04T19:54:49.797Z",
                "totalPrice": {
                  "type": "centPrecision",
                  "fractionDigits": 2,
                  "currencyCode": "EUR",
                  "centAmount": 1000
                },
                "orderState": "Open",
                "syncInfo": [],
                "returnInfo": [],
                "refusedGifts": [],
                "taxMode": "External",
                "inventoryMode": "None",
                "taxRoundingMode": "HalfEven",
                "lineItems": [
                  {
                    "id": "7297c742-d8b0-484b-aadc-1d0ba1869dc9",
                    "productId": "c5c75935-595a-4cc3-a80e-24e9a9c55094",
                    "name": {
                      "en": "MyProduct"
                    },
                    "productType": {
                      "typeId": "product-type",
                      "id": "a5c7e173-9754-4f02-9b18-a600896ae0e1",
                      "version": 21
                    },
                    "productSlug": {
                      "de": "neues-produkt-slug-1234678",
                      "en": "new-product-slug-12345678"
                    },
                    "variant": {
                      "id": 1,
                      "sku": "some-sku-123",
                      "prices": [
                        {
                          "value": {
                            "type": "centPrecision",
                            "fractionDigits": 2,
                            "currencyCode": "EUR",
                            "centAmount": 1000
                          },
                          "id": "6d36dc85-6131-495d-9f20-d00f411d4124"
                        }
                      ],
                      "images": [],
                      "attributes": [
                        {
                          "name": "text",
                          "value": "attribute-value"
                        },
                        {
                          "name": "enum",
                          "value": {
                            "key": "test",
                            "label": "test"
                          }
                        }
                      ],
                      "assets": []
                    },
                    "price": {
                      "id": "6d36dc85-6131-495d-9f20-d00f411d4124",
                      "value": {
                        "type": "centPrecision",
                        "fractionDigits": 2,
                        "currencyCode": "EUR",
                        "centAmount": 1000
                      }
                    },
                    "quantity": 1,
                    "discountedPricePerQuantity": [],
                    "taxRate": {
                      "name": "Bla",
                      "amount": 0.1,
                      "includedInPrice": false,
                      "country": "DE",
                      "subRates": []
                    },
                    "state": [
                      {
                        "quantity": 1,
                        "state": {
                          "typeId": "state",
                          "id": "7c2e2694-aefe-43d7-888e-6a99514caaca"
                        }
                      }
                    ],
                    "priceMode": "Platform",
                    "lineItemMode": "Standard",
                    "totalPrice": {
                      "type": "centPrecision",
                      "fractionDigits": 2,
                      "currencyCode": "EUR",
                      "centAmount": 1000
                    },
                    "taxedPrice": {
                      "totalNet": {
                        "type": "centPrecision",
                        "fractionDigits": 2,
                        "currencyCode": "EUR",
                        "centAmount": 1000
                      },
                      "totalGross": {
                        "type": "centPrecision",
                        "fractionDigits": 2,
                        "currencyCode": "EUR",
                        "centAmount": 1100
                      }
                    }
                  }
                ],
                "customLineItems": [],
                "discountCodes": [],
                "lastMessageSequenceNumber": 1,
                "origin": "Customer"
              }
            },
            "schema": {
              "$ref": "#/definitions/MyOrder"
            }
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "id": "7c2e2694-aefe-43d7-888e-6a99514caaca",
                "version": 10,
                "orderNumber": "201612010001"
              },
              "$ref": "#/definitions/MyOrderFromCartDraft"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_my_orders:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ]
    },
    "/{projectKey}/me/orders/{ID}": {
      "get": {
        "description": "Get MyOrder by ID",
        "operationId": "Get MyOrder by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_my_orders:{projectKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "Update MyOrder by ID",
        "operationId": "Update MyOrder by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "version": 1,
                "actions": [
                  {
                    "action": "changeOrderState",
                    "orderState": "Complete"
                  }
                ]
              },
              "$ref": "#/definitions/Update"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_my_orders:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "ID",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-methodName": "withId"
    },
    "/{projectKey}/custom-objects": {
      "get": {
        "description": "The query endpoint allows to retrieve custom objects in a specific container or all custom objects.\nFor performance reasons, it is highly advisable to query only for custom objects in a container by using\nthe container field in the where predicate.\n",
        "operationId": "Query custom-objects",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "description": "A query endpoint that supports sorting does so through the sort query parameter. The provided value must be\na valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on\nthe specific query endpoints.\n\nHere are some examples of sort expressions:\n\n    name desc\n    dog.age asc\n\nIf multiple sort expressions are specified via multiple sort parameters, they are combined into a composed\nsort where the results are first sorted by the first expression, followed by equal values being sorted\naccording to the second expression, and so on.\n\nNote: The sorting is case sensitive.\n",
            "type": "string",
            "in": "query",
            "name": "sort"
          },
          {
            "description": "If queries support ad-hoc filtering of resources through flexible predicates, they do so via the where query\nparameter that accepts a single (possibly compound) predicate to determine whether a specific resource\nrepresentation should be included in the result.\n\nThe structure of predicates and the names of the fields follow the structure and naming of the fields in the\ndocumented response representation of the query results.\n\nExamples of predicates:\n\n    // Compare a field's value to a given value\n    name = \"Peter\"\n    age < 42\n    age > 42\n    age <= 42\n    age >= 42\n    age <> 42\n\n    // Combine any two conditional expressions in a logical conjunction / disjunction\n    name = \"Peter\" and age < 42\n    name = \"Peter\" or age < 42\n\n    // Negate any other conditional expression\n    not (name = \"Peter\" and age < 42)\n\n    // Check whether a field's value is or is not contained in\n    // a specified set of values.\n    age in (42, 43, 44)\n    age not in (42, 43, 44)\n\n    // Check whether an array contains all or any of a set of values\n    tags contains all (\"a\", \"b\", \"c\")\n    tags contains any (\"a\", \"b\", \"c\")\n\n    // Check whether an array is empty\n    tags is empty\n\n    // Check whether a field exists & has a non-null value\n    name is defined\n    name is not defined\n\n    // Descend into nested objects\n    dog(age < 7 and name = \"Beethoven\")\n\n    // Descend into nested arrays of objects\n    cities(zip > 10000 and zip < 20000)\n\nA query endpoint usually restricts predicates to only be allowed on a specified subset of a resource\nrepresentation's fields. The documentation of the endpoint will therefore list fields that can be used\nfor constructing predicates.\n\nIf multiple predicates are specified via multiple where query parameters, the individual predicates are\ncombined in a logical conjunction, just as if they had been specified in a single where query parameter\nand combined with and.\n\nNote: The encoding of the predicates is UTF-8 and the predicate must be URL-encoded in the HTTP request.\n",
            "type": "string",
            "in": "query",
            "name": "where"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          },
          {
            "$ref": "#/parameters/trait:paging:limit"
          },
          {
            "$ref": "#/parameters/trait:paging:offset"
          },
          {
            "$ref": "#/parameters/trait:paging:withTotal"
          },
          {
            "$ref": "#/parameters/trait:query:/^var[.][a-zA-Z0-9]+$/"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_products:{projectKey}",
              "view_orders:{projectKey}",
              "view_customers:{projectKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "Creates a new custom object or updates an existing custom object.\nIf an object with the given container/key exists,\nthe object will be replaced with the new value and the version is incremented.\nIf the request contains a version and an object with the given container/key exists then the version\nmust match the version of the existing object. Concurrent updates for the same custom object still can result\nin a Conflict (409) even if the version is not provided.\nFields with null values will not be saved.\n",
        "operationId": "Create CustomObject",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "201": {
            "description": "",
            "examples": {
              "application/json": {
                "id": "d8523d32-a79d-441c-90f4-744cc342126e",
                "version": 2,
                "container": "test-container",
                "key": "test-key",
                "value": "test-value",
                "createdAt": "2016-02-18T10:36:29.468Z",
                "lastModifiedAt": "2016-02-18T10:36:29.571Z"
              }
            },
            "schema": {
              "$ref": "#/definitions/CustomObject"
            }
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "container": "test-container",
                "key": "test-key",
                "value": "test-value"
              },
              "$ref": "#/definitions/CustomObjectDraft"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}",
              "manage_orders:{projectKey}",
              "manage_customers:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ]
    },
    "/{projectKey}/custom-objects/{container}/{key}": {
      "get": {
        "description": "Get CustomObject by key",
        "operationId": "Get CustomObject by key",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_products:{projectKey}",
              "view_orders:{projectKey}",
              "view_customers:{projectKey}"
            ]
          }
        ]
      },
      "delete": {
        "description": "Delete CustomObject by key",
        "operationId": "Delete CustomObject by key",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:dataErasure:dataErasure"
          },
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}",
              "manage_orders:{projectKey}",
              "manage_customers:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "container",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "key",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-methodName": "withContainerAndKey"
    },
    "/{projectKey}/custom-objects/{ID}": {
      "get": {
        "description": "Get CustomObject by container",
        "operationId": "Get CustomObject by container",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_products:{projectKey}",
              "view_orders:{projectKey}",
              "view_customers:{projectKey}"
            ]
          }
        ]
      },
      "delete": {
        "description": "The version control is optional. If the query contains a version, then it must match the version of the object.\n",
        "operationId": "Delete CustomObject by container",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "409": {
            "$ref": "#/responses/trait:conflicting:409"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:dataErasure:dataErasure"
          },
          {
            "$ref": "#/parameters/trait:versioned:version"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_products:{projectKey}",
              "manage_orders:{projectKey}",
              "manage_customers:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "ID",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-methodName": "withId"
    },
    "/{projectKey}/graphql": {
      "post": {
        "description": "Execute a GraphQL query",
        "operationId": "GraphQL",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "consumes": [
          "application/graphql"
        ],
        "parameters": [
          {
            "schema": {
              "example": {
                "query": "\n      query query_1($productId: String){\n        product(key:$productId){\n          key\n        }\n      }\n    ",
                "operationName": "query_1",
                "variables": {
                  "productId": "f8ded810-a1"
                }
              },
              "$ref": "#/definitions/GraphQLRequest"
            },
            "in": "body",
            "name": "body",
            "required": true
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_products:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ]
    },
    "/{projectKey}/login": {
      "post": {
        "description": "Authenticate Customer (Sign In). Retrieves the authenticated\ncustomer (a customer that matches the given email/password pair).\nIf used with an access token for Anonymous Sessions,\nall orders and carts belonging to the anonymousId will be assigned to the newly created customer.\nIf a cart is is returned as part of the CustomerSignInResult,\nit has been recalculated (It will have up-to-date prices, taxes and discounts,\nand invalid line items have been removed.).\n",
        "operationId": "Authenticate Customer (Sign In)",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "201": {
            "description": "",
            "examples": {
              "application/json": {
                "customer": {
                  "addresses": [],
                  "email": "<random>@example.com",
                  "firstName": "John",
                  "id": "some_123_id",
                  "isEmailVerified": false,
                  "lastName": "Doe",
                  "password": "secret123",
                  "version": 1,
                  "createdAt": "2015-07-06T13:22:33.339Z",
                  "lastModifiedAt": "2015-07-06T13:22:33.339Z"
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/CustomerSignInResult"
            }
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/CustomerSignin"
            },
            "in": "body",
            "name": "body",
            "required": true
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "manage_customers:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ]
    },
    "/{projectKey}/messages": {
      "get": {
        "description": "Query messages",
        "operationId": "Query messages",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "description": "A query endpoint that supports sorting does so through the sort query parameter. The provided value must be\na valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on\nthe specific query endpoints.\n\nHere are some examples of sort expressions:\n\n    name desc\n    dog.age asc\n\nIf multiple sort expressions are specified via multiple sort parameters, they are combined into a composed\nsort where the results are first sorted by the first expression, followed by equal values being sorted\naccording to the second expression, and so on.\n\nNote: The sorting is case sensitive.\n",
            "type": "string",
            "in": "query",
            "name": "sort"
          },
          {
            "description": "If queries support ad-hoc filtering of resources through flexible predicates, they do so via the where query\nparameter that accepts a single (possibly compound) predicate to determine whether a specific resource\nrepresentation should be included in the result.\n\nThe structure of predicates and the names of the fields follow the structure and naming of the fields in the\ndocumented response representation of the query results.\n\nExamples of predicates:\n\n    // Compare a field's value to a given value\n    name = \"Peter\"\n    age < 42\n    age > 42\n    age <= 42\n    age >= 42\n    age <> 42\n\n    // Combine any two conditional expressions in a logical conjunction / disjunction\n    name = \"Peter\" and age < 42\n    name = \"Peter\" or age < 42\n\n    // Negate any other conditional expression\n    not (name = \"Peter\" and age < 42)\n\n    // Check whether a field's value is or is not contained in\n    // a specified set of values.\n    age in (42, 43, 44)\n    age not in (42, 43, 44)\n\n    // Check whether an array contains all or any of a set of values\n    tags contains all (\"a\", \"b\", \"c\")\n    tags contains any (\"a\", \"b\", \"c\")\n\n    // Check whether an array is empty\n    tags is empty\n\n    // Check whether a field exists & has a non-null value\n    name is defined\n    name is not defined\n\n    // Descend into nested objects\n    dog(age < 7 and name = \"Beethoven\")\n\n    // Descend into nested arrays of objects\n    cities(zip > 10000 and zip < 20000)\n\nA query endpoint usually restricts predicates to only be allowed on a specified subset of a resource\nrepresentation's fields. The documentation of the endpoint will therefore list fields that can be used\nfor constructing predicates.\n\nIf multiple predicates are specified via multiple where query parameters, the individual predicates are\ncombined in a logical conjunction, just as if they had been specified in a single where query parameter\nand combined with and.\n\nNote: The encoding of the predicates is UTF-8 and the predicate must be URL-encoded in the HTTP request.\n",
            "type": "string",
            "in": "query",
            "name": "where"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          },
          {
            "$ref": "#/parameters/trait:paging:limit"
          },
          {
            "$ref": "#/parameters/trait:paging:offset"
          },
          {
            "$ref": "#/parameters/trait:paging:withTotal"
          },
          {
            "$ref": "#/parameters/trait:query:/^var[.][a-zA-Z0-9]+$/"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_orders:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ]
    },
    "/{projectKey}/messages/{ID}": {
      "get": {
        "description": "Get Message by ID",
        "operationId": "Get Message by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_orders:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "ID",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-methodName": "withId"
    },
    "/{projectKey}/product-projections": {
      "get": {
        "description": "You can use the product projections query endpoint to get the current or staged representations of Products.\nWhen used with an API client that has the view_published_products:{projectKey} scope,\nthis endpoint only returns published (current) product projections.\n",
        "operationId": "Query product-projections",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "description": "Whether to query for the current or staged projections.",
            "type": "boolean",
            "in": "query",
            "name": "staged"
          },
          {
            "description": "A query endpoint that supports sorting does so through the sort query parameter. The provided value must be\na valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on\nthe specific query endpoints.\n\nHere are some examples of sort expressions:\n\n    name desc\n    dog.age asc\n\nIf multiple sort expressions are specified via multiple sort parameters, they are combined into a composed\nsort where the results are first sorted by the first expression, followed by equal values being sorted\naccording to the second expression, and so on.\n\nNote: The sorting is case sensitive.\n",
            "type": "string",
            "in": "query",
            "name": "sort"
          },
          {
            "description": "If queries support ad-hoc filtering of resources through flexible predicates, they do so via the where query\nparameter that accepts a single (possibly compound) predicate to determine whether a specific resource\nrepresentation should be included in the result.\n\nThe structure of predicates and the names of the fields follow the structure and naming of the fields in the\ndocumented response representation of the query results.\n\nExamples of predicates:\n\n    // Compare a field's value to a given value\n    name = \"Peter\"\n    age < 42\n    age > 42\n    age <= 42\n    age >= 42\n    age <> 42\n\n    // Combine any two conditional expressions in a logical conjunction / disjunction\n    name = \"Peter\" and age < 42\n    name = \"Peter\" or age < 42\n\n    // Negate any other conditional expression\n    not (name = \"Peter\" and age < 42)\n\n    // Check whether a field's value is or is not contained in\n    // a specified set of values.\n    age in (42, 43, 44)\n    age not in (42, 43, 44)\n\n    // Check whether an array contains all or any of a set of values\n    tags contains all (\"a\", \"b\", \"c\")\n    tags contains any (\"a\", \"b\", \"c\")\n\n    // Check whether an array is empty\n    tags is empty\n\n    // Check whether a field exists & has a non-null value\n    name is defined\n    name is not defined\n\n    // Descend into nested objects\n    dog(age < 7 and name = \"Beethoven\")\n\n    // Descend into nested arrays of objects\n    cities(zip > 10000 and zip < 20000)\n\nA query endpoint usually restricts predicates to only be allowed on a specified subset of a resource\nrepresentation's fields. The documentation of the endpoint will therefore list fields that can be used\nfor constructing predicates.\n\nIf multiple predicates are specified via multiple where query parameters, the individual predicates are\ncombined in a logical conjunction, just as if they had been specified in a single where query parameter\nand combined with and.\n\nNote: The encoding of the predicates is UTF-8 and the predicate must be URL-encoded in the HTTP request.\n",
            "type": "string",
            "in": "query",
            "name": "where"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCurrency"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCountry"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCustomerGroup"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceChannel"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:localeProjection"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:storeProjection"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          },
          {
            "$ref": "#/parameters/trait:paging:limit"
          },
          {
            "$ref": "#/parameters/trait:paging:offset"
          },
          {
            "$ref": "#/parameters/trait:paging:withTotal"
          },
          {
            "$ref": "#/parameters/trait:query:/^var[.][a-zA-Z0-9]+$/"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_products:{projectKey}",
              "view_published_products:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ]
    },
    "/{projectKey}/product-projections/search": {
      "post": {
        "description": "Search Product Projection",
        "operationId": "Search Products",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_products:{projectKey}",
              "view_published_products:{projectKey}"
            ]
          }
        ]
      },
      "get": {
        "description": "Search Product Projection",
        "operationId": "Search Products",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "description": "Whether to apply fuzzy search on the text to analyze.",
            "type": "boolean",
            "in": "query",
            "name": "fuzzy"
          },
          {
            "description": "Provide explicitly the fuzzy level desired if fuzzy is enabled. This value can not be higher than the one\nchosen by the platform by default.\n",
            "type": "number",
            "in": "query",
            "name": "fuzzyLevel"
          },
          {
            "description": "if `markMatchingVariants` parameter is `true` those ProductVariants that match the search query have the additional\nfield `isMatchingVariant` set to `true`. For the other variants in the same product projection this field is set to `false`.\n",
            "type": "boolean",
            "in": "query",
            "name": "markMatchingVariants",
            "required": true
          },
          {
            "description": "Whether to query for the current or staged projections.",
            "type": "boolean",
            "in": "query",
            "name": "staged"
          },
          {
            "type": "string",
            "in": "query",
            "name": "filter"
          },
          {
            "type": "string",
            "in": "query",
            "name": "filter.facets"
          },
          {
            "type": "string",
            "in": "query",
            "name": "filter.query"
          },
          {
            "type": "string",
            "in": "query",
            "name": "facet"
          },
          {
            "type": "string",
            "in": "query",
            "name": "/text\\.[a-z]{2}(-[A-Z]{2})?/",
            "x-annotation-placeholderParam": {
              "paramName": "text",
              "template": "text.<locale>",
              "placeholder": "locale"
            }
          },
          {
            "description": "A query endpoint that supports sorting does so through the sort query parameter. The provided value must be\na valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on\nthe specific query endpoints.\n\nHere are some examples of sort expressions:\n\n    name desc\n    dog.age asc\n\nIf multiple sort expressions are specified via multiple sort parameters, they are combined into a composed\nsort where the results are first sorted by the first expression, followed by equal values being sorted\naccording to the second expression, and so on.\n\nNote: The sorting is case sensitive.\n",
            "type": "string",
            "in": "query",
            "name": "sort"
          },
          {
            "$ref": "#/parameters/trait:paging:limit"
          },
          {
            "$ref": "#/parameters/trait:paging:offset"
          },
          {
            "$ref": "#/parameters/trait:paging:withTotal"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCurrency"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCountry"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCustomerGroup"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceChannel"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:localeProjection"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:storeProjection"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_products:{projectKey}",
              "view_published_products:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ]
    },
    "/{projectKey}/product-projections/suggest": {
      "get": {
        "operationId": "Get suggestion keywords",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "description": "Whether to apply fuzzy search on the text to analyze.",
            "type": "boolean",
            "in": "query",
            "name": "fuzzy"
          },
          {
            "description": "Whether to query for the current or staged projections.",
            "type": "boolean",
            "in": "query",
            "name": "staged"
          },
          {
            "type": "string",
            "in": "query",
            "name": "/searchKeywords\\.[a-z]{2}(-[A-Z]{2})?/",
            "x-annotation-placeholderParam": {
              "paramName": "searchKeywords",
              "template": "searchKeywords.<locale>",
              "placeholder": "locale"
            }
          },
          {
            "description": "A query endpoint that supports sorting does so through the sort query parameter. The provided value must be\na valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on\nthe specific query endpoints.\n\nHere are some examples of sort expressions:\n\n    name desc\n    dog.age asc\n\nIf multiple sort expressions are specified via multiple sort parameters, they are combined into a composed\nsort where the results are first sorted by the first expression, followed by equal values being sorted\naccording to the second expression, and so on.\n\nNote: The sorting is case sensitive.\n",
            "type": "string",
            "in": "query",
            "name": "sort"
          },
          {
            "$ref": "#/parameters/trait:paging:limit"
          },
          {
            "$ref": "#/parameters/trait:paging:offset"
          },
          {
            "$ref": "#/parameters/trait:paging:withTotal"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_products:{projectKey}",
              "view_published_products:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ]
    },
    "/{projectKey}/product-projections/key={key}": {
      "get": {
        "description": "Gets the current or staged representation of a product found by Key.\nWhen used with an API client that has the view_published_products:{projectKey} scope,\nthis endpoint only returns published (current) product projections.\n",
        "operationId": "Get ProductProjection by key",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "description": "Whether to query for the current or staged projections.",
            "type": "boolean",
            "in": "query",
            "name": "staged"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCurrency"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCountry"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCustomerGroup"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceChannel"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:localeProjection"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:storeProjection"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_products:{projectKey}",
              "view_published_products:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "key",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-methodName": "withKey"
    },
    "/{projectKey}/product-projections/{ID}": {
      "get": {
        "description": "Gets the current or staged representation of a product in a catalog by ID.\nWhen used with an API client that has the view_published_products:{projectKey} scope,\nthis endpoint only returns published (current) product projections.\n",
        "operationId": "Get ProductProjection by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "description": "Whether to query for the current or staged projections.",
            "type": "boolean",
            "in": "query",
            "name": "staged"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCurrency"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCountry"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceCustomerGroup"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:priceChannel"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:localeProjection"
          },
          {
            "$ref": "#/parameters/trait:priceSelecting:storeProjection"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_project:{projectKey}",
              "view_products:{projectKey}",
              "view_published_products:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "ID",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-methodName": "withId"
    },
    "/{projectKey}/api-clients": {
      "get": {
        "description": "Query api-clients",
        "operationId": "Query api-clients",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "description": "A query endpoint that supports sorting does so through the sort query parameter. The provided value must be\na valid sort expression. The default sort direction is ASC. The allowed sort paths are typically listed on\nthe specific query endpoints.\n\nHere are some examples of sort expressions:\n\n    name desc\n    dog.age asc\n\nIf multiple sort expressions are specified via multiple sort parameters, they are combined into a composed\nsort where the results are first sorted by the first expression, followed by equal values being sorted\naccording to the second expression, and so on.\n\nNote: The sorting is case sensitive.\n",
            "type": "string",
            "in": "query",
            "name": "sort"
          },
          {
            "description": "If queries support ad-hoc filtering of resources through flexible predicates, they do so via the where query\nparameter that accepts a single (possibly compound) predicate to determine whether a specific resource\nrepresentation should be included in the result.\n\nThe structure of predicates and the names of the fields follow the structure and naming of the fields in the\ndocumented response representation of the query results.\n\nExamples of predicates:\n\n    // Compare a field's value to a given value\n    name = \"Peter\"\n    age < 42\n    age > 42\n    age <= 42\n    age >= 42\n    age <> 42\n\n    // Combine any two conditional expressions in a logical conjunction / disjunction\n    name = \"Peter\" and age < 42\n    name = \"Peter\" or age < 42\n\n    // Negate any other conditional expression\n    not (name = \"Peter\" and age < 42)\n\n    // Check whether a field's value is or is not contained in\n    // a specified set of values.\n    age in (42, 43, 44)\n    age not in (42, 43, 44)\n\n    // Check whether an array contains all or any of a set of values\n    tags contains all (\"a\", \"b\", \"c\")\n    tags contains any (\"a\", \"b\", \"c\")\n\n    // Check whether an array is empty\n    tags is empty\n\n    // Check whether a field exists & has a non-null value\n    name is defined\n    name is not defined\n\n    // Descend into nested objects\n    dog(age < 7 and name = \"Beethoven\")\n\n    // Descend into nested arrays of objects\n    cities(zip > 10000 and zip < 20000)\n\nA query endpoint usually restricts predicates to only be allowed on a specified subset of a resource\nrepresentation's fields. The documentation of the endpoint will therefore list fields that can be used\nfor constructing predicates.\n\nIf multiple predicates are specified via multiple where query parameters, the individual predicates are\ncombined in a logical conjunction, just as if they had been specified in a single where query parameter\nand combined with and.\n\nNote: The encoding of the predicates is UTF-8 and the predicate must be URL-encoded in the HTTP request.\n",
            "type": "string",
            "in": "query",
            "name": "where"
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          },
          {
            "$ref": "#/parameters/trait:paging:limit"
          },
          {
            "$ref": "#/parameters/trait:paging:offset"
          },
          {
            "$ref": "#/parameters/trait:paging:withTotal"
          },
          {
            "$ref": "#/parameters/trait:query:/^var[.][a-zA-Z0-9]+$/"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_api_clients:{projectKey}",
              "view_api_clients:{projectKey}"
            ]
          }
        ]
      },
      "post": {
        "description": "Create ApiClient",
        "operationId": "Create ApiClient",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "201": {
            "description": "",
            "examples": {
              "application/json": {
                "id": "api-client-id",
                "name": "api-client-name",
                "scope": "view_products",
                "createdAt": "2018-01-01T00:00:00.001Z",
                "lastUsedAt": "2017-09-10",
                "secret": "secret-passphrase"
              }
            },
            "schema": {
              "$ref": "#/definitions/ApiClient"
            }
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "name": "api-client-name",
                "scope": "view_products"
              },
              "$ref": "#/definitions/ApiClientDraft"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:expandable:expand"
          }
        ],
        "security": [
          {
            "oauth_2_0": [
              "manage_api_clients:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ]
    },
    "/{projectKey}/api-clients/{ID}": {
      "get": {
        "description": "Get ApiClient by ID",
        "operationId": "Get ApiClient by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_api_clients:{projectKey}",
              "view_api_clients:{projectKey}"
            ]
          }
        ]
      },
      "delete": {
        "description": "Delete ApiClient by ID",
        "operationId": "Delete ApiClient by ID",
        "responses": {
          "200": {
            "$ref": "#/responses/trait:deprecatable:200"
          },
          "400": {
            "$ref": "#/responses/trait:errorable:400"
          },
          "401": {
            "$ref": "#/responses/trait:errorable:401"
          },
          "403": {
            "$ref": "#/responses/trait:errorable:403"
          },
          "404": {
            "$ref": "#/responses/trait:errorable:404"
          },
          "500": {
            "$ref": "#/responses/trait:errorable:500"
          },
          "503": {
            "$ref": "#/responses/trait:errorable:503"
          }
        },
        "security": [
          {
            "oauth_2_0": [
              "manage_api_clients:{projectKey}"
            ]
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "ID",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "projectKey",
          "required": true
        }
      ],
      "x-annotation-methodName": "withId"
    }
  }
}