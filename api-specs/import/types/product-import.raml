#%RAML 1.0 Library
usage: Product import types.
(annotations.package): products

uses:
  common: common.raml
  annotations: ../annotationTypes/annotations.raml
  product-variant-import: product-variant-import.raml

types:
  SearchKeywords:
    properties:
      /^[a-zA-Z]{2,3}(?:-[a-zA-Z]{4})?(?:-(?:[a-zA-Z]{2}|\d{3}))?$/:
        type: SearchKeyword[]
    description: |
      Search keywords are primarily used by the suggester but are also considered for the full-text search. SearchKeywords is a JSON object where the keys are of [IETF language tag](https://en.wikipedia.org/wiki/IETF_language_tag). The value to a language tag key is an array of SearchKeyword for the specific language.
      ```json
      {
        "en": [
          { "text": "Multi tool" },
          { "text": "Swiss Army Knife", "suggestTokenizer": { "type": "whitespace" } }
        ],
        "de": [
          {
            "text": "Schweizer Messer",
            "suggestTokenizer": {
              "type": "custom",
              "inputs": ["schweizer messer", "offiziersmesser", "sackmesser"]
            }
          }
        ]
      }
      ```
  SearchKeyword:
    properties:
      text:
        type: string
      suggestTokenizer?:
        type: SuggestTokenizer
        description: The tokenizer defines the tokens that are used for [search term suggestions](/projects/search-term-suggestions).
  SuggestTokenizer:
    discriminator: type
    properties:
      type:
        type: string
    description: |
      The tokenizer defines the tokens that are used for [search term suggestions](/projects/search-term-suggestions).
  CustomTokenizer:
    type: SuggestTokenizer
    discriminatorValue: custom
    properties:
      inputs:
        type: string[]
  WhitespaceTokenizer:
    type: SuggestTokenizer
    discriminatorValue: whitespace

  ProductImport:
    type: common.ImportResource
    description: |
      Represents the data used to import a Product. Once imported, this data is persisted as a [Product](ctp:api:type:Product) in the Project.

      This is the minimal representation required for creating a Product in Composable Commerce.
    example: !include ../examples/product-import.json
    additionalProperties: false
    properties:
      key:
        type: string
        description: User-defined unique identifier. If a [Product](ctp:api:type:Product) with this `key` exists, it is updated with the imported data.
        pattern: ^[A-Za-z0-9_-]+$
        minLength: 2
        maxLength: 256
      name:
        description: |
          Maps to `ProductData.name`.
        type: common.LocalizedString
      productType:
        description: |
          Maps to `Product.productType`. If the referenced [ProductType](ctp:api:type:ProductType) does not exist, the `state` of the [ImportOperation](ctp:import:type:ImportOperation) will be set to `unresolved` until the referenced ProductType is created.
        type: common.ProductTypeKeyReference
      slug:
        description: |
          Maps to `ProductData.slug`.
        type: common.LocalizedString
      description?:
        description: |
          Maps to `ProductData.description`.
        type: common.LocalizedString
      categories?:
        description: |
          Maps to `ProductData.categories`. If the referenced [Categories](ctp:api:type:Category) do not exist, the `state` of the [ImportOperation](ctp:import:type:ImportOperation) will be set to `unresolved` until the referenced Categories are created.
        type: common.CategoryKeyReference[]
      attributes?:
        type: product-variant-import.Attribute[]
      metaTitle?:
        type: common.LocalizedString
        description: |
          Maps to `ProductData.metaTitle`.
      metaDescription?:
        type: common.LocalizedString
        description: |
          Maps to `ProductData.metaDescription`.
      metaKeywords?:
        type: common.LocalizedString
        description: |
          Maps to `ProductData.metaKeywords`.
      taxCategory?:
        description: |
          Maps to `Product.taxCategory`. If the referenced [TaxCategory](ctp:api:type:TaxCategory) does not exist, the `state` of the [ImportOperation](ctp:import:type:ImportOperation) will be set to `unresolved` until the referenced TaxCategory is created.
        type: common.TaxCategoryKeyReference
      searchKeywords?:
        type: SearchKeywords
        description: |
          Maps to `ProductData.searchKeywords`.
      state?:
        description: |
          Maps to `Product.state`. If the referenced [State](ctp:api:type:State) does not exist, the `state` of the [ImportOperation](ctp:import:type:ImportOperation) will be set to `unresolved` until the referenced State is created.
        type: common.StateKeyReference
      publish?:
        type: boolean
        default: false
        description: |
          Determines the published status and current/staged projection of the Product. For more information, see [Managing the published state of Products](/import-export/best-practices#manage-published-state-of-products).
      priceMode?:
        type: common.ProductPriceModeEnum
        description: |
          Maps to `Product.priceMode`.
