#%RAML 1.0 Library
usage: Order import types.
(annotations.package): orders

uses:
  common: common.raml
  annotations: ../annotationTypes/annotations.raml
  price: price-import.raml
  product-variant: product-variant-import.raml
  custom-field: custom-field.raml

types:
  ItemState:
    properties:
      quantity:
        description: |
          Number of Line Items or Custom Line Items in this State.
        type: number
        format: int64
      state:
        description: |
          State of the Line Items or Custom Line Items in a custom workflow. If the referenced [State](ctp:api:type:State) does not exist, the `state` of the [ImportOperation](ctp:import:type:ImportOperation) will be set to `unresolved` until the referenced State is created.
        type: common.StateKeyReference
  ItemShippingTarget:
    description: |
      Determines the address (as a reference to an address in `itemShippingAddresses`) and the quantity shipped to the address.
    properties:
      addressKey:
        description: |
          Key of the address in the [Cart](ctp:api:type:Cart) `itemShippingAddresses`. Duplicate address keys are not allowed.
        type: string
      quantity:
        description: |
          Quantity of Line Items or Custom Line Items shipped to the address with the specified `addressKey`.
        type: number
        format: int64
  ItemShippingDetailsDraft:
    description: The sum of the `targets` must match the quantity of the Line Items or Custom Line Items
    properties:
      targets:
        description: |
          Holds information on the quantity of Line Items or Custom Line Items and the address it is shipped.
        type: ItemShippingTarget[]
  LineItemPrice:
    properties:
      value:
        description: |
          Maps to `Price.value`.
        type: common.TypedMoney
      country?:
        description: |
          Maps to `Price.county`.
        type: common.CountryCode
      validFrom?:
        description: |
          Maps to `Price.validFrom`.
        type: datetime
      validUntil?:
        description: |
          Maps to `Price.validUntil`.
        type: datetime
      customerGroup?:
        description: |
          Maps to `Price.customerGroup`. References a customer group by key. If the referenced [CustomerGroup](ctp:api:type:CustomerGroup) does not exist, the `state` of the [ImportOperation](ctp:import:type:ImportOperation) will be set to `unresolved` until the referenced CustomerGroup is created.
        type: common.CustomerGroupKeyReference
      channel?:
        description: |
          Maps to `Price.channel`. References a channel by key. If the referenced [Channel](ctp:api:type:Channel) does not exist, the `state` of the [ImportOperation](ctp:import:type:ImportOperation) will be set to `unresolved` until the referenced Channel is created.
        type: common.ChannelKeyReference
      discounted?:
        description: Sets a discounted price from an external service.
        type: common.DiscountedPrice
      tiers?:
        description: Maps to `Price.tiers`.
        type: common.PriceTier[]
      custom?:
        description: |
          Maps to `Price.custom`.
        type: custom-field.Custom
  LineItemProductVariantImportDraft:
    properties:
      productVariant?:
        description: |
          Maps to `ProductVariant.product`. If the referenced [ProductVariant](ctp:api:type:ProductVariant) does not exist, the `state` of the [ImportOperation](ctp:import:type:ImportOperation) will be set to `unresolved` until the referenced ProductVariant is created.
        type: common.ProductVariantKeyReference
      sku?:
        description: |
          Maps to `ProductVariantImportDraft.sku`.
        type: string
      prices?:
        description: |
          Maps to `ProductVariantImportDraft.prices`
        type: LineItemPrice[]
      attributes?:
        description: |
          Maps to `ProductVariantImportDraft.attributes`
        type: product-variant.Attribute[]
      images?:
        description: |
          Maps to `ProductVariantImportDraft.images`.
        type: common.Image[]
  LineItemImportDraft:
    description: |
      Represents an individual Line Item in an Order. A line item is a snapshot of a product at the time it was added to the order.

      You cannot create an Order that includes line item operations that do not exist in the Project or have been deleted.
      Products and Product Variants referenced by a line item must already exist in the Project.
      Product Attributes are merged with Variant Attributes to ensure the full Attribute context of the Product Variant.
    properties:
      product?:
        description: |
          Maps to `LineItem.productId`. If the referenced [Product](ctp:api:type:Product) does not exist, the `state` of the [ImportOperation](ctp:import:type:ImportOperation) will be set to `unresolved` until the referenced Product is created.
        type: common.ProductKeyReference
      name:
        description: |
          Maps to `LineItem.name`.
        type: common.LocalizedString
      variant:
        description: |
          Maps to `ProductVariantImportDraft`.
        type: LineItemProductVariantImportDraft
      price:
        description: |
          Maps to `LineItem.price`.
        type: LineItemPrice
      quantity:
        description: |
          Maps to `LineItem.quantity`.
        type: number
        format: int64
      state?:
        type: ItemState[]
        description: |
          Maps to `LineItem.state`.
      supplyChannel?:
        description: |
          Maps to `LineItem.supplyChannel`. If the referenced [Channel](ctp:api:type:Channel) does not exist, the `state` of the [ImportOperation](ctp:import:type:ImportOperation) will be set to `unresolved` until the referenced Channel is created.
        type: common.ChannelKeyReference
      distributionChannel?:
        description: |
          Maps to `LineItem.distributionChannel`. If the referenced [Channel](ctp:api:type:Channel) does not exist, the `state` of the [ImportOperation](ctp:import:type:ImportOperation) will be set to `unresolved` until the referenced Channel is created.
        type: common.ChannelKeyReference
      taxRate?:
        description: |
          Maps to `LineItem.taxRate`.
        type: price.TaxRate
      shippingDetails?:
        description: |
          Maps to `LineItem.shippingDetails`.
        type: ItemShippingDetailsDraft
      custom?:
        description: Maps to `LineItem.custom`.
        type: custom-field.Custom
  ShippingRateTierType:
    type: string
    enum:
      - CartValue
      - CartClassification
      - CartScore
  ShippingRatePriceTier:
    discriminator: type
    properties:
      type:
        type: ShippingRateTierType
  CartClassificationTier:
    type: ShippingRatePriceTier
    discriminatorValue: CartClassification
    properties:
      value:
        type: string
      price:
        type: common.Money
      tiers:
        type: ShippingRatePriceTier[]
      isMatching?:
        type: boolean
  ShippingRateDraft:
    properties:
      price:
        type: common.Money
        description: Currency amount of the ShippingRate.
      freeAbove?:
        type: common.Money
        description: Free shipping is applied if the sum of the (Custom) Line Item Prices reaches the specified value.
      tiers?:
        type: ShippingRatePriceTier[]
        description: Price tiers for the ShippingRate.
  ParcelMeasurements:
    properties:
      heightInMillimeter?:
        type: number
        format: int32
        description: |
          Height of the Parcel.
      lengthInMillimeter?:
        type: number
        format: int32
        description: |
          Length of the Parcel.
      widthInMillimeter?:
        type: number
        format: int32
        description: |
          Width of the Parcel.
      weightInGram?:
        type: number
        format: int32
        description: |
          Weight of the Parcel.
  TrackingData:
    properties:
      trackingId?:
        type: string
        description: |
          Identifier to track the Parcel.
      carrier?:
        type: string
        description: |
          Name of the carrier that delivers the Parcel.
      provider?:
        type: string
        description: |
          Name of the provider that serves as facade to several carriers.
      providerTransaction?:
        type: string
        description: |
          Transaction identifier with the `provider`.
      isReturn?:
        type: boolean
        description: |
          - If `true`, the Parcel is being returned.
          - If `false`, the Parcel is being delivered to the customer.
  DeliveryItem:
    properties:
      id:
        type: string
        description: |
          `id` of the [LineItem](ctp:api:type:LineItem) or [CustomLineItem](ctp:api:type:CustomLineItem) delivered.
      quantity:
        type: number
        format: int64
        description: |
          Number of Line Items or Custom Line Items delivered.
  Parcel:
    properties:
      id:
        type: string
        description: Unique identifier of the Parcel.
      createdAt:
        type: datetime
        description: |
          Date and time (UTC) the Parcel was created.
      measurements?:
        type: ParcelMeasurements
        description: |
          Information about the dimensions of the Parcel.
      trackingData?:
        type: TrackingData
        description: |
          Shipment tracking information of the Parcel.
      items?:
        type: DeliveryItem[]
        description: |
          Line Items or Custom Line Items delivered in this Parcel.
      custom?:
        type: custom-field.Custom
        description: |
          Custom Fields of the Parcel.
  Delivery:
    properties:
      id:
        type: string
        description: Unique identifier of the Delivery.
      createdAt:
        type: datetime
        description: |
          Date and time (UTC) the Delivery was created.
      items:
        type: DeliveryItem[]
        description: |
          Line Items or Custom Line Items that are delivered.
      parcels:
        type: Parcel[]
        description: |
          Information regarding the appearance, content, and shipment of a Parcel.
      address?:
        type: common.Address
        description: |
          Address to which Parcels are delivered.
  DiscountedLineItemPortion:
    properties:
      discount:
        type: common.CartDiscountKeyReference
        description: References a cart discount by key. If the referenced [CartDiscount](ctp:api:type:CartDiscount) does not exist, the `state` of the [ImportOperation](ctp:import:type:ImportOperation) will be set to `unresolved` until the referenced CartDiscount is created.
      discountedAmount:
        type: common.Money
        description: Money value for the discount applicable.
  DiscountedLineItemPriceDraft:
    properties:
      value:
        type: common.Money
        description: |
          Discounted money value.
      includedDiscounts:
        type: DiscountedLineItemPortion[]
        description: Discounts to be applied.
  ShippingMethodState:
    type: string
    enum:
      - DoesNotMatchCart
      - MatchesCart
  ShippingInfoImportDraft:
    description: |
      Maps to an Order's `shippingInfo` property. This field is usually populated by the Cart associated with the Order, but when importing Orders you must provide a draft representation as a part of the OrderImport.
    properties:
      shippingMethodName:
        type: string
        description: Maps to `shippingInfo.shippingMethodName`.
      price:
        type: common.TypedMoney
        description: Maps to `shippingInfo.price`.
      shippingRate:
        type: ShippingRateDraft
        description: Used to determine the price.
      taxRate?:
        type: price.TaxRate
        description: Maps to `shippingInfo.taxRate`.
      taxCategory?:
        type: common.TaxCategoryKeyReference
        description: Maps to `shippingInfo.taxCategory`. If the referenced [TaxCategory](ctp:api:type:TaxCategory) does not exist, the `state` of the [ImportOperation](ctp:import:type:ImportOperation) will be set to `unresolved` until the referenced TaxCategory is created.
      shippingMethod?:
        type: common.ShippingMethodKeyReference
        description: Maps to `shippingInfo.shippingMethod`. If the referenced [ShippingMethod](ctp:api:type:ShippingMethod) does not exist, the `state` of the [ImportOperation](ctp:import:type:ImportOperation) will be set to `unresolved` until the referenced ShippingMethod is created.
      deliveries?:
        type: Delivery[]
        description: Maps to `shippingInfo.deliveries`. You cannot add a `DeliveryItem` on import, as `LineItems` and `CustomLineItems` are not yet referenceable by an `id`.
      discountedPrice?:
        type: DiscountedLineItemPriceDraft
        description: Maps to `shippingInfo.discountedPrice`.
      shippingMethodState?:
        type: ShippingMethodState
        description: Maps to `shippingInfo.shippingMethodState`.
  ExternalTaxRateDraft:
    properties:
      name:
        type: string
        description: |
          Name of the Tax Rate.
      amount?:
        type: number
        description: |
          Percentage in the range of 0-1.

          - If no `subRates` are specified, a value must be defined.
          - If `subRates` are specified, this can be omitted or its value must be the sum of all `subRates` amounts.
        minimum: 0
        maximum: 1
      country:
        type: common.CountryCode
        description: |
          Country for which the tax applies.
      state?:
        type: string
        description: |
          State within the specified country.
      subRates?:
        type: price.SubRate[]
        description: |
          Used when the total tax is a combination of multiple taxes (for example, local, state/provincial, and/or federal taxes). The total of all subrates must equal the TaxRate `amount`.
          These subrates are used to calculate the `taxPortions` field of a [Cart](ctp:api:type:Cart) or [Order](ctp:api:type:Order) and the `taxedPrice` field of [LineItems](ctp:api:type:LineItem), [CustomLineItems](ctp:api:type:CustomLineItem), and [ShippingInfos](ctp:api:type:ShippingInfo).
      includedInPrice?:
        type: boolean
        description: |
          - If set to `false`, the related price is considered the net price and the provided `amount` is applied to calculate the gross price.
          - If set to `true`, the related price is considered the gross price, and the provided `amount` is applied to calculate the net price.
  CustomLineItemTaxedPrice:
    properties:
      totalNet:
        type: common.TypedMoney
        description:
      totalGross:
        type: common.TypedMoney
        description:
  CustomLineItemDraft:
    properties:
      name:
        type: common.LocalizedString
        description: |
          Maps to `CustomLineItem.name`.
      money:
        type: common.TypedMoney
        description: |
          Maps to `CustomLineItem.money`.
      taxedPrice?:
        type: CustomLineItemTaxedPrice
        description: |
          Maps to `CustomLineItem.taxedPrice`.
      totalPrice:
        type: common.TypedMoney
        description: |
          Maps to `CustomLineItem.totalPrice`.
      slug:
        type: string
        description: |
          Maps to `CustomLineItem.slug`.
      quantity:
        type: number
        format: int64
        description: |
          Maps to `CustomLineItem.quantity`.
      state?:
        type: ItemState[]
        description: |
          Maps to `CustomLineItem.state`.
      taxCategory?:
        type: common.TaxCategoryKeyReference
        description: |
          Maps to `CustomLineItem.taxCategory`. References a tax category by key. If the referenced [TaxCategory](ctp:api:type:TaxCategory) does not exist, the `state` of the [ImportOperation](ctp:import:type:ImportOperation) will be set to `unresolved` until the referenced TaxCategory is created.
      taxRate?:
        type: price.TaxRate
        description: |
          Maps to `CustomLineItem.taxRate`.
      externalTaxRate?:
        type: ExternalTaxRateDraft
        description: |
          External Tax Rate for the Custom Line Item if the Cart has the `External` [TaxMode](ctp:api:type:TaxMode).
      discountedPricePerQuantity?:
        type: DiscountedLineItemPriceDraft[]
        description: |
          Maps to `CustomLineItem.discountedPricePerQuantity`.
      shippingDetails?:
        type: ItemShippingDetailsDraft
        description: |
          Maps to `CustomLineItem.shippingDetails`.
  TaxPortion:
    properties:
      name?:
        type: string
        description: |
          Name of the tax portion.
      rate:
        type: number
        description: |
          A number in the range 0-1.
        minimum: 0
        maximum: 1
      amount:
        type: common.TypedMoney
        description: |
          Money value of the tax portion.
  TaxedPrice:
    properties:
      totalNet:
        type: common.Money
        description: Maps to `TaxedPrice.totalNet`.
      totalGross:
        type: common.Money
        description: Maps to `TaxedPrice.totalGross`.
      taxPortions:
        type: TaxPortion[]
        description: Maps to `TaxedPrice.taxPortions`.
  TaxMode:
    type: string
    description: Maps to `Order.taxMode`
    enum:
      - Platform
      - External
      - ExternalAmount
      - Disabled
  OrderState:
    type: string
    description: Maps to `Order.orderState`.
    enum:
      - Open
      - Confirmed
      - Complete
      - Cancelled
  ShipmentState:
    type: string
    description: Maps to `Order.shipmentState`.
    enum:
      - Shipped
      - Ready
      - Pending
      - Delayed
      - Partial
      - Backorder
  PaymentState:
    type: string
    description: Maps to `Order.paymentState`.
    enum:
      - BalanceDue
      - Failed
      - Pending
      - CreditOwed
      - Paid
  InventoryMode:
    type: string
    description: Maps to `Order.inventoryMode`.
    enum:
      - TrackOnly
      - ReserveOnOrder
  RoundingMode:
    type: string
    description: The rounding mode representation used in `Order.priceRoundingMode` and `Order.taxRoundingMode`.
    enum:
      - HalfEven
      - HalfUp
      - HalfDown
  TaxCalculationMode:
    type: string
    description: Maps to `Order.taxCalculationMode`.
    enum:
      - LineItemLevel
      - UnitPriceLevel
  CartOrigin:
    type: string
    description: Maps to `Order.origin`.
    enum:
      - Customer
      - Merchant
  SyncInfo:
    properties:
      channel:
        type: common.ChannelKeyReference
        description: Maps to `SyncInfo.channel`. If the referenced [Channel](ctp:api:type:Channel) does not exist, the `state` of the [ImportOperation](ctp:import:type:ImportOperation) will be set to `unresolved` until the referenced Channel is created.
      externalId?:
        type: string
        description: Maps to `SyncInfo.externalId`
      syncedAt:
        type: datetime
        description: Maps to `SyncInfo.syncedAt`
  DiscountCodeState:
    type: string
    description: Maps to `DiscountCodeInfo.state`
    enum:
      - NotActive
      - NotValid
      - DoesNotMatchCart
      - MatchesCart
      - MaxApplicationReached
      - ApplicationStoppedByPreviousDiscount
  DiscountCodeInfo:
    properties:
      discountCode:
        type: common.DiscountCodeKeyReference
        description: References a DiscountCode by key. If the referenced [DiscountCode](ctp:api:type:DiscountCode) does not exist, the `state` of the [ImportOperation](ctp:import:type:ImportOperation) will be set to `unresolved` until the referenced DiscountCode is created.
      state?:
        type: DiscountCodeState
  ShippingRateInputType:
    type: string
    enum:
      - Classification
      - Score
  ShippingRateInput:
    discriminator: type
    properties:
      type:
        type: ShippingRateInputType
  ClassificationShippingRateInput:
    type: ShippingRateInput
    discriminatorValue: Classification
    properties:
      key:
        type: string
      label:
        type: common.LocalizedString
  ScoreShippingRateInput:
    type: ShippingRateInput
    discriminatorValue: Score
    properties:
      score:
        type: number
        format: int64
  OrderImport:
    description: |
      Represents the data used to import an Order. Once imported, this data is persisted as an [Order](ctp:api:type:Order) in the Project.

      An OrderImport is a snapshot of an order at the time it was imported.
    example: !include ../examples/order-import.json
    properties:
      orderNumber:
        description: |
          Maps to `Order.orderNumber`, String that uniquely identifies an order. It should be unique across a project. Once it's set it cannot be changed.
        type: string
      customer?:
        type: common.CustomerKeyReference
        description: |
          `key` of the [Customer](ctp:api:type:Customer) that the Order belongs to. If the referenced Customer does not exist, the `state` of the [ImportOperation](ctp:import:type:ImportOperation) will be set to `unresolved` until the referenced Customer is created.
      customerEmail?:
        description: |
          Maps to `Order.customerEmail`.
        type: string
      lineItems?:
        description: |
          Maps to `Order.lineItems`.
        type: LineItemImportDraft[]
      customLineItems?:
        description: |
          Maps to `Order.customLineItems`
        type: CustomLineItemDraft[]
      totalPrice:
        description: |
          Maps to `Order.totalPrice`.
        type: common.TypedMoney
      taxedPrice?:
        description: |
          Maps to `Order.taxedPrice`.
        type: TaxedPrice
      shippingAddress?:
        description: |
          Maps to `Order.shippingAddress`.
        type: common.Address
      billingAddress?:
        description: |
          Maps to `Order.billingAddress`.
        type: common.Address
      customerGroup?:
        description: |
          Maps to `Order.customerGroup`. If the referenced [CustomerGroup](ctp:api:type:CustomerGroup) does not exist, the `state` of the [ImportOperation](ctp:import:type:ImportOperation) will be set to `unresolved` until the referenced CustomerGroup is created.
        type: common.CustomerGroupKeyReference
      country?:
        description: |
          Maps to `Order.country`.
        type: string
      orderState?:
        description: |
          Maps to `Order.orderState`.
        type: OrderState
      shipmentState?:
        description: |
          Maps to `Order.shipmentState`.
        type: ShipmentState
      paymentState?:
        description: |
          Maps to `Order.paymentState`.
        type: PaymentState
      shippingInfo?:
        description: |
          Maps to `Order.shippingInfo`.
        type: ShippingInfoImportDraft
      completedAt?:
        description: |
          Maps to `Order.completedAt`.
        type: datetime
      custom?:
        description: |
          Maps to `Order.custom`.
        type: custom-field.Custom
      inventoryMode?:
        description: |
          Maps to `Order.inventoryMode`.
        type: InventoryMode
      taxRoundingMode?:
        description: |
          Maps to `Order.taxRoundingMode`.
        type: RoundingMode
      taxCalculationMode?:
        description: |
          Maps to `Order.taxCalculationMode`.
        type: TaxCalculationMode
      origin?:
        description: |
          Maps to `Order.origin`.
        type: CartOrigin
      itemShippingAddresses?:
        description: |
          Maps to `Order.itemShippingAddresses`.
        type: common.Address[]
      store?:
        description: |
          Maps to `Order.store`. If the referenced [Store](ctp:api:type:Store) does not exist, the `state` of the [ImportOperation](ctp:import:type:ImportOperation) will be set to `unresolved` until the referenced Store is created.
        type: common.StoreKeyReference
      state?:
        description: |
          Maps to `Order.state`. If the referenced [State](ctp:api:type:State) does not exist, the `state` of the [ImportOperation](ctp:import:type:ImportOperation) will be set to `unresolved` until the referenced State is created.
        type: common.StateKeyReference
