#%RAML 1.0 Library
usage: Product variant import types.
(annotations.package): productvariants

uses:
  common: common.raml
  annotations: ../annotationTypes/annotations.raml

types:
  Attribute:
    description: |
      This type represents the value of an attribute of a product variant.
      The name and type property must match the name and type property of an attribute definition of the product type.
    discriminator: type
    properties:
      name?:
        description: |
          The name of this attribute must match a name of the product types attribute definitions.
          The name is required if this type is used in a product variant and must not be set when
          used in a product variant patch.
        type: string
      type:
        type: string
  BooleanAttribute:
    description: |
      This type represents an attribute whose value is either "true" or "false".
    type: Attribute
    discriminatorValue: boolean
    properties:
      value:
        type: boolean
  BooleanSetAttribute:
    description: |
      This type represents an attribute whose value is set of boolean values.
    type: Attribute
    discriminatorValue: boolean-set
    properties:
      value:
        type: boolean[]
  DateAttribute:
    description: |
      This type represents an attribute whose value is a date.
    type: Attribute
    discriminatorValue: date
    properties:
      value:
        type: date-only
  DateSetAttribute:
    description: |
      This type represents an attribute whose value is a set of dates.
    type: Attribute
    discriminatorValue: date-set
    properties:
      value:
        type: date-only[]
  DateTimeAttribute:
    description: |
      This type represents an attribute whose value is a date with time.
    type: Attribute
    discriminatorValue: datetime
    properties:
      value:
        type: datetime
  DateTimeSetAttribute:
    description: |
      This type represents an attribute whose value is a set of dates with time.
    type: Attribute
    discriminatorValue: datetime-set
    properties:
      value:
        type: datetime[]
  EnumAttribute:
    description: |
      This type represents an attribute whose value is an enum.
      The attribute value refers to the key of the enum value.
    type: Attribute
    discriminatorValue: enum
    properties:
      value:
        type: string
  EnumSetAttribute:
    description: |
      This type represents an attribute whose value is an enum.
      The attribute value refers to the key of the enum value.
    type: Attribute
    discriminatorValue: enum-set
    properties:
      value:
        type: string[]
  LocalizableEnumAttribute:
    description: |
      This type represents an attribute whose value is a localized enum.
      The attribute value refers to the key of the enum value.
    type: Attribute
    discriminatorValue: lenum
    properties:
      value:
        type: string
  LocalizableEnumSetAttribute:
    description: |
      This type represents an attribute whose value is a localized enum.
      The attribute value refers to the key of the enum value.
    type: Attribute
    discriminatorValue: lenum-set
    properties:
      value:
        type: string[]
  LocalizableTextAttribute:
    description: |
      This type represents an attribute whose value is a localized text.
    type: Attribute
    discriminatorValue: ltext
    properties:
      value:
        type: common.LocalizedString
  LocalizableTextSetAttribute:
    description: |
      This type represents an attribute whose value is a localized text.
    type: Attribute
    discriminatorValue: ltext-set
    properties:
      value:
        type: common.LocalizedString[]
  MoneyAttribute:
    description: |
      This type represents an attribute whose value is a money object.
    type: Attribute
    discriminatorValue: money
    properties:
      value:
        type: common.TypedMoney
  MoneySetAttribute:
    description: |
      This type represents an attribute whose value is a set of money objects.
    type: Attribute
    discriminatorValue: money-set
    properties:
      value:
        type: common.TypedMoney[]
        description:
  NumberAttribute:
    description: |
      This type represents an attribute whose value is a number.
    type: Attribute
    discriminatorValue: number
    properties:
      value:
        type: number
  NumberSetAttribute:
    description: |
      This type represents an attribute whose value is a set of numbers.
    type: Attribute
    discriminatorValue: number-set
    properties:
      value:
        type: number[]
  ReferenceAttribute:
    description: |
      This type represents an attribute whose value is a key reference.
    type: Attribute
    discriminatorValue: reference
    properties:
      value:
        type: common.KeyReference
        description: References a resource by key.
    example: !include /../examples/reference-attribute.json
  ReferenceSetAttribute:
    description: |
      This type represents an attribute whose value is a set of references.
    type: Attribute
    discriminatorValue: reference-set
    properties:
      value:
        type: common.KeyReference[]
  TextAttribute:
    description: |
      This type represents an attribute whose value is a string.
    type: Attribute
    discriminatorValue: text
    properties:
      value:
        type: string
  TextSetAttribute:
    description: |
      This type represents an attribute whose value is a set of strings.
    type: Attribute
    discriminatorValue: text-set
    properties:
      value:
        type: string[]
  TimeAttribute:
    description: |
      This type represents an attribute whose value is a time.
    type: Attribute
    discriminatorValue: time
    properties:
      value:
        type: time-only
  TimeSetAttribute:
    description: |
      This type represents an attribute whose value is a set of times.
    type: Attribute
    discriminatorValue: time-set
    properties:
      value:
        type: time-only[]
  ProductVariantImport:
    description: |
      The data representation for a ProductVariant to be imported that is persisted as a [ProductVariant](/../api/projects/products#productvariant) in the Project.
    type: common.ImportResource
    properties:
      key:
        type: string
        description: User-defined unique identifier. If a [ProductVariant](/../api/projects/products#productvariant) with this `key` exists on the specified `product`, it will be updated with the imported data.
      sku?:
        description: |
          Maps to `ProductVariant.sku`.
        type: string
      isMasterVariant:
        description: |
          Maps to `ProductVariant.isMasterVariant`.
        type: boolean
      attributes?:
        description: |
          Maps to `ProductVariant.attributes`.
          The referenced attribute must be defined in an already existing ProductType in the project, or the `state` of the [ImportOperation](/import-operation#importoperation) will be `unresolved`.
        type: Attribute[]
      images?:
        description: |
          Maps to `ProductVariant.images`.
        type: common.Image[]
      assets?:
        description: |
          Maps to `ProductVariant.assets`.
        type: common.Asset[]
      publish?:
        (annotations.markDeprecated): true
        type: boolean
        description: |
          If `publish` is set to either `true` or `false`, both staged and current projections are set to the same value provided by the import data.
          If `publish` is not set, the staged projection is set to the provided import data, but the current projection stays unchanged.
          However, if the import data contains no update, that is, if it matches the staged projection of the existing Product, the import induces no change in the existing Product whether `publish` is set or not.
      staged?:
        type: boolean
        default: true
        description: |
          - Set to `false` to update both the [current and staged projections](/../api/projects/productProjections#current--staged) of the [Product](/../api/projects/products#product) with the new Product Variant data.
          - Leave empty or set to `true` to only update the staged projection.
      product:
        description: |
          The [Product](/../api/projects/products#productvariant) to which this Product Variant belongs. Maps to `ProductVariant.product`.
          The Reference to the [Product](/../api/projects/products#product) with which the ProductVariant is associated.
          If referenced Product does not exist, the `state` of the [ImportOperation](/import-operation#importoperation) will be set to `unresolved` until the necessary Product is created.
        type: common.ProductKeyReference
  ProductVariantPatch:
    description: |
      Representation for an update of a [ProductVariant](/../api/projects/products#productvariant). Use this type to import updates for existing
      [ProductVariants](/../api/projects/products#productvariant) in a Project.
    properties:
      productVariant:
        description: |
          Reference to the [ProductVariant](/../api/projects/products#productvariant) to update.
          If the referenced ProductVariant does not exist, the `state` of the [ImportOperation](/import-operation#importoperation) will be set to `unresolved` until the necessary ProductVariant is created.
        type: common.ProductVariantKeyReference
      attributes?:
        description: |
          Maps to `ProductVariant.attributes`.
          - The referenced Attribute must be defined in an existing [ProductType](/../api/projects/productTypes#producttype), or the `state` of the [ImportOperation](/import-operation#importoperation) will be `validationFailed`.
          - Setting the value of a non-required Attribute to `null` will remove the Attribute.
          - Attempting to set a `null` value to a required Attribute will make the import operation fail with an [InvalidOperation](/error#invalidoperation) error.
          - Importing [LocalizableTextAttributes](/product-variant#localizabletextattribute) or [LocalizableTextSetAttributes](/product-variant#localizabletextsetattribute) follows an override pattern, meaning that omitted localized fields will be deleted, new fields will be created, and existing fields will be updated. You can also delete localized fields by setting their value to `null`.
        type: Attributes
      staged?:
        type: boolean
        default: true
        description: |
          If `false`, the attribute changes are applied to both [current and staged projected representations](/../api/projects/productProjections#current--staged) of the [Product](/../api/projects/products#product).
      product?:
        description: |
          Reference to the [Product](/../api/projects/products#product) which contains the ProductVariant. Setting a value will batch process the import operations to minimize concurrency errors. If set, this field is required for every ProductVariantPatch in the [ProductVariantPatchRequest](ctp:import:type:ProductVariantPatchRequest).
        type: common.ProductKeyReference
  Attributes:
    properties:
      //:
        description: |
          The name of the attribute is given by the key and shouldn't be set on the attribute itself.
          And since this property will be represented as a map, we can set individual attributes to null
          to delete them (which follows JSON Merge Patch semantics).
        type: Attribute | nil
