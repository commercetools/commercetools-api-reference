#%RAML 1.0 Library
usage: Product variant import types.
(annotations.package): productvariants

uses:
  common: common.raml
  annotations: ../annotationTypes/annotations.raml

types:
  Attribute:
    description: |
      Represents the value of an Attribute of a Product Variant.
    discriminator: type
    properties:
      name?:
        type: string
        description: |
          Required if used for [ProductVariantImport](ctp:import:type:ProductVariantImport).
          Must not be set if used for [ProductVariantPatch](ctp:import:type:ProductVariantPatch).

          Must match `name` of an [AttributeDefinition](ctp:api:type:AttributeDefinition) of the Product Type.
      type:
        type: string
        description: |
          Must match `type` of an [AttributeDefinition](ctp:api:type:AttributeDefinition) of the Product Type.
          The type is required if this type is used in a product variant and must not be set when
          used in a product variant patch.
      value:
        type: any #    type: AttributeValue | AttributeValue[]
        description: |
          The actual value of the Attribute compliant to the `type`, see specific [attribute types](ctp:import:type;Attribute).
  BooleanAttribute:
    description: |
      This type represents an attribute whose value is either "true" or "false".
    type: Attribute
    discriminatorValue: boolean
    properties:
      value:
        type: boolean
        description: |
          `true` or `false`
  BooleanSetAttribute:
    description: |
      This type represents an attribute whose value is set of boolean values.
    type: Attribute
    discriminatorValue: boolean-set
    properties:
      value:
        type: boolean[]
        description: |
          A set of boolean values.
  DateAttribute:
    description: |
      This type represents an attribute whose value is a date.
    type: Attribute
    discriminatorValue: date
    properties:
      value:
        type: date-only
        description: |
          A date in the format `YYYY-MM-DD`.
  DateSetAttribute:
    description: |
      This type represents an attribute whose value is a set of dates.
    type: Attribute
    discriminatorValue: date-set
    properties:
      value:
        type: date-only[]
        description: |
          A set of dates in the format `YYYY-MM-DD`.
  DateTimeAttribute:
    description: |
      This type represents an attribute whose value is a date with time.
    type: Attribute
    discriminatorValue: datetime
    properties:
      value:
        type: datetime
        description: |
          A date with time in the format `YYYY-MM-DDTHH:mm:ss.SSSZ`.
          The time zone is optional and defaults to UTC if not specified.
          If the time zone is specified, it must be in the format `±HH:mm` or `Z` for UTC.
  DateTimeSetAttribute:
    description: |
      This type represents an attribute whose value is a set of dates with time.
    type: Attribute
    discriminatorValue: datetime-set
    properties:
      value:
        type: datetime[]
        description: |
          A set of dates with time in the format `YYYY-MM-DDTHH:mm:ss.SSSZ`.
          The time zone is optional and defaults to UTC if not specified.
          If the time zone is specified, it must be in the format `±HH:mm` or `Z` for UTC.
  EnumAttribute:
    description: |
      This type represents an attribute whose value is an enum.
      The attribute value refers to the key of the enum value.
    type: Attribute
    discriminatorValue: enum
    properties:
      value:
        type: string
        description: |
          The key of the enum value.
          Must match the key of an [AttributePlainEnumValue](ctp:api:type:AttributePlainEnumValue) in the Product Type.
  EnumSetAttribute:
    description: |
      This type represents an attribute whose value is an enum.
      The attribute value refers to the key of the enum value.
    type: Attribute
    discriminatorValue: enum-set
    properties:
      value:
        type: string[]
        description: |
          A set of enum values, each represented by its key.
          Each key must match the key of an [AttributePlainEnumValue](ctp:api:type:AttributePlainEnumValue) in the Product Type.
  LocalizableEnumAttribute:
    description: |
      This type represents an attribute whose value is a localized enum.
      The attribute value refers to the key of the enum value.
    type: Attribute
    discriminatorValue: lenum
    properties:
      value:
        type: string
        description: |
          The key of the localized enum value.
          Must match the key of an [AttributeLocalizedEnumValue](ctp:api:type:AttributeLocalizedEnumValue) in the Product Type.
  LocalizableEnumSetAttribute:
    description: |
      This type represents an attribute whose value is a localized enum.
      The attribute value refers to the key of the enum value.
    type: Attribute
    discriminatorValue: lenum-set
    properties:
      value:
        type: string[]
        description: |
          A set of localized enum values, each represented by its key.
          Each key must match the key of an [AttributeLocalizedEnumValue](ctp:api:type:AttributeLocalizedEnumValue) in the Product Type.
  LocalizableTextAttribute:
    description: |
      This type represents an attribute whose value is a localized text.
    type: Attribute
    discriminatorValue: ltext
    properties:
      value:
        type: common.LocalizedString
        description: |
          A localized string.
  LocalizableTextSetAttribute:
    description: |
      This type represents an attribute whose value is a localized text.
    type: Attribute
    discriminatorValue: ltext-set
    properties:
      value:
        type: common.LocalizedString[]
        description: |
          A set of localized strings.
  MoneyAttribute:
    description: |
      This type represents an attribute whose value is a money object.
    type: Attribute
    discriminatorValue: money
    properties:
      value:
        type: common.Money
        description: |
          A money value in cent precision format.
  MoneySetAttribute:
    description: |
      This type represents an attribute whose value is a set of money objects.
    type: Attribute
    discriminatorValue: money-set
    properties:
      value:
        type: common.Money[]
        description: |
          A set of money values in cent precision format.
  NumberAttribute:
    description: |
      This type represents an attribute whose value is a number.
    type: Attribute
    discriminatorValue: number
    properties:
      value:
        type: number
        description: |
          A number value.
          Can be an integer or a floating-point number.
  NumberSetAttribute:
    description: |
      This type represents an attribute whose value is a set of numbers.
    type: Attribute
    discriminatorValue: number-set
    properties:
      value:
        type: number[]
        description: |
          A set of number values.
          Each value can be an integer or a floating-point number.
  ReferenceAttribute:
    description: |
      This type represents an attribute whose value is a key reference.
    type: Attribute
    discriminatorValue: reference
    properties:
      value:
        type: common.KeyReference
        description: References a resource by key.
    example: !include /../examples/reference-attribute.json
  ReferenceSetAttribute:
    description: |
      This type represents an attribute whose value is a set of references.
    type: Attribute
    discriminatorValue: reference-set
    properties:
      value:
        type: common.KeyReference[]
        description: |
          A set of references, each referencing a resource by key.
          Each reference must match the key of an existing resource in the project.
  TextAttribute:
    description: |
      This type represents an attribute whose value is a string.
    type: Attribute
    discriminatorValue: text
    properties:
      value:
        type: string
        description: |
          A text value.
  TextSetAttribute:
    description: |
      This type represents an attribute whose value is a set of strings.
    type: Attribute
    discriminatorValue: text-set
    properties:
      value:
        type: string[]
        description: |
          A set of text values.
  TimeAttribute:
    description: |
      This type represents an attribute whose value is a time.
    type: Attribute
    discriminatorValue: time
    properties:
      value:
        type: time-only
        description: |
          A time value in the format `HH:mm:ss.SSS`.
          The time zone is optional and defaults to UTC if not specified.
          If the time zone is specified, it must be in the format `±HH:mm` or `Z` for UTC.
  TimeSetAttribute:
    description: |
      This type represents an attribute whose value is a set of times.
    type: Attribute
    discriminatorValue: time-set
    properties:
      value:
        type: time-only[]
        description: |
          A set of time values in the format `HH:mm:ss.SSS`.
          The time zone is optional and defaults to UTC if not specified.
          If the time zone is specified, it must be in the format `±HH:mm` or `Z` for UTC.
  ProductVariantImport:
    description: |
      Represents the data used to import a ProductVariant. Once imported, this data is persisted as a [ProductVariant](ctp:api:type:ProductVariant) in the Project.
    type: common.ImportResource
    example: !include ../examples/product-variant-import.json
    properties:
      key:
        type: string
        description: User-defined unique identifier. If a [ProductVariant](ctp:api:type:ProductVariant) with this `key` exists on the specified `product`, it is updated with the imported data.
      sku?:
        description: |
          Maps to `ProductVariant.sku`.
        type: string
      isMasterVariant:
        description: |
          - When creating a new ProductVariant, set to `false`; otherwise, the import operation will fail with a [NewMasterVariantAdditionNotAllowed](ctp:import:type:NewMasterVariantAdditionNotAllowedError) error.
          - Set to `true` if the ProductVariant exists and you want to set this ProductVariant as the Master Variant.
        type: boolean
      attributes?:
        description: |
          Maps to `ProductVariant.attributes`.
          The referenced attribute must be defined in an already existing ProductType in the project, or the `state` of the [ImportOperation](ctp:import:type:ImportOperation) will be `unresolved`.
        type: Attribute[]
      images?:
        description: |
          Maps to `ProductVariant.images`.
        type: common.Image[]
      assets?:
        description: |
          Maps to `ProductVariant.assets`.
        type: common.Asset[]
      publish?:
        (annotations.deprecated): true
        type: boolean
        description: |
          If `publish` is set to either `true` or `false`, both staged and current projections are set to the same value provided by the import data.
          If `publish` is not set, the staged projection is set to the provided import data, but the current projection stays unchanged.
          However, if the import data contains no update, that is, if it matches the staged projection of the existing Product, the import induces no change in the existing Product whether `publish` is set or not.
      staged?:
        type: boolean
        default: true
        description: |
          - Set to `false` to update both the [current and staged projections](/../api/projects/productProjections#current--staged) of the [Product](ctp:api:type:Product) with the new Product Variant data.
          - Leave empty or set to `true` to only update the staged projection.
      product:
        description: |
          The [Product](ctp:api:type:ProductVariant) containing this ProductVariant. If the referenced Product does not exist, the `state` of the [ImportOperation](ctp:import:type:ImportOperation) will be set to `unresolved` until the referenced Product is created.
        type: common.ProductKeyReference
  ProductVariantPatch:
    description: |
      Represents the data used to update a [ProductVariant](ctp:api:type:ProductVariant).
    example: !include ../examples/product-variant-patch.json
    properties:
      productVariant:
        description: |
          Reference to the [ProductVariant](ctp:api:type:ProductVariant) to update.
        type: common.ProductVariantKeyReference
      attributes?:
        description: |
          Maps to `ProductVariant.attributes`.
          - The referenced Attribute must be defined in an existing [ProductType](ctp:api:type:ProductType), or the `state` of the [ImportOperation](ctp:import:type:ImportOperation) will be `validationFailed`.
          - Setting the value of a non-required Attribute to `null` will remove the Attribute.
          - Attempting to set a `null` value to a required Attribute will make the import operation fail with an [InvalidOperation](ctp:import:type:InvalidOperation) error.
          - Importing [LocalizableTextAttributes](ctp:import:type:LocalizableTextAttribute) or [LocalizableTextSetAttributes](ctp:import:type:LocalizableTextSetAttribute) follows an override pattern, meaning that omitted localized fields will be deleted, new fields will be created, and existing fields will be updated. You can delete localized fields by setting their value to `null`.
        type: Attributes
      staged?:
        type: boolean
        default: true
        description: |
          If `false`, the attribute changes are applied to both [current and staged projected representations](/projects/productProjections#current--staged) of the [Product](ctp:api:type:Product).
      product?:
        description: |
          Reference to the [Product](ctp:api:type:Product) that contains the ProductVariant.

          We recommend to set this value to minimize concurrency errors.
          If set, this field is required for every ProductVariantPatch in the [ProductVariantPatchRequest](ctp:import:type:ProductVariantPatchRequest).

          If the referenced Product does not exist, the `state` of the [ImportOperation](ctp:import:type:ImportOperation) will be set to `unresolved` until the referenced Product is created.

        type: common.ProductKeyReference
  Attributes:
    properties:
      //:
        description: |
          The name of the attribute is given by the key and shouldn't be set on the attribute itself.
          And since this property will be represented as a map, we can set individual attributes to null
          to delete them (which follows JSON Merge Patch semantics).
        type: Attribute | nil
