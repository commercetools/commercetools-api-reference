#%RAML 1.0 ResourceType

/{namespace}/{action}:
  uriParameters:
    namespace:
      displayName: Namespace
      type: string
      description: The namespace where the action to invoked is located. [Namespaces are used to categorize actions](/../frontend-development/developing-an-action-extension#1-implement-the-action).
    action:
      displayName: Action
      type: string
      description: The name of the action to invoked.
  get:
    is:
      - actionErrorable
      - actionHeaders
    description: Use the GET method to allow the frontend to fetch data from a backend system. For the response, we recommend to use standard HTTP codes and `application/json` encoded content. The response will be structured [as defined by the `body` property of the action](/../frontend-development/developing-an-action-extension#1-implement-the-action). The following response example contains information about a cart.
    responses:
      200:
        description: The response will be structured [as defined by the `body` property of the action](/../frontend-development/developing-an-action-extension#1-implement-the-action). We recommend to use standard HTTP response codes and `application/json` encoded content. The following response example contains information about a cart.
        body:
          application/json:
            type: object
            example: !include ../examples/action-success.json
  post:
    is:
      - actionErrorable
      - actionHeaders
    description: Use the POST method to write data to a backend system. Any JSON serializable payload is accepted. The following request example adds a product to a cart. For the response, we recommend to use standard HTTP codes and `application/json` encoded content. The response will be structured [as defined by the `body` property of the action](/../frontend-development/developing-an-action-extension#1-implement-the-action). The following response example contains the updated cart information, which includes the added product.
    body:
      application/json:
        type: any
        example: !include ../examples/action-payload.json
    responses:
      200:
        description: The response will be structured [as defined by the `body` property of the action](/../frontend-development/developing-an-action-extension#1-implement-the-action). We recommend to use standard HTTP response codes and `application/json` encoded content. The following response example contains information about a cart.
        body:
          application/json:
            type: object
            example: !include ../examples/action-success.json
  put:
    is:
      - actionErrorable
      - actionHeaders
    description: Use the PUT method to write data to a backend system. Any JSON serializable payload is accepted. The following request example adds a product to a cart. For the response, we recommend to use standard HTTP codes and `application/json` encoded content. The response will be structured [as defined by the `body` property of the action](/../frontend-development/developing-an-action-extension#1-implement-the-action). The following response example contains the updated cart information, which includes the added product.
    body:
      application/json:
        type: any
        example: !include ../examples/action-payload.json
    responses:
      200:
        description: The response will be structured [as defined by the `body` property of the action](/../frontend-development/developing-an-action-extension#1-implement-the-action). We recommend to use standard HTTP response codes and `application/json` encoded content. The following response example contains information about a cart.
        body:
          application/json:
            type: any
            example: !include ../examples/action-success.json
