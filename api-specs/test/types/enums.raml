#%RAML 1.0 Library
usage: Enum test types.

uses:
  annotations: ../annotation-types/annotations.raml

types:
  EnumTest:
    description: Example enumeration for the SetOfEnumTestTypes type.
    type: string
    enum:
      - EnumEntryOne
      - EnumEntryTwo
      - EnumEntryThree
      - enum
    (annotations.enumDescriptions):
      EnumEntryOne: |
        This is the first entry in the EnumTest enumeration.
      EnumEntryTwo: |
        This is the second entry in the EnumTest enumeration.
      EnumEntryThree: |
        This is the third entry in the EnumTest enumeration.
      enum: |
        This is an item called with a reserved word.
  EnumPropertiesType:
    description: Test data for properties with enums that are of differing primitive types
    properties:
      intWithEnumExample:
        description: An int with enum values
        type: integer
        enum: [1, 2, 3]
      floatWithEnumExample:
        description: A float with enum values
        type: number
        format: float
        default: 1.0
        enum: [1.0, 2.0, 3.0]
      enumOfStringExample:
        description: A string with enum values (undescribed)
        type: string
        enum:
          - 'dog'
          - 'cat'
          - 'elephant'
        default: 'dog'
  SetOfEnumTestType:
    description: A type containing a property with a set of Enums
    # I.e. how `ChannelDraft` has `ChannelRole`s
    properties:
      setofEnumExample:
        description: |
          Contains a Set of `EnumTest`. If `uniqueItems` is `true` for an Array,
          the then instead of "Array of ______", it needs to read "Set of _______".
        type: EnumTest[]
        uniqueItems: true
  EnumWithDescriptionExample:
    description: Enum with agreed upon description annotation.
    type: string
    (annotations.enumDescriptions):
      enumValue1: description 1
      enumValue2: description 2
      enumValue3: description 3
      enumWithMarkdownDescription: |
        `inline-code` should be formatted as an inline code. [ObjectTestType](/types/general#objecttesttype) should link to the header of the definition of `ObjectTestType` on this website - `api-docs-smoke-test`. [Links](/../docs-smoke-test/views/markdown#links) should link to the header for the definition of  `Links` on `docs-smoke-test` microsite.
    enum:
      - enumValue1
      - enumValue2
      - enumValue3
      - enumWithoutDescription
      - enumWithMarkdownDescription
  EnumWithGroupsExample:
    description: Enum with agreed upon description annotation.
    type: string
    (annotations.enumDescriptions):
      enumValue1: description 1
      enumValue2: description 2
      enumValue3: description 3
      enumValue4: description 4
      enumValue5: description 5
      enumValue6: description 6
      enumValue7: description 7
      enumValue8: description 8
      enumValue9: description 9
      enumValue10: description 10
      enumWithMarkdownDescription: |
        `inline-code` should be formatted as an inline code. [ObjectTestType](/types/general#objecttesttype) should link to the header of the definition of `ObjectTestType` on this website - `api-docs-smoke-test`. [Links](/../docs-smoke-test/views/markdown#links) should link to the header for the definition of  `Links` on `docs-smoke-test` microsite.
    enum:
      - enumValue1
      - enumValue2
      - enumValue3
      - enumValue4
      - enumValue5
      - enumValue6
      - enumValue7
      - enumValue8
      - enumValue9
      - enumValue10
      - enumWithoutDescription
      - enumWithMarkdownDescription
    (annotations.enumGroups):
      enumValue1: Group 3
      enumValue2: Group 1
      enumValue3: Group 2
      enumValue4: Group 3
      enumValue5: Group 2
      enumValue6: Group 2
      enumValue7: Group 1
      enumValue8: Group 3
      enumValue9: Group 2
      enumValue10: Group 2
      enumWithoutDescription: Group 2
      enumWithMarkdownDescription: Group 1
