type:
  baseDomain:
    resourceType: Cart
    resourceQueryType: CartPagedQueryResponse
    resourceDraft: CartDraft
    whereExample: 'customerEmail = "john.doe@example.com"'
    sortExample: createdAt asc
(updateable): Cart
(deleteable): Cart
(createable): CartDraft
description: A shopping cart holds product variants and can be ordered.
get:
  securedBy: [oauth_2_0: { scopes: ['view_orders:{projectKey}'] }]
  responses:
    200:
      body:
        application/json:
          example: !include ../examples/carts.example.json
head:
  securedBy: [oauth_2_0: { scopes: ['view_orders:{projectKey}'] }]
  description: Checks if a Cart exists for a given Query Predicate. Returns a `200 OK` status if any Carts match the Query Predicate, or a `404 Not Found` otherwise.
  queryParameters:
    where?:
      type: QueryPredicate[]
post:
  securedBy: [oauth_2_0: { scopes: ['manage_orders:{projectKey}'] }]
  description: |
    If the referenced [ShippingMethod](ctp:api:type:ShippingMethod) in the [CartDraft](ctp:api:type:CartDraft) has a predicate that does not match, or if the Shipping Method is not active, an [InvalidOperation](ctp:api:type:InvalidOperationError) error is returned.

    Specific Error Codes:

    - [DiscountCodeNonApplicable](ctp:api:type:DiscountCodeNonApplicableError)
    - [InvalidItemShippingDetails](ctp:api:type:InvalidItemShippingDetailsError)
    - [MatchingPriceNotFound](ctp:api:type:MatchingPriceNotFoundError)
    - [MissingTaxRateForCountry](ctp:api:type:MissingTaxRateForCountryError)

  body:
    application/json:
      example: !include ../examples/cart-create.example.json
  responses:
    201:
      body:
        application/json:
          example: !include ../examples/cart.example.json
/replicate:
  type: base
  post:
    displayName: Replicate cart
    description: |
      Creates a new Cart by replicating an existing Cart or Order. Can be useful in cases where a customer wants to cancel a recent order to make some changes or reorder a previous order.

      The replicated Cart preserves Customer information, Line Items and Custom Line Items, Custom Fields, Discount Codes, and other settings of the Cart or Order. If the Line Items become invalid, for example, due to removed Products or Prices, they are removed from the new Cart. If the Customer switches to another Customer Group, the new Cart is updated with the new value. It has up-to-date Tax Rates, Prices, and Line Item product data and is in `Active` [CartState](ctp:api:type:CartState).

      The new Cart does not contain Payments or Deliveries. The [State](ctp:api:type:ItemState) of Line Items and Custom Line Items is reset to `initial`.

      Specific Error Codes:

      - [MatchingPriceNotFound](ctp:api:type:MatchingPriceNotFoundError)
      - [MissingTaxRateForCountry](ctp:api:type:MissingTaxRateForCountryError)
    body:
      application/json:
        example: !include ../examples/cart-replicate.example.json
        type: ReplicaCartDraft
    responses:
      201:
        body:
          application/json:
            example: !include ../examples/cart.example.json
            type: Cart
    securedBy: [oauth_2_0: { scopes: ['manage_orders:{projectKey}'] }]
/customer-id={customerId}:
  (methodName): withCustomerId
  type:
    baseResource:
      uriParameterName: customerId
      resourceType: Cart
  get:
    securedBy: [oauth_2_0: { scopes: ['view_orders:{projectKey}'] }]
    description: |
      Retrieves the most recently modified active Cart of a Customer with [CartOrigin](ctp:api:type:CartOrigin) `Customer`. If no active Cart exists, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.

      To ensure the Cart is up-to-date with current values (such as Prices and Discounts), use the [Recalculate](ctp:api:type:CartRecalculateAction) update action.
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/cart.example.json
  head:
    securedBy: [oauth_2_0: { scopes: ['view_orders:{projectKey}'] }]
    description: Checks if a Cart of a Customer exists. Returns a `200 OK` status if the Cart exists or a `404 Not Found` otherwise.
/key={key}:
  (methodName): withKey
  type:
    baseResource:
      uriParameterName: key
      resourceType: Cart
      resourceUpdateType: CartUpdate
  get:
    securedBy: [oauth_2_0: { scopes: ['view_orders:{projectKey}'] }]
    description: |
      To ensure the Cart is up-to-date with current values (such as Prices and Discounts), use the [Recalculate](ctp:api:type:CartRecalculateAction) update action.
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/cart.example.json
  head:
    securedBy: [oauth_2_0: { scopes: ['view_orders:{projectKey}'] }]
    description: Checks if a Cart exists for a given `key`. Returns a `200 OK` status if the Cart exists or a `404 Not Found` otherwise.
  post:
    securedBy: [oauth_2_0: { scopes: ['manage_orders:{projectKey}'] }]
    body:
      application/json:
        example: !include ../examples/cart-update.example.json
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/cart.example.json
  delete:
    is:
      - dataErasure
    securedBy: [oauth_2_0: { scopes: ['manage_orders:{projectKey}'] }]
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/cart.example.json
/{ID}:
  (methodName): withId
  type:
    baseResource:
      uriParameterName: ID
      resourceType: Cart
      resourceUpdateType: CartUpdate
  get:
    securedBy: [oauth_2_0: { scopes: ['view_orders:{projectKey}'] }]
    description: |
      To ensure the Cart is up-to-date with current values (such as Prices and Discounts), use the [Recalculate](ctp:api:type:CartRecalculateAction) update action.
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/cart.example.json
  head:
    securedBy: [oauth_2_0: { scopes: ['view_orders:{projectKey}'] }]
    description: Checks if a Cart exists for a given `id`. Returns a `200 OK` status if the Cart exists or a `404 Not Found` otherwise.
  post:
    securedBy: [oauth_2_0: { scopes: ['manage_orders:{projectKey}'] }]
    body:
      application/json:
        example: !include ../examples/cart-update.example.json
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/cart.example.json
  delete:
    is:
      - dataErasure
    securedBy: [oauth_2_0: { scopes: ['manage_orders:{projectKey}'] }]
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/cart.example.json
