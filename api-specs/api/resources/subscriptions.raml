type: base
description:
  Subscriptions allow you to be notified of new messages or changes via a
  Message Queue of your choice
get:
  displayName: Query Subscriptions
  securedBy: [oauth_2_0: { scopes: ['manage_subscriptions:{projectKey}'] }]
  is:
    - sortable:
        sortExample: createdAt asc
    - paging
    - query:
        whereExample: 'key = "product-subscription"'
  responses:
    200:
      body:
        application/json:
          type: SubscriptionPagedQueryResponse
          example: !include ../examples/subscriptions.example.json
head:
  securedBy: [oauth_2_0: { scopes: ['manage_subscriptions:{projectKey}'] }]
  description: Checks if a Subscription exists for a given Query Predicate. Returns a `200 OK` status if any Subscriptions match the Query Predicate or a `404 Not Found` otherwise.
  queryParameters:
    where?:
      type: QueryPredicate[]
      description: |-
        Query Predicates on Subscriptions are limited to [Text](ctp:api:type:AttributeTextType),
        [Enum](ctp:api:type:AttributeEnumType), [Boolean](ctp:api:type:AttributeBooleanType),
        [Number](ctp:api:type:AttributeNumberType), [Date](ctp:api:type:AttributeDateType),
        [Time](ctp:api:type:AttributeTimeType), and [DateTime](ctp:api:type:AttributeDateTimeType) attribute types.
post:
  displayName: Create Subscription
  securedBy: [oauth_2_0: { scopes: ['manage_subscriptions:{projectKey}'] }]
  is:
    - deprecatable201
  description: |
    A test notification is sent to ensure the correct configuration of the Destination. If the notification cannot be delivered, the Subscription will not be created. The payload of the test notification is of type [ResourceCreated](/../api/projects/subscriptions#resourcecreateddeliverypayload) for the `resourceTypeId` `subscription`.
  body:
    application/json:
      type: SubscriptionDraft
      example: !include ../examples/subscription-create.example.json
  responses:
    201:
      body:
        application/json:
          type: Subscription
          example: !include ../examples/subscription.example.json
/key={key}:
  (methodName): withKey
  type: base
  uriParameters:
    key:
      type: string
      description: '`key` of the [Subscription](ctp:api:type:Subscription).'
  get:
    displayName: Get Subscription by key
    securedBy: [oauth_2_0: { scopes: ['manage_subscriptions:{projectKey}'] }]
    responses:
      200:
        body:
          application/json:
            type: Subscription
            example: !include ../examples/subscription.example.json
  head:
    securedBy: [oauth_2_0: { scopes: ['manage_subscriptions:{projectKey}'] }]
    description: Checks if a Subscription exists for a given `key`. Returns a `200 OK` status if the Subscription exists or a `404 Not Found` otherwise.
  post:
    displayName: Update Subscription by key
    securedBy: [oauth_2_0: { scopes: ['manage_subscriptions:{projectKey}'] }]
    is:
      - conflicting
      - deprecatable200
    body:
      application/json:
        type: SubscriptionUpdate
        example: !include ../examples/subscription-update.example.json
    responses:
      200:
        body:
          application/json:
            type: Subscription
            example: !include ../examples/subscription-update-response.example.json
  delete:
    displayName: Delete Subscription by key
    securedBy: [oauth_2_0: { scopes: ['manage_subscriptions:{projectKey}'] }]
    is:
      - versioned
      - conflicting
    responses:
      200:
        body:
          application/json:
            type: Subscription
            example: !include ../examples/subscription.example.json
/{ID}:
  (methodName): withId
  type: base
  uriParameters:
    ID:
      type: string
      description: '`id` of the [Subscription](ctp:api:type:Subscription).'
  get:
    displayName: Get Subscription by ID
    securedBy: [oauth_2_0: { scopes: ['manage_subscriptions:{projectKey}'] }]
    responses:
      200:
        body:
          application/json:
            type: Subscription
            example: !include ../examples/subscription.example.json
  head:
    securedBy: [oauth_2_0: { scopes: ['manage_subscriptions:{projectKey}'] }]
    description: Checks if a Subscription exists for a given `id`. Returns a `200 OK` status if the Subscription exists or a `404 Not Found` otherwise.
  post:
    displayName: Update Subscription by ID
    securedBy: [oauth_2_0: { scopes: ['manage_subscriptions:{projectKey}'] }]
    is:
      - conflicting
      - deprecatable200
    body:
      application/json:
        type: SubscriptionUpdate
        example: !include ../examples/subscription-update.example.json
    responses:
      200:
        body:
          application/json:
            type: Subscription
            example: !include ../examples/subscription-update-response.example.json
  delete:
    displayName: Delete Subscription by ID
    securedBy: [oauth_2_0: { scopes: ['manage_subscriptions:{projectKey}'] }]
    is:
      - versioned
      - conflicting
    responses:
      200:
        body:
          application/json:
            type: Subscription
            example: !include ../examples/subscription.example.json
  /health:
    (methodName): withIdHealth
    get:
      displayName: Get Health Status of Subscription by ID
      description: |
        This endpoint can be polled by a monitoring or alerting system that checks the health of your Subscriptions. To ease integration with such systems this endpoint does not require [Authorization](/../api/authorization).
      responses:
        200:
          description: |
            Healthy
        400:
          description: |
            ConfigurationError, ConfigurationErrorDeliveryStopped, ManuallySuspended
        503:
          description: |
            TemporaryError
