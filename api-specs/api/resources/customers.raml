type:
  baseDomain:
    resourceType: Customer
    resourceQueryType: CustomerPagedQueryResponse
    resourceDraft: CustomerDraft
    whereExample: 'email = "email@example.com"'
    sortExample: createdAt asc
(updateable): Customer
(deleteable): Customer
(createable): CustomerDraft
description: |
  A Customer is a person purchasing products. Carts, Orders, Quotes, Reviews and Payments can be associated to a Customer.
get:
  (csharp-implements):
    'commercetools.Sdk.Api.Models.IPagedQueryResourceRequest<ByProjectKeyCustomersGet,
    commercetools.Sdk.Api.Models.Customers.ICustomerPagedQueryResponse>'
  securedBy: [oauth_2_0: { scopes: ['view_customers:{projectKey}'] }]
  responses:
    200:
      body:
        application/json:
          example: !include ../examples/customers.example.json
post:
  securedBy: [oauth_2_0: { scopes: ['manage_customers:{projectKey}'] }]
  description: |
    If the `anonymousCart` field is set on the [CustomerDraft](ctp:api:type:CustomerDraft), then the newly created Customer will be assigned to that [Cart](ctp:api:type:Cart).
    Similarly, if the `anonymousId` field is set, the Customer will be set on all [Carts](ctp:api:type:Cart), [Orders](ctp:api:type:Order), [ShoppingLists](ctp:api:type:ShoppingList) and [Payments](ctp:api:type:Payment) with the same `anonymousId`.
    Creating a Customer produces the [CustomerCreated](ctp:api:type:CustomerCreatedMessage) Message.
  body:
    application/json:
      example: !include ../examples/customer-create.example.json
  responses:
    201:
      body:
        application/json:
          example: !include ../examples/customer-sign-in-result.example.json
          type: CustomerSignInResult
/password-token={passwordToken}:
  (methodName): withPasswordToken
  type:
    baseResource:
      uriParameterName: passwordToken
      resourceType: Customer
  get:
    displayName: Get customer by password verification token
    securedBy: [oauth_2_0: { scopes: ['view_customers:{projectKey}'] }]
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/customer.example.json
/email-token={emailToken}:
  (methodName): withEmailToken
  type:
    baseResource:
      uriParameterName: emailToken
      resourceType: Customer
  get:
    displayName: Get customer by email verification token
    securedBy: [oauth_2_0: { scopes: ['view_customers:{projectKey}'] }]
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/customer.example.json
/email-token:
  type: base
  post:
    displayName: Create a Token for verifying the Customer's Email
    securedBy: [oauth_2_0: { scopes: ['manage_customers:{projectKey}'] }]
    body:
      application/json:
        example: !include ../examples/Customer/CustomerCreateEmailToken.json
        type: CustomerCreateEmailToken
    responses:
      200:
        body:
          application/json:
            type: CustomerToken
/email/confirm:
  type: base
  displayName: Verify Customer's Email
  post:
    displayName: Verifies customer's email.
    description: |
      Verifying the email of the Customer produces the [CustomerEmailVerified](ctp:api:type:CustomerEmailVerifiedMessage) Message.
    securedBy: [oauth_2_0: { scopes: ['manage_customers:{projectKey}'] }]
    body:
      application/json:
        example: !include ../examples/Customer/CustomerEmailVerify.json
        type: CustomerEmailVerify
    responses:
      200:
        description: The email was verified.
        body:
          application/json:
            example: !include ../examples/customer.example.json
            type: Customer
/password:
  type: base
  displayName: Change Customers Password
  post:
    displayName: Change a customers password
    description: |
      Changing the password produces the [CustomerPasswordUpdated](ctp:api:type:CustomerPasswordUpdatedMessage) Message with `reset=false`.
    securedBy: [oauth_2_0: { scopes: ['manage_customers:{projectKey}'] }]
    body:
      application/json:
        example: !include ../examples/Customer/CustomerChangePassword.json
        type: CustomerChangePassword
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/customer.example.json
            type: Customer
/password/reset:
  type: base
  post:
    displayName: Reset Customer's Password
    description: |
      Resetting the password of the Customer produces the [CustomerPasswordUpdated](ctp:api:type:CustomerPasswordUpdatedMessage) Message with `reset=true`.
    securedBy: [oauth_2_0: { scopes: ['manage_customers:{projectKey}'] }]
    body:
      application/json:
        example: !include ../examples/Customer/CustomerResetPassword.json
        type: CustomerResetPassword
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/customer.example.json
            type: Customer
/password-token:
  type: base
  displayName: Create a Token for Resetting the Customer's Password
  post:
    displayName: Create a Token for Resetting the Customer's Password
    securedBy: [oauth_2_0: { scopes: ['manage_customers:{projectKey}'] }]
    body:
      application/json:
        example: !include ../examples/Customer/CustomerCreatePasswordResetToken.json
        type: CustomerCreatePasswordResetToken
    responses:
      200:
        body:
          application/json:
            type: CustomerToken
/key={key}:
  (methodName): withKey
  type:
    baseResource:
      uriParameterName: key
      resourceType: Customer
      resourceUpdateType: CustomerUpdate
  get:
    securedBy: [oauth_2_0: { scopes: ['view_customers:{projectKey}'] }]
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/customer.example.json
  post:
    securedBy: [oauth_2_0: { scopes: ['manage_customers:{projectKey}'] }]
    body:
      application/json:
        example: !include ../examples/customer-update.example.json
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/customer.example.json
  delete:
    is:
      - dataErasure
    securedBy: [oauth_2_0: { scopes: ['manage_customers:{projectKey}'] }]
    description: |
      Deleting a Customer produces the [CustomerDeleted](ctp:api:type:CustomerDeletedMessage) Message.
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/customer.example.json
/{ID}:
  (methodName): withId
  type:
    baseResource:
      uriParameterName: ID
      resourceType: Customer
      resourceUpdateType: CustomerUpdate
  get:
    securedBy: [oauth_2_0: { scopes: ['view_customers:{projectKey}'] }]
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/customer.example.json
  post:
    securedBy: [oauth_2_0: { scopes: ['manage_customers:{projectKey}'] }]
    body:
      application/json:
        example: !include ../examples/customer-update.example.json
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/customer.example.json
  delete:
    is:
      - dataErasure
    securedBy: [oauth_2_0: { scopes: ['manage_customers:{projectKey}'] }]
    description: |
      Deleting a Customer produces the [CustomerDeleted](ctp:api:type:CustomerDeletedMessage) Message.
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/customer.example.json
