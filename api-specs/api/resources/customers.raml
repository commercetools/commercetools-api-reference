type:
  baseDomain:
    resourceType: Customer
    resourceQueryType: CustomerPagedQueryResponse
    resourceDraft: CustomerDraft
    whereExample: 'email = "foo@bar.com"'
    sortExample: createdAt asc
(updateable): Customer
(deleteable): Customer
(createable): CustomerDraft
description: |
  A customer is a person purchasing products. customers, Orders, Comments and Reviews can be associated to a customer.
get:
  (java-implements):
    'com.commercetools.api.models.PagedQueryResourceRequest<ByProjectKeyCustomersGet,
    com.commercetools.api.models.customer.CustomerPagedQueryResponse>'
  securedBy:
    [
      oauth_2_0:
        {
          scopes:
            ['manage_project:{projectKey}', 'view_customers:{projectKey}'],
        },
    ]
  responses:
    200:
      body:
        application/json:
          example: !include ../examples/customers.example.json
post:
  securedBy:
    [
      oauth_2_0:
        {
          scopes:
            ['manage_project:{projectKey}', 'manage_customers:{projectKey}'],
        },
    ]
  description: |
    Creates a customer. If an anonymous cart is passed in,
    then the cart is assigned to the created customer and the version number of the Cart will increase.
    If the ID of an anonymous session is given, all carts and orders will be assigned to the created customer.
  body:
    application/json:
      example: !include ../examples/customer-create.example.json
  responses:
    201:
      body:
        application/json:
          example: !include ../examples/customer-sign-in.example.json
          type: CustomerSignInResult
/password-token={passwordToken}:
  (methodName): withPasswordToken
  type:
    baseResource:
      uriParameterName: passwordToken
      resourceType: Customer
  get:
    displayName: Get customer by password verification token
    securedBy:
      [
        oauth_2_0:
          {
            scopes:
              ['manage_project:{projectKey}', 'view_customers:{projectKey}'],
          },
      ]
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/customer.example.json
/email-token={emailToken}:
  (methodName): withEmailToken
  type:
    baseResource:
      uriParameterName: emailToken
      resourceType: Customer
  get:
    displayName: Get customer by email verification token
    securedBy:
      [
        oauth_2_0:
          {
            scopes:
              ['manage_project:{projectKey}', 'view_customers:{projectKey}'],
          },
      ]
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/customer.example.json
/email-token:
  type: base
  description: |
    To verify a customer's email, an email token can be created. This should be embedded in a link and sent to the
    customer via email. When the customer clicks on the link, the "verify customer's email" endpoint should be called,
    which sets customer's isVerifiedEmail field to true.
  post:
    displayName: Create a Token for verifying the Customer's Email
    description: Create a Token for verifying the Customer's Email
    securedBy:
      [
        oauth_2_0:
          {
            scopes:
              ['manage_project:{projectKey}', 'manage_customers:{projectKey}'],
          },
      ]
    body:
      application/json:
        type: CustomerCreateEmailToken
    responses:
      200:
        body:
          application/json:
            type: CustomerToken
/email/confirm:
  type: base
  displayName: Verify Customer's Email
  post:
    displayName: Verifies customer's email.
    description: Verifies customer's email using a token.
    securedBy:
      [
        oauth_2_0:
          {
            scopes:
              ['manage_project:{projectKey}', 'manage_customers:{projectKey}'],
          },
      ]
    body:
      application/json:
        type: CustomerEmailVerify
    responses:
      200:
        description: The email was verified.
        body:
          application/json:
            example: !include ../examples/customer.example.json
            type: Customer
/password:
  type: base
  displayName: Change Customers Password
  post:
    displayName: Change a customers password
    description: Change a customers password
    securedBy:
      [
        oauth_2_0:
          {
            scopes:
              ['manage_project:{projectKey}', 'manage_customers:{projectKey}'],
          },
      ]
    body:
      application/json:
        type: CustomerChangePassword
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/customer.example.json
            type: Customer
/password/reset:
  type: base
  post:
    displayName: Reset Customer's Password
    description: Set a new password using a token.
    securedBy:
      [
        oauth_2_0:
          {
            scopes:
              ['manage_project:{projectKey}', 'manage_customers:{projectKey}'],
          },
      ]
    body:
      application/json:
        type: CustomerResetPassword
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/customer.example.json
            type: Customer
/password-token:
  type: base
  displayName: Create a Token for Resetting the Customer's Password
  description: |
    The following workflow can be used to reset the customer's password:

    * Create a password reset token and send it embedded in a link to the customer.
    * When the customer clicks on the link, the customer is retrieved with the token.
    * The customer enters a new password and the "reset customer's password" endpoint is called.
  post:
    displayName: Create a Token for Resetting the Customer's Password
    description: |
      The token value is used to reset the password of the customer with the given email. The token is
      valid only for 10 minutes.
    securedBy:
      [
        oauth_2_0:
          {
            scopes:
              ['manage_project:{projectKey}', 'manage_customers:{projectKey}'],
          },
      ]
    body:
      application/json:
        type: CustomerCreatePasswordResetToken
    responses:
      200:
        body:
          application/json:
            type: CustomerToken
/key={key}:
  (methodName): withKey
  type:
    baseResource:
      uriParameterName: key
      resourceType: Customer
      resourceUpdateType: CustomerUpdate
  get:
    securedBy:
      [
        oauth_2_0:
          {
            scopes:
              ['manage_project:{projectKey}', 'view_customers:{projectKey}'],
          },
      ]
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/customer.example.json
  post:
    securedBy:
      [
        oauth_2_0:
          {
            scopes:
              ['manage_project:{projectKey}', 'manage_customers:{projectKey}'],
          },
      ]
    body:
      application/json:
        example: !include ../examples/customer-update.example.json
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/customer.example.json
  delete:
    is:
      - dataErasure
    securedBy:
      [
        oauth_2_0:
          {
            scopes:
              ['manage_project:{projectKey}', 'manage_customers:{projectKey}'],
          },
      ]
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/customer.example.json
/{ID}:
  (methodName): withId
  type:
    baseResource:
      uriParameterName: ID
      resourceType: Customer
      resourceUpdateType: CustomerUpdate
  get:
    securedBy:
      [
        oauth_2_0:
          {
            scopes:
              ['manage_project:{projectKey}', 'view_customers:{projectKey}'],
          },
      ]
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/customer.example.json
  post:
    securedBy:
      [
        oauth_2_0:
          {
            scopes:
              ['manage_project:{projectKey}', 'manage_customers:{projectKey}'],
          },
      ]
    body:
      application/json:
        example: !include ../examples/customer-update.example.json
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/customer.example.json
  delete:
    is:
      - dataErasure
    securedBy:
      [
        oauth_2_0:
          {
            scopes:
              ['manage_project:{projectKey}', 'manage_customers:{projectKey}'],
          },
      ]
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/customer.example.json
