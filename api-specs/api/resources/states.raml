type:
  baseDomain:
    resourceType: State
    resourceQueryType: StatePagedQueryResponse
    resourceDraft: StateDraft
    whereExample: 'key = "new-order"'
    sortExample: createdAt asc
(updateable): State
(deleteable): State
(createable): StateDraft
description: |
  commercetools Composable Commerce allows you to model states of certain objects, such as orders, line items, products,
  reviews, and payments in order to define finite state machines reflecting the business logic you'd like to
  implement.
get:
  displayName: Query States
  securedBy: [oauth_2_0: { scopes: ['view_states:{projectKey}'] }]
  responses:
    200:
      body:
        application/json:
          example: !include ../examples/states.example.json
head:
  displayName: Check if State exists by Query Predicate
  securedBy: [oauth_2_0: { scopes: ['view_states:{projectKey}'] }]
  description: Checks if one or more States exist for the provided query predicate. Returns a `200` status if any States match the query predicate, or a `404` status otherwise.
  queryParameters:
    where?:
      type: QueryPredicate[]
      description: |-
        Query Predicates on States are limited to [Text](ctp:api:type:AttributeTextType),
        [Enum](ctp:api:type:AttributeEnumType), [Boolean](ctp:api:type:AttributeBooleanType),
        [Number](ctp:api:type:AttributeNumberType), [Date](ctp:api:type:AttributeDateType),
        [Time](ctp:api:type:AttributeTimeType), and [DateTime](ctp:api:type:AttributeDateTimeType) attribute types.
post:
  displayName: Create State
  securedBy: [oauth_2_0: { scopes: ['manage_states:{projectKey}'] }]
  body:
    application/json:
      example: !include ../examples/state-create.example.json
  responses:
    201:
      body:
        application/json:
          example: !include ../examples/state.example.json
/key={key}:
  (methodName): withKey
  type:
    baseResource:
      uriParameterName: key
      resourceType: State
      resourceUpdateType: StateUpdate
  get:
    displayName: Get State by Key
    securedBy: [oauth_2_0: { scopes: ['view_states:{projectKey}'] }]
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/state.example.json
  head:
    displayName: Check if State exists by Key
    securedBy: [oauth_2_0: { scopes: ['view_states:{projectKey}'] }]
    description: Checks if a State exists with the provided `key`. Returns a `200` status if the State exists, or a `404` status otherwise.
  post:
    displayName: Update State by Key
    securedBy: [oauth_2_0: { scopes: ['manage_states:{projectKey}'] }]
    body:
      application/json:
        example: !include ../examples/state-update.example.json
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/state-update-response.example.json
  delete:
    displayName: Delete State by Key
    securedBy: [oauth_2_0: { scopes: ['manage_states:{projectKey}'] }]
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/state.example.json
/{ID}:
  (methodName): withId
  type:
    baseResource:
      uriParameterName: ID
      resourceType: State
      resourceUpdateType: StateUpdate
  get:
    displayName: Get State by ID
    securedBy: [oauth_2_0: { scopes: ['view_states:{projectKey}'] }]
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/state.example.json
  head:
    displayName: Check if State exists by ID
    securedBy: [oauth_2_0: { scopes: ['view_states:{projectKey}'] }]
    description: Checks if a State exists with the provided `id`. Returns a `200` status if the State exists, or a `404` status otherwise.
  post:
    displayName: Update State by ID
    securedBy: [oauth_2_0: { scopes: ['manage_states:{projectKey}'] }]
    body:
      application/json:
        example: !include ../examples/state-update.example.json
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/state-update-response.example.json
  delete:
    displayName: Delete State by ID
    securedBy: [oauth_2_0: { scopes: ['manage_states:{projectKey}'] }]
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/state.example.json
