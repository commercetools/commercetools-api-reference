type:
  baseDomain:
    resourceType: ProductType
    resourceQueryType: ProductTypePagedQueryResponse
    resourceDraft: ProductTypeDraft
    whereExample: 'title = "ABC123"'
    sortExample: createdAt asc
(updateable): ProductType
(deleteable): ProductType
(createable): ProductTypeDraft
description: |
  Product Types are used to describe common characteristics, most importantly common custom attributes,
  of many concrete products.
get:
  displayName: Query ProductTypes
  securedBy: [oauth_2_0: { scopes: ['view_products:{projectKey}'] }]
  responses:
    200:
      body:
        application/json:
          example: !include ../examples/product-types.example.json
head:
  displayName: Check if ProductType exists by Query Predicate
  securedBy: [oauth_2_0: { scopes: ['view_products:{projectKey}'] }]
  description: Checks if one or more ProductTypes exist for the provided query predicate. Returns a `200` status if any ProductTypes match the query predicate, or a `404` status otherwise.
  queryParameters:
    where?:
      type: QueryPredicate
      description: Query Predicates on Attributes are limited to `text`, `enum`, `boolean`, `number`, `date`, `time`, and `datetime` attribute types.
post:
  displayName: Create ProductType
  securedBy: [oauth_2_0: { scopes: ['manage_products:{projectKey}'] }]
  body:
    application/json:
      example: !include ../examples/product-type-create.example.json
  responses:
    201:
      body:
        application/json:
          example: !include ../examples/product-type.example.json
/key={key}:
  (methodName): withKey
  type:
    baseResource:
      uriParameterName: key
      resourceType: ProductType
      resourceUpdateType: ProductTypeUpdate
  get:
    displayName: Get ProductType by Key
    securedBy: [oauth_2_0: { scopes: ['view_products:{projectKey}'] }]
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/product-type.example.json
  head:
    displayName: Check if ProductType exists by Key
    securedBy: [oauth_2_0: { scopes: ['view_products:{projectKey}'] }]
    description: Checks if a ProductType exists with the provided `key`. Returns a `200` status if the ProductType exists, or a `404` status otherwise.
  post:
    displayName: Update ProductType by Key
    securedBy: [oauth_2_0: { scopes: ['manage_products:{projectKey}'] }]
    body:
      application/json:
        example: !include ../examples/product-type-update.example.json
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/product-type.example.json
  delete:
    displayName: Delete ProductType by Key
    securedBy: [oauth_2_0: { scopes: ['manage_products:{projectKey}'] }]
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/product-type.example.json
/{ID}:
  (methodName): withId
  type:
    baseResource:
      uriParameterName: ID
      resourceType: ProductType
      resourceUpdateType: ProductTypeUpdate
  get:
    displayName: Get ProductType by ID
    securedBy: [oauth_2_0: { scopes: ['view_products:{projectKey}'] }]
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/product-type.example.json
  head:
    displayName: Check if ProductType exists by ID
    securedBy: [oauth_2_0: { scopes: ['view_products:{projectKey}'] }]
    description: Checks if a ProductType exists with the provided `id`. Returns a `200` status if the ProductType exists, or a `404` status otherwise.
  post:
    displayName: Update ProductType by ID
    securedBy: [oauth_2_0: { scopes: ['manage_products:{projectKey}'] }]
    body:
      application/json:
        example: !include ../examples/product-type-update.example.json
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/product-type.example.json
  delete:
    displayName: Delete ProductType by ID
    securedBy: [oauth_2_0: { scopes: ['manage_products:{projectKey}'] }]
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/product-type.example.json
