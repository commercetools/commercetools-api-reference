type:
  baseDomain:
    resourceType: ProductType
    resourceQueryType: ProductTypePagedQueryResponse
    resourceDraft: ProductTypeDraft
    whereExample: 'title = "ABC123"'
    sortExample: createdAt asc
(updateable): ProductType
(deleteable): ProductType
(createable): ProductTypeDraft
description: |
  Product Types are used to describe common characteristics, most importantly common custom attributes,
  of many concrete products.
get:
  (csharp-implements):
    'commercetools.Sdk.Api.Models.IPagedQueryResourceRequest<ByProjectKeyProductTypesGet,
    commercetools.Sdk.Api.Models.ProductTypes.IProductTypePagedQueryResponse>'
  securedBy: [oauth_2_0: { scopes: ['view_products:{projectKey}'] }]
  responses:
    200:
      body:
        application/json:
          example: !include ../examples/product-types.example.json
head:
  securedBy: [oauth_2_0: { scopes: ['view_products:{projectKey}'] }]
  description: Check if Product Types exist. Responds with a `200 OK` status if any Product Types match the Query Predicate, or `404 Not Found` otherwise.
  queryParameters:
    where?:
      type: QueryPredicate
      description: Query Predicates on Product Attributes are limited to `text`, `enum`, `boolean`, `number`, `date`, `time`, and `datetime` attribute types.
post:
  securedBy: [oauth_2_0: { scopes: ['manage_products:{projectKey}'] }]
  body:
    application/json:
      example: !include ../examples/product-type-create.example.json
  responses:
    201:
      body:
        application/json:
          example: !include ../examples/product-type.example.json
/key={key}:
  (methodName): withKey
  type:
    baseResource:
      uriParameterName: key
      resourceType: ProductType
      resourceUpdateType: ProductTypeUpdate
  get:
    securedBy: [oauth_2_0: { scopes: ['view_products:{projectKey}'] }]
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/product-type.example.json
  head:
    securedBy: [oauth_2_0: { scopes: ['view_products:{projectKey}'] }]
    description: Checks if a Product Type with given `key` exists. Responds with a `200 OK` status if the `Product Type` exists or `404 Not Found` otherwise.
  post:
    securedBy: [oauth_2_0: { scopes: ['manage_products:{projectKey}'] }]
    body:
      application/json:
        example: !include ../examples/product-type-update.example.json
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/product-type.example.json
  delete:
    securedBy: [oauth_2_0: { scopes: ['manage_products:{projectKey}'] }]
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/product-type.example.json
/{ID}:
  (methodName): withId
  type:
    baseResource:
      uriParameterName: ID
      resourceType: ProductType
      resourceUpdateType: ProductTypeUpdate
  get:
    securedBy: [oauth_2_0: { scopes: ['view_products:{projectKey}'] }]
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/product-type.example.json
  head:
    securedBy: [oauth_2_0: { scopes: ['view_products:{projectKey}'] }]
    description: Checks if a Product Type with given `id` exists. Responds with a `200 OK` status if the `Product Type` exists or `404 Not Found` otherwise.

  post:
    securedBy: [oauth_2_0: { scopes: ['manage_products:{projectKey}'] }]
    body:
      application/json:
        example: !include ../examples/product-type-update.example.json
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/product-type.example.json
  delete:
    securedBy: [oauth_2_0: { scopes: ['manage_products:{projectKey}'] }]
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/product-type.example.json
