type: base
uriParameters:
  storeKey:
    type: string
    description: '`key` of the [Store](ctp:api:type:Store).'
/carts:
  type:
    baseDomain:
      resourceType: Cart
      resourceQueryType: CartPagedQueryResponse
      resourceDraft: CartDraft
      whereExample: 'customerEmail = "john.doe@example.com"'
      sortExample: createdAt asc
  (updateable): Cart
  (deleteable): Cart
  (createable): CartDraft
  description: A shopping cart holds product variants and can be ordered.
  get:
    securedBy:
      [
        oauth_2_0:
          {
            scopes:
              [
                'view_orders:{projectKey}',
                'view_orders:{projectKey}:{storeKey}',
              ],
          },
      ]
    displayName: Query carts in store
    description: Queries carts in a specific Store.
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/carts.example.json
  post:
    displayName: Create cart in store
    securedBy:
      [
        oauth_2_0:
          {
            scopes:
              [
                'manage_orders:{projectKey}',
                'manage_orders:{projectKey}:{storeKey}',
              ],
          },
      ]
    description: |
      Creates a [Cart](ctp:api:type:Cart) in the Store specified by `storeKey`.
      When using this endpoint the Cart's `store` field is always set to the store specified in the path parameter.
      If the referenced [ShippingMethod](ctp:api:type:ShippingMethod) in the [CartDraft](ctp:api:type:CartDraft) has a predicate that does not match, an [InvalidOperation](ctp:api:type:InvalidOperationError) error is returned.
    body:
      application/json:
        example: !include ../examples/cart-create.example.json
    responses:
      201:
        body:
          application/json:
            example: !include ../examples/cart.example.json
  /customer-id={customerId}:
    (methodName): withCustomerId
    type:
      baseResource:
        uriParameterName: customerId
        resourceType: Cart
    get:
      displayName: Get cart by customer id in store
      securedBy:
        [oauth_2_0: { scopes: ['view_orders:{projectKey}:{storeKey}'] }]
      description: |
        Retrieves the active cart of the customer that has been modified most recently in a specific Store.

        If the cart exists in the project but does not have the store field, or the store field
        references a different store, this method returns a ResourceNotFound error.

        The cart may not contain up-to-date prices, discounts etc. If you want to ensure they're up-to-date,
        send an Update request with the Recalculate update action instead.
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/cart.example.json
  /key={key}:
    (methodName): withKey
    type:
      baseResource:
        uriParameterName: key
        resourceType: Cart
        resourceUpdateType: CartUpdate
    get:
      displayName: Get cart by key in store
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'view_orders:{projectKey}',
                  'view_orders:{projectKey}:{storeKey}',
                ],
            },
        ]
      description: |
        Returns a cart by its key from a specific Store.
        If the cart exists in the project but does not have the store field,
        or the store field references a different store, this method returns a ResourceNotFound error.
        The cart may not contain up-to-date prices, discounts etc.
        If you want to ensure they're up-to-date, send an Update request with the Recalculate update action instead.
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/cart.example.json
    post:
      displayName: Update cart by key in store
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_orders:{projectKey}',
                  'manage_orders:{projectKey}:{storeKey}',
                ],
            },
        ]
      description: |
        Updates a [Cart](ctp:api:type:Cart) in the Store specified by `storeKey`.
        If the Cart exists in the Project but does not have the store field,
        or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFound) error.
      body:
        application/json:
          example: !include ../examples/cart-update.example.json
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/cart.example.json
    delete:
      displayName: Delete cart by key in store
      is:
        - dataErasure
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_orders:{projectKey}',
                  'manage_orders:{projectKey}:{storeKey}',
                ],
            },
        ]
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/cart.example.json
  /replicate:
    type: base
    post:
      displayName: Replicate cart for store
      body:
        application/json:
          type: ReplicaCartDraft
      responses:
        201:
          body:
            application/json:
              example: !include ../examples/cart.example.json
              type: Cart
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_orders:{projectKey}:{storeKey}',
                  'manage_orders:{projectKey}',
                ],
            },
        ]
  /{ID}:
    (methodName): withId
    type:
      baseResource:
        uriParameterName: ID
        resourceType: Cart
        resourceUpdateType: CartUpdate
    get:
      displayName: Get cart by id in store
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'view_orders:{projectKey}',
                  'view_orders:{projectKey}:{storeKey}',
                ],
            },
        ]
      description: |
        Returns a cart by its ID from a specific Store.
        If the cart exists in the project but does not have the store field,
        or the store field references a different store, this method returns a ResourceNotFound error.
        The cart may not contain up-to-date prices, discounts etc.
        If you want to ensure they're up-to-date, send an Update request with the Recalculate update action instead.
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/cart.example.json
    post:
      displayName: Update cart by id in store
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_orders:{projectKey}',
                  'manage_orders:{projectKey}:{storeKey}',
                ],
            },
        ]
      description: |
        Updates a [Cart](ctp:api:type:Cart) in the Store specified by `storeKey`.
        If the Cart exists in the Project but does not have the `store` field, or the `store` field references a different Store, a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned.
      body:
        application/json:
          example: !include ../examples/cart-update.example.json
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/cart.example.json
    delete:
      displayName: Delete cart by id in store
      is:
        - dataErasure
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_orders:{projectKey}',
                  'manage_orders:{projectKey}:{storeKey}',
                ],
            },
        ]
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/cart.example.json
/orders:
  type:
    baseDomain:
      resourceType: Order
      resourceQueryType: OrderPagedQueryResponse
      resourceDraft: OrderFromCartDraft
      whereExample: 'customerEmail = "john.doe@example.com"'
      sortExample: createdAt asc
  (updateable): Order
  (deleteable): Order
  (createable): OrderFromCartDraft
  description:
    An order can be created from a cart, usually after a checkout process has
    been completed.
  get:
    displayName: Query orders in store
    securedBy:
      [
        oauth_2_0:
          {
            scopes:
              [
                'view_orders:{projectKey}',
                'view_orders:{projectKey}:{storeKey}',
              ],
          },
      ]
    description: Queries orders in a specific Store.
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/orders.example.json
  post:
    displayName: Create order in store
    securedBy:
      [
        oauth_2_0:
          {
            scopes:
              [
                'manage_orders:{projectKey}',
                'manage_orders:{projectKey}:{storeKey}',
              ],
          },
      ]
    description: |
      Creates an order from a Cart from a specific Store.
      When using this endpoint the orders's store field is always set to the store specified in the path parameter.
      The cart must have a shipping address set before creating an order. When using the Platform TaxMode,
      the shipping address is used for tax calculation.
    body:
      application/json:
        example: !include ../examples/order-create.example.json
    responses:
      201:
        body:
          application/json:
            example: !include ../examples/order.example.json
  /order-number={orderNumber}:
    (methodName): withOrderNumber
    type:
      baseResource:
        uriParameterName: orderNumber
        resourceType: Order
        resourceUpdateType: OrderUpdate
    get:
      displayName: Get order by order number in store
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'view_orders:{projectKey}',
                  'view_orders:{projectKey}:{storeKey}',
                ],
            },
        ]
      description: |
        Returns an order by its order number from a specific Store.

        If the order exists in the project but does not have the store field,
        or the store field references a different store, this method returns a ResourceNotFound error.
        In case the orderNumber does not match the regular expression [a-zA-Z0-9_\-]+,
        it should be provided in URL-encoded format.
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/order.example.json
    post:
      displayName: Update order by order number in store
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_orders:{projectKey}',
                  'manage_orders:{projectKey}:{storeKey}',
                ],
            },
        ]
      description: |
        Updates an order in the store specified by {storeKey}.
        If the order exists in the project but does not have the store field,
        or the store field references a different store, this method returns a ResourceNotFound error.
        In case the orderNumber does not match the regular expression [a-zA-Z0-9_\-]+,
        it should be provided in URL-encoded format.
      body:
        application/json:
          example: !include ../examples/order-update.example.json
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/order.example.json
    delete:
      displayName: Delete order by order number in store
      is:
        - dataErasure
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_orders:{projectKey}',
                  'manage_orders:{projectKey}:{storeKey}',
                ],
            },
        ]
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/order.example.json
  /{ID}:
    (methodName): withId
    type:
      baseResource:
        uriParameterName: ID
        resourceType: Order
        resourceUpdateType: OrderUpdate
    get:
      displayName: Get order by id in store
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'view_orders:{projectKey}',
                  'view_orders:{projectKey}:{storeKey}',
                ],
            },
        ]
      description: |
        Returns an order by its ID from a specific Store.
        If the order exists in the project but does not have the store field,
        or the store field references a different store, this method returns a ResourceNotFound error.
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/order.example.json
    post:
      displayName: Update order by id in store
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_orders:{projectKey}',
                  'manage_orders:{projectKey}:{storeKey}',
                ],
            },
        ]
      description: |
        Updates an order in the store specified by {storeKey}.
        If the order exists in the project but does not have the store field,
        or the store field references a different store, this method returns a ResourceNotFound error.
      body:
        application/json:
          example: !include ../examples/order-update.example.json
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/order.example.json
    delete:
      displayName: Delete order by id in store
      is:
        - dataErasure
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_orders:{projectKey}',
                  'manage_orders:{projectKey}:{storeKey}',
                ],
            },
        ]
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/order.example.json
/me:
  /carts:
    type:
      baseDomain:
        resourceType: Cart
        resourceQueryType: CartPagedQueryResponse
        resourceDraft: MyCartDraft
        whereExample: 'customerEmail = "john.doe@example.com"'
        sortExample: createdAt asc
    (updateable): Cart
    (deleteable): Cart
    (createable): MyCartDraft
    description: A shopping cart holds product variants and can be ordered.
    get:
      displayName: Query my carts in store
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_my_orders:{projectKey}',
                  'manage_my_orders:{projectKey}:{storeKey}',
                ],
            },
        ]
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/carts.example.json
    post:
      displayName: Create my cart in store
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_my_orders:{projectKey}',
                  'manage_my_orders:{projectKey}:{storeKey}',
                ],
            },
        ]
      body:
        application/json:
          example: !include ../examples/cart-create.example.json
      responses:
        201:
          body:
            application/json:
              example: !include ../examples/cart.example.json
    /{ID}:
      (methodName): withId
      type:
        baseResource:
          uriParameterName: ID
          resourceType: Cart
          resourceUpdateType: MyCartUpdate
      get:
        displayName: Get my cart by id in store
        securedBy:
          [
            oauth_2_0:
              {
                scopes:
                  [
                    'manage_my_orders:{projectKey}',
                    'manage_my_orders:{projectKey}:{storeKey}',
                  ],
              },
          ]
        responses:
          200:
            body:
              application/json:
                example: !include ../examples/cart.example.json
      post:
        displayName: Update my cart by id in store
        securedBy:
          [
            oauth_2_0:
              {
                scopes:
                  [
                    'manage_my_orders:{projectKey}',
                    'manage_my_orders:{projectKey}:{storeKey}',
                  ],
              },
          ]
        body:
          application/json:
            example: !include ../examples/cart-update.example.json
        responses:
          200:
            body:
              application/json:
                example: !include ../examples/cart.example.json
      delete:
        displayName: Delete my cart by id in store
        securedBy:
          [
            oauth_2_0:
              {
                scopes:
                  [
                    'manage_my_orders:{projectKey}',
                    'manage_my_orders:{projectKey}:{storeKey}',
                  ],
              },
          ]
        responses:
          200:
            body:
              application/json:
                example: !include ../examples/cart.example.json
  /orders:
    type:
      baseDomain:
        resourceType: Order
        resourceQueryType: OrderPagedQueryResponse
        resourceDraft: MyOrderFromCartDraft
        whereExample: 'customerEmail = "john.doe@example.com"'
        sortExample: createdAt asc
    description:
      An order can be created from a order, usually after a checkout process has
      been completed.
    get:
      displayName: Query my orders in store
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_my_orders:{projectKey}',
                  'manage_my_orders:{projectKey}:{storeKey}',
                ],
            },
        ]
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/orders.example.json
    post:
      is:
        - conflicting
      displayName: Create my order in store
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_my_orders:{projectKey}',
                  'manage_my_orders:{projectKey}:{storeKey}',
                ],
            },
        ]
      body:
        application/json:
          example: !include ../examples/order-create.example.json
      responses:
        201:
          body:
            application/json:
              example: !include ../examples/order.example.json
    /{ID}:
      (methodName): withId
      type:
        baseResource:
          uriParameterName: ID
          resourceType: Order
      get:
        displayName: Get my order by id in store
        securedBy:
          [
            oauth_2_0:
              {
                scopes:
                  [
                    'manage_my_orders:{projectKey}',
                    'manage_my_orders:{projectKey}:{storeKey}',
                  ],
              },
          ]
        responses:
          200:
            body:
              application/json:
                example: !include ../examples/order.example.json
  /active-cart:
    type: base
    get:
      displayName: Get my active cart in store
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_my_orders:{projectKey}',
                  'manage_my_orders:{projectKey}:{storeKey}',
                ],
            },
        ]
      responses:
        200:
          body:
            application/json:
              type: Cart
              example: !include ../examples/cart.example.json
  /shopping-lists:
    type:
      baseDomain:
        resourceType: ShoppingList
        resourceQueryType: ShoppingListPagedQueryResponse
        resourceDraft: MyShoppingListDraft
        whereExample: 'key = "my-shopping-list"'
        sortExample: createdAt asc
    description: |
      shopping-lists e.g. for wishlist support
    get:
      (csharp-implements):
        'commercetools.Sdk.Api.Models.IPagedQueryResourceRequest<ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsGet,
        commercetools.Sdk.Api.Models.ShoppingLists.IShoppingListPagedQueryResponse>'
      displayName: Get my shopping lists in store
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_my_shopping_lists:{projectKey}',
                  'manage_my_shopping_lists:{projectKey}:{storeKey}',
                ],
            },
        ]
      queryParameters:
        expand:
          description: |
            *Limitation: `expand=lineItems[0].variant` and `expand=lineItems[0].productSlug` are not supported.*
          type: Expansion[]
          required: false
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/shopping-lists.example.json
    post:
      displayName: Create my shopping lists in store
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_my_shopping_lists:{projectKey}',
                  'manage_my_shopping_lists:{projectKey}:{storeKey}',
                ],
            },
        ]
      queryParameters:
        expand:
          description: |
            *Limitation: `expand=lineItems[0].variant` and `expand=lineItems[0].productSlug` are not supported.*
          type: Expansion[]
          required: false
      body:
        application/json:
          example: !include ../examples/shopping-list-create.example.json
      description: |
        When using this endpoint, the `store` field of a ShoppingList is always set to the Store specified in the path parameter.
      responses:
        201:
          body:
            application/json:
              example: !include ../examples/shopping-list.example.json
    /key={key}:
      (methodName): withKey
      type:
        baseResource:
          uriParameterName: key
          resourceType: ShoppingList
          resourceUpdateType: MyShoppingListUpdate
      get:
        displayName: Get my shopping list by key in store
        securedBy:
          [
            oauth_2_0:
              {
                scopes:
                  [
                    'manage_my_shopping_lists:{projectKey}',
                    'manage_my_shopping_lists:{projectKey}:{storeKey}',
                  ],
              },
          ]
        queryParameters:
          expand:
            description: |
              *Limitation: `expand=lineItems[0].variant` and `expand=lineItems[0].productSlug` are not supported.*
            type: Expansion[]
            required: false
        description: |
          If a ShoppingList exists in a Project but does _not_ have the `store` field, or the `store` field references a different Store, the [ResourceNotFound](/errors#404-not-found-1) error is returned.
        responses:
          200:
            body:
              application/json:
                example: !include ../examples/shopping-list.example.json
      post:
        displayName: Update my shopping list by key in store
        securedBy:
          [
            oauth_2_0:
              {
                scopes:
                  [
                    'manage_my_shopping_lists:{projectKey}',
                    'manage_my_shopping_lists:{projectKey}:{storeKey}',
                  ],
              },
          ]
        queryParameters:
          expand:
            description: |
              *Limitation: `expand=lineItems[0].variant` and `expand=lineItems[0].productSlug` are not supported.*
            type: Expansion[]
            required: false
        body:
          application/json:
            example: !include ../examples/shopping-list-update.example.json
        description: |
          If a ShoppingList exists in a Project but does _not_ have the `store` field, or the `store` field references a different Store,
          the [ResourceNotFound](/errors#404-not-found-1) error is returned.
        responses:
          200:
            body:
              application/json:
                example: !include ../examples/shopping-list.example.json
      delete:
        displayName: Delete my shopping list by key in store
        is:
          - dataErasure
        securedBy:
          [
            oauth_2_0:
              {
                scopes:
                  [
                    'manage_my_shopping_lists:{projectKey}',
                    'manage_my_shopping_lists:{projectKey}:{storeKey}',
                  ],
              },
          ]
        queryParameters:
          expand:
            description: |
              *Limitation: `expand=lineItems[0].variant` and `expand=lineItems[0].productSlug` are not supported.*
            type: Expansion[]
            required: false
        description: |
          If a ShoppingList exists in a Project but does _not_ have the `store` field, or the `store` field references a different Store,
          the [ResourceNotFound](/errors#404-not-found-1) error is returned.
        responses:
          200:
            body:
              application/json:
                example: !include ../examples/shopping-list.example.json
    /{ID}:
      (methodName): withId
      type:
        baseResource:
          uriParameterName: ID
          resourceType: ShoppingList
          resourceUpdateType: MyShoppingListUpdate
      get:
        displayName: Get my shopping list by id in store
        securedBy:
          [
            oauth_2_0:
              {
                scopes:
                  [
                    'manage_my_shopping_lists:{projectKey}:{storeKey}',
                    'manage_my_shopping_lists:{projectKey}',
                  ],
              },
          ]
        queryParameters:
          expand:
            description: |
              *Limitation: `expand=lineItems[0].variant` and `expand=lineItems[0].productSlug` are not supported.*
            type: Expansion[]
            required: false
        description: |
          If a ShoppingList exists in a Project but does _not_ have the `store` field, or the `store` field references a different Store,
          the [ResourceNotFound](/errors#404-not-found-1) error is returned.
        responses:
          200:
            body:
              application/json:
                example: !include ../examples/shopping-list.example.json
      post:
        displayName: Update my shopping list by id in store
        securedBy:
          [
            oauth_2_0:
              {
                scopes:
                  [
                    'manage_my_shopping_lists:{projectKey}',
                    'manage_my_shopping_lists:{projectKey}:{storeKey}',
                  ],
              },
          ]
        queryParameters:
          expand:
            description: |
              *Limitation: `expand=lineItems[0].variant` and `expand=lineItems[0].productSlug` are not supported.*
            type: Expansion[]
            required: false
        body:
          application/json:
            example: !include ../examples/shopping-list-update.example.json
        description: |
          If a ShoppingList exists in a Project but does _not_ have the `store` field, or the `store` field references a different Store,
          the [ResourceNotFound](/errors#404-not-found-1) error is returned.
        responses:
          200:
            body:
              application/json:
                example: !include ../examples/shopping-list.example.json
      delete:
        displayName: Delete my shopping list by id in store
        is:
          - dataErasure
        securedBy:
          [
            oauth_2_0:
              {
                scopes:
                  [
                    'manage_my_shopping_lists:{projectKey}',
                    'manage_my_shopping_lists:{projectKey}:{storeKey}',
                  ],
              },
          ]
        queryParameters:
          expand:
            description: |
              *Limitation: `expand=lineItems[0].variant` and `expand=lineItems[0].productSlug` are not supported.*
            type: Expansion[]
            required: false
        description: |
          If a ShoppingList exists in a Project but does _not_ have the `store` field, or the `store` field references a different Store,
          the [ResourceNotFound](/errors#404-not-found-1) error is returned.
        responses:
          200:
            body:
              application/json:
                example: !include ../examples/shopping-list.example.json
  get:
    displayName: Get my customer details in a store
    is:
      - sortable:
          sortExample: createdAt asc
      - paging
      - expandable
      - query:
          whereExample: 'customerEmail = "email@example.com"'
    securedBy:
      [
        oauth_2_0:
          {
            scopes:
              [
                'manage_my_profile:{projectKey}',
                'manage_my_profile:{projectKey}:{storeKey}',
              ],
          },
      ]
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/customer.example.json
            type: Customer
  post:
    displayName: Update my customer in a store
    securedBy:
      [
        oauth_2_0:
          {
            scopes:
              [
                'manage_my_profile:{projectKey}',
                'manage_my_profile:{projectKey}:{storeKey}',
              ],
          },
      ]
    body:
      application/json:
        example: !include ../examples/customer-update.example.json
        type: MyCustomerUpdate
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/customer-update-response.example.json
            type: Customer
  delete:
    displayName: Delete my Customer in a store
    is:
      - versioned
      - conflicting
    securedBy:
      [
        oauth_2_0:
          {
            scopes:
              [
                'manage_my_profile:{projectKey}',
                'manage_my_profile:{projectKey}:{storeKey}',
              ],
          },
      ]
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/customer.example.json
            type: Customer
  /email/confirm:
    type: base
    post:
      displayName: Verify my Customer's Email in a store
      description: |
        This is the last step in the [email verification process of a Customer](/../api/projects/customers#email-verification-of-customer-in-store).
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_my_profile:{projectKey}',
                  'manage_my_profile:{projectKey}:{storeKey}',
                ],
            },
        ]
      body:
        application/json:
          example: !include ../examples/Customer/CustomerEmailVerify.json
          type: MyCustomerEmailVerify
      responses:
        200:
          description: The email was verified.
          body:
            application/json:
              example: !include ../examples/customer.example.json
              type: Customer
  /password:
    type: base
    post:
      displayName: Change my customers password in a store
      description: |
        Changing the password of the Customer produces the [CustomerPasswordUpdated](ctp:api:type:CustomerPasswordUpdatedMessage) Message with `reset=false`.
      is:
        - conflicting
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_my_profile:{projectKey}',
                  'manage_my_profile:{projectKey}:{storeKey}',
                ],
            },
        ]
      body:
        application/json:
          example: !include ../examples/Customer/MyCustomerChangePassword.json
          type: MyCustomerChangePassword
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/customer.example.json
              type: Customer
    /reset:
      type: base
      post:
        displayName: Reset my Customer's Password in a store
        description: |
          This is the last step in the [password reset process of the authenticated Customer](/../api/projects/customers#password-reset-of-customer-in-store).

          Resetting a password produces the of the Customer [CustomerPasswordUpdated](ctp:api:type:CustomerPasswordUpdatedMessage) Message with `reset=true`.
        securedBy:
          [
            oauth_2_0:
              {
                scopes:
                  [
                    'manage_my_profile:{projectKey}',
                    'manage_my_profile:{projectKey}:{storeKey}',
                  ],
              },
          ]
        body:
          application/json:
            example: !include ../examples/Customer/CustomerResetPassword.json
            type: MyCustomerResetPassword
        responses:
          200:
            body:
              application/json:
                example: !include ../examples/customer.example.json
                type: Customer
  /signup:
    type: base
    post:
      displayName: Signup my customer in a store
      description: |
        If omitted in the request body, the [Customer](ctp:api:type:Customer) `stores` field is set to the Store specified in the path parameter.

        Creating a Customer produces the [CustomerCreated](ctp:api:type:CustomerCreatedMessage) Message.
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_my_profile:{projectKey}',
                  'manage_my_profile:{projectKey}:{storeKey}',
                ],
            },
        ]
      body:
        application/json:
          example: !include ../examples/customer-create.example.json
          type: MyCustomerDraft
      responses:
        201:
          body:
            application/json:
              example: !include ../examples/customer-sign-in-result.example.json
              type: CustomerSignInResult
  /login:
    type: base
    post:
      displayName: Authenticate my Customer (Sign In) in a store
      description: |
        Retrieves the authenticated Customer (that matches the given email/password pair) if they are part of a specific [Store](ctp:api:type:Store).

        - If the Customer does not have a Cart, the most recently modified anonymous cart becomes the Customer's Cart.
        - If the Customer already has a Cart, the most recently modified anonymous cart is handled according to [AnonymousCartSignInMode](ctp:api:type:AnonymousCartSignInMode).

        If a Cart is returned as part of [CustomerSignInResult](ctp:api:type:CustomerSignInResult), it has been [recalculated](/../api/projects/carts#recalculate) with up-to-date prices, taxes, discounts, and invalid line items removed.

        If an account with the given credentials is not found, an [InvalidCredentials](ctp:api:type:InvalidCredentialsError) error is returned.
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_my_profile:{projectKey}',
                  'manage_my_profile:{projectKey}:{storeKey}',
                ],
            },
        ]
      body:
        application/json:
          type: MyCustomerSignin
          example: !include ../examples/Customer/CustomerSignIn.json
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/customer-sign-in-result.example.json
              type: CustomerSignInResult
/customers:
  type:
    baseDomain:
      resourceType: Customer
      resourceQueryType: CustomerPagedQueryResponse
      resourceDraft: CustomerDraft
      whereExample: 'email = "email@example.com"'
      sortExample: createdAt asc
  (updateable): Customer
  (deleteable): Customer
  (createable): CustomerDraft
  description: |
    A Customer is a person purchasing products. Carts, Orders,
    Comments and Reviews can be associated to a Customer.
  get:
    displayName: Query customers in store
    securedBy:
      - oauth_2_0:
          scopes:
            - 'view_customers:{projectKey}'
            - 'view_customers:{projectKey}:{storeKey}'
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/customers.example.json
  post:
    displayName: Create customer in store
    securedBy:
      - oauth_2_0:
          scopes:
            - 'manage_customers:{projectKey}'
            - 'manage_customers:{projectKey}:{storeKey}'
    description: |
      When using this endpoint, if omitted, the Customer `stores` field is set to the Store specified in the path parameter.

      If the `anonymousCart` field is set on the [CustomerDraft](ctp:api:type:CustomerDraft), then the newly created Customer will be assigned to that [Cart](ctp:api:type:Cart).
      Similarly, if the `anonymousId` field is set, the Customer will be set on all [Carts](ctp:api:type:Cart), [Orders](ctp:api:type:Order), [ShoppingLists](ctp:api:type:ShoppingList) and [Payments](ctp:api:type:Payment) with the same `anonymousId`.
      If a Cart with a `store` field specified, the `store` field must reference the same Store specified in the `{storeKey}` path parameter.
      Creating a Customer produces the [CustomerCreated](ctp:api:type:CustomerCreatedMessage) Message.
    body:
      application/json:
        example: !include ../examples/customer-create.example.json
    responses:
      201:
        body:
          application/json:
            example: !include ../examples/customer-sign-in-result.example.json
            type: CustomerSignInResult
  /password-token={passwordToken}:
    (methodName): withPasswordToken
    type:
      baseResource:
        uriParameterName: passwordToken
        resourceType: Customer
    get:
      displayName: Get customer by password verification token in store
      description: |
        If the Customer exists in the Project but the `stores` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
      securedBy:
        - oauth_2_0:
            scopes:
              - 'view_customers:{projectKey}'
              - 'view_customers:{projectKey}:{storeKey}'
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/customer.example.json
  /email-token={emailToken}:
    (methodName): withEmailToken
    type:
      baseResource:
        uriParameterName: emailToken
        resourceType: Customer
    get:
      displayName: Get customer by email verification token in store
      description: |
        If the Customer exists in the Project but the `stores` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
      securedBy:
        - oauth_2_0:
            scopes:
              - 'view_customers:{projectKey}'
              - 'view_customers:{projectKey}:{storeKey}'
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/customer.example.json
  /email-token:
    type: base
    displayName: Customer's Email Verification in store
    post:
      displayName: Create a Token for verifying the Customer's Email in store
      description: |
        If the Customer exists in the Project but the `stores` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
      securedBy:
        - oauth_2_0:
            scopes:
              - 'manage_customers:{projectKey}'
              - 'manage_customers:{projectKey}:{storeKey}'
      body:
        application/json:
          example: !include ../examples/Customer/CustomerCreateEmailToken.json
          type: CustomerCreateEmailToken
      responses:
        200:
          body:
            application/json:
              type: CustomerToken
  /email/confirm:
    type: base
    post:
      displayName: Verify Customer's Email in store
      description: |
        The customer verifies the email using the token value.
        Verifying the email of the Customer produces the [CustomerEmailVerified](ctp:api:type:CustomerEmailVerifiedMessage) Message.

        If the Customer exists in the Project but the `stores` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
      securedBy:
        - oauth_2_0:
            scopes:
              - 'manage_customers:{projectKey}'
              - 'manage_customers:{projectKey}:{storeKey}'
      body:
        application/json:
          example: !include ../examples/Customer/CustomerEmailVerify.json
          type: CustomerEmailVerify
      responses:
        200:
          description: The email was verified.
          body:
            application/json:
              example: !include ../examples/customer.example.json
              type: Customer
  /password:
    type: base
    post:
      displayName: Change a customers password in store
      description: |
        Changing the password of the Customer produces the [CustomerPasswordUpdated](ctp:api:type:CustomerPasswordUpdatedMessage) Message with `reset=false`.
      securedBy:
        - oauth_2_0:
            scopes:
              - 'manage_customers:{projectKey}'
              - 'manage_customers:{projectKey}:{storeKey}'
      body:
        application/json:
          example: !include ../examples/Customer/CustomerChangePassword.json
          type: CustomerChangePassword
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/customer.example.json
              type: Customer
  /password/reset:
    type: base
    post:
      displayName: Reset Customer's Password in store
      description: |
        Resetting the password of the Customer produces the [CustomerPasswordUpdated](ctp:api:type:CustomerPasswordUpdatedMessage) Message with `reset=true`.

        If the Customer exists in the Project but the `stores` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
      securedBy:
        - oauth_2_0:
            scopes:
              - 'manage_customers:{projectKey}'
              - 'manage_customers:{projectKey}:{storeKey}'
      body:
        application/json:
          example: !include ../examples/Customer/CustomerResetPassword.json
          type: CustomerResetPassword
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/customer.example.json
              type: Customer
  /password-token:
    type: base
    displayName: Create a Token for Resetting the Customer's Password in store
    post:
      displayName: Create a Token for Resetting the Customer's Password in store
      description: |
        If the Customer exists in the Project but the `stores` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
      securedBy:
        - oauth_2_0:
            scopes:
              - 'manage_customers:{projectKey}'
              - 'manage_customers:{projectKey}:{storeKey}'
      body:
        application/json:
          type: CustomerCreatePasswordResetToken
          example: !include ../examples/Customer/CustomerCreatePasswordResetToken.json
      responses:
        200:
          body:
            application/json:
              type: CustomerToken
  /key={key}:
    (methodName): withKey
    type:
      baseResource:
        uriParameterName: key
        resourceType: Customer
        resourceUpdateType: CustomerUpdate
    get:
      displayName: Get customer by key in store
      description: |
        If the Customer exists in the Project but the `stores` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
      securedBy:
        - oauth_2_0:
            scopes:
              - 'view_customers:{projectKey}'
              - 'view_customers:{projectKey}:{storeKey}'
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/customer.example.json
    post:
      displayName: Update customer by key in store
      description: |
        If the Customer exists in the Project but the `stores` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
      securedBy:
        - oauth_2_0:
            scopes:
              - 'manage_customers:{projectKey}'
              - 'manage_customers:{projectKey}:{storeKey}'
      body:
        application/json:
          example: !include ../examples/customer-update.example.json
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/customer.example.json
    delete:
      displayName: Delete customer by key in store
      description: |
        Deleting a Customer produces the [CustomerDeleted](ctp:api:type:CustomerDeletedMessage) Message.

        If the Customer exists in the Project but the `stores` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
      is:
        - dataErasure
      securedBy:
        - oauth_2_0:
            scopes:
              - 'manage_customers:{projectKey}'
              - 'manage_customers:{projectKey}:{storeKey}'
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/customer.example.json
  /{ID}:
    (methodName): withId
    type:
      baseResource:
        uriParameterName: ID
        resourceType: Customer
        resourceUpdateType: CustomerUpdate
    get:
      displayName: Get customer by id in store
      description: |
        If the Customer exists in the Project but the `stores` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
      securedBy:
        - oauth_2_0:
            scopes:
              - 'view_customers:{projectKey}'
              - 'view_customers:{projectKey}:{storeKey}'
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/customer.example.json
    post:
      displayName: Update customer by id in store
      description: |
        If the Customer exists in the Project but the `stores` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
      securedBy:
        - oauth_2_0:
            scopes:
              - 'manage_customers:{projectKey}'
              - 'manage_customers:{projectKey}:{storeKey}'
      body:
        application/json:
          example: !include ../examples/customer-update.example.json
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/customer.example.json
    delete:
      displayName: Delete customer by id in store
      description: |
        Deleting a Customer produces the [CustomerDeleted](ctp:api:type:CustomerDeletedMessage) Message.

        If the Customer exists in the Project but the `stores` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
      is:
        - dataErasure
      securedBy:
        - oauth_2_0:
            scopes:
              - 'manage_customers:{projectKey}'
              - 'manage_customers:{projectKey}:{storeKey}'
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/customer.example.json
/login:
  type: base
  displayName: Authenticate Customer (Sign In) in store
  description: Retrieves the authenticated customer.
  post:
    displayName: Authenticate Customer (Sign In) in store
    description: |
      Authenticates a Customer associated with a Store. For more information, see [Global versus Store-specific Customers](/../api/customers-overview#global-versus-store-specific-customers).

      If the Customer exists in the Project but the `stores` field references a different Store, this method returns an [InvalidCredentials](ctp:api:type:InvalidCredentialsError) error.
    securedBy:
      - oauth_2_0:
          scopes:
            - 'manage_customers:{projectKey}'
            - 'manage_customers:{projectKey}:{storeKey}'
    body:
      application/json:
        type: CustomerSignin
        example: !include ../examples/Customer/CustomerSignIn.json
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/customer-sign-in-result.example.json
            type: CustomerSignInResult
/shipping-methods:
  /matching-cart:
    type: base
    description: Get ShippingMethods for a cart in a store
    get:
      displayName: Get ShippingMethods for a cart in a store
      description: |
        Retrieves all the ShippingMethods that can ship to the shipping address of the given Cart in a given Store.
        Each ShippingMethod contains exactly one ShippingRate with the flag `isMatching` set to `true`.
        This ShippingRate is used when the ShippingMethod is [added to the Cart](ctp:api:type:CartSetShippingMethodAction).
      is:
        - expandable
      securedBy:
        - oauth_2_0:
            scopes:
              - 'view_orders:{projectKey}'
              - 'view_orders:{projectKey}:{storeKey}'
              - 'manage_customers:{projectKey}:{storeKey}'
              - 'view_shipping_methods:{projectKey}'
              - 'manage_my_orders:{projectKey}'
              - 'manage_my_orders:{projectKey}:{storeKey}'
      queryParameters:
        cartId:
          type: string
          description: |
            ID of the Cart with a shipping address set.
      responses:
        200:
          body:
            application/json:
              type: ShippingMethodPagedQueryResponse
              example: !include ../examples/shipping-methods.example.json
/shopping-lists:
  type:
    baseDomain:
      resourceType: ShoppingList
      resourceQueryType: ShoppingListPagedQueryResponse
      resourceDraft: ShoppingListDraft
      whereExample: 'key = "my-shopping-list"'
      sortExample: createdAt asc
  description: |
    shopping-lists e.g. for wishlist support
  get:
    (csharp-implements):
      'commercetools.Sdk.Api.Models.IPagedQueryResourceRequest<ByProjectKeyInStoreKeyByStoreKeyShoppingListsGet,
      commercetools.Sdk.Api.Models.ShoppingLists.IShoppingListPagedQueryResponse>'
    displayName: Get shopping lists in store
    securedBy:
      [
        oauth_2_0:
          {
            scopes:
              [
                'view_shopping_lists:{projectKey}',
                'view_shopping_lists:{projectKey}:{storeKey}',
              ],
          },
      ]
    queryParameters:
      expand:
        description: |
          *Limitation: `expand=lineItems[0].variant` and `expand=lineItems[0].productSlug` are not supported.*
        type: Expansion[]
        required: false
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/shopping-lists.example.json
  post:
    displayName: Create shopping lists in store
    securedBy:
      [
        oauth_2_0:
          {
            scopes:
              [
                'manage_shopping_lists:{projectKey}',
                'manage_shopping_lists:{projectKey}:{storeKey}',
              ],
          },
      ]
    queryParameters:
      expand:
        description: |
          *Limitation: `expand=lineItems[0].variant` and `expand=lineItems[0].productSlug` are not supported.*
        type: Expansion[]
        required: false
    body:
      application/json:
        example: !include ../examples/shopping-list-create.example.json
    description: |
      When using this endpoint, the `store` field of a ShoppingList is always set to the Store specified in the path parameter.
    responses:
      201:
        body:
          application/json:
            example: !include ../examples/shopping-list.example.json
  /key={key}:
    (methodName): withKey
    type:
      baseResource:
        uriParameterName: key
        resourceType: ShoppingList
        resourceUpdateType: ShoppingListUpdate
    get:
      displayName: Get shopping list by key in store
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'view_shopping_lists:{projectKey}',
                  'view_shopping_lists:{projectKey}:{storeKey}',
                ],
            },
        ]
      queryParameters:
        expand:
          description: |
            *Limitation: `expand=lineItems[0].variant` and `expand=lineItems[0].productSlug` are not supported.*
          type: Expansion[]
          required: false
      description: |
        If a ShoppingList exists in a Project but does _not_ have the `store` field, or the `store` field references a different Store,
        the [ResourceNotFound](/errors#404-not-found-1) error is returned.
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/shopping-list.example.json
    post:
      displayName: Update shopping list by key in store
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_shopping_lists:{projectKey}',
                  'manage_shopping_lists:{projectKey}:{storeKey}',
                ],
            },
        ]
      queryParameters:
        expand:
          description: |
            *Limitation: `expand=lineItems[0].variant` and `expand=lineItems[0].productSlug` are not supported.*
          type: Expansion[]
          required: false
      description: |
        If a ShoppingList exists in a Project but does _not_ have the `store` field, or the `store` field references a different Store,
        the [ResourceNotFound](/errors#404-not-found-1) error is returned.
      body:
        application/json:
          example: !include ../examples/shopping-list-update.example.json
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/shopping-list.example.json
    delete:
      displayName: Delete shopping list by key in store
      is:
        - dataErasure
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_shopping_lists:{projectKey}',
                  'manage_shopping_lists:{projectKey}:{storeKey}',
                ],
            },
        ]
      queryParameters:
        expand:
          description: |
            *Limitation: `expand=lineItems[0].variant` and `expand=lineItems[0].productSlug` are not supported.*
          type: Expansion[]
          required: false
      description: |
        If a ShoppingList exists in a Project but does _not_ have the `store` field, or the `store` field references a different Store,
        the [ResourceNotFound](/errors#404-not-found-1) error is returned.
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/shopping-list.example.json
  /{ID}:
    (methodName): withId
    type:
      baseResource:
        uriParameterName: ID
        resourceType: ShoppingList
        resourceUpdateType: ShoppingListUpdate
    get:
      displayName: Get shopping list by id in store
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'view_shopping_lists:{projectKey}',
                  'view_shopping_lists:{projectKey}:{storeKey}',
                ],
            },
        ]
      queryParameters:
        expand:
          description: |
            *Limitation: `expand=lineItems[0].variant` and `expand=lineItems[0].productSlug` are not supported.*
          type: Expansion[]
          required: false
      description: |
        If a ShoppingList exists in a Project but does _not_ have the `store` field, or the `store` field references a different Store,
        the [ResourceNotFound](/errors#404-not-found-1) error is returned.
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/shopping-list.example.json
    post:
      displayName: Update shopping list by id in store
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_shopping_lists:{projectKey}',
                  'manage_shopping_lists:{projectKey}:{storeKey}',
                ],
            },
        ]
      queryParameters:
        expand:
          description: |
            *Limitation: `expand=lineItems[0].variant` and `expand=lineItems[0].productSlug` are not supported.*
          type: Expansion[]
          required: false
      body:
        application/json:
          example: !include ../examples/shopping-list-update.example.json
      description: |
        If a ShoppingList exists in a Project but does _not_ have the `store` field, or the `store` field references a different Store,
        the [ResourceNotFound](/errors#404-not-found-1) error is returned.
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/shopping-list.example.json
    delete:
      displayName: Delete shopping list by id in store
      is:
        - dataErasure
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_shopping_lists:{projectKey}',
                  'manage_shopping_lists:{projectKey}:{storeKey}',
                ],
            },
        ]
      queryParameters:
        expand:
          description: |
            *Limitation: `expand=lineItems[0].variant` and `expand=lineItems[0].productSlug` are not supported.*
          type: Expansion[]
          required: false
      description: |
        If a ShoppingList exists in a Project but does _not_ have the `store` field, or the `store` field references a different Store,
        the [ResourceNotFound](/errors#404-not-found-1) error is returned.
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/shopping-list.example.json
/product-projections:
  /key={key}:
    (methodName): withKey
    type:
      baseResource:
        uriParameterName: key
        resourceType: ProductProjection
    get:
      displayName: Gets the current or staged representation of a product by its key from a specific Store
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'view_products:{projectKey}',
                  'view_published_products:{projectKey}',
                ],
            },
        ]
      description: |
        Gets the current or staged representation of a [Product](ctp:api:type:Product) by its key from the specified [Store](ctp:api:type:Store).
        If the Store has defined some languages, countries, distribution or supply Channels,
        they are used for projections based on [locale](ctp:api:type:ProductProjectionLocales), [price](ctp:api:type:ProductProjectionPrices)
        and [inventory](ctp:api:type:ProductProjectionInventoryEntries).

        When used with an API Client that has the `view_published_products:{projectKey}` scope, this endpoint only returns published (current) Product Projections.
      is:
        - projectionSelecting
        - priceSelecting
        - localeProjecting
  /{ID}:
    (methodName): withId
    type:
      baseResource:
        uriParameterName: ID
        resourceType: ProductProjection
    get:
      displayName: Gets the current or staged representation of a product by its ID from a specific Store
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'view_products:{projectKey}',
                  'view_published_products:{projectKey}',
                ],
            },
        ]
      description: |
        Gets the current or staged representation of a [Product](ctp:api:type:Product) by its ID from the specified [Store](ctp:api:type:Store).
        If the Store has defined some languages, countries, distribution or supply Channels,
        they are used for projections based on [locale](ctp:api:type:ProductProjectionLocales), [price](ctp:api:type:ProductProjectionPrices)
        and [inventory](ctp:api:type:ProductProjectionInventoryEntries).

        When used with an API Client that has the `view_published_products:{projectKey}` scope, this endpoint only returns published (current) Product Projections.
      is:
        - projectionSelecting
        - priceSelecting
        - localeProjecting
/product-selection-assignments:
  type: base
  get:
    displayName: Query available products in store
    is:
      - expandable
    securedBy: [oauth_2_0: { scopes: ['view_product_selections:{projectKey}'] }]
    description: |
      Queries Product Selection assignments in a specific Store.

      The response will include duplicate Products whenever more than one active Product Selection of the Store
      includes a Product. To make clear through which Product Selection a Product is available in the Store
      the response contains assignments including both the Product and the Product Selection.
      Only Products of Product Selections that are activated in Store will be returned.

    queryParameters:
      limit:
        type: number
        format: int32
        maximum: 500
        required: false
        description: |
          Number of [results requested](/../api/general-concepts#limit).
      offset:
        type: number
        format: int32
        required: false
        description: |
          Number of [elements skipped](/../api/general-concepts#offset).
      withTotal:
        type: boolean
        default: true
        required: false
        description: |
          By default, the response does not include the `total` field. Set to `true` to get the [total](/../api/general-concepts#total) number of query results included.
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/products-in-store.example.json
            type: ProductsInStorePagedQueryResponse
