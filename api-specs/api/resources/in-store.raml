type: base
uriParameters:
  storeKey:
    type: string
    description: '`key` of the [Store](ctp:api:type:Store).'
/carts:
  type:
    baseDomain:
      resourceType: Cart
      resourceQueryType: CartPagedQueryResponse
      resourceDraft: CartDraft
      whereExample: 'customerEmail = "john.doe@example.com"'
      sortExample: createdAt asc
  (updateable): Cart
  (deleteable): Cart
  (createable): CartDraft
  description: A shopping cart holds product variants and can be ordered.
  get:
    securedBy:
      [
        oauth_2_0:
          {
            scopes:
              [
                'view_orders:{projectKey}',
                'view_orders:{projectKey}:{storeKey}',
              ],
          },
      ]
    displayName: Query Carts in Store
    description: Queries Carts in a specific [Store](ctp:api:type:Store).
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/carts.example.json
  head:
    securedBy:
      [
        oauth_2_0:
          {
            scopes:
              [
                'view_orders:{projectKey}',
                'view_orders:{projectKey}:{storeKey}',
              ],
          },
      ]
    description: Checks if a Cart exists for a given Query Predicate. Returns a `200 OK` status if any Carts match the Query Predicate or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.
    queryParameters:
      where?:
        type: QueryPredicate[]
  post:
    displayName: Create Cart in Store
    securedBy:
      [
        oauth_2_0:
          {
            scopes:
              [
                'manage_orders:{projectKey}',
                'manage_orders:{projectKey}:{storeKey}',
              ],
          },
      ]
    description: |
      Creates a [Cart](ctp:api:type:Cart) in the [Store](ctp:api:type:Store) specified by `storeKey`.

      If the referenced [ShippingMethod](ctp:api:type:ShippingMethod) in the [CartDraft](ctp:api:type:CartDraft) has a predicate that does not match, or if the Shipping Method is not active, an [InvalidOperation](ctp:api:type:InvalidOperationError) error is returned.

      Specific Error Codes:

      - [DiscountCodeNonApplicable](ctp:api:type:DiscountCodeNonApplicableError)
      - [InvalidItemShippingDetails](ctp:api:type:InvalidItemShippingDetailsError)
      - [MatchingPriceNotFound](ctp:api:type:MatchingPriceNotFoundError)
      - [MissingTaxRateForCountry](ctp:api:type:MissingTaxRateForCountryError)
      - [CountryNotConfiguredInStore](ctp:api:type:CountryNotConfiguredInStoreError)

    body:
      application/json:
        example: !include ../examples/cart-create.example.json
    responses:
      201:
        body:
          application/json:
            example: !include ../examples/cart.example.json
  /customer-id={customerId}:
    (methodName): withCustomerId
    type:
      baseResource:
        uriParameterName: customerId
        resourceType: Cart
    get:
      displayName: Get Cart in Store by Customer ID
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'view_orders:{projectKey}',
                  'view_orders:{projectKey}:{storeKey}',
                ],
            },
        ]
      description: |
        Retrieves the most recently modified [active Cart](ctp:api:type:CartState) of a Customer with [CartOrigin](ctp:api:type:CartOrigin) `Customer`. If no active Cart exists, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.

        If the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.

        To ensure the Cart is up-to-date with current values (such as Prices and Discounts), use the [Recalculate](ctp:api:type:CartRecalculateAction) update action.
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/cart.example.json
    head:
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'view_orders:{projectKey}',
                  'view_orders:{projectKey}:{storeKey}',
                ],
            },
        ]
      description: Checks if a Cart of a Customer exists. Returns a `200 OK` status if the Cart exists or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.
  /key={key}:
    (methodName): withKey
    type:
      baseResource:
        uriParameterName: key
        resourceType: Cart
        resourceUpdateType: CartUpdate
    get:
      displayName: Get Cart in Store by Key
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'view_orders:{projectKey}',
                  'view_orders:{projectKey}:{storeKey}',
                ],
            },
        ]
      description: |
        If the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.

        To ensure the Cart is up-to-date with current values (such as Prices and Discounts), use the [Recalculate](ctp:api:type:CartRecalculateAction) update action.
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/cart.example.json
    head:
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'view_orders:{projectKey}',
                  'view_orders:{projectKey}:{storeKey}',
                ],
            },
        ]
      description: Checks if a Cart exists for a given `key`. Returns a `200 OK` status if the Cart exists or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.
    post:
      displayName: Update Cart in Store by Key
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_orders:{projectKey}',
                  'manage_orders:{projectKey}:{storeKey}',
                ],
            },
        ]
      description: |
        If the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
      body:
        application/json:
          example: !include ../examples/cart-update.example.json
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/cart.example.json
    delete:
      displayName: Delete Cart in Store by Key
      description: |
        If the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
      is:
        - dataErasure
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_orders:{projectKey}',
                  'manage_orders:{projectKey}:{storeKey}',
                ],
            },
        ]
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/cart.example.json
  /replicate:
    type: base
    post:
      displayName: Replicate Cart in Store
      description: |
        Creates a new Cart by replicating an existing Cart or Order. Can be useful in cases where a customer wants to cancel a recent order to make some changes or reorder a previous order.

        The replicated Cart preserves Customer information, Line Items and Custom Line Items, Custom Fields, Discount Codes, and other settings of the Cart or Order. If the Line Items become invalid, for example, due to removed Products or Prices, they are removed from the new Cart. If the Customer switches to another Customer Group, the new Cart is updated with the new value. It has up-to-date Tax Rates, Prices, and Line Item product data and is in `Active` [CartState](ctp:api:type:CartState).

        The new Cart does not contain payments or deliveries. The [State](ctp:api:type:ItemState) of Line Items and Custom Line Items is reset to `initial`.

        Specific Error Codes:

        - [MatchingPriceNotFound](ctp:api:type:MatchingPriceNotFoundError)
        - [MissingTaxRateForCountry](ctp:api:type:MissingTaxRateForCountryError)
      body:
        application/json:
          example: !include ../examples/cart-replicate.example.json
          type: ReplicaCartDraft
      responses:
        201:
          body:
            application/json:
              example: !include ../examples/cart.example.json
              type: Cart
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_orders:{projectKey}:{storeKey}',
                  'manage_orders:{projectKey}',
                ],
            },
        ]
  /{ID}:
    (methodName): withId
    type:
      baseResource:
        uriParameterName: ID
        resourceType: Cart
        resourceUpdateType: CartUpdate
    get:
      displayName: Get Cart in Store by ID
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'view_orders:{projectKey}',
                  'view_orders:{projectKey}:{storeKey}',
                ],
            },
        ]
      description: |
        If the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.

        To ensure the Cart is up-to-date with current values (such as Prices and Discounts), use the [Recalculate](ctp:api:type:CartRecalculateAction) update action.
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/cart.example.json
    head:
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'view_orders:{projectKey}',
                  'view_orders:{projectKey}:{storeKey}',
                ],
            },
        ]
      description: Checks if a Cart exists for a given `id`. Returns a `200 OK` status if the Cart exists or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.
    post:
      displayName: Update Cart in Store by ID
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_orders:{projectKey}',
                  'manage_orders:{projectKey}:{storeKey}',
                ],
            },
        ]
      description: |
        Updates a [Cart](ctp:api:type:Cart) in the [Store](ctp:api:type:Store) specified by `storeKey`.
        If the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
      body:
        application/json:
          example: !include ../examples/cart-update.example.json
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/cart.example.json
    delete:
      displayName: Delete Cart in Store by ID
      description: |
        If the Cart exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
      is:
        - dataErasure
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_orders:{projectKey}',
                  'manage_orders:{projectKey}:{storeKey}',
                ],
            },
        ]
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/cart.example.json
/orders:
  type:
    baseDomain:
      resourceType: Order
      resourceQueryType: OrderPagedQueryResponse
      resourceDraft: OrderFromCartDraft
      whereExample: 'customerEmail = "john.doe@example.com"'
      sortExample: createdAt asc
  (updateable): Order
  (deleteable): Order
  (createable): OrderFromCartDraft
  description:
    An order can be created from a cart, usually after a checkout process has
    been completed.
  get:
    displayName: Query Orders in Store
    securedBy:
      [
        oauth_2_0:
          {
            scopes:
              [
                'view_orders:{projectKey}',
                'view_orders:{projectKey}:{storeKey}',
              ],
          },
      ]
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/orders.example.json
  head:
    securedBy:
      [
        oauth_2_0:
          {
            scopes:
              [
                'view_orders:{projectKey}',
                'view_orders:{projectKey}:{storeKey}',
              ],
          },
      ]
    description: Checks if an Order exists for a given Query Predicate. Returns a `200 OK` status if any Orders match the Query Predicate or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.
    queryParameters:
      where?:
        type: QueryPredicate[]
  post:
    displayName: Create Order in Store
    securedBy:
      [
        oauth_2_0:
          {
            scopes:
              [
                'manage_orders:{projectKey}',
                'manage_orders:{projectKey}:{storeKey}',
              ],
          },
      ]
    description: |
      Before you create an Order, the Cart must have a [shipping address set](ctp:api:type:CartSetShippingAddressAction).
      The shipping address is used for tax calculation for a Cart with `Platform` [TaxMode](ctp:api:type:TaxMode).

      Creating an Order produces the [OrderCreated](ctp:api:type:OrderCreatedMessage) Message.
      If a server-side problem occurs, indicated by a 500 Internal Server Error HTTP response, the Order creation may still successfully complete after the error is returned.
      If you receive this error, you should verify the status of the Order by querying a unique identifier supplied during the creation request, such as the Order number.

      Specific Error Codes:

      - [OutOfStock](ctp:api:type:OutOfStockError)
      - [PriceChanged](ctp:api:type:PriceChangedError)
      - [DiscountCodeNonApplicable](ctp:api:type:DiscountCodeNonApplicableError)
      - [ShippingMethodDoesNotMatchCart](ctp:api:type:ShippingMethodDoesNotMatchCartError)
      - [InvalidItemShippingDetails](ctp:api:type:InvalidItemShippingDetailsError)
      - [InvalidOperation](ctp:api:type:InvalidOperationError)
      - [MatchingPriceNotFound](ctp:api:type:MatchingPriceNotFoundError)
      - [MissingTaxRateForCountry](ctp:api:type:MissingTaxRateForCountryError)
      - [CountryNotConfiguredInStore](ctp:api:type:CountryNotConfiguredInStoreError)
    body:
      application/json:
        example: !include ../examples/order-create.example.json
    responses:
      201:
        body:
          application/json:
            example: !include ../examples/order.example.json
  /quotes:
    (methodName): orderQuote
    type: base
    displayName: Order from Quote
    post:
      displayName: Create an Order from a Quote
      description: |
        Creating an Order produces the [OrderCreated](ctp:api:type:OrderCreatedMessage) Message.

        Specific Error Codes:

        - [OutOfStock](ctp:api:type:OutOfStockError)
        - [PriceChanged](ctp:api:type:PriceChangedError)
        - [InvalidItemShippingDetails](ctp:api:type:InvalidItemShippingDetailsError)
        - [InvalidOperation](ctp:api:type:InvalidOperationError)
        - [CountryNotConfiguredInStore](ctp:api:type:CountryNotConfiguredInStoreError)
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_quotes:{projectKey}',
                  'manage_quotes:{projectKey}:{storeKey}',
                ],
            },
        ]
      body:
        application/json:
          example: !include ../examples/order-from-quote.example.json
          type: OrderFromQuoteDraft
      responses:
        201:
          body:
            application/json:
              example: !include ../examples/order.example.json
              type: Order
  /order-number={orderNumber}:
    (methodName): withOrderNumber
    uriParameters:
      orderNumber:
        type: string
        description: '`orderNumber` of the [Order](ctp:api:type:Order). Should be provided in URL-encoded format.'
    type:
      baseResource:
        uriParameterName: orderNumber
        resourceType: Order
        resourceUpdateType: OrderUpdate
    get:
      displayName: Get Order in Store by OrderNumber
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'view_orders:{projectKey}',
                  'view_orders:{projectKey}:{storeKey}',
                ],
            },
        ]
      description: |
        If the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/order.example.json
    head:
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'view_orders:{projectKey}',
                  'view_orders:{projectKey}:{storeKey}',
                ],
            },
        ]
      description: Checks if an Order exists for a given `orderNumber`. Returns a `200 OK` status if the Order exists or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.
    post:
      displayName: Update Order in Store by OrderNumber
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_orders:{projectKey}',
                  'manage_orders:{projectKey}:{storeKey}',
                ],
            },
        ]
      description: |
        If the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
      body:
        application/json:
          example: !include ../examples/order-update.example.json
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/order.example.json
    delete:
      displayName: Delete Order in Store by OrderNumber
      description: |
        If the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.

        Deleting an Order produces the [OrderDeleted](ctp:api:type:OrderDeletedMessage) Message.
      is:
        - dataErasure
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_orders:{projectKey}',
                  'manage_orders:{projectKey}:{storeKey}',
                ],
            },
        ]
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/order.example.json
  /{ID}:
    (methodName): withId
    type:
      baseResource:
        uriParameterName: ID
        resourceType: Order
        resourceUpdateType: OrderUpdate
    get:
      displayName: Get Order in Store by ID
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'view_orders:{projectKey}',
                  'view_orders:{projectKey}:{storeKey}',
                ],
            },
        ]
      description: |
        If the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/order.example.json
    head:
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'view_orders:{projectKey}',
                  'view_orders:{projectKey}:{storeKey}',
                ],
            },
        ]
      description: Checks if an Order exists for a given `id`. Returns a `200 OK` status if the Order exists or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.
    post:
      displayName: Update Order in Store by ID
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_orders:{projectKey}',
                  'manage_orders:{projectKey}:{storeKey}',
                ],
            },
        ]
      description: |
        If the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
      body:
        application/json:
          example: !include ../examples/order-update.example.json
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/order.example.json
    delete:
      displayName: Delete Order in Store by ID
      description: |
        If the Order exists in the Project but does not have a `store` specified, or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.

        Deleting an Order produces the [OrderDeleted](ctp:api:type:OrderDeletedMessage) Message.
      is:
        - dataErasure
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_orders:{projectKey}',
                  'manage_orders:{projectKey}:{storeKey}',
                ],
            },
        ]
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/order.example.json
/me:
  /carts:
    type:
      baseDomain:
        resourceType: Cart
        resourceQueryType: CartPagedQueryResponse
        resourceDraft: MyCartDraft
        whereExample: 'customerEmail = "john.doe@example.com"'
        sortExample: createdAt asc
    (updateable): Cart
    (deleteable): Cart
    (createable): MyCartDraft
    description: A shopping cart holds product variants and can be ordered.
    get:
      displayName: Query My Carts in Store
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_my_orders:{projectKey}',
                  'manage_my_orders:{projectKey}:{storeKey}',
                  'customer_id:{id}',
                  'anonymous_id:{id}',
                ],
            },
        ]
      description: |
        Returns all Carts that match a given Query Predicate and contain either a matching `customerId` or `anonymousId` in a Store.
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/carts.example.json
    head:
      displayName: Check if Cart exists in Store by Query Predicate
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_my_orders:{projectKey}',
                  'manage_my_orders:{projectKey}:{storeKey}',
                  'customer_id:{id}',
                  'anonymous_id:{id}',
                ],
            },
        ]
      description: |
        Checks if a Cart exists for a Store that matches the given Query Predicate, and contains a matching `customerId` or `anonymousId`. Returns a `200 OK` status if any Carts match these conditions, or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.
      queryParameters:
        where?:
          type: QueryPredicate[]
    post:
      displayName: Create My Cart in Store
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_my_orders:{projectKey}',
                  'manage_my_orders:{projectKey}:{storeKey}',
                  'customer_id:{id}',
                  'anonymous_id:{id}',
                ],
            },
        ]
      description: |

        Creates a Cart in a Store for the Customer or anonymous user. The `customerId` or `anonymousId` field on the Cart is automatically set based on the [customer:{id}](/scopes#customer_idid) or [anonymous_id:{id}](/scopes#anonymous_idid) scope.

        The `store` field in the created [Cart](ctp:api:type:Cart) is set to the Store specified by the `storeKey` path parameter.

        Specific Error Codes:

        - [CountryNotConfiguredInStore](ctp:api:type:CountryNotConfiguredInStoreError)
        - [DiscountCodeNonApplicable](ctp:api:type:DiscountCodeNonApplicableError)
        - [InvalidItemShippingDetails](ctp:api:type:InvalidItemShippingDetailsError)
        - [MatchingPriceNotFound](ctp:api:type:MatchingPriceNotFoundError)
        - [MissingTaxRateForCountry](ctp:api:type:MissingTaxRateForCountryError)

      body:
        application/json:
          example: !include ../examples/cart-create.example.json
      responses:
        201:
          body:
            application/json:
              example: !include ../examples/cart.example.json
    /{ID}:
      (methodName): withId
      type:
        baseResource:
          uriParameterName: ID
          resourceType: Cart
          resourceUpdateType: MyCartUpdate
      get:
        displayName: Get My Cart in Store by ID
        securedBy:
          [
            oauth_2_0:
              {
                scopes:
                  [
                    'manage_my_orders:{projectKey}',
                    'manage_my_orders:{projectKey}:{storeKey}',
                    'customer_id:{id}',
                    'anonymous_id:{id}',
                  ],
              },
          ]
        description: |
          Returns a Cart for a given `id` in a Store. Returns a `200 OK` status if the Cart exists.

          A [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:

          - If no Cart exists in the Store for the given `id`.
          - If the Cart exists but does not belong to a Store, or the Cart's `store` field references a different Store.
          - If the Cart exists but does not have either a `customerId` that matches the [customer:{id}](/scopes#customer_idid) scope, or an `anonymousId` that matches the [anonymous_id:{id}](/scopes#anonymous_idid) scope.

        responses:
          200:
            body:
              application/json:
                example: !include ../examples/cart.example.json
      head:
        displayName: Check if Cart exists in Store by ID
        securedBy:
          [
            oauth_2_0:
              {
                scopes:
                  [
                    'manage_my_orders:{projectKey}',
                    'manage_my_orders:{projectKey}:{storeKey}',
                    'customer_id:{id}',
                    'anonymous_id:{id}',
                  ],
              },
          ]
      post:
        displayName: Update My Cart in Store by ID
        securedBy:
          [
            oauth_2_0:
              {
                scopes:
                  [
                    'manage_my_orders:{projectKey}',
                    'manage_my_orders:{projectKey}:{storeKey}',
                    'customer_id:{id}',
                    'anonymous_id:{id}',
                  ],
              },
          ]
        description: |
          Updates the Cart for a given `id` in a Store. Returns a `200 OK` status if successful.

          A [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:

          - If no Cart exists in the Store for the given `id`.
          - If the Cart exists but does not belong to a Store, or the Cart's `store` field references a different Store.
          - If the Cart exists but does not have either a `customerId` that matches the [customer:{id}](/scopes#customer_idid) scope, or an `anonymousId` that matches the [anonymous_id:{id}](/scopes#anonymous_idid) scope.

        body:
          application/json:
            example: !include ../examples/cart-update.example.json
        responses:
          200:
            body:
              application/json:
                example: !include ../examples/cart.example.json
      delete:
        displayName: Delete My Cart in Store by ID
        securedBy:
          [
            oauth_2_0:
              {
                scopes:
                  [
                    'manage_my_orders:{projectKey}',
                    'manage_my_orders:{projectKey}:{storeKey}',
                    'customer_id:{id}',
                    'anonymous_id:{id}',
                  ],
              },
          ]
        description: |
          Deletes the Cart for a given `id` in a Store. Returns a `200 OK` status if successful.

          A [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:

          - If no Cart exists in the Store for the given `id`.
          - If the Cart exists in the Project but does not belong to a Store, or the Cart's `store` field references a different Store.
          - If the Cart exists in the Project but does not have either a `customerId` that matches the [customer:{id}](/scopes#customer_idid) scope, or an `anonymousId` that matches the [anonymous_id:{id}](/scopes#anonymous_idid) scope.

        responses:
          200:
            body:
              application/json:
                example: !include ../examples/cart.example.json
  /orders:
    type:
      baseDomain:
        resourceType: Order
        resourceQueryType: OrderPagedQueryResponse
        resourceDraft: MyOrderFromCartDraft
        whereExample: 'customerEmail = "john.doe@example.com"'
        sortExample: createdAt asc
    description:
      An order can be created from a order, usually after a checkout process has
      been completed.
    get:
      displayName: Query My Orders in Store
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_my_orders:{projectKey}',
                  'manage_my_orders:{projectKey}:{storeKey}',
                  'customer_id:{id}',
                  'anonymous_id:{id}',
                ],
            },
        ]
      description: |
        Returns all Orders in a Store that match a given Query Predicate and contain either a `customerId` that matches the [customer_id:{id}](/scopes#customer_idid) scope, or an `anonymousId` that matches the [anonymous_id:{id}](/scopes#anonymous_idid) scope.
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/orders.example.json
    head:
      displayName: Check if Order exists in Store by Query Predicate
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_my_orders:{projectKey}',
                  'manage_my_orders:{projectKey}:{storeKey}',
                  'customer:{customerId}',
                  'anonymous_id:{anonymousId}',
                ],
            },
        ]
      description: |
        Checks if an Order exists for a given Query Predicate in a Store. Returns a `200 OK` status if successful.

        A [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:

        - If no Orders exist in the Store that match the Query Predicate.
        - If an Order matches the Query Predicate, but no `store` is specified, or the `store` field references a different Store.
        - If an Order matches the Query Predicate, but does not have a `customerId` that matches the [customer:{id}](/scopes#customer_idid) scope, or an `anonymousId` that matches the [anonymous_id:{id}](/scopes#anonymous_idid) scope.

      queryParameters:
        where?:
          type: QueryPredicate[]
    post:
      is:
        - conflicting
      displayName: Create My Order in Store from Cart
      description: |

        Creates an Order in a Store from a Cart for the Customer or anonymous user. The `customerId` or `anonymousId` field on the Order is automatically set based on the [customer:{id}](/scopes#customer_idid) or [anonymous_id:{id}](/scopes#anonymous_idid) scope.

        The Cart must have a [shipping address set](ctp:api:type:CartSetShippingAddressAction) for taxes to be calculated. When creating [B2B Orders](/associates-overview#b2b-resources), the Customer must have the `CreateMyOrdersFromMyCarts` [Permission](ctp:api:type:Permission).

        If the Cart's `customerId` does not match the [customer:{id}](/scopes#customer_idid) scope, or the `anonymousId` does not match the [anonymous_id:{id}](/scopes#anonymous_idid) scope, a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned.

        Creating an Order produces the [OrderCreated](ctp:api:type:OrderCreatedMessage) Message.

        Specific Error Codes:

        - [AssociateMissingPermission](ctp:api:type:AssociateMissingPermissionError)
        - [CountryNotConfiguredInStore](ctp:api:type:CountryNotConfiguredInStoreError)
        - [DiscountCodeNonApplicable](ctp:api:type:DiscountCodeNonApplicableError)
        - [InvalidItemShippingDetails](ctp:api:type:InvalidItemShippingDetailsError)
        - [MatchingPriceNotFound](ctp:api:type:MatchingPriceNotFoundError)
        - [MissingTaxRateForCountry](ctp:api:type:MissingTaxRateForCountryError)
        - [OutOfStock](ctp:api:type:OutOfStockError)
        - [PriceChanged](ctp:api:type:PriceChangedError)
        - [ShippingMethodDoesNotMatchCart](ctp:api:type:ShippingMethodDoesNotMatchCartError)
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_my_orders:{projectKey}',
                  'manage_my_orders:{projectKey}:{storeKey}',
                  'customer_id:{id}',
                  'anonymous_id:{id}',
                ],
            },
        ]
      body:
        application/json:
          example: !include ../examples/my-order-create.example.json
      responses:
        201:
          body:
            application/json:
              example: !include ../examples/order.example.json
    /{ID}:
      (methodName): withId
      type:
        baseResource:
          uriParameterName: ID
          resourceType: Order
      get:
        displayName: Get My Order in Store by ID
        description: |
          Returns an Order for a given `id` in a Store. Returns a `200 OK` status if successful.

          A [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:

          - If no Order exists in the Store for the given `id`.
          - If the Order exists but does not have a `store` specified, or the `store` field references a different Store.
          - If the Order exists but does not have a `customerId` that matches the [customer:{id}](/scopes#customer_idid) scope, or `anonymousId` that matches the [anonymous_id:{id}](/scopes#anonymous_idid) scope.

        securedBy:
          [
            oauth_2_0:
              {
                scopes:
                  [
                    'manage_my_orders:{projectKey}',
                    'manage_my_orders:{projectKey}:{storeKey}',
                    'customer_id:{id}',
                    'anonymous_id:{id}',
                  ],
              },
          ]
        responses:
          200:
            body:
              application/json:
                example: !include ../examples/order.example.json
      head:
        displayName: Check if Order exists in Store by ID
        securedBy:
          [
            oauth_2_0:
              {
                scopes:
                  [
                    'manage_my_orders:{projectKey}',
                    'manage_my_orders:{projectKey}:{storeKey}',
                    'customer_id:{id}',
                    'anonymous_id:{id}',
                  ],
              },
          ]
        description: |
          Checks if an Order exists for a given `id` in a Store. Returns a `200 OK` status if successful.

          A [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:

          - If no Order exists in the Store for the given `id`.
          - If the Order exists but does not have a `store` specified, or the `store` field references a different Store.
          - If the Order exists but does not have a `customerId` that matches the [customer:{id}](/scopes#customer_idid) scope, or `anonymousId` that matches the [anonymous_id:{id}](/scopes#anonymous_idid) scope.

  /active-cart:
    type: base
    get:
      displayName: Get My active Cart in Store
      description: |
        Retrieves the Customer's most recently modified [active Cart](ctp:api:type:CartState) in a Store. Returns a `200 OK` status if successful.

        Carts with `Merchant` or `Quote` [CartOrigin](ctp:api:type:CartOrigin) are ignored.

        A [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:

        - If no active Cart exists.
        - If an active Cart exists but does not have a `store` specified, or the `store` field references a different Store.
        - If an active Cart exists but does not have a `customerId` that matches the [customer:{id}](/scopes#customer_idid) scope, or `anonymousId` that matches the [anonymous_id:{id}](/scopes#anonymous_idid) scope.

      is:
        - expandable
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_my_orders:{projectKey}',
                  'manage_my_orders:{projectKey}:{storeKey}',
                  'customer_id:{id}',
                  'anonymous_id:{id}',
                ],
            },
        ]
      responses:
        200:
          body:
            application/json:
              type: Cart
              example: !include ../examples/cart.example.json
    head:
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_my_orders:{projectKey}',
                  'manage_my_orders:{projectKey}:{storeKey}',
                  'customer_id:{id}',
                  'anonymous_id:{id}',
                ],
            },
        ]
      description: |
        Checks if an active Cart exists in a Store. Returns `200 OK` status if successful.

        A [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:

        - If no active Cart exists in a Store.
        - If an active Cart exists but does not have a `store` specified, or the `store` field references a different Store.
        - If an active Cart exists but does not contain a `customerId` that matches the [customer:{id}](/scopes#customer_idid) scope, or `anonymousId` that matches the [anonymous_id:{id}](/scopes#anonymous_idid) scope.

  /shopping-lists:
    type:
      baseDomain:
        resourceType: ShoppingList
        resourceQueryType: ShoppingListPagedQueryResponse
        resourceDraft: MyShoppingListDraft
        whereExample: 'key = "my-shopping-list"'
        sortExample: createdAt asc
    description: |
      shopping-lists e.g. for wishlist support
    get:
      displayName: Query My ShoppingLists in Store
      description: |
        Returns ShoppingLists that match the given Query Predicate in a Store. Returns `200 OK` status if successful.

        A [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:

        - If no ShoppingLists exist in a Store.
        - If a ShoppingList exists but does not have a `store` specified, or the `store` field references a different Store.
        - If a ShoppingList exists in a Store but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#anonymous_idid) scope, or a `customer` with `id` value that matches the [customer:{id}](/scopes#customer_idid) scope.

      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_my_shopping_lists:{projectKey}',
                  'manage_my_shopping_lists:{projectKey}:{storeKey}',
                  'customer_id:{id}',
                  'anonymous_id:{id}',
                ],
            },
        ]
      queryParameters:
        expand:
          description: |
            When expanding `variant` and `productSlug` on [ShoppingListLineItem](ctp:api:type:ShoppingListLineItem), [expand the entire array](/general-concepts#reference-expansion). You cannot expand a single element (for example, `expand=lineItems[0].variant` is not supported).
          type: Expansion[]
          required: false
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/shopping-lists.example.json
    head:
      displayName: Check if ShoppingList exists by Query Predicate
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_my_shopping_lists:{projectKey}',
                  'manage_my_shopping_lists:{projectKey}:{storeKey}',
                  'customer_id:{id}',
                  'anonymous_id:{id}',
                ],
            },
        ]
      description: |
        Checks if a ShoppingList exists for the given Query Predicate in a Store. Returns `200 OK` status if successful.

        A [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:

        - If no ShoppingLists exist for a given Query Predicate in a Store.
        - If a ShoppingList matches the Query Predicate but does not have a `store` specified, or the `store` field references a different Store.
        - If a ShoppingList exists in a Store but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#anonymous_idid) scope, or a `customer` with `id` value that matches the [customer:{id}](/scopes#customer_idid) scope.

      queryParameters:
        where?:
          type: QueryPredicate[]
    post:
      displayName: Create My ShoppingList in Store
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_my_shopping_lists:{projectKey}',
                  'manage_my_shopping_lists:{projectKey}:{storeKey}',
                  'customer_id:{id}',
                  'anonymous_id:{id}',
                ],
            },
        ]
      queryParameters:
        expand:
          description: |
            When expanding `variant` and `productSlug` on [ShoppingListLineItem](ctp:api:type:ShoppingListLineItem), [expand the entire array](/general-concepts#reference-expansion). You cannot expand a single element (for example, `expand=lineItems[0].variant` is not supported).
          type: Expansion[]
          required: false
      body:
        application/json:
          example: !include ../examples/shopping-list-create.example.json
      description: |

        Creates a ShoppingList in a Store for a Customer or anonymous user. The `customer` or `anonymousId` field on the ShoppingList is automatically set based on the given [customer:{id}](/scopes#customer_idid) or [anonymous_id:{id}](/scopes#anonymous_idid) scope.

        When using this endpoint, the `store` field of a ShoppingList is always set to the [Store](ctp:api:type:Store) specified in the path parameter.
      responses:
        201:
          body:
            application/json:
              example: !include ../examples/shopping-list.example.json
    /key={key}:
      (methodName): withKey
      type:
        baseResource:
          uriParameterName: key
          resourceType: ShoppingList
          resourceUpdateType: MyShoppingListUpdate
      get:
        displayName: Get My ShoppingList in Store by Key
        securedBy:
          [
            oauth_2_0:
              {
                scopes:
                  [
                    'manage_my_shopping_lists:{projectKey}',
                    'manage_my_shopping_lists:{projectKey}:{storeKey}',
                    'customer_id:{id}',
                    'anonymous_id:{id}',
                  ],
              },
          ]
        queryParameters:
          expand:
            description: |
              When expanding `variant` and `productSlug` on [ShoppingListLineItem](ctp:api:type:ShoppingListLineItem), [expand the entire array](/general-concepts#reference-expansion). You cannot expand a single element (for example, `expand=lineItems[0].variant` is not supported).
            type: Expansion[]
            required: false
        description: |
          Returns a ShoppingList for a given `key` in a Store. Returns `200 OK` status if successful.

          A [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:

          - If no ShoppingList matches the given `key` in a Store.
          - If a ShoppingList matches the given `key` but does not have a `store` specified, or the `store` field references a different Store.
          - If a ShoppingList matches the given `key` in a Store but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#anonymous_idid) scope,
             or a `customer` with `id` value that matches the [customer:{id}](/scopes#customer_idid) scope.

        responses:
          200:
            body:
              application/json:
                example: !include ../examples/shopping-list.example.json
      head:
        displayName: Check if ShoppingList exists by Key
        securedBy:
          [
            oauth_2_0:
              {
                scopes:
                  [
                    'manage_my_shopping_lists:{projectKey}',
                    'manage_my_shopping_lists:{projectKey}:{storeKey}',
                    'customer_id:{id}',
                    'anonymous_id:{id}',
                  ],
              },
          ]
        description: |
          Checks if a ShoppingList exists for a given `key` in a Store. Returns a `200 OK` status if successful.

          A [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:

          - If no ShoppingList exists that matches the given `key` in a Store.
          - If a ShoppingList matches the given `key` but does not have a `store` specified, or the `store` field references a different Store.
          - If a ShoppingList matches the given `key` in a Store but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#anonymous_idid) scope, or a `customer` with `id` value that matches the [customer:{id}](/scopes#customer_idid) scope.

      post:
        displayName: Update My ShoppingList in Store by Key
        securedBy:
          [
            oauth_2_0:
              {
                scopes:
                  [
                    'manage_my_shopping_lists:{projectKey}',
                    'manage_my_shopping_lists:{projectKey}:{storeKey}',
                    'customer_id:{id}',
                    'anonymous_id:{id}',
                  ],
              },
          ]
        queryParameters:
          expand:
            description: |
              When expanding `variant` and `productSlug` on [ShoppingListLineItem](ctp:api:type:ShoppingListLineItem), [expand the entire array](/general-concepts#reference-expansion). You cannot expand a single element (for example, `expand=lineItems[0].variant` is not supported).
            type: Expansion[]
            required: false
        body:
          application/json:
            example: !include ../examples/shopping-list-update.example.json
        description: |
          Updates a ShoppingList for a given `key` in a Store. Returns a `200 OK` status if successful.

          A [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:

          - If no ShoppingList matches the given `key` in a Store.
          - If a ShoppingList matches the given `key` but does not have a `store` specified, or the `store` field references a different Store.
          - If a ShoppingList matches the given `key` in a Store but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#anonymous_idid) scope, or a `customer` with `id` value that matches the [customer:{id}](/scopes#customer_idid) scope.

        responses:
          200:
            body:
              application/json:
                example: !include ../examples/shopping-list.example.json
      delete:
        displayName: Delete My ShoppingList in Store by Key
        is:
          - dataErasure
        securedBy:
          [
            oauth_2_0:
              {
                scopes:
                  [
                    'manage_my_shopping_lists:{projectKey}',
                    'manage_my_shopping_lists:{projectKey}:{storeKey}',
                    'customer_id:{id}',
                    'anonymous_id:{id}',
                  ],
              },
          ]
        queryParameters:
          expand:
            description: |
              When expanding `variant` and `productSlug` on [ShoppingListLineItem](ctp:api:type:ShoppingListLineItem), [expand the entire array](/general-concepts#reference-expansion). You cannot expand a single element (for example, `expand=lineItems[0].variant` is not supported).
            type: Expansion[]
            required: false
        description: |
          Deletes the ShoppingList for a given `key` in a Store. Returns a `200 OK` status if successful.

          A [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:

          - If no ShoppingList matches the given `key` in a Store.
          - If a ShoppingList matches the given `key` but does not have a `store` specified, or the `store` field references a different Store.
          - If a ShoppingList matches the given `key` in a Store but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#anonymous_idid) scope, or a `customer` with `id` value that matches the [customer:{id}](/scopes#customer_idid) scope.

        responses:
          200:
            body:
              application/json:
                example: !include ../examples/shopping-list.example.json
    /{ID}:
      (methodName): withId
      type:
        baseResource:
          uriParameterName: ID
          resourceType: ShoppingList
          resourceUpdateType: MyShoppingListUpdate
      get:
        displayName: Get My ShoppingList in Store by ID
        securedBy:
          [
            oauth_2_0:
              {
                scopes:
                  [
                    'manage_my_shopping_lists:{projectKey}:{storeKey}',
                    'manage_my_shopping_lists:{projectKey}',
                    'customer_id:{id}',
                    'anonymous_id:{id}',
                  ],
              },
          ]
        queryParameters:
          expand:
            description: |
              When expanding `variant` and `productSlug` on [ShoppingListLineItem](ctp:api:type:ShoppingListLineItem), [expand the entire array](/general-concepts#reference-expansion). You cannot expand a single element (for example, `expand=lineItems[0].variant` is not supported).
            type: Expansion[]
            required: false
        description: |
          Returns a ShoppingList for a given `id` in a Store. Returns `200 OK` status if successful.

          A [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:

          - If no ShoppingList matches the given `id` in a Store.
          - If a ShoppingList matches the given `id` but does not have a `store` specified, or the `store` field references a different Store.
          - If a ShoppingList matches the given `id` in a Store but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#anonymous_idid) scope, or a `customer` with `id` value that matches the [customer:{id}](/scopes#customer_idid) scope.

        responses:
          200:
            body:
              application/json:
                example: !include ../examples/shopping-list.example.json
      head:
        displayName: Check if ShoppingList exists by ID
        securedBy:
          [
            oauth_2_0:
              {
                scopes:
                  [
                    'manage_my_shopping_lists:{projectKey}:{storeKey}',
                    'manage_my_shopping_lists:{projectKey}',
                    'customer_id:{id}',
                    'anonymous_id:{id}',
                  ],
              },
          ]
        description: |
          Checks if a ShoppingList exists for a given `id` in a Store. Returns a `200 OK` status if successful.

          A [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:

          - If no ShoppingList matches the given `id` in a Store.
          - If a ShoppingList matches the given `id` but does not have a `store` specified, or the `store` field references a different Store.
          - If a ShoppingList matches the given `id` in a Store but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#anonymous_idid) scope, or a `customer` with `id` value that matches the [customer:{id}](/scopes#customer_idid) scope.

      post:
        displayName: Update My ShoppingList in Store by ID
        securedBy:
          [
            oauth_2_0:
              {
                scopes:
                  [
                    'manage_my_shopping_lists:{projectKey}',
                    'manage_my_shopping_lists:{projectKey}:{storeKey}',
                    'customer_id:{id}',
                    'anonymous_id:{id}',
                  ],
              },
          ]
        queryParameters:
          expand:
            description: |
              When expanding `variant` and `productSlug` on [ShoppingListLineItem](ctp:api:type:ShoppingListLineItem), [expand the entire array](/general-concepts#reference-expansion). You cannot expand a single element (for example, `expand=lineItems[0].variant` is not supported).
            type: Expansion[]
            required: false
        body:
          application/json:
            example: !include ../examples/shopping-list-update.example.json
        description: |
          Updates a ShoppingList for a given `id` in a Store. Returns a `200 OK` status if successful.

          A [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:

          - If no ShoppingList matches the given `id` in a Store.
          - If a ShoppingList matches the given `id` but does not have a `store` specified, or the `store` field references a different Store.
          - If a ShoppingList matches the given `id` in a Store but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#anonymous_idid) scope, or a `customer` with `id` value that matches the [customer:{id}](/scopes#customer_idid) scope.

        responses:
          200:
            body:
              application/json:
                example: !include ../examples/shopping-list.example.json
      delete:
        displayName: Delete My ShoppingList in Store by ID
        is:
          - dataErasure
        securedBy:
          [
            oauth_2_0:
              {
                scopes:
                  [
                    'manage_my_shopping_lists:{projectKey}',
                    'manage_my_shopping_lists:{projectKey}:{storeKey}',
                    'customer_id:{id}',
                    'anonymous_id:{id}',
                  ],
              },
          ]
        queryParameters:
          expand:
            description: |
              When expanding `variant` and `productSlug` on [ShoppingListLineItem](ctp:api:type:ShoppingListLineItem), [expand the entire array](/general-concepts#reference-expansion). You cannot expand a single element (for example, `expand=lineItems[0].variant` is not supported).
            type: Expansion[]
            required: false
        description: |
          Deletes the ShoppingList for a given `id` in a Store. Returns a `200 OK` status if successful.

          A [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error is returned in the following scenarios:

          - If no ShoppingList matches the given `id` in a Store.
          - If a ShoppingList matches the given `id` but does not have a `store` specified, or the `store` field references a different Store.
          - If a ShoppingList matches the given `id` in a Store but does not contain either an `anonymousId` that matches the [anonymous_id:{id}](/scopes#anonymous_idid) scope, or a `customer` with `id` value that matches the [customer:{id}](/scopes#customer_idid) scope.

        responses:
          200:
            body:
              application/json:
                example: !include ../examples/shopping-list.example.json
  get:
    displayName: Get my customer details in a store
    is:
      - sortable:
          sortExample: createdAt asc
      - paging
      - expandable
      - query:
          whereExample: 'customerEmail = "email@example.com"'
    securedBy:
      [
        oauth_2_0:
          {
            scopes:
              [
                'manage_my_profile:{projectKey}',
                'manage_my_profile:{projectKey}:{storeKey}',
              ],
          },
      ]
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/customer.example.json
            type: Customer
  post:
    displayName: Update my customer in a store
    securedBy:
      [
        oauth_2_0:
          {
            scopes:
              [
                'manage_my_profile:{projectKey}',
                'manage_my_profile:{projectKey}:{storeKey}',
              ],
          },
      ]
    body:
      application/json:
        example: !include ../examples/customer-update.example.json
        type: MyCustomerUpdate
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/customer-update-response.example.json
            type: Customer
  delete:
    displayName: Delete my Customer in a store
    is:
      - versioned
      - conflicting
    securedBy:
      [
        oauth_2_0:
          {
            scopes:
              [
                'manage_my_profile:{projectKey}',
                'manage_my_profile:{projectKey}:{storeKey}',
              ],
          },
      ]
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/customer.example.json
            type: Customer
  /email/confirm:
    type: base
    post:
      displayName: Verify my Customer's Email in a store
      description: |
        This is the last step in the [email verification process of a Customer](/../api/projects/customers#email-verification-of-customer-in-store).
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_my_profile:{projectKey}',
                  'manage_my_profile:{projectKey}:{storeKey}',
                ],
            },
        ]
      body:
        application/json:
          example: !include ../examples/Customer/CustomerEmailVerify.json
          type: MyCustomerEmailVerify
      responses:
        200:
          description: The email was verified.
          body:
            application/json:
              example: !include ../examples/customer.example.json
              type: Customer
  /password:
    type: base
    post:
      displayName: Change my customers password in a store
      description: |
        Changing the password of the Customer produces the [CustomerPasswordUpdated](ctp:api:type:CustomerPasswordUpdatedMessage) Message with `reset=false`.
      is:
        - conflicting
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_my_profile:{projectKey}',
                  'manage_my_profile:{projectKey}:{storeKey}',
                ],
            },
        ]
      body:
        application/json:
          example: !include ../examples/Customer/MyCustomerChangePassword.json
          type: MyCustomerChangePassword
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/customer.example.json
              type: Customer
    /reset:
      type: base
      post:
        displayName: Reset my Customer's Password in a store
        description: |
          This is the last step in the [password reset process of the authenticated Customer](/../api/projects/customers#password-reset-of-customer-in-store).

          Resetting a password produces the of the Customer [CustomerPasswordUpdated](ctp:api:type:CustomerPasswordUpdatedMessage) Message with `reset=true`.
        securedBy:
          [
            oauth_2_0:
              {
                scopes:
                  [
                    'manage_my_profile:{projectKey}',
                    'manage_my_profile:{projectKey}:{storeKey}',
                  ],
              },
          ]
        body:
          application/json:
            example: !include ../examples/Customer/CustomerResetPassword.json
            type: MyCustomerResetPassword
        responses:
          200:
            body:
              application/json:
                example: !include ../examples/customer.example.json
                type: Customer
  /signup:
    type: base
    post:
      displayName: Signup my customer in a store
      description: |
        If omitted in the request body, the [Customer](ctp:api:type:Customer) `stores` field is set to the [Store](ctp:api:type:Store) specified in the path parameter.

        A Cart returned in the [CustomerSignInResult](ctp:api:type:CustomerSignInResult) has any invalid Line Items removed and is [updated](/api/carts-orders-overview#cart-updates) with the latest prices, taxes, and discounts. During these updates, the following errors can be returned: [MatchingPriceNotFound](ctp:api:type:MatchingPriceNotFoundError) and [MissingTaxRateForCountry](ctp:api:type:MissingTaxRateForCountryError).

        Creating a Customer produces the [CustomerCreated](ctp:api:type:CustomerCreatedMessage) Message.
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_my_profile:{projectKey}',
                  'manage_my_profile:{projectKey}:{storeKey}',
                ],
            },
        ]
      body:
        application/json:
          example: !include ../examples/customer-create.example.json
          type: MyCustomerDraft
      responses:
        201:
          body:
            application/json:
              example: !include ../examples/customer-sign-in-result.example.json
              type: CustomerSignInResult
  /login:
    type: base
    post:
      displayName: Authenticate my Customer (Sign In) in a store
      description: |
        Retrieves the authenticated Customer (that matches the given email/password pair) if they are part of a specific [Store](ctp:api:type:Store).

        - If the Customer does not have a Cart, the most recently modified anonymous cart becomes the Customer's Cart.
        - If the Customer already has a Cart, the most recently modified anonymous cart is handled according to [AnonymousCartSignInMode](ctp:api:type:AnonymousCartSignInMode).

        A Cart returned in the [CustomerSignInResult](ctp:api:type:CustomerSignInResult) has any invalid Line Items removed and is [updated](/api/carts-orders-overview#cart-updates) with the latest prices, taxes, and discounts. During these updates, the following errors can be returned: [MatchingPriceNotFound](ctp:api:type:MatchingPriceNotFoundError) and [MissingTaxRateForCountry](ctp:api:type:MissingTaxRateForCountryError).

        If an account with the given credentials is not found, an [InvalidCredentials](ctp:api:type:InvalidCredentialsError) error is returned.

      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_my_profile:{projectKey}',
                  'manage_my_profile:{projectKey}:{storeKey}',
                ],
            },
        ]
      body:
        application/json:
          type: MyCustomerSignin
          example: !include ../examples/Customer/CustomerSignIn.json
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/customer-sign-in-result.example.json
              type: CustomerSignInResult
/customers:
  type:
    baseDomain:
      resourceType: Customer
      resourceQueryType: CustomerPagedQueryResponse
      resourceDraft: CustomerDraft
      whereExample: 'email = "email@example.com"'
      sortExample: createdAt asc
  (updateable): Customer
  (deleteable): Customer
  (createable): CustomerDraft
  description: |
    A Customer is a person purchasing products. Carts, Orders,
    Comments and Reviews can be associated to a Customer.
  get:
    displayName: Query customers in store
    securedBy:
      - oauth_2_0:
          scopes:
            - 'view_customers:{projectKey}'
            - 'view_customers:{projectKey}:{storeKey}'
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/customers.example.json
  head:
    securedBy:
      - oauth_2_0:
          scopes:
            - 'view_customers:{projectKey}'
            - 'view_customers:{projectKey}:{storeKey}'
    description: Checks if a Customer exists for a given Query Predicate. Returns a `200 OK` status if any Customers match the Query Predicate or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.
    queryParameters:
      where?:
        type: QueryPredicate[]
  post:
    displayName: Create customer in store
    securedBy:
      - oauth_2_0:
          scopes:
            - 'manage_customers:{projectKey}'
            - 'manage_customers:{projectKey}:{storeKey}'
    description: |
      When using this endpoint, if omitted, the Customer `stores` field is set to the [Store](ctp:api:type:Store) specified in the path parameter.

      If the `anonymousCart` field is set on the [CustomerDraft](ctp:api:type:CustomerDraft), then the newly created Customer will be assigned to that [Cart](ctp:api:type:Cart).
      Similarly, if the `anonymousId` field is set, the Customer will be set on all [Carts](ctp:api:type:Cart), [Orders](ctp:api:type:Order), [ShoppingLists](ctp:api:type:ShoppingList) and [Payments](ctp:api:type:Payment) with the same `anonymousId`.
      If a Cart with a `store` field specified, the `store` field must reference the same [Store](ctp:api:type:Store) specified in the `{storeKey}` path parameter.

      Creating a Customer produces the [CustomerCreated](ctp:api:type:CustomerCreatedMessage) Message. Simultaneously creating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error.
    body:
      application/json:
        example: !include ../examples/customer-create.example.json
    responses:
      201:
        body:
          application/json:
            example: !include ../examples/customer-sign-in-result.example.json
            type: CustomerSignInResult
  /password-token={passwordToken}:
    (methodName): withPasswordToken
    type:
      baseResource:
        uriParameterName: passwordToken
        resourceType: Customer
    get:
      displayName: Get customer by password verification token in store
      description: |
        If the Customer exists in the Project but the `stores` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
      securedBy:
        - oauth_2_0:
            scopes:
              - 'view_customers:{projectKey}'
              - 'view_customers:{projectKey}:{storeKey}'
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/customer.example.json
  /email-token={emailToken}:
    (methodName): withEmailToken
    type:
      baseResource:
        uriParameterName: emailToken
        resourceType: Customer
    get:
      displayName: Get customer by email verification token in store
      description: |
        If the Customer exists in the Project but the `stores` field references a different [Store](ctp:api:type:Store), this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
      securedBy:
        - oauth_2_0:
            scopes:
              - 'view_customers:{projectKey}'
              - 'view_customers:{projectKey}:{storeKey}'
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/customer.example.json
  /email-token:
    type: base
    displayName: Customer's Email Verification in store
    post:
      displayName: Create a Token for verifying the Customer's Email in store
      description: |
        If the Customer exists in the Project but the `stores` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
      securedBy:
        - oauth_2_0:
            scopes:
              - 'manage_customers:{projectKey}'
              - 'manage_customers:{projectKey}:{storeKey}'
      body:
        application/json:
          example: !include ../examples/Customer/CustomerCreateEmailToken.json
          type: CustomerCreateEmailToken
      responses:
        200:
          body:
            application/json:
              type: CustomerToken
  /email/confirm:
    type: base
    post:
      displayName: Verify Customer's Email in store
      description: |
        The customer verifies the email using the token value.
        Verifying the email of the Customer produces the [CustomerEmailVerified](ctp:api:type:CustomerEmailVerifiedMessage) Message.

        If the Customer exists in the Project but the `stores` field references a different [Store](ctp:api:type:Store), this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
      securedBy:
        - oauth_2_0:
            scopes:
              - 'manage_customers:{projectKey}'
              - 'manage_customers:{projectKey}:{storeKey}'
      body:
        application/json:
          example: !include ../examples/Customer/CustomerEmailVerify.json
          type: CustomerEmailVerify
      responses:
        200:
          description: The email was verified.
          body:
            application/json:
              example: !include ../examples/customer.example.json
              type: Customer
  /password:
    type: base
    post:
      displayName: Change a customers password in store
      description: |
        Changing the password of the Customer produces the [CustomerPasswordUpdated](ctp:api:type:CustomerPasswordUpdatedMessage) Message with `reset=false`.
      securedBy:
        - oauth_2_0:
            scopes:
              - 'manage_customers:{projectKey}'
              - 'manage_customers:{projectKey}:{storeKey}'
      body:
        application/json:
          example: !include ../examples/Customer/CustomerChangePassword.json
          type: CustomerChangePassword
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/customer.example.json
              type: Customer
  /password/reset:
    type: base
    post:
      displayName: Reset Customer's Password in store
      description: |
        Resetting the password of the Customer produces the [CustomerPasswordUpdated](ctp:api:type:CustomerPasswordUpdatedMessage) Message with `reset=true`.

        If the Customer exists in the Project but the `stores` field references a different [Store](ctp:api:type:Store), this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
      securedBy:
        - oauth_2_0:
            scopes:
              - 'manage_customers:{projectKey}'
              - 'manage_customers:{projectKey}:{storeKey}'
      body:
        application/json:
          example: !include ../examples/Customer/CustomerResetPassword.json
          type: CustomerResetPassword
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/customer.example.json
              type: Customer
  /password-token:
    type: base
    displayName: Create a Token for Resetting the Customer's Password in store
    post:
      displayName: Create a Token for Resetting the Customer's Password in store
      description: |
        If the Customer exists in the Project but the `stores` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
      securedBy:
        - oauth_2_0:
            scopes:
              - 'manage_customers:{projectKey}'
              - 'manage_customers:{projectKey}:{storeKey}'
      body:
        application/json:
          type: CustomerCreatePasswordResetToken
          example: !include ../examples/Customer/CustomerCreatePasswordResetToken.json
      responses:
        200:
          body:
            application/json:
              type: CustomerToken
  /key={key}:
    (methodName): withKey
    type:
      baseResource:
        uriParameterName: key
        resourceType: Customer
        resourceUpdateType: CustomerUpdate
    get:
      displayName: Get customer by key in store
      description: |
        If the Customer exists in the Project but the `stores` field references a different [Store](ctp:api:type:Store), this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
      securedBy:
        - oauth_2_0:
            scopes:
              - 'view_customers:{projectKey}'
              - 'view_customers:{projectKey}:{storeKey}'
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/customer.example.json
    head:
      securedBy:
        - oauth_2_0:
            scopes:
              - 'view_customers:{projectKey}'
              - 'view_customers:{projectKey}:{storeKey}'
      description: Checks if a Customer exists for a given `key`. Returns a `200 OK` status if the Customer exists or a `404 Not Found` otherwise.
    post:
      displayName: Update customer by key in store
      description: |
        If the Customer exists in the Project but the `stores` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.

        Simultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error.
      securedBy:
        - oauth_2_0:
            scopes:
              - 'manage_customers:{projectKey}'
              - 'manage_customers:{projectKey}:{storeKey}'
      body:
        application/json:
          example: !include ../examples/customer-update.example.json
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/customer.example.json
    delete:
      displayName: Delete customer by key in store
      description: |
        Deleting a Customer produces the [CustomerDeleted](ctp:api:type:CustomerDeletedMessage) Message.

        If the Customer exists in the Project but the `stores` field references a different [Store](ctp:api:type:Store), this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
      is:
        - dataErasure
      securedBy:
        - oauth_2_0:
            scopes:
              - 'manage_customers:{projectKey}'
              - 'manage_customers:{projectKey}:{storeKey}'
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/customer.example.json
  /{ID}:
    (methodName): withId
    type:
      baseResource:
        uriParameterName: ID
        resourceType: Customer
        resourceUpdateType: CustomerUpdate
    get:
      displayName: Get customer by id in store
      description: |
        If the Customer exists in the Project but the `stores` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
      securedBy:
        - oauth_2_0:
            scopes:
              - 'view_customers:{projectKey}'
              - 'view_customers:{projectKey}:{storeKey}'
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/customer.example.json
    head:
      securedBy:
        - oauth_2_0:
            scopes:
              - 'view_customers:{projectKey}'
              - 'view_customers:{projectKey}:{storeKey}'
      description: Checks if a Customer exists for a given `id`. Returns a `200 OK` status if the Customer exists or a `404 Not Found` otherwise.
    post:
      displayName: Update customer by id in store
      description: |
        If the Customer exists in the Project but the `stores` field references a different [Store](ctp:api:type:Store), this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.

        Simultaneously updating two Customers with the same email address can return a [LockedField](ctp:api:type:LockedFieldError) error.

      securedBy:
        - oauth_2_0:
            scopes:
              - 'manage_customers:{projectKey}'
              - 'manage_customers:{projectKey}:{storeKey}'
      body:
        application/json:
          example: !include ../examples/customer-update.example.json
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/customer.example.json
    delete:
      displayName: Delete customer by id in store
      description: |
        Deleting a Customer produces the [CustomerDeleted](ctp:api:type:CustomerDeletedMessage) Message.

        If the Customer exists in the Project but the `stores` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
      is:
        - dataErasure
      securedBy:
        - oauth_2_0:
            scopes:
              - 'manage_customers:{projectKey}'
              - 'manage_customers:{projectKey}:{storeKey}'
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/customer.example.json
/login:
  type: base
  displayName: Authenticate Customer (Sign In) in store
  description: Retrieves the authenticated customer.
  post:
    displayName: Authenticate Customer (Sign In) in store
    description: |
      Authenticates a Customer associated with a [Store](ctp:api:type:Store). For more information, see [Global versus Store-specific Customers](/../api/customers-overview#global-versus-store-specific-customers).

      A Cart returned in the [CustomerSignInResult](ctp:api:type:CustomerSignInResult) has any invalid Line Items removed and is [updated](/api/carts-orders-overview#cart-updates) with the latest prices, taxes, and discounts. During these updates, the following errors can be returned: [MatchingPriceNotFound](ctp:api:type:MatchingPriceNotFoundError) and [MissingTaxRateForCountry](ctp:api:type:MissingTaxRateForCountryError).

      Triggers [Cart merge during sign-in](/../api/customers-overview#cart-merge-during-sign-in).

      If the Customer exists in the Project but the `stores` field references a different [Store](ctp:api:type:Store), this method returns an [InvalidCredentials](ctp:api:type:InvalidCredentialsError) error.

    securedBy:
      - oauth_2_0:
          scopes:
            - 'manage_customers:{projectKey}'
            - 'manage_customers:{projectKey}:{storeKey}'
    body:
      application/json:
        type: CustomerSignin
        example: !include ../examples/Customer/CustomerSignIn.json
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/customer-sign-in-result.example.json
            type: CustomerSignInResult
/shipping-methods:
  /matching-cart:
    type: base
    description: Get ShippingMethods for a cart in a store
    get:
      displayName: Get ShippingMethods for a cart in a store
      description: |
        Retrieves all the active ShippingMethods that can ship to the shipping address of the given Cart in a given [Store](ctp:api:type:Store).
        Each ShippingMethod contains exactly one ShippingRate with the flag `isMatching` set to `true`.
        This ShippingRate is used when the ShippingMethod is [added to the Cart](ctp:api:type:CartSetShippingMethodAction).
      is:
        - expandable
      securedBy:
        - oauth_2_0:
            scopes:
              - 'view_orders:{projectKey}'
              - 'view_orders:{projectKey}:{storeKey}'
              - 'manage_customers:{projectKey}:{storeKey}'
              - 'view_shipping_methods:{projectKey}'
              - 'manage_my_orders:{projectKey}'
              - 'manage_my_orders:{projectKey}:{storeKey}'
      queryParameters:
        cartId:
          type: string
          description: |
            ID of the Cart with a shipping address set.
      responses:
        200:
          body:
            application/json:
              type: ShippingMethodPagedQueryResponse
              example: !include ../examples/shipping-methods.example.json
    head:
      securedBy:
        - oauth_2_0:
            scopes:
              - 'view_orders:{projectKey}'
              - 'view_orders:{projectKey}:{storeKey}'
              - 'manage_customers:{projectKey}:{storeKey}'
              - 'view_shipping_methods:{projectKey}'
              - 'manage_my_orders:{projectKey}'
              - 'manage_my_orders:{projectKey}:{storeKey}'
      queryParameters:
        cartId:
          type: string
          description: |
            ID of the Cart with a shipping address set.
      description: Checks if an active ShippingMethod that can ship to the shipping address of the given Cart exists in the given [Store](ctp:api:type:Store). Returns a `200 OK` status if the ShippingMethod exists or a `404 Not Found` otherwise.
/shopping-lists:
  type:
    baseDomain:
      resourceType: ShoppingList
      resourceQueryType: ShoppingListPagedQueryResponse
      resourceDraft: ShoppingListDraft
      whereExample: 'key = "my-shopping-list"'
      sortExample: createdAt asc
  description: |
    shopping-lists e.g. for wishlist support
  get:
    displayName: Get ShoppingLists in Store
    securedBy:
      [
        oauth_2_0:
          {
            scopes:
              [
                'view_shopping_lists:{projectKey}',
                'view_shopping_lists:{projectKey}:{storeKey}',
              ],
          },
      ]
    queryParameters:
      expand:
        description: |
          *Limitation: `expand=lineItems[0].variant` and `expand=lineItems[0].productSlug` are not supported.*
        type: Expansion[]
        required: false
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/shopping-lists.example.json
  head:
    securedBy:
      [
        oauth_2_0:
          {
            scopes:
              [
                'view_shopping_lists:{projectKey}',
                'view_shopping_lists:{projectKey}:{storeKey}',
              ],
          },
      ]
    description: Checks if a ShoppingList exists for a given Query Predicate. Returns a `200 OK` status if any ShoppingLists match the Query Predicate or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.
    queryParameters:
      where?:
        type: QueryPredicate[]
  post:
    displayName: Create ShoppingLists in Store
    securedBy:
      [
        oauth_2_0:
          {
            scopes:
              [
                'manage_shopping_lists:{projectKey}',
                'manage_shopping_lists:{projectKey}:{storeKey}',
              ],
          },
      ]
    queryParameters:
      expand:
        description: |
          *Limitation: `expand=lineItems[0].variant` and `expand=lineItems[0].productSlug` are not supported.*
        type: Expansion[]
        required: false
    body:
      application/json:
        example: !include ../examples/shopping-list-create.example.json
    description: |
      When using this endpoint, the `store` field of a ShoppingList is always set to the [Store](ctp:api:type:Store) specified in the path parameter.
    responses:
      201:
        body:
          application/json:
            example: !include ../examples/shopping-list.example.json
  /key={key}:
    (methodName): withKey
    type:
      baseResource:
        uriParameterName: key
        resourceType: ShoppingList
        resourceUpdateType: ShoppingListUpdate
    get:
      displayName: Get ShoppingList in Store by Key
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'view_shopping_lists:{projectKey}',
                  'view_shopping_lists:{projectKey}:{storeKey}',
                ],
            },
        ]
      queryParameters:
        expand:
          description: |
            When expanding `variant` and `productSlug` on [ShoppingListLineItem](ctp:api:type:ShoppingListLineItem), [expand the entire array](/general-concepts#reference-expansion). You cannot expand a single element (for example, `expand=lineItems[0].variant` is not supported).
          type: Expansion[]
          required: false
      description: |
        If a ShoppingList exists in a Project but does _not_ have the `store` field, or the `store` field references a different [Store](ctp:api:type:Store),
        the [ResourceNotFound](/errors#404-not-found-1) error is returned.
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/shopping-list.example.json
    head:
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'view_shopping_lists:{projectKey}',
                  'view_shopping_lists:{projectKey}:{storeKey}',
                ],
            },
        ]
      description: Checks if a ShoppingList exists for a given `key`. Returns a `200 OK` status if the ShoppingList exists or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.
    post:
      displayName: Update ShoppingList in Store by Key
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_shopping_lists:{projectKey}',
                  'manage_shopping_lists:{projectKey}:{storeKey}',
                ],
            },
        ]
      queryParameters:
        expand:
          description: |
            When expanding `variant` and `productSlug` on [ShoppingListLineItem](ctp:api:type:ShoppingListLineItem), [expand the entire array](/general-concepts#reference-expansion). You cannot expand a single element (for example, `expand=lineItems[0].variant` is not supported).
          type: Expansion[]
          required: false
      description: |
        If a ShoppingList exists in a Project but does _not_ have the `store` field, or the `store` field references a different [Store](ctp:api:type:Store),
        the [ResourceNotFound](/errors#404-not-found-1) error is returned.
      body:
        application/json:
          example: !include ../examples/shopping-list-update.example.json
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/shopping-list.example.json
    delete:
      displayName: Delete ShoppingList in Store by Key
      is:
        - dataErasure
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_shopping_lists:{projectKey}',
                  'manage_shopping_lists:{projectKey}:{storeKey}',
                ],
            },
        ]
      queryParameters:
        expand:
          description: |
            When expanding `variant` and `productSlug` on [ShoppingListLineItem](ctp:api:type:ShoppingListLineItem), [expand the entire array](/general-concepts#reference-expansion). You cannot expand a single element (for example, `expand=lineItems[0].variant` is not supported).
          type: Expansion[]
          required: false
      description: |
        If a ShoppingList exists in a Project but does _not_ have the `store` field, or the `store` field references a different [Store](ctp:api:type:Store),
        the [ResourceNotFound](/errors#404-not-found-1) error is returned.
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/shopping-list.example.json
  /{ID}:
    (methodName): withId
    type:
      baseResource:
        uriParameterName: ID
        resourceType: ShoppingList
        resourceUpdateType: ShoppingListUpdate
    get:
      displayName: Get ShoppingList in Store by ID
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'view_shopping_lists:{projectKey}',
                  'view_shopping_lists:{projectKey}:{storeKey}',
                ],
            },
        ]
      queryParameters:
        expand:
          description: |
            When expanding `variant` and `productSlug` on [ShoppingListLineItem](ctp:api:type:ShoppingListLineItem), [expand the entire array](/general-concepts#reference-expansion). You cannot expand a single element (for example, `expand=lineItems[0].variant` is not supported).
          type: Expansion[]
          required: false
      description: |
        If a ShoppingList exists in a Project but does _not_ have the `store` field, or the `store` field references a different [Store](ctp:api:type:Store),
        the [ResourceNotFound](/errors#404-not-found-1) error is returned.
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/shopping-list.example.json
    head:
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'view_shopping_lists:{projectKey}',
                  'view_shopping_lists:{projectKey}:{storeKey}',
                ],
            },
        ]
      description: Checks if a ShoppingList exists for a given `id`. Returns a `200 OK` status if the ShoppingList exists or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.
    post:
      displayName: Update ShoppingList in Store by ID
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_shopping_lists:{projectKey}',
                  'manage_shopping_lists:{projectKey}:{storeKey}',
                ],
            },
        ]
      queryParameters:
        expand:
          description: |
            When expanding `variant` and `productSlug` on [ShoppingListLineItem](ctp:api:type:ShoppingListLineItem), [expand the entire array](/general-concepts#reference-expansion). You cannot expand a single element (for example, `expand=lineItems[0].variant` is not supported).
          type: Expansion[]
          required: false
      body:
        application/json:
          example: !include ../examples/shopping-list-update.example.json
      description: |
        If a ShoppingList exists in a Project but does _not_ have the `store` field, or the `store` field references a different [Store](ctp:api:type:Store),
        the [ResourceNotFound](/errors#404-not-found-1) error is returned.
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/shopping-list.example.json
    delete:
      displayName: Delete ShoppingList in Store by ID
      is:
        - dataErasure
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_shopping_lists:{projectKey}',
                  'manage_shopping_lists:{projectKey}:{storeKey}',
                ],
            },
        ]
      queryParameters:
        expand:
          description: |
            When expanding `variant` and `productSlug` on [ShoppingListLineItem](ctp:api:type:ShoppingListLineItem), [expand the entire array](/general-concepts#reference-expansion). You cannot expand a single element (for example, `expand=lineItems[0].variant` is not supported).
          type: Expansion[]
          required: false
      description: |
        If a ShoppingList exists in a Project but does _not_ have the `store` field, or the `store` field references a different [Store](ctp:api:type:Store),
        the [ResourceNotFound](/errors#404-not-found-1) error is returned.
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/shopping-list.example.json
/product-projections:
  /key={key}:
    (methodName): withKey
    type:
      baseResource:
        uriParameterName: key
        resourceType: ProductProjection
    get:
      displayName: Gets the current or staged representation of a product by its key from a specific Store
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'view_products:{projectKey}',
                  'view_published_products:{projectKey}',
                ],
            },
        ]
      description: |
        Gets the current or staged representation of a [Product](ctp:api:type:Product) by its key in the specified [Store](ctp:api:type:Store).
        If the Store has defined some languages, countries, distribution, supply Channels, and/or Product Selection,
        they are used for projections based on [locale](ctp:api:type:ProductProjectionLocales), [price](ctp:api:type:ProductProjectionPrices),
        and [inventory](ctp:api:type:ProductProjectionInventoryEntries).

        If [ProductSelection](ctp:api:type:ProductSelection) is used, it affects the [availability of the Product](/projects/stores#products-available-in-store) in the specified Store.

        When used with an API Client that has the `view_published_products:{projectKey}` scope, this endpoint only returns published (current) Product Projections.
      is:
        - projectionSelecting
        - priceSelecting
        - localeProjecting
    head:
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'view_products:{projectKey}',
                  'view_published_products:{projectKey}',
                ],
            },
        ]
      description: Checks if the current or staged representations of a Product exists for a given `key` in the specified [Store](ctp:api:type:Store). Returns a `200 OK` status if the ProductProjection exists or a `404 Not Found` otherwise.
  /{ID}:
    (methodName): withId
    type:
      baseResource:
        uriParameterName: ID
        resourceType: ProductProjection
    get:
      displayName: Gets the current or staged representation of a product by its ID from a specific Store
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'view_products:{projectKey}',
                  'view_published_products:{projectKey}',
                ],
            },
        ]
      description: |
        Gets the current or staged representation of a [Product](ctp:api:type:Product) by its ID in the specified [Store](ctp:api:type:Store).
        If the Store has defined some languages, countries, distribution, supply Channels, and/or Product Selection,
        they are used for projections based on [locale](ctp:api:type:ProductProjectionLocales), [price](ctp:api:type:ProductProjectionPrices),
        and [inventory](ctp:api:type:ProductProjectionInventoryEntries).

        If [ProductSelection](ctp:api:type:ProductSelection) is used, it affects the [availability of the Product](/projects/stores#products-available-in-store) in the specified Store.

        When used with an API Client that has the `view_published_products:{projectKey}` scope, this endpoint only returns published (current) Product Projections.
      is:
        - projectionSelecting
        - priceSelecting
        - localeProjecting
    head:
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'view_products:{projectKey}',
                  'view_published_products:{projectKey}',
                ],
            },
        ]
      description: Checks if the current or staged representations of a Product exists for a given `id` in the specified [Store](ctp:api:type:Store). Returns a `200 OK` status if the ProductProjection exists or a `404 Not Found` otherwise.
/product-selection-assignments:
  type: base
  get:
    displayName: Query available products in store
    is:
      - expandable
      - query:
          whereExample: 'product(id in ("c89f4753-050d-44af-9411-0a941e745c6e"))'
    securedBy: [oauth_2_0: { scopes: ['view_product_selections:{projectKey}'] }]
    description: |
      Queries Product Selection assignments in a specific [Store](ctp:api:type:Store).

      The response will include duplicate Products whenever more than one active Product Selection of the Store
      includes a Product. To make clear through which Product Selection a Product is available in the Store
      the response contains assignments including both the Product and the Product Selection.
      Only Products of Product Selections that are activated in the Store will be returned.

    queryParameters:
      limit:
        type: number
        format: int32
        maximum: 500
        required: false
        description: |
          Number of [results requested](/../api/general-concepts#limit).
      offset:
        type: number
        format: int32
        required: false
        description: |
          Number of [elements skipped](/../api/general-concepts#offset).
      withTotal:
        type: boolean
        default: true
        required: false
        description: |
          By default, the response does not include the `total` field. Set to `true` to get the [total](/../api/general-concepts#total) number of query results included.
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/products-in-store.example.json
            type: ProductsInStorePagedQueryResponse
/cart-discounts:
  type:
    baseDomain:
      resourceType: CartDiscount
      resourceQueryType: CartDiscountPagedQueryResponse
      resourceDraft: CartDiscountDraft
      whereExample: isActive = true
      sortExample: createdAt asc
  get:
    securedBy:
      [
        oauth_2_0:
          {
            scopes:
              [
                'view_orders:{projectKey}',
                'view_orders:{projectKey}:{storeKey}',
                'view_cart_discounts:{projectKey}',
                'view_cart_discounts:{projectKey}:{storeKey}',
              ],
          },
      ]
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/cart-discounts.example.json
  head:
    securedBy:
      [
        oauth_2_0:
          {
            scopes:
              [
                'view_orders:{projectKey}',
                'view_orders:{projectKey}:{storeKey}',
                'view_cart_discounts:{projectKey}',
                'view_cart_discounts:{projectKey}:{storeKey}',
              ],
          },
      ]
    description: Checks if a CartDiscount exists for a given Query Predicate. Returns a `200 OK` status if any CartDiscounts match the Query Predicate or a `404 Not Found` otherwise.
    queryParameters:
      where?:
        type: QueryPredicate[]
  post:
    description: |
      When using the endpoint, the Store specified in the path and the Stores specified in the payload's `stores` field are added to the CartDiscount.

      Creating a Cart Discount produces the [CartDiscountCreated](ctp:api:type:CartDiscountCreatedMessage) Message.
    securedBy:
      [
        oauth_2_0:
          {
            scopes:
              [
                'manage_orders:{projectKey}',
                'manage_orders:{projectKey}:{storeKey}',
                'manage_cart_discounts:{projectKey}',
                'manage_cart_discounts:{projectKey}:{storeKey}',
              ],
          },
      ]
    body:
      application/json:
        example: !include ../examples/cart-discount-create.example.json
    responses:
      201:
        body:
          application/json:
            example: !include ../examples/cart-discount.example.json
  /key={key}:
    (methodName): withKey
    type:
      baseResource:
        uriParameterName: key
        resourceType: CartDiscount
        resourceUpdateType: CartDiscountUpdate
    get:
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'view_orders:{projectKey}',
                  'view_orders:{projectKey}:{storeKey}',
                  'view_cart_discounts:{projectKey}',
                  'view_cart_discounts:{projectKey}:{storeKey}',
                ],
            },
        ]
      responses:
        200:
          body:
            application/json:
              type: CartDiscount
              example: !include ../examples/cart-discount.example.json
    head:
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'view_orders:{projectKey}',
                  'view_orders:{projectKey}:{storeKey}',
                  'view_cart_discounts:{projectKey}',
                  'view_cart_discounts:{projectKey}:{storeKey}',
                ],
            },
        ]
      description: Checks if a CartDiscount exists for a given `key`. Returns a `200 OK` status if the CartDiscount exists or a `404 Not Found` otherwise.
    post:
      description: |
        To update a CartDiscount, you must have permissions for all Stores the CartDiscount is associated with, except when [removing a Store](ctp:api:type:CartDiscountRemoveStoreAction).
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_orders:{projectKey}',
                  'manage_orders:{projectKey}:{storeKey}',
                  'manage_cart_discounts:{projectKey}',
                  'manage_cart_discounts:{projectKey}:{storeKey}',
                ],
            },
        ]
      body:
        application/json:
          example: !include ../examples/cart-discount-update.example.json
      responses:
        200:
          body:
            application/json:
              type: CartDiscount
              example: !include ../examples/cart-discount.example.json
    delete:
      description: |
        To delete a CartDiscount, specify the `manage_cart_discounts:{projectKey}:{storeKey}` scope for all Stores associated with the CartDiscount.

        Deleting a Cart Discount produces the [CartDiscountDeleted](ctp:api:type:CartDiscountDeletedMessage) Message.
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_orders:{projectKey}',
                  'manage_orders:{projectKey}:{storeKey}',
                  'manage_cart_discounts:{projectKey}',
                  'manage_cart_discounts:{projectKey}:{storeKey}',
                ],
            },
        ]
      responses:
        200:
          body:
            application/json:
              type: CartDiscount
              example: !include ../examples/cart-discount.example.json
  /{ID}:
    (methodName): withId
    type:
      baseResource:
        uriParameterName: ID
        resourceType: CartDiscount
        resourceUpdateType: CartDiscountUpdate
    get:
      description: |
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'view_orders:{projectKey}',
                  'view_orders:{projectKey}:{storeKey}',
                  'view_cart_discounts:{projectKey}',
                  'view_cart_discounts:{projectKey}:{storeKey}',
                ],
            },
        ]
      responses:
        200:
          body:
            application/json:
              type: CartDiscount
              example: !include ../examples/cart-discount.example.json
    head:
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'view_orders:{projectKey}',
                  'view_orders:{projectKey}:{storeKey}',
                  'view_cart_discounts:{projectKey}',
                  'view_cart_discounts:{projectKey}:{storeKey}',
                ],
            },
        ]
      description: Checks if a CartDiscount exists for a given `id`. Returns a `200 OK` status if the CartDiscount exists or a `404 Not Found` otherwise.
    post:
      description: |
        To update a CartDiscount, you must have permissions for all Stores the CartDiscount is associated with, except when [removing a Store](ctp:api:type:CartDiscountRemoveStoreAction).
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_orders:{projectKey}',
                  'manage_orders:{projectKey}:{storeKey}',
                  'manage_cart_discounts:{projectKey}',
                  'manage_cart_discounts:{projectKey}:{storeKey}',
                ],
            },
        ]
      body:
        application/json:
          example: !include ../examples/cart-discount-update.example.json
      responses:
        200:
          body:
            application/json:
              type: CartDiscount
              example: !include ../examples/cart-discount.example.json
    delete:
      description: |
        To delete a CartDiscount, specify the `manage_cart_discounts:{projectKey}:{storeKey}` scope for all Stores associated with the CartDiscount.

        Deleting a Cart Discount produces the [CartDiscountDeleted](ctp:api:type:CartDiscountDeletedMessage) Message.
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_orders:{projectKey}',
                  'manage_orders:{projectKey}:{storeKey}',
                  'manage_cart_discounts:{projectKey}',
                  'manage_cart_discounts:{projectKey}:{storeKey}',
                ],
            },
        ]
      responses:
        200:
          body:
            application/json:
              type: CartDiscount
              example: !include ../examples/cart-discount.example.json
/product-tailoring:
  type:
    baseDomain:
      resourceType: ProductTailoring
      resourceQueryType: ProductTailoringPagedQueryResponse
      resourceDraft: ProductTailoringInStoreDraft
      resourceUpdateType: ProductTailoringUpdate
      sortExample: createdAt asc
  (updateable): ProductTailoring
  (createable): ProductTailoringInStoreDraft
  description: A Product Tailoring holds tailored data of Product in the Store.
  get:
    displayName: Query available product tailoring in store
    is:
      - expandable
      - query:
          whereExample: 'product(id in ("c89f4753-050d-44af-9411-0a941e745c6e"))'
    securedBy: [oauth_2_0: { scopes: ['view_products:{projectKey}'] }]
    description: |
      Queries Product Tailoring in a specific [Store](ctp:api:type:Store).

    queryParameters:
      limit:
        type: number
        format: int32
        maximum: 500
        required: false
        description: |
          Number of [results requested](/../api/general-concepts#limit).
      offset:
        type: number
        format: int32
        required: false
        description: |
          Number of [elements skipped](/../api/general-concepts#offset).
      withTotal:
        type: boolean
        default: true
        required: false
        description: |
          By default, the response does not include the `total` field. Set to `true` to get the [total](/../api/general-concepts#total) number of query results included.
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/product-tailoring-list.example.json
            type: ProductTailoringPagedQueryResponse
  post:
    displayName: Create Product Tailoring in store
    securedBy:
      [
        oauth_2_0:
          {
            scopes:
              [
                'manage_products:{projectKey}',
                'manage_products:{projectKey}:{storeKey}',
              ],
          },
      ]
    description: |
      Creates a [ProductTailoring](ctp:api:type:ProductTailoring) in the [Store](ctp:api:type:Store) specified by `storeKey`.
      When using this endpoint the ProductTailoring's `store` field is always set to the [Store](ctp:api:type:Store) specified in the path parameter.

      Generates the [ProductTailoringCreated](ctp:api:type:ProductTailoringCreatedMessage) Message.
    body:
      application/json:
        example: !include ../examples/product-tailoring-in-store-create.example.json
    responses:
      201:
        body:
          application/json:
            example: !include ../examples/product-tailoring.example.json

/products:
  /{productID}:
    (methodName): withProductId
    uriParameters:
      productID:
        type: string
        description: |
          `id` of the [Product](ctp:api:type:Product).
    /product-tailoring:
      type:
        baseSubResource:
          resourceType: ProductTailoring
          resourceUpdateType: ProductTailoringUpdate
      get:
        displayName: Gets the current or staged representation of a Product Tailoring by its Product ID from a specific Store
        securedBy:
          [
            oauth_2_0:
              {
                scopes:
                  [
                    'view_products:{projectKey}',
                    'view_products:{projectKey}:{storeKey}',
                  ],
              },
          ]
        description: |
          Gets the current or staged representation of a [Product Tailoring](ctp:api:type:ProductTailoring) by its Product ID in the specified [Store](ctp:api:type:Store).
        responses:
          200:
            body:
              application/json:
                example: !include ../examples/product-tailoring.example.json
                type: ProductTailoring
      post:
        displayName: Update a Product Tailoring by its Product ID from a specific Store
        securedBy:
          [
            oauth_2_0:
              {
                scopes:
                  [
                    'manage_products:{projectKey}',
                    'manage_products:{projectKey}:{storeKey}',
                  ],
              },
          ]
        description: |
          Updates the current or staged representation of a [Product Tailoring](ctp:api:type:ProductTailoring) by its Product ID in the specified [Store](ctp:api:type:Store).
        body:
          application/json:
            example: !include ../examples/product-tailoring-update.example.json
        responses:
          200:
            body:
              application/json:
                type: ProductTailoring
                example: !include ../examples/product-tailoring-updated.example.json
      delete:
        displayName: Delete a Product Tailoring by its Product ID from a specific Store
        description: |
          Generates the [ProductTailoringDeleted](ctp:api:type:ProductTailoringDeletedMessage) Message.
        securedBy:
          [
            oauth_2_0:
              {
                scopes:
                  [
                    'manage_products:{projectKey}',
                    'manage_products:{projectKey}:{storeKey}',
                  ],
              },
          ]
        responses:
          200:
            body:
              application/json:
                type: ProductTailoring
                example: !include ../examples/product-tailoring.example.json
      /images:
        post:
          displayName: Upload a Product Tailoring image
          queryParameters:
            filename?:
              type: string
              description: Base filename of the image when stored in the Content Delivery Network. The filename will be modified when uploaded to prevent filename conflicts. If not included a random filename will be allocated.
            variant?:
              type: number
              format: int64
              description: The `id` of the [ProductTailoringVariant](/projects/product-tailoring#productvarianttailoring) the image should be uploaded to. It must correspond to an existing [ProductVariant](/projects/products#productvariant) in the Product.
            sku?:
              type: string
              description: The `sku` of the [ProductTailoringVariant](/projects/product-tailoring#productvarianttailoring) the image should be uploaded to. It must correspond to an existing [ProductVariant](/projects/products#productvariant) in the Product.
            staged?:
              type: boolean
              description: If `true`, only the staged ProductTailoringVariant is updated. If `false`, both the current and staged ProductTailoringVariant are updated.
          description: |
            Upload a JPEG, PNG and GIF file to a [ProductTailoringVariant](ctp:api:type:ProductTailoringVariant). The maximum file size of the image is 10MB. `variant` or `sku` is required to update a specific ProductVariant. Produces the [ProductTailoringImageAdded](/projects/messages#product-tailoring-image-added) Message when the `Small` version of the image has been uploaded to the CDN.
          securedBy: [oauth_2_0: { scopes: ['manage_products:{projectKey}'] }]
          body:
            type: file
            fileTypes: ['image/jpeg', 'image/png', 'image/gif']
          headers:
            Content-Type:
              enum: ['image/jpeg', 'image/png', 'image/gif']
          responses:
            200:
              body:
                type: ProductTailoring
                example: !include ../examples/product-tailoring.example.json
  /key={productKey}:
    (methodName): withProductKey
    uriParameters:
      productKey:
        type: string
        description: |
          `key` of the [Product](ctp:api:type:Product).
    /product-tailoring:
      type:
        baseSubResource:
          resourceType: ProductTailoring
          resourceUpdateType: ProductTailoringUpdate
      get:
        displayName: Gets the current or staged representation of a Product Tailoring by its Product key from a specific Store
        securedBy:
          [
            oauth_2_0:
              {
                scopes:
                  [
                    'view_products:{projectKey}',
                    'view_products:{projectKey}:{storeKey}',
                  ],
              },
          ]
        description: |
          Gets the current or staged representation of a [Product Tailoring](ctp:api:type:ProductTailoring) by its Product key in the specified [Store](ctp:api:type:Store).
        responses:
          200:
            body:
              application/json:
                example: !include ../examples/product-tailoring.example.json
                type: ProductTailoring
      post:
        displayName: Update a Product Tailoring by its Product key from a specific Store
        securedBy:
          [
            oauth_2_0:
              {
                scopes:
                  [
                    'manage_products:{projectKey}',
                    'manage_products:{projectKey}:{storeKey}',
                  ],
              },
          ]
        description: |
          Updates the current or staged representation of a [Product Tailoring](ctp:api:type:ProductTailoring) by its Product key in the specified [Store](ctp:api:type:Store).
        body:
          application/json:
            example: !include ../examples/product-tailoring-update.example.json
        responses:
          200:
            body:
              application/json:
                type: ProductTailoring
                example: !include ../examples/product-tailoring-updated.example.json
      delete:
        displayName: Delete a Product Tailoring by its Product key from a specific Store
        description: |
          Generates the [ProductTailoringDeleted](ctp:api:type:ProductTailoringDeletedMessage) Message.
        securedBy:
          [
            oauth_2_0:
              {
                scopes:
                  [
                    'manage_products:{projectKey}',
                    'manage_products:{projectKey}:{storeKey}',
                  ],
              },
          ]
        responses:
          200:
            body:
              application/json:
                type: ProductTailoring
                example: !include ../examples/product-tailoring.example.json
      /images:
        post:
          displayName: Upload a Product Tailoring image
          queryParameters:
            filename?:
              type: string
              description: Base filename of the image when stored in the Content Delivery Network. The filename will be modified when uploaded to prevent filename conflicts. If not included a random filename will be allocated.
            variant?:
              type: number
              format: int64
              description: The `id` of the [ProductTailoringVariant](/projects/product-tailoring#productvarianttailoring) the image should be uploaded to. It must correspond to an existing [ProductVariant](/projects/products#productvariant) in the Product.
            sku?:
              type: string
              description: The `sku` of the [ProductTailoringVariant](/projects/product-tailoring#productvarianttailoring) the image should be uploaded to. It must correspond to an existing [ProductVariant](/projects/products#productvariant) in the Product.
            staged?:
              type: boolean
              description: If `true`, only the staged ProductTailoringVariant is updated. If `false`, both the current and staged ProductTailoringVariant are updated.
          description: |
            Upload a JPEG, PNG and GIF file to a [ProductTailoringVariant](ctp:api:type:ProductTailoringVariant). The maximum file size of the image is 10MB. `variant` or `sku` is required to update a specific ProductVariant. Produces the [ProductTailoringImageAdded](/projects/messages#product-tailoring-image-added) Message when the `Small` version of the image has been uploaded to the CDN.
          securedBy: [oauth_2_0: { scopes: ['manage_products:{projectKey}'] }]
          body:
            type: file
            fileTypes: ['image/jpeg', 'image/png', 'image/gif']
          headers:
            Content-Type:
              enum: ['image/jpeg', 'image/png', 'image/gif']
          responses:
            200:
              body:
                type: ProductTailoring
                example: !include ../examples/product-tailoring.example.json
/quote-requests:
  type:
    baseDomain:
      resourceType: QuoteRequest
      resourceQueryType: QuoteRequestPagedQueryResponse
      resourceDraft: QuoteRequestDraft
      whereExample: 'quoteRequestState = "Submitted"'
      sortExample: createdAt asc
  (updateable): QuoteRequest
  (deleteable): QuoteRequest
  (createable): QuoteRequestDraft
  description: A request for a Quote holds product variants and can be ordered.
  get:
    securedBy:
      [
        oauth_2_0:
          {
            scopes:
              [
                'view_quote_requests:{projectKey}',
                'view_quote_requests:{projectKey}:{storeKey}',
              ],
          },
      ]
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/quote-requests.example.json
  head:
    securedBy:
      [
        oauth_2_0:
          {
            scopes:
              [
                'view_quote_requests:{projectKey}',
                'view_quote_requests:{projectKey}:{storeKey}',
              ],
          },
      ]
    description: Checks if a QuoteRequest exists for a given Query Predicate. Returns a `200 OK` status if any QuoteRequests match the Query Predicate or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.
    queryParameters:
      where?:
        type: QueryPredicate[]
  post:
    securedBy:
      [
        oauth_2_0:
          {
            scopes:
              [
                'manage_quote_requests:{projectKey}',
                'manage_quote_requests:{projectKey}:{storeKey}',
              ],
          },
      ]
    body:
      application/json:
        example: !include ../examples/quote-request-create.example.json
    responses:
      201:
        body:
          application/json:
            example: !include ../examples/quote-request.example.json
  /key={key}:
    (methodName): withKey
    type:
      baseResource:
        uriParameterName: key
        resourceType: QuoteRequest
        resourceUpdateType: QuoteRequestUpdate
    get:
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'view_quote_requests:{projectKey}',
                  'view_quote_requests:{projectKey}:{storeKey}',
                ],
            },
        ]
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/quote-request.example.json
    head:
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'view_quote_requests:{projectKey}',
                  'view_quote_requests:{projectKey}:{storeKey}',
                ],
            },
        ]
      description: Checks if a QuoteRequest exists for a given `key`. Returns a `200 OK` status if the QuoteRequest exists or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.
    post:
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_quote_requests:{projectKey}',
                  'manage_quote_requests:{projectKey}:{storeKey}',
                ],
            },
        ]
      body:
        application/json:
          example: !include ../examples/quote-request-update.example.json
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/quote-request-update-response.example.json
    delete:
      is:
        - dataErasure
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_quote_requests:{projectKey}',
                  'manage_quote_requests:{projectKey}:{storeKey}',
                ],
            },
        ]
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/quote-request.example.json
  /{ID}:
    (methodName): withId
    type:
      baseResource:
        uriParameterName: ID
        resourceType: QuoteRequest
        resourceUpdateType: QuoteRequestUpdate
    get:
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'view_quote_requests:{projectKey}',
                  'view_quote_requests:{projectKey}:{storeKey}',
                ],
            },
        ]
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/quote-request.example.json
    head:
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'view_quote_requests:{projectKey}',
                  'view_quote_requests:{projectKey}:{storeKey}',
                ],
            },
        ]
      description: Checks if a QuoteRequest exists for a given `id`. Returns a `200 OK` status if the QuoteRequest exists or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.
    post:
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_quote_requests:{projectKey}',
                  'manage_quote_requests:{projectKey}:{storeKey}',
                ],
            },
        ]
      body:
        application/json:
          example: !include ../examples/quote-request-update.example.json
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/quote-request-update-response.example.json
    delete:
      is:
        - dataErasure
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_quote_requests:{projectKey}',
                  'manage_quote_requests:{projectKey}:{storeKey}',
                ],
            },
        ]
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/quote-request.example.json
/staged-quotes:
  type:
    baseDomain:
      resourceType: StagedQuote
      resourceQueryType: StagedQuotePagedQueryResponse
      resourceDraft: StagedQuoteDraft
      whereExample: 'stagedQuoteState = "InProgress"'
      sortExample: createdAt asc
  (updateable): StagedQuote
  (deleteable): StagedQuote
  (createable): StagedQuoteDraft
  description: A staged quote holds the negotiation between the [Buyer](/../api/quotes-overview#buyer) and the [Seller](/../api/quotes-overview#seller).
  get:
    securedBy:
      [
        oauth_2_0:
          {
            scopes:
              [
                'view_staged_quotes:{projectKey}',
                'view_staged_quotes:{projectKey}:{storeKey}',
              ],
          },
      ]
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/staged-quotes.example.json
  head:
    securedBy:
      [
        oauth_2_0:
          {
            scopes:
              [
                'view_staged_quotes:{projectKey}',
                'view_staged_quotes:{projectKey}:{storeKey}',
              ],
          },
      ]
    description: Checks if a StagedQuote exists for a given Query Predicate. Returns a `200 OK` status if any StagedQuotes match the Query Predicate or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.
    queryParameters:
      where?:
        type: QueryPredicate[]
  post:
    securedBy:
      [
        oauth_2_0:
          {
            scopes:
              [
                'manage_staged_quotes:{projectKey}',
                'manage_staged_quotes:{projectKey}:{storeKey}',
              ],
          },
      ]
    body:
      application/json:
        example: !include ../examples/staged-quote-create.example.json
    responses:
      201:
        body:
          application/json:
            example: !include ../examples/staged-quote.example.json
  /key={key}:
    (methodName): withKey
    type:
      baseResource:
        uriParameterName: key
        resourceType: StagedQuote
        resourceUpdateType: StagedQuoteUpdate
    get:
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'view_staged_quotes:{projectKey}',
                  'view_staged_quotes:{projectKey}:{storeKey}',
                ],
            },
        ]
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/staged-quote.example.json
    head:
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'view_staged_quotes:{projectKey}',
                  'view_staged_quotes:{projectKey}:{storeKey}',
                ],
            },
        ]
      description: Checks if a StagedQuote exists for a given `key`. Returns a `200 OK` status if the StagedQuote exists or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.
    post:
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_staged_quotes:{projectKey}',
                  'manage_staged_quotes:{projectKey}:{storeKey}',
                ],
            },
        ]
      body:
        application/json:
          example: !include ../examples/staged-quote-update.example.json
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/staged-quote.example.json
    delete:
      is:
        - dataErasure
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_staged_quotes:{projectKey}',
                  'manage_staged_quotes:{projectKey}:{storeKey}',
                ],
            },
        ]
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/staged-quote.example.json
  /{ID}:
    (methodName): withId
    type:
      baseResource:
        uriParameterName: ID
        resourceType: StagedQuote
        resourceUpdateType: StagedQuoteUpdate
    get:
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'view_staged_quotes:{projectKey}',
                  'view_staged_quotes:{projectKey}:{storeKey}',
                ],
            },
        ]
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/staged-quote.example.json
    head:
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'view_staged_quotes:{projectKey}',
                  'view_staged_quotes:{projectKey}:{storeKey}',
                ],
            },
        ]
      description: Checks if a StagedQuote exists for a given `id`. Returns a `200 OK` status if the StagedQuote exists or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.
    post:
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_staged_quotes:{projectKey}',
                  'manage_staged_quotes:{projectKey}:{storeKey}',
                ],
            },
        ]
      body:
        application/json:
          example: !include ../examples/staged-quote-update.example.json
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/staged-quote.example.json
    delete:
      is:
        - dataErasure
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_staged_quotes:{projectKey}',
                  'manage_staged_quotes:{projectKey}:{storeKey}',
                ],
            },
        ]
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/staged-quote.example.json
/quotes:
  type:
    baseDomain:
      resourceType: Quote
      resourceQueryType: QuotePagedQueryResponse
      resourceDraft: QuoteDraft
      whereExample: 'quoteState = "Accepted"'
      sortExample: createdAt asc
  (updateable): Quote
  (deleteable): Quote
  (createable): QuoteDraft
  description: A quote holds the negotiated offer.
  get:
    securedBy:
      [
        oauth_2_0:
          {
            scopes:
              [
                'view_quotes:{projectKey}',
                'view_quotes:{projectKey}:{storeKey}',
              ],
          },
      ]
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/quotes.example.json
  head:
    securedBy:
      [
        oauth_2_0:
          {
            scopes:
              [
                'view_quotes:{projectKey}',
                'view_quotes:{projectKey}:{storeKey}',
              ],
          },
      ]
    description: Checks if a Quote exists for a given Query Predicate. Returns a `200 OK` status if any Quotes match the Query Predicate or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.
    queryParameters:
      where?:
        type: QueryPredicate[]
  post:
    securedBy:
      [
        oauth_2_0:
          {
            scopes:
              [
                'manage_quotes:{projectKey}',
                'manage_quotes:{projectKey}:{storeKey}',
              ],
          },
      ]
    body:
      application/json:
        example: !include ../examples/quote-create.example.json
    responses:
      201:
        body:
          application/json:
            example: !include ../examples/quote.example.json
  /key={key}:
    (methodName): withKey
    type:
      baseResource:
        uriParameterName: key
        resourceType: Quote
        resourceUpdateType: QuoteUpdate
    get:
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'view_quotes:{projectKey}',
                  'view_quotes:{projectKey}:{storeKey}',
                ],
            },
        ]
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/quote.example.json
    head:
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'view_quotes:{projectKey}',
                  'view_quotes:{projectKey}:{storeKey}',
                ],
            },
        ]
      description: Checks if a Quote exists for a given `key`. Returns a `200 OK` status if the Quote exists or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.
    post:
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_quotes:{projectKey}',
                  'manage_quotes:{projectKey}:{storeKey}',
                ],
            },
        ]
      body:
        application/json:
          example: !include ../examples/quote-update.example.json
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/quote.example.json
    delete:
      is:
        - dataErasure
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_quotes:{projectKey}',
                  'manage_quotes:{projectKey}:{storeKey}',
                ],
            },
        ]
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/quote.example.json
  /{ID}:
    (methodName): withId
    type:
      baseResource:
        uriParameterName: ID
        resourceType: Quote
        resourceUpdateType: QuoteUpdate
    get:
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'view_quotes:{projectKey}',
                  'view_quotes:{projectKey}:{storeKey}',
                ],
            },
        ]
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/quote.example.json
    head:
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'view_quotes:{projectKey}',
                  'view_quotes:{projectKey}:{storeKey}',
                ],
            },
        ]
      description: Checks if a Quote exists for a given `id`. Returns a `200 OK` status if the Quote exists or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.
    post:
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_quotes:{projectKey}',
                  'manage_quotes:{projectKey}:{storeKey}',
                ],
            },
        ]
      body:
        application/json:
          example: !include ../examples/quote-update.example.json
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/quote.example.json
    delete:
      is:
        - dataErasure
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_quotes:{projectKey}',
                  'manage_quotes:{projectKey}:{storeKey}',
                ],
            },
        ]
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/quote.example.json
