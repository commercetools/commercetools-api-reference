type:
  baseDomain:
    resourceType: RecurrencePolicy
    resourceQueryType: RecurrencePolicyPagedQueryResponse
    resourceDraft: RecurrencePolicyDraft
    whereExample: 'key = "weekly"'
    sortExample: createdAt asc
(updateable): RecurrencePolicy
(createable): RecurrencePolicyDraft
description: A Recurrence Policy is a configuration of a schedule.
get:
  displayName: Query RecurrencePolicies
  securedBy: [oauth_2_0: { scopes: ['view_recurring_orders:{projectKey}'] }]
  description: |
    Retrieves Recurrence Policies in the Project.
  responses:
    200:
      body:
        application/json:
          example: !include ../examples/recurrence-policies.example.json
head:
  displayName: Check if RecurrencePolicy exists by Query Predicate
  securedBy: [oauth_2_0: { scopes: ['view_recurring_orders:{projectKey}'] }]
  description: |
    Checks if one or more Recurrence Policies exist for the provided query predicate. Returns a `200` status if any Recurrence Policies match the query predicate, or a [NotFound](ctp:api:type:ResourceNotFoundError) error otherwise.
  queryParameters:
    where?:
      type: QueryPredicate[]
post:
  displayName: Create RecurrencePolicy
  securedBy: [oauth_2_0: { scopes: ['manage_recurring_orders:{projectKey}'] }]
  description: |
    Creates a Recurrence Policy in the Project.
  body:
    application/json:
      example: !include ../examples/recurrence-policy-create.example.json
  responses:
    201:
      body:
        application/json:
          example: !include ../examples/recurrence-policy.example.json
/key={key}:
  (methodName): withKey
  type:
    baseResource:
      uriParameterName: key
      resourceType: RecurrencePolicy
      resourceUpdateType: RecurrencePolicyUpdate
  get:
    displayName: Get RecurrencePolicy by Key
    securedBy: [oauth_2_0: { scopes: ['view_recurring_orders:{projectKey}'] }]
    description: |
      Retrieves a Recurrence Policy with the provided `key`.
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/recurrence-policy.example.json
  head:
    displayName: Check if RecurrencePolicy exists by Key
    securedBy: [oauth_2_0: { scopes: ['view_recurring_orders:{projectKey}'] }]
    description: |
      Checks if a Recurrence Policy exists with the provided `key`. Returns a `200` status if the Recurrence Policy exists, or a [NotFound](ctp:api:type:ResourceNotFoundError) error otherwise.
  post:
    displayName: Update RecurrencePolicy by Key
    securedBy: [oauth_2_0: { scopes: ['manage_recurring_orders:{projectKey}'] }]
    description: |
      Updates a Recurrence Policy using one or more [update actions](/../api/projects/recurrence-policies#update-actions).
    body:
      application/json:
        example: !include ../examples/recurrence-policy-update.example.json
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/recurrence-policy.example.json
/{ID}:
  (methodName): withId
  type:
    baseResource:
      uriParameterName: ID
      resourceType: RecurrencePolicy
      resourceUpdateType: RecurrencePolicyUpdate
  get:
    displayName: Get RecurrencePolicy by ID
    securedBy: [oauth_2_0: { scopes: ['view_recurring_orders:{projectKey}'] }]
    description: |
      Retrieves a Recurrence Policy with the provided `id`.
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/recurrence-policy.example.json
  head:
    displayName: Check if RecurrencePolicy exists by ID
    securedBy: [oauth_2_0: { scopes: ['view_recurring_orders:{projectKey}'] }]
    description: |
      Checks if a Recurrence Policy exists with the provided `id`. Returns a `200` status if the Recurrence Policy exists, or a [NotFound](ctp:api:type:ResourceNotFoundError) error otherwise.
  post:
    displayName: Update RecurrencePolicy by ID
    securedBy: [oauth_2_0: { scopes: ['manage_recurring_orders:{projectKey}'] }]
    description: |
      Updates a Recurrence Policy using one or more [update actions](/../api/projects/recurrence-policies#update-actions).
    body:
      application/json:
        example: !include ../examples/recurrence-policy-update.example.json
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/recurrence-policy.example.json
