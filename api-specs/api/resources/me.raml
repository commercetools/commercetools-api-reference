type: base
get:
  displayName: Get my customer details
  is:
    - sortable:
    - paging
    - expandable
    - query:
        whereExample: 'customerEmail = "email@example.com"'
  securedBy: [oauth_2_0: { scopes: ['manage_my_profile:{projectKey}'] }]
  responses:
    200:
      body:
        application/json:
          example: !include ../examples/customer.example.json
          type: Customer
post:
  displayName: Update my customer
  securedBy: [oauth_2_0: { scopes: ['manage_my_profile:{projectKey}'] }]
  body:
    application/json:
      example: !include ../examples/customer-update.example.json
      type: MyCustomerUpdate
  responses:
    200:
      body:
        application/json:
          example: !include ../examples/customer-update-response.example.json
          type: Customer
delete:
  displayName: Delete my Customer
  is:
    - versioned
    - conflicting
  securedBy: [oauth_2_0: { scopes: ['manage_my_profile:{projectKey}'] }]
  responses:
    200:
      body:
        application/json:
          example: !include ../examples/customer.example.json
          type: Customer
/email/confirm:
  type: base
  post:
    displayName: Verify my Customer's Email
    description: |
      This is the last step in the [email verification process of a Customer](/../api/projects/customers#email-verification-of-customer).
    securedBy: [oauth_2_0: { scopes: ['manage_my_profile:{projectKey}'] }]
    body:
      application/json:
        example: !include ../examples/Customer/CustomerEmailVerify.json
        type: MyCustomerEmailVerify
    responses:
      200:
        description: The email was verified.
        body:
          application/json:
            example: !include ../examples/customer.example.json
            type: Customer
/password:
  type: base
  post:
    displayName: Change my customers password
    description: |
      Changing the password of the Customer produces the [CustomerPasswordUpdated](ctp:api:type:CustomerPasswordUpdatedMessage) Message with `reset=false`.

      If the current password does not match, an [InvalidCurrentPassword](ctp:api:type:InvalidCurrentPasswordError) error is returned.
    is:
      - conflicting
    securedBy: [oauth_2_0: { scopes: ['manage_my_profile:{projectKey}'] }]
    body:
      application/json:
        type: MyCustomerChangePassword
        example: !include ../examples/Customer/MyCustomerChangePassword.json
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/customer.example.json
            type: Customer
  /reset:
    type: base
    post:
      displayName: Reset my Customer's Password
      description: |
        This is the last step in the [password reset process of a Customer](/../api/projects/customers#password-reset-of-customer).

        Resetting a password of the Customer produces the [CustomerPasswordUpdated](ctp:api:type:CustomerPasswordUpdatedMessage) Message with `reset=true`.
      securedBy: [oauth_2_0: { scopes: ['manage_my_profile:{projectKey}'] }]
      body:
        application/json:
          example: !include ../examples/Customer/CustomerResetPassword.json
          type: MyCustomerResetPassword
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/customer.example.json
              type: Customer
/signup:
  type: base
  post:
    displayName: Signup my customer
    description: |
      If used with an [access token for an anonymous session](ctp:api:type:AnonymousSession), all Orders and Carts that belong to the `anonymousId` are assigned to the newly created Customer.

      Creating a Customer produces the [CustomerCreated](ctp:api:type:CustomerCreatedMessage) Message.
    securedBy: [oauth_2_0: { scopes: ['manage_my_profile:{projectKey}'] }]
    body:
      application/json:
        example: !include ../examples/customer-create.example.json
        type: MyCustomerDraft
    responses:
      201:
        body:
          application/json:
            example: !include ../examples/customer-sign-in-result.example.json
            type: CustomerSignInResult
/login:
  type: base
  post:
    displayName: Authenticate my Customer (Sign In)
    description: |
      Retrieves the authenticated customer (that matches the given email/password pair).

      If used with [an access token for an anonymous session](ctp:api:type:AnonymousSession), all Orders and Carts that belong to the `anonymousId` are assigned to the newly logged-in Customer.

      - If the Customer does not have a Cart yet, the most recently modified anonymous cart becomes the Customer's Cart.
      - If the Customer already has a Cart, the most recently modified anonymous cart is handled in accordance with [AnonymousCartSignInMode](ctp:api:type:AnonymousCartSignInMode).

      A Cart returned in the [CustomerSignInResult](ctp:api:type:CustomerSignInResult) has any invalid Line Items removed and is [updated](/api/carts-orders-overview#cart-updates) with the latest prices, taxes, and discounts. During these updates, the following errors can be returned: [MatchingPriceNotFound](ctp:api:type:MatchingPriceNotFoundError) and [MissingTaxRateForCountry](ctp:api:type:MissingTaxRateForCountryError).

      If an account with the given credentials is not found, an [InvalidCredentials](ctp:api:type:InvalidCredentialsError) error is returned.

    securedBy: [oauth_2_0: { scopes: ['manage_my_profile:{projectKey}'] }]
    body:
      application/json:
        type: MyCustomerSignin
        example: !include ../examples/Customer/CustomerSignIn.json
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/customer-sign-in-result.example.json
            type: CustomerSignInResult
/active-cart:
  type: base
  get:
    displayName: Get my active cart
    description: |
      Retrieves the Customer's most recently modified active Cart.
      Carts with `Merchant` or `Quote` [CartOrigin](ctp:api:type:CartOrigin) are ignored.

      If no active Cart exists, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
    is:
      - expandable
    securedBy: [oauth_2_0: { scopes: ['manage_my_orders:{projectKey}'] }]
    responses:
      200:
        body:
          application/json:
            type: Cart
  head:
    securedBy: [oauth_2_0: { scopes: ['manage_my_orders:{projectKey}'] }]
    description: Checks if an active Cart exists. Returns a `200 OK` status if an active Cart exists or a `404 Not Found` otherwise.
/business-units:
  type:
    baseDomain:
      resourceType: BusinessUnit
      resourceQueryType: BusinessUnitPagedQueryResponse
      resourceDraft: MyBusinessUnitDraft
      whereExample: 'key = "my-company"'
      sortExample: createdAt asc
  (updateable): BusinessUnit
  (deleteable): BusinessUnit
  (createable): MyBusinessUnitDraft
  description: MyBusinessUnit creates and provides access to Business Units scoped to a specific user.
  get:
    displayName: Query My Business Units
    securedBy:
      [oauth_2_0: { scopes: ['manage_my_business_units:{projectKey}'] }]
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/my-business-units.example.json
  head:
    securedBy:
      [oauth_2_0: { scopes: ['manage_my_business_units:{projectKey}'] }]
    description: Checks if a BusinessUnit exists for a given Query Predicate. Returns a `200 OK` status if any BusinessUnits match the Query Predicate or a `404 Not Found` otherwise.
    queryParameters:
      where?:
        type: QueryPredicate[]
  post:
    displayName: Create My Business Units
    securedBy:
      [oauth_2_0: { scopes: ['manage_my_business_units:{projectKey}'] }]
    description: |
      Automatically assigns the Associate to the Business Unit in the default [Associate Role](ctp:api:type:AssociateRole) defined in [BusinessUnitConfiguration](ctp:api:type:BusinessUnitConfiguration). If there is no default Associate Role configured, this request fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error. When creating a Division, the Associate must have the `AddChildUnits` [Permission](ctp:api:type:Permission) in the parent unit. If the required [Permission](/projects/associate-roles#permission) is missing, an [AssociateMissingPermission](/errors#associatemissingpermission) error is returned.
    body:
      application/json:
        example: !include ../examples/my-business-unit-create.example.json
    responses:
      201:
        body:
          application/json:
            example: !include ../examples/my-business-unit.example.json
  /{ID}:
    (methodName): withId
    type:
      baseResource:
        uriParameterName: ID
        resourceType: BusinessUnit
        resourceUpdateType: MyBusinessUnitUpdate
    get:
      displayName: Get My Business Units by ID
      securedBy:
        [oauth_2_0: { scopes: ['manage_my_business_units:{projectKey}'] }]
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/my-business-unit.example.json
    head:
      securedBy:
        [oauth_2_0: { scopes: ['manage_my_business_units:{projectKey}'] }]
      description: Checks if a BusinessUnit exists for a given `id`. Returns a `200 OK` status if the BusinessUnit exists or a `404 Not Found` otherwise.
    post:
      displayName: Update My Business Units by ID
      securedBy:
        [oauth_2_0: { scopes: ['manage_my_business_units:{projectKey}'] }]
      body:
        application/json:
          example: !include ../examples/my-business-unit-update.example.json
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/my-business-unit.example.json
    delete:
      displayName: Delete My Business Units by ID
      securedBy:
        [oauth_2_0: { scopes: ['manage_my_business_units:{projectKey}'] }]
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/my-business-unit.example.json
  /key={key}:
    (methodName): withKey
    type:
      baseResource:
        uriParameterName: key
        resourceType: BusinessUnit
        resourceUpdateType: MyBusinessUnitUpdate
    get:
      displayName: Get My Business Units by Key
      securedBy:
        [oauth_2_0: { scopes: ['manage_my_business_units:{projectKey}'] }]
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/my-business-unit.example.json
    head:
      securedBy:
        [oauth_2_0: { scopes: ['manage_my_business_units:{projectKey}'] }]
      description: Checks if a BusinessUnit exists for a given `key`. Returns a `200 OK` status if the BusinessUnit exists or a `404 Not Found` otherwise.
    post:
      displayName: Update My Business Units by Key
      securedBy:
        [oauth_2_0: { scopes: ['manage_my_business_units:{projectKey}'] }]
      body:
        application/json:
          example: !include ../examples/my-business-unit-update.example.json
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/my-business-unit.example.json
    delete:
      displayName: Delete My Business Units by Key
      securedBy:
        [oauth_2_0: { scopes: ['manage_my_business_units:{projectKey}'] }]
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/my-business-unit.example.json
/carts:
  type:
    baseDomain:
      resourceType: Cart
      resourceQueryType: CartPagedQueryResponse
      resourceDraft: MyCartDraft
      whereExample: 'customerEmail = "john.doe@example.com"'
      sortExample: createdAt asc
  (updateable): Cart
  (deleteable): Cart
  (createable): MyCartDraft
  description: A shopping cart holds product variants and can be ordered.
  get:
    displayName: Query My Carts
    securedBy:
      [
        oauth_2_0:
          {
            scopes:
              [
                'manage_my_orders:{projectKey}',
                'customer_id:{id}',
                'anonymous_id:{id}',
              ],
          },
      ]
    description: |
      Returns all Carts that match a given Query Predicate and contain either a matching `customerId` or `anonymousId`.
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/carts.example.json
  head:
    securedBy:
      [
        oauth_2_0:
          {
            scopes:
              [
                'manage_my_orders:{projectKey}',
                'customer_id:{id}',
                'anonymous_id:{id}',
              ],
          },
      ]
    description: |
      Checks if a Cart exists that matches a given Query Predicate and contains either a matching `customerId` or `anonymousId`. Returns a `200 OK` status if the Cart exists, or a `404 Not Found` otherwise.
    queryParameters:
      where?:
        type: QueryPredicate[]
  post:
    displayName: Create My Cart
    securedBy:
      [
        oauth_2_0:
          {
            scopes:
              [
                'manage_my_orders:{projectKey}',
                'customer_id:{id}',
                'anonymous_id:{id}',
              ],
          },
      ]
    description: |
      Creates a Cart for a given `customerId` or `anonymousId`.

      Specific Error Codes:

      - [DiscountCodeNonApplicable](ctp:api:type:DiscountCodeNonApplicableError)
      - [InvalidItemShippingDetails](ctp:api:type:InvalidItemShippingDetailsError)
      - [MatchingPriceNotFound](ctp:api:type:MatchingPriceNotFoundError)
      - [MissingTaxRateForCountry](ctp:api:type:MissingTaxRateForCountryError)

    body:
      application/json:
        example: !include ../examples/cart-create.example.json
    responses:
      201:
        body:
          application/json:
            example: !include ../examples/cart.example.json
  /key={key}:
    (methodName): withKey
    type:
      baseResource:
        uriParameterName: key
        resourceType: Cart
        resourceUpdateType: MyCartUpdate
    get:
      displayName: Get My Cart by Key
      securedBy: [oauth_2_0: { scopes: ['manage_my_orders:{projectKey}'] }]
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/cart.example.json
    head:
      securedBy: [oauth_2_0: { scopes: ['manage_my_orders:{projectKey}'] }]
      description: Checks if a Cart exists for a given `key`. Returns a `200 OK` status if the Cart exists or a `404 Not Found` otherwise.
    post:
      displayName: Update my cart by key
      securedBy: [oauth_2_0: { scopes: ['manage_my_orders:{projectKey}'] }]
      body:
        application/json:
          example: !include ../examples/cart-update.example.json
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/cart.example.json
    delete:
      displayName: Delete my cart by key
      securedBy: [oauth_2_0: { scopes: ['manage_my_orders:{projectKey}'] }]
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/cart.example.json
  /{ID}:
    (methodName): withId
    type:
      baseResource:
        uriParameterName: ID
        resourceType: Cart
        resourceUpdateType: MyCartUpdate
    get:
      displayName: Get My Cart by ID
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_my_orders:{projectKey}',
                  'customer_id:{id}',
                  'anonymous_id:{id}',
                ],
            },
        ]
      description: |
        Returns a Cart for a given `id`. Returns a `200 OK` status if the Cart exists, or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.

        If the Cart exists in the Project but does not have a matching `customerId` or `anonymousId`, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/cart.example.json
    head:
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_my_orders:{projectKey}',
                  'customer_id:{id}',
                  'anonymous_id:{id}',
                ],
            },
        ]
      description: |
        Checks if a Cart exists for a given `id`. Returns a `200 OK` status if the Cart exists, or a `404 Not Found` otherwise.

        If the Cart exists in the Project but does not have a matching `customerId` or `anonymousId`, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
    post:
      displayName: Update My Cart by ID
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_my_orders:{projectKey}',
                  'customer_id:{id}',
                  'anonymous_id:{id}',
                ],
            },
        ]
      description: |
        Updates the Cart for a given `id`. Returns a `200 OK` status if the Cart exists, or a `404 Not Found` otherwise.

        If the Cart exists in the Project but does not have a matching `customerId` or `anonymousId`, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
      body:
        application/json:
          example: !include ../examples/cart-update.example.json
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/cart.example.json
    delete:
      displayName: Delete My Cart by ID
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_my_orders:{projectKey}',
                  'customer_id:{id}',
                  'anonymous_id:{id}',
                ],
            },
        ]
      description: |
        Deletes the Cart for a given `id`. Returns a `200 OK` status if the Cart exists, or a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error otherwise.

        If the Cart exists in the Project but does not have a matching `customerId` or `anonymousId`, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/cart.example.json
  /replicate:
    type: base
    post:
      displayName: Replicate My Cart
      description: |
        Creates a new Cart by replicating an existing Cart or Order of the authenticated Customer.
        This can be useful in cases where a customer wants to cancel a recent order to make some changes or reorder a previous order.

        The replicated Cart preserves Customer information, Line Items and Custom Line Items, Custom Fields, Discount Codes, and other settings of the Cart or Order.
        If the Line Items become invalid, for example, due to removed Products or Prices, they are removed from the new Cart.
        If the Customer switches to another Customer Group, the new Cart is updated with the new value.
        It has up-to-date Tax Rates, Prices, and Line Item product data and is in `Active` [CartState](ctp:api:type:CartState).

        The new Cart does not contain Payments or Deliveries. The [State](ctp:api:type:ItemState) of Line Items and Custom Line Items is reset to `initial`.

        If the Cart or Order to be replicated does not belong to the authenticated Customer, the API returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error

        Specific Error Codes:

        - [MatchingPriceNotFound](ctp:api:type:MatchingPriceNotFoundError)
        - [MissingTaxRateForCountry](ctp:api:type:MissingTaxRateForCountryError)

      body:
        application/json:
          type: ReplicaMyCartDraft
      responses:
        201:
          body:
            application/json:
              example: !include ../examples/cart.example.json
              type: Cart
      securedBy:
        [
          oauth_2_0:
            {
              scopes:
                [
                  'manage_my_orders:{projectKey}',
                  'customer_id:{id}',
                  'anonymous_id:{id}',
                ],
            },
        ]
/orders:
  type:
    baseDomain:
      resourceType: Order
      resourceQueryType: OrderPagedQueryResponse
      resourceDraft: MyOrderFromCartDraft
      whereExample: 'customerEmail = "john.doe@example.com"'
      sortExample: createdAt asc
  description:
    An order can be created from a cart, usually after a checkout process has
    been completed.
  get:
    displayName: Query My Orders
    securedBy: [oauth_2_0: { scopes: ['manage_my_orders:{projectKey}'] }]
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/orders.example.json
  head:
    securedBy: [oauth_2_0: { scopes: ['manage_my_orders:{projectKey}'] }]
    description: Checks if an Order exists for a given Query Predicate. Returns a `200 OK` status if any Orders match the Query Predicate or a `404 Not Found` otherwise.
    queryParameters:
      where?:
        type: QueryPredicate[]
  post:
    is:
      - conflicting
    displayName: Create My Order
    description: |
      The Cart must have a [shipping address set](ctp:api:type:CartSetShippingAddressAction) for taxes to be calculated. When creating [B2B Orders](/associates-overview#b2b-resources), the Customer must have the `CreateMyOrdersFromMyCarts` [Permission](ctp:api:type:Permission).

      Creating an Order produces the [OrderCreated](ctp:api:type:OrderCreatedMessage) Message.

      If a server-side problem occurs, indicated by a 500 Internal Server Error HTTP response, the Order creation may still successfully complete after the error is returned.
      If you receive this error, you should verify the status of the Order by querying a unique identifier supplied during the creation request, such as the Order number.

      Specific Error Codes:

      - [AssociateMissingPermission](ctp:api:type:AssociateMissingPermissionError)
      - [DiscountCodeNonApplicable](ctp:api:type:DiscountCodeNonApplicableError)
      - [InvalidItemShippingDetails](ctp:api:type:InvalidItemShippingDetailsError)
      - [OutOfStock](ctp:api:type:OutOfStockError)
      - [PriceChanged](ctp:api:type:PriceChangedError)
      - [ShippingMethodDoesNotMatchCart](ctp:api:type:ShippingMethodDoesNotMatchCartError)
      - [MatchingPriceNotFound](ctp:api:type:MatchingPriceNotFoundError)
      - [MissingTaxRateForCountry](ctp:api:type:MissingTaxRateForCountryError)
    securedBy: [oauth_2_0: { scopes: ['manage_my_orders:{projectKey}'] }]
    body:
      application/json:
        example: !include ../examples/my-order-create.example.json
    responses:
      201:
        body:
          application/json:
            example: !include ../examples/order.example.json
  /{ID}:
    (methodName): withId
    type:
      baseResource:
        uriParameterName: ID
        resourceType: Order
        resourceUpdateType: MyOrderUpdate
    get:
      displayName: Get My Order by ID
      securedBy: [oauth_2_0: { scopes: ['manage_my_orders:{projectKey}'] }]
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/order.example.json
    head:
      securedBy: [oauth_2_0: { scopes: ['manage_my_orders:{projectKey}'] }]
      description: Checks if an Order exists for a given `id`. Returns a `200 OK` status if the Order exists or a `404 Not Found` otherwise.
  /quotes:
    (methodName): orderQuote
    type: base
    displayName: Order from Quote
    post:
      displayName: Create My Order from Quote
      description: |
        When creating [B2B Orders](/associates-overview#b2b-resources), the Customer must have the `CreateMyOrdersFromMyQuotes` [Permission](ctp:api:type:Permission).

        Creating an Order produces the [OrderCreated](ctp:api:type:OrderCreatedMessage) Message.

        Specific Error Codes:

        - [OutOfStock](ctp:api:type:OutOfStockError)
        - [PriceChanged](ctp:api:type:PriceChangedError)
        - [InvalidItemShippingDetails](ctp:api:type:InvalidItemShippingDetailsError)
        - [CountryNotConfiguredInStore](ctp:api:type:CountryNotConfiguredInStoreError)
        - [AssociateMissingPermission](ctp:api:type:AssociateMissingPermissionError)
      securedBy: [oauth_2_0: { scopes: ['manage_quotes:{projectKey}'] }]
      body:
        application/json:
          example: !include ../examples/my-order-from-quote.example.json
          type: MyOrderFromQuoteDraft
      responses:
        201:
          body:
            application/json:
              example: !include ../examples/order.example.json
              type: Order
/payments:
  type:
    baseDomain:
      resourceType: MyPayment
      resourceQueryType: MyPaymentPagedQueryResponse
      resourceDraft: MyPaymentDraft
      whereExample: 'customer(id = "43645-23uf")'
      sortExample: id asc
  (updateable): MyPayment
  (deleteable): MyPayment
  (createable): MyPaymentDraft
  description:
    The My Payments endpoint creates and provides access to payments scoped to a
    specific user.
  get:
    displayName: Query my payments
    securedBy: [oauth_2_0: { scopes: ['manage_my_payments:{projectKey}'] }]
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/my-payments.example.json
  head:
    securedBy: [oauth_2_0: { scopes: ['manage_my_payments:{projectKey}'] }]
    description: Checks if a Payment exists for a given Query Predicate. Returns a `200 OK` status if any Payments match the Query Predicate or a `404 Not Found` otherwise.
    queryParameters:
      where?:
        type: QueryPredicate[]
  post:
    displayName: Create my payment
    securedBy: [oauth_2_0: { scopes: ['manage_my_payments:{projectKey}'] }]
    body:
      application/json:
        example: !include ../examples/my-payment-create.example.json
    description: |
      Creating a Payment produces the [PaymentCreated](ctp:api:type:PaymentCreatedMessage) Message.
    responses:
      201:
        body:
          application/json:
            example: !include ../examples/my-payment.example.json
  /{ID}:
    (methodName): withId
    type:
      baseResource:
        uriParameterName: ID
        resourceType: MyPayment
        resourceUpdateType: MyPaymentUpdate
    get:
      displayName: Get my payment by id
      securedBy: [oauth_2_0: { scopes: ['manage_my_payments:{projectKey}'] }]
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/my-payment.example.json
    head:
      securedBy: [oauth_2_0: { scopes: ['manage_my_payments:{projectKey}'] }]
      description: Checks if a Payment exists for a given `id`. Returns a `200 OK` status if the Payment exists or a `404 Not Found` otherwise.
    post:
      displayName: Update my payment by id
      securedBy: [oauth_2_0: { scopes: ['manage_my_payments:{projectKey}'] }]
      body:
        application/json:
          example: !include ../examples/my-payment-update.example.json
      description: |
        This endpoint can only update a Payment when it has no [Transactions](ctp:api:type:Transaction).
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/my-payment.example.json
    delete:
      displayName: Delete my payment by id
      securedBy: [oauth_2_0: { scopes: ['manage_my_payments:{projectKey}'] }]
      description: |
        This endpoint can only delete a Payment when it has no [Transactions](ctp:api:type:Transaction).
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/my-payment.example.json
/quote-requests:
  type:
    baseDomain:
      resourceType: QuoteRequest
      resourceQueryType: QuoteRequestPagedQueryResponse
      resourceDraft: MyQuoteRequestDraft
      whereExample: 'quoteRequestState = "Submitted"'
      sortExample: createdAt asc
  (updateable): QuoteRequest
  (deleteable): QuoteRequest
  (createable): MyQuoteRequestDraft
  description:
    The My Quote Requests endpoint creates and provides access to Quote Requests
    scoped to a specific user.
  get:
    displayName: Query My Quote Requests
    securedBy:
      [oauth_2_0: { scopes: ['manage_my_quote_requests:{projectKey}'] }]
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/quote-requests.example.json
  head:
    securedBy:
      [oauth_2_0: { scopes: ['manage_my_quote_requests:{projectKey}'] }]
    description: Checks if my QuoteRequest exists for a given Query Predicate. Returns a `200 OK` status if any QuoteRequests match the Query Predicate or a `404 Not Found` otherwise.
    queryParameters:
      where?:
        type: QueryPredicate[]
  post:
    displayName: Create My Quote Requests
    securedBy:
      [oauth_2_0: { scopes: ['manage_my_quote_requests:{projectKey}'] }]
    body:
      application/json:
        example: !include ../examples/my-quote-request-create.example.json
    responses:
      201:
        body:
          application/json:
            example: !include ../examples/quote-request.example.json
  /{ID}:
    (methodName): withId
    type:
      baseResource:
        uriParameterName: ID
        resourceType: QuoteRequest
        resourceUpdateType: MyQuoteRequestUpdate
    get:
      displayName: Get My Quote Requests by ID
      securedBy:
        [oauth_2_0: { scopes: ['manage_my_quote_requests:{projectKey}'] }]
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/quote-request.example.json
    head:
      securedBy:
        [oauth_2_0: { scopes: ['manage_my_quote_requests:{projectKey}'] }]
      description: Checks if my QuoteRequest exists for a given `id`. Returns a `200 OK` status if the QuoteRequest exists or a `404 Not Found` otherwise.
    post:
      displayName: Update My Quote Requests by ID
      securedBy:
        [oauth_2_0: { scopes: ['manage_my_quote_requests:{projectKey}'] }]
      body:
        application/json:
          example: !include ../examples/my-quote-request-update.example.json
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/quote-request-update-response.example.json
    delete:
      displayName: Delete My Quote Requests by ID
      securedBy:
        [oauth_2_0: { scopes: ['manage_my_quote_requests:{projectKey}'] }]
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/quote-request.example.json
  /key={key}:
    (methodName): withKey
    type:
      baseResource:
        uriParameterName: key
        resourceType: QuoteRequest
        resourceUpdateType: MyQuoteRequestUpdate
    get:
      displayName: Get My Quote Requests by Key
      securedBy:
        [oauth_2_0: { scopes: ['manage_my_quote_requests:{projectKey}'] }]
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/quote-request.example.json
    head:
      securedBy:
        [oauth_2_0: { scopes: ['manage_my_quote_requests:{projectKey}'] }]
      description: Checks if my QuoteRequest exists for a given `key`. Returns a `200 OK` status if the QuoteRequest exists or a `404 Not Found` otherwise.
    post:
      displayName: Update my Quote Requests by Key
      securedBy:
        [oauth_2_0: { scopes: ['manage_my_quote_requests:{projectKey}'] }]
      body:
        application/json:
          example: !include ../examples/my-quote-request-update.example.json
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/quote-request-update-response.example.json
    delete:
      displayName: Delete my Quote Requests by Key
      securedBy:
        [oauth_2_0: { scopes: ['manage_my_quote_requests:{projectKey}'] }]
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/quote-request.example.json
/quotes:
  type:
    baseDomain:
      resourceType: Quote
      resourceQueryType: QuotePagedQueryResponse
  (updateable): Quote
  (deleteable): Quote
  description: The My Quote endpoint provides access to Quotes scoped to a specific user.
  get:
    displayName: Query My Quotes
    securedBy: [oauth_2_0: { scopes: ['manage_my_quotes:{projectKey}'] }]
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/quotes.example.json
  head:
    securedBy: [oauth_2_0: { scopes: ['manage_my_quotes:{projectKey}'] }]
    description: Checks if a Quote exists for a given Query Predicate. Returns a `200 OK` status if any Quotes match the Query Predicate or a `404 Not Found` otherwise.
    queryParameters:
      where?:
        type: QueryPredicate[]
  /{ID}:
    (methodName): withId
    type:
      baseResource:
        uriParameterName: ID
        resourceType: Quote
        resourceUpdateType: MyQuoteUpdate
    get:
      displayName: Get My Quote by ID
      securedBy: [oauth_2_0: { scopes: ['manage_my_quotes:{projectKey}'] }]
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/quote.example.json
    head:
      securedBy: [oauth_2_0: { scopes: ['manage_my_quotes:{projectKey}'] }]
      description: Checks if a Quote exists for a given `id`. Returns a `200 OK` status if the Quote exists or a `404 Not Found` otherwise.
    post:
      displayName: Update My Quote by ID
      securedBy: [oauth_2_0: { scopes: ['manage_my_quotes:{projectKey}'] }]
      body:
        application/json:
          example: !include ../examples/my-quote-update.example.json
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/quote.example.json
  /key={key}:
    (methodName): withKey
    type:
      baseResource:
        uriParameterName: key
        resourceType: Quote
        resourceUpdateType: MyQuoteUpdate
    get:
      displayName: Get My Quote by Key
      securedBy: [oauth_2_0: { scopes: ['manage_my_quotes:{projectKey}'] }]
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/quote.example.json
    head:
      securedBy: [oauth_2_0: { scopes: ['manage_my_quotes:{projectKey}'] }]
      description: Checks if a Quote exists for a given `key`. Returns a `200 OK` status if the Quote exists or a `404 Not Found` otherwise.
    post:
      displayName: Update My Quote by Key
      securedBy: [oauth_2_0: { scopes: ['manage_my_quotes:{projectKey}'] }]
      body:
        application/json:
          example: !include ../examples/my-quote-update.example.json
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/quote.example.json
/shopping-lists:
  type:
    baseDomain:
      resourceType: ShoppingList
      resourceQueryType: ShoppingListPagedQueryResponse
      resourceDraft: MyShoppingListDraft
      whereExample: 'name(en = "list-name")'
      sortExample: createdAt asc
  (updateable): ShoppingList
  (deleteable): ShoppingList
  (createable): MyShoppingListDraft
  description: The My Shopping Lists endpoint creates and provides access to Shopping Lists scoped to a specific user.
  get:
    displayName: Query my shopping lists
    securedBy:
      [oauth_2_0: { scopes: ['manage_my_shopping_lists:{projectKey}'] }]
    queryParameters:
      expand:
        description: |
          When expanding `variant` and `productSlug` on [ShoppingListLineItem](ctp:api:type:ShoppingListLineItem), [expand the entire array](/general-concepts#reference-expansion). You cannot expand a single element (for example, `expand=lineItems[0].variant` is not supported).
        type: Expansion[]
        required: false
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/my-shopping-lists.example.json
  head:
    securedBy:
      [oauth_2_0: { scopes: ['manage_my_shopping_lists:{projectKey}'] }]
    description: Checks if a ShoppingList exists for a given Query Predicate. Returns a `200 OK` status if any ShoppingLists match the Query Predicate or a `404 Not Found` otherwise.
    queryParameters:
      where?:
        type: QueryPredicate[]
  post:
    displayName: Create my shopping list
    securedBy:
      [oauth_2_0: { scopes: ['manage_my_shopping_lists:{projectKey}'] }]
    queryParameters:
      expand:
        description: |
          When expanding `variant` and `productSlug` on [ShoppingListLineItem](ctp:api:type:ShoppingListLineItem), [expand the entire array](/general-concepts#reference-expansion). You cannot expand a single element (for example, `expand=lineItems[0].variant` is not supported).
        type: Expansion[]
        required: false
    body:
      application/json:
        example: !include ../examples/my-shopping-list-create.example.json
    responses:
      201:
        body:
          application/json:
            example: !include ../examples/my-shopping-list.example.json
  /{ID}:
    (methodName): withId
    type:
      baseResource:
        uriParameterName: ID
        resourceType: ShoppingList
        resourceUpdateType: MyShoppingListUpdate
    get:
      displayName: Get my shopping list by id
      securedBy:
        [oauth_2_0: { scopes: ['manage_my_shopping_lists:{projectKey}'] }]
      queryParameters:
        expand:
          description: |
            When expanding `variant` and `productSlug` on [ShoppingListLineItem](ctp:api:type:ShoppingListLineItem), [expand the entire array](/general-concepts#reference-expansion). You cannot expand a single element (for example, `expand=lineItems[0].variant` is not supported).
          type: Expansion[]
          required: false
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/my-shopping-list.example.json
    head:
      securedBy:
        [oauth_2_0: { scopes: ['manage_my_shopping_lists:{projectKey}'] }]
      description: Checks if a ShoppingList exists for a given `id`. Returns a `200 OK` status if the ShoppingList exists or a `404 Not Found` otherwise.
    post:
      displayName: Update my shopping list by id
      securedBy:
        [oauth_2_0: { scopes: ['manage_my_shopping_lists:{projectKey}'] }]
      queryParameters:
        expand:
          description: |
            When expanding `variant` and `productSlug` on [ShoppingListLineItem](ctp:api:type:ShoppingListLineItem), [expand the entire array](/general-concepts#reference-expansion). You cannot expand a single element (for example, `expand=lineItems[0].variant` is not supported).
          type: Expansion[]
          required: false
      body:
        application/json:
          example: !include ../examples/my-shopping-list-update.example.json
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/my-shopping-list.example.json
    delete:
      displayName: Delete my shopping list by id
      securedBy:
        [oauth_2_0: { scopes: ['manage_my_shopping_lists:{projectKey}'] }]
      queryParameters:
        expand:
          description: |
            When expanding `variant` and `productSlug` on [ShoppingListLineItem](ctp:api:type:ShoppingListLineItem), [expand the entire array](/general-concepts#reference-expansion). You cannot expand a single element (for example, `expand=lineItems[0].variant` is not supported).
          type: Expansion[]
          required: false
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/my-shopping-list.example.json
  /key={key}:
    (methodName): withKey
    type:
      baseResource:
        uriParameterName: key
        resourceType: ShoppingList
        resourceUpdateType: MyShoppingListUpdate
    get:
      displayName: Get my shopping list by key
      securedBy:
        [oauth_2_0: { scopes: ['manage_my_shopping_lists:{projectKey}'] }]
      queryParameters:
        expand:
          description: |
            When expanding `variant` and `productSlug` on [ShoppingListLineItem](ctp:api:type:ShoppingListLineItem), [expand the entire array](/general-concepts#reference-expansion). You cannot expand a single element (for example, `expand=lineItems[0].variant` is not supported).
          type: Expansion[]
          required: false
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/my-shopping-list.example.json
    head:
      securedBy:
        [oauth_2_0: { scopes: ['manage_my_shopping_lists:{projectKey}'] }]
      description: Checks if a ShoppingList exists for a given `key`. Returns a `200 OK` status if the ShoppingList exists or a `404 Not Found` otherwise.
    post:
      displayName: Update my shopping list by key
      securedBy:
        [oauth_2_0: { scopes: ['manage_my_shopping_lists:{projectKey}'] }]
      queryParameters:
        expand:
          description: |
            When expanding `variant` and `productSlug` on [ShoppingListLineItem](ctp:api:type:ShoppingListLineItem), [expand the entire array](/general-concepts#reference-expansion). You cannot expand a single element (for example, `expand=lineItems[0].variant` is not supported).
          type: Expansion[]
          required: false
      body:
        application/json:
          example: !include ../examples/my-shopping-list-update.example.json
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/my-shopping-list.example.json
    delete:
      displayName: Delete my shopping list by key
      securedBy:
        [oauth_2_0: { scopes: ['manage_my_shopping_lists:{projectKey}'] }]
      queryParameters:
        expand:
          description: |
            When expanding `variant` and `productSlug` on [ShoppingListLineItem](ctp:api:type:ShoppingListLineItem), [expand the entire array](/general-concepts#reference-expansion). You cannot expand a single element (for example, `expand=lineItems[0].variant` is not supported).
          type: Expansion[]
          required: false
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/my-shopping-list.example.json
