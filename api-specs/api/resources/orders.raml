type:
  baseDomain:
    resourceType: Order
    resourceQueryType: OrderPagedQueryResponse
    resourceDraft: OrderFromCartDraft
    whereExample: 'customerEmail = "john.doe@example.com"'
    sortExample: createdAt asc
(updateable): Order
(deleteable): Order
(createable): OrderFromCartDraft
description:
  An order can be created from a order, usually after a checkout process has
  been completed.
get:
  securedBy: [oauth_2_0: { scopes: ['view_orders:{projectKey}'] }]
  responses:
    200:
      body:
        application/json:
          example: !include ../examples/orders.example.json
head:
  securedBy: [oauth_2_0: { scopes: ['view_orders:{projectKey}'] }]
  description: Checks if an Order exists for a given Query Predicate. Returns a `200 OK` status if any Orders match the Query Predicate or a `404 Not Found` otherwise.
  queryParameters:
    where?:
      type: QueryPredicate[]
post:
  securedBy: [oauth_2_0: { scopes: ['manage_orders:{projectKey}'] }]
  is:
    - conflicting
  description: |
    Before you create an Order, the Cart must have a [shipping address set](ctp:api:type:CartSetShippingAddressAction).
    The shipping address is used for tax calculation for a Cart with `Platform` [TaxMode](ctp:api:type:TaxMode).

    Creating an Order produces the [OrderCreated](ctp:api:type:OrderCreatedMessage) Message.

      If a server-side problem occurs, indicated by a 500 Internal Server Error HTTP response, the Order creation may still successfully complete after the error is returned.
      If you receive this error, you should verify the status of the Order by querying a unique identifier supplied during the creation request, such as the Order number.

    Specific Error Codes:

    - [OutOfStock](ctp:api:type:OutOfStockError)
    - [PriceChanged](ctp:api:type:PriceChangedError)
    - [DiscountCodeNonApplicable](ctp:api:type:DiscountCodeNonApplicableError)
    - [ShippingMethodDoesNotMatchCart](ctp:api:type:ShippingMethodDoesNotMatchCartError)
    - [InvalidItemShippingDetails](ctp:api:type:InvalidItemShippingDetailsError)
    - [InvalidOperation](ctp:api:type:InvalidOperationError)
    - [MatchingPriceNotFound](ctp:api:type:MatchingPriceNotFoundError)
    - [MissingTaxRateForCountry](ctp:api:type:MissingTaxRateForCountryError)
  body:
    application/json:
      example: !include ../examples/order-create.example.json
  responses:
    201:
      body:
        application/json:
          example: !include ../examples/order.example.json
/import:
  (methodName): importOrder
  type: base
  displayName: import orders
  post:
    displayName: Create an Order by Import
    description: |
      Importing an Order produces the [Order Imported](ctp:api:type:OrderImportedMessage) Message.

      Specific Error Codes:

      - [OutOfStock](ctp:api:type:OutOfStockError)
      - [CountryNotConfiguredInStore](ctp:api:type:CountryNotConfiguredInStoreError)
    securedBy: [oauth_2_0: { scopes: ['manage_orders:{projectKey}'] }]
    body:
      application/json:
        example: !include ../examples/order-import.example.json
        type: OrderImportDraft
    responses:
      201:
        body:
          application/json:
            example: !include ../examples/order-import-create.example.json
            type: Order
/quotes:
  (methodName): orderQuote
  type: base
  displayName: Order from Quote
  post:
    displayName: Create an Order from a Quote
    description: |

      Creates an Order from a Quote. The referenced Quote must have the `Pending` [state](ctp:api:type:QuoteState) and must be valid (not past the `validTo` date); otherwise, an [InvalidOperation](ctp:api:type:InvalidOperationError) error is returned.

      Produces the [OrderCreated](ctp:api:type:OrderCreatedMessage) Message.

      Specific Error Codes:

      - [CountryNotConfiguredInStore](ctp:api:type:CountryNotConfiguredInStoreError)
      - [InvalidItemShippingDetails](ctp:api:type:InvalidItemShippingDetailsError)
      - [InvalidOperation](ctp:api:type:InvalidOperationError)
      - [OutOfStock](ctp:api:type:OutOfStockError)

    securedBy: [oauth_2_0: { scopes: ['manage_quotes:{projectKey}'] }]
    body:
      application/json:
        example: !include ../examples/order-from-quote.example.json
        type: OrderFromQuoteDraft
    responses:
      201:
        body:
          application/json:
            example: !include ../examples/order.example.json
            type: Order
/order-number={orderNumber}:
  (methodName): withOrderNumber
  uriParameters:
    orderNumber:
      type: string
      description: '`orderNumber` of the [Order](ctp:api:type:Order). Should be provided in URL-encoded format.'
  type:
    baseResource:
      uriParameterName: orderNumber
      resourceType: Order
      resourceUpdateType: OrderUpdate
  get:
    securedBy: [oauth_2_0: { scopes: ['view_orders:{projectKey}'] }]
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/order.example.json
  head:
    securedBy: [oauth_2_0: { scopes: ['view_orders:{projectKey}'] }]
    description: Checks if an Order exists for a given `orderNumber`. Returns a `200 OK` status if the Order exists or a `404 Not Found` otherwise.
  post:
    securedBy: [oauth_2_0: { scopes: ['manage_orders:{projectKey}'] }]
    body:
      application/json:
        example: !include ../examples/order-update.example.json
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/order.example.json
  delete:
    description: |
      Deleting an Order produces the [OrderDeleted](ctp:api:type:OrderDeletedMessage) Message.
    is:
      - dataErasure
    securedBy: [oauth_2_0: { scopes: ['manage_orders:{projectKey}'] }]
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/order.example.json
/edits:
  type:
    baseDomain:
      resourceType: OrderEdit
      resourceQueryType: OrderEditPagedQueryResponse
      resourceDraft: OrderEditDraft
      whereExample: 'resource(id = "order-id")'
      sortExample: createdAt asc
  (updateable): OrderEdit
  (deleteable): OrderEdit
  (createable): OrderEditDraft
  description:
    OrderEdit are containers for financial changes after an Order has been
    placed.
  get:
    securedBy: [oauth_2_0: { scopes: ['view_order_edits:{projectKey}'] }]
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/order-edits-query.example.json
  head:
    securedBy: [oauth_2_0: { scopes: ['view_order_edits:{projectKey}'] }]
    description: Checks if an OrderEdit exists for a given Query Predicate. Returns a `200 OK` status if any OrderEdits match the Query Predicate or a `404 Not Found` otherwise.
    queryParameters:
      where?:
        type: QueryPredicate[]
  post:
    description: |
      You can either create multiple Order Edits for an Order and apply them sequentially to an Order, or create multiple Order Edits parallelly (as alternatives to each other) and apply one of them to the Order.

      You can only create an Order Edit if the [InventoryMode](/projects/carts#inventorymode) of the Order and its [LineItems](/projects/carts#lineitem) is `None`.

    securedBy: [oauth_2_0: { scopes: ['manage_order_edits:{projectKey}'] }]
    body:
      application/json:
        example: !include ../examples/order-edits-create.example.json
        type: OrderEditDraft
    responses:
      201:
        body:
          application/json:
            example: !include ../examples/order-edits.example.json
            type: OrderEdit
  /key={key}:
    (methodName): withKey
    type:
      baseResource:
        uriParameterName: key
        resourceType: OrderEdit
        resourceUpdateType: OrderEditUpdate
    get:
      securedBy: [oauth_2_0: { scopes: ['view_order_edits:{projectKey}'] }]
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/order-edits.example.json
    head:
      securedBy: [oauth_2_0: { scopes: ['view_order_edits:{projectKey}'] }]
      description: Checks if an OrderEdit exists for a given `key`. Returns a `200 OK` status if the OrderEdit exists or a `404 Not Found` otherwise.
    post:
      securedBy: [oauth_2_0: { scopes: ['manage_order_edits:{projectKey}'] }]
      body:
        application/json:
          example: !include ../examples/order-edits-update.example.json
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/order-edits.example.json
    delete:
      securedBy: [oauth_2_0: { scopes: ['manage_order_edits:{projectKey}'] }]
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/order-edits.example.json
  /{ID}:
    (methodName): withId
    type:
      baseResource:
        uriParameterName: ID
        resourceType: OrderEdit
        resourceUpdateType: OrderEditUpdate
    get:
      securedBy: [oauth_2_0: { scopes: ['view_order_edits:{projectKey}'] }]
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/order-edits.example.json
    head:
      securedBy: [oauth_2_0: { scopes: ['view_order_edits:{projectKey}'] }]
      description: Checks if an OrderEdit exists for a given `id`. Returns a `200 OK` status if the OrderEdit exists or a `404 Not Found` otherwise.
    post:
      securedBy: [oauth_2_0: { scopes: ['manage_order_edits:{projectKey}'] }]
      body:
        application/json:
          example: !include ../examples/order-edits-update.example.json
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/order-edits.example.json
    delete:
      securedBy: [oauth_2_0: { scopes: ['manage_order_edits:{projectKey}'] }]
      responses:
        200:
          body:
            application/json:
              example: !include ../examples/order-edits.example.json
    /apply:
      type: base
      post:
        displayName: Apply order edit
        description: |
          Applying an OrderEdit produces the [OrderEditApplied](ctp:api:type:OrderEditAppliedMessage) Message.
        body:
          application/json:
            type: OrderEditApply
        securedBy: [oauth_2_0: { scopes: ['manage_order_edits:{projectKey}'] }]
        responses:
          200:
            body:
              application/json:
                type: OrderEdit
                example: !include ../examples/order-edits.example.json
/{ID}:
  (methodName): withId
  type:
    baseResource:
      uriParameterName: ID
      resourceType: Order
      resourceUpdateType: OrderUpdate
  get:
    securedBy: [oauth_2_0: { scopes: ['view_orders:{projectKey}'] }]
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/order.example.json
  head:
    securedBy: [oauth_2_0: { scopes: ['view_orders:{projectKey}'] }]
    description: Checks if an Order exists for a given `id`. Returns a `200 OK` status if the Order exists or a `404 Not Found` otherwise.
  post:
    securedBy: [oauth_2_0: { scopes: ['manage_orders:{projectKey}'] }]
    body:
      application/json:
        example: !include ../examples/order-update.example.json
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/order.example.json
  delete:
    description: |
      Deleting an Order produces the [OrderDeleted](ctp:api:type:OrderDeletedMessage) Message.
    is:
      - dataErasure
    securedBy: [oauth_2_0: { scopes: ['manage_orders:{projectKey}'] }]
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/order.example.json
/search:
  type: base
  displayName: Order Search
  description: |
    This endpoint provides high performance search queries over Orders. The order search allows searching through all orders (currently supporting a limit of the 10.000.000 newest orders) in your project.
  post:
    displayName: Search Orders
    securedBy: [oauth_2_0: { scopes: ['view_orders:{projectKey}'] }]
    body:
      application/json:
        type: OrderSearchRequest
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/OrderSearch/order-search.example.json
            type: OrderPagedSearchResponse
  head:
    securedBy: [oauth_2_0: { scopes: ['view_orders:{projectKey}'] }]
    description: |
      Checks whether a search index for the Project's Orders exists.
      Returns a `200 OK` status if the index exists or a `404 Not Found` error otherwise.
    responses:
      200:
        description: The index exists and the Search Orders endpoint can be used.
      404:
        description: The index does not exist and the Search Orders endpoint returns Error 404 only.
