type:
  baseDomain:
    resourceType: Review
    resourceQueryType: ReviewPagedQueryResponse
    resourceDraft: ReviewDraft
    whereExample: 'title = "ABC123"'
    sortExample: createdAt asc
(updateable): Review
(deleteable): Review
(createable): ReviewDraft
description: Reviews are used to evaluate products and channels.
get:
  securedBy: [oauth_2_0: { scopes: ['view_products:{projectKey}'] }]
  responses:
    200:
      body:
        application/json:
          example: !include ../examples/reviews.example.json
head:
  securedBy: [oauth_2_0: { scopes: ['view_products:{projectKey}'] }]
  description: Checks if a Review exists for a given Query Predicate. Returns a `200 OK` status if any Reviews match the Query Predicate or a `404 Not Found` otherwise.
  queryParameters:
    where?:
      type: QueryPredicate[]
      description: |-
        Query Predicates on Reviews are limited to [Text](ctp:api:type:AttributeTextType),
        [Enum](ctp:api:type:AttributeEnumType), [Boolean](ctp:api:type:AttributeBooleanType),
        [Number](ctp:api:type:AttributeNumberType), [Date](ctp:api:type:AttributeDateType),
        [Time](ctp:api:type:AttributeTimeType), and [DateTime](ctp:api:type:AttributeDateTimeType) attribute types.
post:
  securedBy: [oauth_2_0: { scopes: ['manage_products:{projectKey}'] }]
  body:
    application/json:
      example: !include ../examples/review-create.example.json
  responses:
    201:
      body:
        application/json:
          example: !include ../examples/review.example.json
/key={key}:
  (methodName): withKey
  type:
    baseResource:
      uriParameterName: key
      resourceType: Review
      resourceUpdateType: ReviewUpdate
  get:
    securedBy: [oauth_2_0: { scopes: ['view_products:{projectKey}'] }]
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/review.example.json
  head:
    securedBy: [oauth_2_0: { scopes: ['view_products:{projectKey}'] }]
    description: Checks if a Review exists for a given `key`. Returns a `200 OK` status if the Review exists or a `404 Not Found` otherwise.
  post:
    securedBy: [oauth_2_0: { scopes: ['manage_products:{projectKey}'] }]
    body:
      application/json:
        example: !include ../examples/review-update.example.json
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/review.example.json
  delete:
    is:
      - dataErasure
    securedBy: [oauth_2_0: { scopes: ['manage_products:{projectKey}'] }]
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/review.example.json
/{ID}:
  (methodName): withId
  type:
    baseResource:
      uriParameterName: ID
      resourceType: Review
      resourceUpdateType: ReviewUpdate
  get:
    securedBy: [oauth_2_0: { scopes: ['view_products:{projectKey}'] }]
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/review.example.json
  head:
    securedBy: [oauth_2_0: { scopes: ['view_products:{projectKey}'] }]
    description: Checks if a Review exists for a given `id`. Returns a `200 OK` status if the Review exists or a `404 Not Found` otherwise.
  post:
    securedBy: [oauth_2_0: { scopes: ['manage_products:{projectKey}'] }]
    body:
      application/json:
        example: !include ../examples/review-update.example.json
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/review.example.json
  delete:
    is:
      - dataErasure
    securedBy: [oauth_2_0: { scopes: ['manage_products:{projectKey}'] }]
    responses:
      200:
        body:
          application/json:
            example: !include ../examples/review.example.json
