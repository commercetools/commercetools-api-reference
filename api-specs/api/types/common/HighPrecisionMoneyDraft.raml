#%RAML 1.0 DataType
(package): Common
displayName: HighPrecisionMoneyDraft
type: TypedMoneyDraft
discriminatorValue: highPrecision
description: Draft object to store money as a fraction of the smallest indivisible unit for a specific currency.
example: !include ../../examples/Common/HighPrecisionMoneyDraft.json
properties:
  fractionDigits:
    type: number
    format: int32
    maximum: 20
    description: |
      Number of fraction digits for a specified high precision money. It must be greater than the default number of fraction digits for the specified currency.
  preciseAmount:
    type: number
    format: int64
    description: |
      Amount in 1 / (10 ^ `fractionDigits`) of a currency.

  centAmount:
    required: false
    type: number
    format: int64
    description: |
      Amount in the smallest indivisible unit of a currency. This field is optional for high precision. If provided, it is checked for validity. Example:

      A Price of 1.015 USD can be rounded either to 1.01 USD or 1.02 USD. If it lies outside of this range, an error message stating that centAmount must be rounded correctly will be returned.

      If `centAmount` is not provided, the API calculates the value automatically using the default rounding mode half even.
